; MONITOR.asm by Erich Küster, late seventies of last century
; revised and slightly modified assembler listing
; GitHub repository:
; original resurrected and slightly modified version of MONITOR by Erich Küster at
;	<https://github.com/ekuester/SCMP-INS8060-NIBL-FloatingPoint-TinyBASIC-Interpreter>
; read-in from paper listing and disasssembled again,
; fed into macro assembler asl 40 years later (in 2023).
; the macro-assembler used here is a free tool by Alfred Arnold, Aachen / Germany:
;		http://john.ccac.rwth-aachen.de:8000/as/
;
;	.TITLE  MONITOR FOR ELEKTOR-SYSTEM,'2023/06/20'
;	.LIST	1
;
; first published:	Krefeld / Germany June 20, 2023
;
; Last update:		2023/10/31, ekuester

; SELECT DESIRED BAUD RATE, 0 FOR ORIGINAL DEFAULT
BAUD	=  0

; SET BASE ADDRESS
BASE	=  0xC000
NIBLFP	=  BASE+0x1000

; SET STACK POINTER
STACK   =  0x1F80

; ILLEGAL OPCODES USED FOR EMULATION (DEFINE EMULA BEFORE BUILD)
	IFDEF EMULA
WRITECH	= 0x20			; WRITE CHAR TO TTY
READCHR	= 0x21			; READ CHAR FROM TTY
	MESSAGE "will generate emulation code"
	ENDIF

L FUNCTION VAL16, (VAL16 & 0xFF)
H FUNCTION VAL16, ((VAL16 >> 8) & 0xFF)

JS    MACRO  P,VAL	    ;JUMP TO SUBROUTINE
	LDI     H(VAL-1)
	XPAH    P
	LDI     L(VAL-1)
	XPAL    P
	XPPC    P
	ENDM

LDPI  MACRO  P,VAL	    ;LOAD POINTER
	LDI     L(VAL)
	XPAL    P
	LDI     H(VAL)
	XPAH    P
      ENDM

CALL  MACRO  P,VAL	    ;CALL SUBROUTINE
	XPPC    P
	DB	H(VAL)
	DB	L(VAL)
      ENDM

RTRN  MACRO     P,VAL		;RETURN FROM SUBROUTINE
	XPPC    P
	DB	0
      ENDM

JMPBIT  =  0x80
TSTBIT  =  0x40			;I.L. INSTRUCTION FLAGS
CALBIT  =  0x20
JMPBITH =  JMPBIT*256
TSTBITH =  TSTBIT*256
CALBITH =  CALBIT*256

; SC/MP POINTER ASSIGNMENTS
P1	=  1
P2	=  2
P3	=  3

; THE EXTENSION REGISTER
EREG	=  -128

; DISPLACEMENTS FOR STACK USED BY MONITOR
;	=   0	; X'00
S_P3LO	=  -1	; X'FF STORAGE FOR P3 LOW
S_P3HI	=  -2	; X'FE STORAGE FOR P3 HIGH
S_TP2LO	=  -3	; X'FD ACTUAL STACK POINTER P2 LOW
S_P1LO	= -15	; X'F1 STORAGE P1 LOW
S_P1HI	= -16	; X'F0 STORAGE P1 HIGH
S_LINES	= -17	; X'EF LINE COUNTER
S_BYTES	= -18	; X'EE BYTE COUNTER
S_TEMP1	= -19	; X'ED CASS / PROM ROUTINES
S_TEMP2	= -20	; X'EC CASS / PROM ROUTINES
S_PAGE  = -98	; X'9E

; SUPERVISOR JUMPS USING P3 OFFSETTING
SV_STKHI	= (STKHI -SPRVSR +1)	; STORAGE FOR STACKPOINTER HIGH
SV_RESTRT	= (RESTRT -SPRVSR-1)	; X'C01E
SV_RTRN		= (RTRN -SPRVSR	-1)	; X'C06E
SV_RTN1		= (RTN1 -SPRVSR	-1)	; X'C072
SV_NSTERR	= (NSTERR -SPRVSR-1)	; X'C0AD
SV_HEXERR	= (HEXERR -SPRVSR-1)	; X'C0B1
SV_BRK		= (BRK	-SPRVSR-1)	; X'C0B5
SV_SNTERR	= (SNTERR -SPRVSR-1)	; X'C0B9
SV_ERROUT	= (ERROUT -SPRVSR-1)	; X'C0BB

TSTSTR  MACRO  FAIL,A,B
	  DB	H(FAIL - TSTBITH)
	  DB	L(FAIL)
	IFB	B
	  DB    A |0x80
	ELSE
	  DB    A
	  DB    B |0x80
	ENDIF
	ENDM

MESG	MACRO  A,B
	DB	A
	DB	B|0x80
	ENDM

GOTO	MACRO  ADR
	DB	H(ADR - JMPBITH)
	DB	L(ADR)
	ENDM

DO	MACRO	ADR
	IFNB	ADR
	DB	H(ADR)
	DB	L(ADR)
	SHIFT
	DO	ALLARGS
	ENDIF
	ENDM

	ORG	BASE
START:	NOP
	DINT
	LDI	L(STACK)
	XPAL	P2
STKHI:	LDI	H(STACK)
	XPAH	P2
	LDI	0x20
	ST	-29(P2)
	LDPI	P3, SPRVSR	;POINT P3 AT SUPERVISOR
	CALL	P3,ASCOUT
	MESG	"\12  MONITO",'R'
RESTRT:	LDI	0x1E
	ST	-29(P2)
	LDI	0x60
	ST	S_TP2LO(P2)
	LDI	0xFF
	ST	-12(P2)
	LDI	0x04
	ST	(P2)
	LDI	L(BEGIN)	; LOAD LOW OF BEGIN
	ST	S_P3LO(P2)
	LD	S_PAGE(P2)	; LOAD PAGE FROM STACK WITH OFFSET
	ST	S_P3HI(P2)
	CALL	P3,ASCOUT
	DB	13,10,'*',0xA0
XCT:	LD	S_P3LO(P2)
	XPAL	P3
	LD	S_P3HI(P2)	; LOAD P3 FROM STACK
	ORI	0xC0		; SET TWO HIGH BITS
	XPAH	P3
NXT:	LD	(P3)		; LOAD BYTE AFTER 3F INSTRUCTION
	JZ	XCUTE		; IF ZERO RETURN
	JP	GTO		; GOTO COMMAND
	ANI	0x40		; IS TSTSTR COMMAND?
	JNZ	SUPRVS		; YES, JUMP TO SUPERVISOR
GTO:	LD	1(P3)		; LOAD SECOND BYTE AFTER 3F INSTRUCTION
	ST	S_P3LO(P2)	; STORE LOW BYTE OF CALL ADDRESS
	LD	@2(P3)		; INCREASE P3 BY 2 (SKIP CALL ADDRESS)
	ST	S_P3HI(P2)	; STORE HIGH BYTE OF CALL aDDRESS
	JP	XCT
	LD	(P3)
	XRE
	JNZ	XCT
	LDI	0x69
	XPAL	P3
	XPAL	P1
	LD	S_PAGE(P2)	; LOAD PAGE FROM STACK WITH OFFSET
	XPAH	P3
	XPAH	P1
	JMP	NXT
	DO	TXTOUT
	NOP
	NOP
	NOP
RTRN:	ILD	-29(P2)
	ILD	-29(P2)
RTN1:	XPAL	P2
RTN2:	LD	S_P3LO(P2)
	XPAL	P3
	LD	S_P3HI(P2)
	XPAH	P3
	LDI	L(STACK)
	XPAL	P2
XCTE:	LD	@-01(P3)
XCUTE:	LD	-96(P2)
SPRVSR:	XPPC	P3
	ST	-96(P2)
	LD	1(P3)
	JZ	RTRN
	LD	@1(P3)
	LD	-29(P2)
	XPAL	P2
SUPRVS:	LD	@2(P3)
	ST	S_P3HI(P2)
CALL:	LD	-01(P3)
	XPAL	P3
	ST	S_P3LO(P2)
	LD	S_P3HI(P2)
	XPAH	P3
	ST	S_P3HI(P2)
	LDI	L(STACK)
	XPAL	P2
	DLD	-29(P2)
	DLD	-29(P2)
	JNZ	XCTE
	LDI	L(SPRVSR)
	XPAL	P3
	LD	S_PAGE(P2)	; LOAD PAGE FROM STACK WITH OFFSET
	XPAH	P3
	LDI	0x1C
	ST	-29(P2)
NSTERR:	LDI	0x56
	JMP	ERROUT
HEXERR:	LDI	L(M_HEX)
	JMP	ERROUT
BRK:	LDI	L(M_BRK)
	JMP	ERROUT
SNTERR:	LDI	L(M_SNTX)
ERROUT:	XPAL	P1
	LDI	H(MESGS)	; ERROR MESSAGES HIGH
	XPAH	P1
ERR:	LDI	0x20
	CALL	P3,PUTASC
PRERR:	LD	@1(P1)
	CALL	P3,PUTASC
	JP	PRERR
	LDI	L(M_ERR)
	XPAL	P1
	JP	ERR
	ILD	-12(P2)
	JZ	SV_RESTRT(P3)
	CALL	P3,0xE03E	; RTNERR

BEGIN:	DO	GETASC
	TSTSTR	LIST,"GOT",'O'
	DO	GETHEX
	DB	0		; END OF I.L. COMMANDS
USER:	ILD	S_TP2LO(P2)	; POP STACK POINTER
	ILD	S_TP2LO(P2)
	JMP	SV_RTN1(P3)

LIST:	TSTSTR	MDFY,"LIS",'T'
	DO	GETHEX
	DB	0		; END OF I.L. COMMANDS
LIST0:	LDI	0x0F
LIST1:	ST	-17(P2)		; LINE COUNTER
LINE:	CALL	P3,PRHEX
	LDI	0x10		; BYTE COUNTER
	ST	-18(P2)
BYTES:	CALL	P3,GETBYT
	CALL	P3,P2HEX1
	CALL	P3,PRADD
	DLD	-18(P2)		; DECREASE BYTE COUNTER
	JNZ	BYTES		; LOOP WITH BYTES
	LDI	0x10		; RESET BYTE COUNTER FOR POINTER RESET
	ST	-18(P2)
PRBCK:	CALL	P3,PRSUB
	DLD	-18(P2)		; DECREASE BYTE COUNTER
	JNZ	PRBCK		; LOOP TO RESET POINTER BY 16 BYTES
	LDI	0x10		; RESET BYTE COUNTER FOR SECOND LOOP
	ST	-18(P2)
CHARS:	CALL	P3,GETBYT
	ANI	0xE0		; TEST IF CONTROL CHAR
	JZ	MASK
	CALL	P3,GETBYT
	JP	CHROUT
MASK:	LDI	'.'
CHROUT: CALL	P3,PUTASC
	CALL	P3,PRADD
	DLD	-18(P2)		; DECREASE BYTE COUNTER
	JNZ	CHARS		; LOOP WITH BYTES
	LD	-17(P2)
	JNZ	LIST2
	CALL	P3,GETASC
	XRI	13		; CONTINUE WITH CARRIAGE RETURN
	JNZ	SV_BRK(P3)
LIST2:	CALL	P3,ASCOUT
	DB	13,0x8A		; CARRIAGE RETURN, LINE FEED
	DLD	-17(P2)		; DECREASE LINE COUNTER
	JP	LINE
	LDE
	XRI	13		; IS CARRIAGE RETURN?
	JZ	LIST0
	XRI	0x07
	JNZ	SV_BRK(P3)
	JMP	LIST1

ASCOUT:	LD	-29(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P1
	ST	S_TP2LO(P2)
	LD	(P2)
	XPAH	P1
	ST	-04(P2)
	LDI	L(STACK)
	XPAL	P2
PRASC:	LD	@1(P1)

	CALL	P3,PUTASC
	JP	PRASC
	LD	-29(P2)
	XPAL	P2
	LD	S_TP2LO(P2)
	XPAL	P1
	ST	1(P2)
	LD	-04(P2)
	XPAH	P1
	ST	(P2)
	LDI	L(STACK)
	XPAL	P2
	RTRN P3
GETHEX:	CALL	P3,GETLIN
	CALL	P3,HEX
	LD	(P1)
	XRI	0x0D
	JNZ	SV_HEXERR(P3)
	RTRN P3
PRTXT:	LD	S_P3LO(P2)
	XPAL	P1
	LD	S_P3HI(P2)
	XPAH	P1
TXTOUT:	LD	@1(P1)
	CALL	P3,PUTASC
	JP	TXTOUT
	XPAL	P1
	ST	S_P3LO(P2)
	XPAH	P1
	ST	S_P3HI(P2)
BLNK:	LDI	0x20
	CALL	P3,PUTASC
	RTRN P3
P2HEX1:	ST	-21(P2)
	LDI	0x00
	JMP	HEXOUT
P2HEX2:	ST	-21(P2)
	LDI	0x01
HEXOUT:	ST	-11(P2)
	LDI	0x02
	ST	-22(P2)
HEXASC:	LD	-21(P2)
	RR
	RR
	RR
	RR
	ST	-21(P2)
	ANI	0x0F
	CCL
	ADI	0xF6
	JP	LETR
	ADI	0x3A
	JMP	NUM
LETR:	ADI	0x40
NUM:
	CALL	P3,PUTASC
	DLD	-22(P2)
	JNZ	HEXASC
	LD	-11(P2)
	JZ	BLNK
	RTRN P3

PRADD:	LD	S_TP2LO(P2)
PRADD0:	XPAL	P2
	ILD	1(P2)
	JNZ	PRADD1
	ILD	(P2)
PRADD1:	LDI	L(STACK)
	XPAL	P2
	RTRN P3
PRSUB:	LD	S_TP2LO(P2)
PRSUB0:	XPAL	P2
	LD	1(P2)
	JNZ	PRSUB1
	DLD	(P2)
PRSUB1:	DLD	1(P2)
	LDI	L(STACK)
	XPAL	P2
	RTRN P3
GETDSP:	LD	S_TP2LO(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P1
	LD	(P2)
	XPAH	P1
	LD	@1(P1)
	LD	(P1)
	XPAL	P1
	ST	1(P2)
	XPAH	P1
	ST	(P2)
	LDI	L(STACK)
	XPAL	P2
	XPAL	P1
	RTRN P3
GETBYT:	LD	S_TP2LO(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P1
	LD	(P2)
	XPAH	P1
	LDI	L(STACK)
	XPAL	P2
	LD	(P1)
	RTRN P3
PUTBYT:	LD	S_TP2LO(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P1
	LD	(P2)
	XPAH	P1
	LDI	L(STACK)
	XPAL	P2
	LD	-96(P2)
	ST	(P1)
	RTRN P3

MDFY:	TSTSTR	TRNSFR,"MODIF",'Y'
	DO	GETHEX
MDFY1:	DO	PRHEX
	DO	GETBYT,P2HEX1,GETLIN,MODFY
	GOTO	MDFY1
MODFY:	LD	-25(P2)
	JNZ	MODFY1
	LD	-01(P1)
	XRI	0x0D
	JZ	ADD0
	CALL	P3,HEX
	JMP	MODFY2
MODFY1:	CALL	P3,HEX
	LD	(P1)
	XRI	0x0D
	JNZ	SV_HEXERR(P3)
	DLD	-25(P2)
	SR
	ST	-25(P2)
	ILD	S_TP2LO(P2)	; POP STACK POINTER
	ILD	S_TP2LO(P2)
BYTE0:	SCL
	LDI	0xDD
	CAD	-25(P2)
	XAE
	LD	EREG(P2)
	CALL	P3,PUTBYT
	CALL	P3,GETBYT
	XOR	EREG(P2)
	JZ	ADD0
	LDI	L(M_RAM)
	JMP	SV_ERROUT(P3)
ADD0:	CALL	P3,PRADD
	DLD	-25(P2)
	JP	BYTE0
MODFY2:	RTRN P3

TRNSF1:	CALL	P3,ASCOUT
	MESG	"TRANSFE",'R'
TRNSF2:	CALL	P3,ASCOUT
	MESG	"\13\10ANFAD=",' '
	CALL	P3,GETHEX
	CALL	P3,ASCOUT
	MESG	"ENDAD=",' '
	CALL	P3,GETHEX
	SCL
	LD	-35(P2)
	CAD	-33(P2)
	LD	-36(P2)
	CAD	-34(P2)
	JP	SV_RTRN(P3)
	LDI	L(M_BLK)
	JMP	SV_ERROUT(P3)
TRNSF3:	CALL	P3,ASCOUT
	MESG	"NEWAD=",' '
	RTRN	P3
TRNSFR:	TSTSTR	CASS,"BLOC",'K'
	DO	TRNSF1,TRNSF3,GETHEX
	DB	0
	SCL
	LD	-37(P2)
	CAD	-33(P2)
	ST	-39(P2)
	LD	-38(P2)
	CAD	-34(P2)
	ST	-40(P2)
	JP	TRANS
UP:	LDI	0x5E
	CALL	P3,GETBYT+2
	CALL	P3,PUTBYT
	LDI	0x5E
	CALL	P3,PRADD0
	CALL	P3,PRADD
	SCL
	LD	-35(P2)
	CAD	-33(P2)
	LD	-36(P2)
	CAD	-34(P2)
	JP	UP
	RTRN P3
TRANS:	ANI	0xF0
	JNZ	UP
	CCL
	LD	-35(P2)
	ADD	-39(P2)
	ST	-37(P2)
	LD	-36(P2)
	ADD	-40(P2)
	ST	-38(P2)
DOWN:	LDI	0x5C
	CALL	P3,GETBYT+2
	CALL	P3,PUTBYT
	LDI	0x5C
	CALL	P3,PRSUB0
	CALL	P3,PRSUB
	SCL
	LD	-35(P2)
	CAD	-33(P2)
	LD	-36(P2)
	CAD	-34(P2)
	JP	DOWN
	RTRN P3

; CASSETTE ROUTINES SC/MP II 2 MHz
	ORG	BASE+0x364
BYTOUT:	ST	-96(P2)
	LDI	0x0B
	ST	-21(P2)
	LDI	0x00
	XAE
	SIO
	XAE
	DLD	-127(P2)
	LD	-96(P2)
	XAE
BYTE1:	LDI	0x0B
	DLY	0x00
	LD	-20(P2)
	ST	-19(P2)
BYTE2:	DLD	-19(P2)
	JNZ	BYTE2
	SIO
	LDE
	ORI	0x80
	XAE
	DLD	-21(P2)
	JNZ	BYTE1
	XPPC	P3
	JMP	BYTOUT
	DB	0,0,0,0
LDBYTE:	LDI	0xFF
	XAE
	SIO
	LDE
	JP	LD1
	JMP	LDBYTE
LD1:	LDI	0xFF
	XAE
	LD	-20(P2)
	SR
	ST	-19(P2)
LD2:	DLD	-19(P2)
	JNZ	LD2
	LDI	0x08
	ST	-21(P2)
LD3:	LD	-20(P2)
	ST	-19(P2)
	LDI	0x16
	DLY	0x00
LD4:	DLD	-19(P2)
	JNZ	LD4
	SIO
	DLD	-21(P2)
	JNZ	LD3
	LD	-20(P2)
	ST	-19(P2)
LD5:	DLD	-19(P2)
	JNZ	LD5
	LDE
	XPPC	P3
	JMP	LDBYTE

CASS:	TSTSTR	CLRS,"CASSETT",'E'
	DO	PCASS
CASS1:	DO	PRTXT
	DB	13,10
	DB	"SELECT: "
	DB	"D=DUMP/L"
	DB	"=LOAD/S="
	MESG	"SPEED\13",'\10'
CASS2:	DO	GETASC
	TSTSTR	CASS3,"DUM",'P'
	DO	TRNSF2
	DB	0
MORE:	LD	@+09(P3)	; INCREASE P3 TO SPRVSR+9
	XPAH	P3
	ORI	0x03		; OR RIGHT 256-BYTE AREA
	XPAH	P3	 	; ADDRESS OF JMP BYTOUT = X'C389
	LD	-33(P2)
	XPAL	P1
	LD	-34(P2)
	XPAH	P1
	LD	-34(P2)
	XPPC	P3
	LD	-33(P2)
	XPPC	P3
	LD	-36(P2)
	XPPC	P3
	LD	-35(P2)
	XPPC	P3
DUMP:	LDI	0x20
	ST	-22(P2)
	LDI	0x00
	ST	-23(P2)
	CCL
DUMP0:	LD	(P1)
	ADD	-23(P2)
	ST	-23(P2)
	LD	(P1)
	XPPC	P3
	LD	-34(P2)
	XOR	-36(P2)
	JNZ	DUMP1
	XPAL	P1
	XOR	-35(P2)
	JNZ	DUMP1
	LD	-23(P2)
	XPPC	P3
	LDI	L(SPRVSR)
	XPAL	P3
	LD	S_PAGE(P2)	; LOAD PAGE FROM STACK WITH OFFSET
	XPAH	P3
	RTRN P3
DUMP1:	ILD	-33(P2)
	JNZ	DUMP2
	XPAH	P1
	ILD	-34(P2)
	XPAH	P1
DUMP2:	XPAL	P1
	DLD	-22(P2)
	JNZ	DUMP0
	LD	-23(P2)
	XPPC	P3
	JNZ	DUMP
PCASS:	LDI	0x01
	XAE
	SIO
	LDI	0x15		; SC/MPII 4 MHz: 0x1f
	ST	-20(P2)
	RTRN P3
CASS3:	TSTSTR	SPEED,"LOA",'D'
	DO	GETASC
	TSTSTR	CASS4,"\11\10",0x5E
	DO	LOAD
	DO	PRTXT
	MESG	"\13\10ANFAD",'='
	DO	PRHEX
	DO	PRTXT
	MESG	"\13\10ENDAD",'='
	DO	PRNHEX
	DO	RESTRT
CASS4:	DO TRNSF2
	DB	0
	LD	@+67(P3)	; INCREASE P3 TO SPRVSR+67
	XPAH	P3
	ORI	0x03		; OR RIGHT 256-BYTE AREA
	XPAH	P3	 	; ADDRESS OF JMP BYTOUT = X'C3C3
	XPPC	P3
	XPPC	P3
	XPPC	P3
	XPPC	P3
	JMP	LOAD1
LOAD:	LDI	0x5E
	ST	S_TP2LO(P2)
	LD	@+67(P3)
	XPAH	P3
	ORI	0x03
	XPAH	P3
	XPPC	P3
	ST	-34(P2)
	XPPC	P3
	ST	-33(P2)
	XPPC	P3
	ST	-36(P2)
	XPPC	P3
	ST	-35(P2)
LOAD1:	LD	-33(P2)
	ST	-37(P2)
	LD	-34(P2)
	ST	-38(P2)
LOAD2:	LDI	0x20
	ST	-22(P2)
	LDI	0x00
	ST	-23(P2)
	CCL
LOAD3:	LD	-37(P2)
	XPAL	P1
	LD	-38(P2)
	XPAH	P1
	XPPC	P3
	ST	(P1)
	ADD	-23(P2)
	ST	-23(P2)
	XPAH	P1
	XOR	-36(P2)
	JNZ	LOAD5
	XPAL	P1
	XOR	-35(P2)
	JNZ	LOAD5
	XPPC	P3
	XOR	-23(P2)
LOAD4:	XPAH	P3
	LDI	L(SPRVSR)
	XPAL	P3
	LD	S_PAGE(P2)	; LOAD PAGE FROM STACK WITH OFFSET
	XPAH	P3
	JZ	SV_RTRN(P3)
	LDI	0x5A
	XPPC	P3
	LD	@-126(P2)
	LDI	L(M_CASS)
	JMP	SV_ERROUT(P3)
LOAD5:	ILD	-37(P2)
	JNZ	LOAD6
	ILD	-38(P2)
LOAD6:	DLD	-22(P2)
	JNZ	LOAD3
	XPPC	P3
	XOR	-23(P2)
	JZ	LOAD2
	JMP	LOAD4

	ORG	BASE+0x500
GETLIN:	LDI	0x9D
	XPAL	P1
	ST	-15(P2)
	SCL
	LD	SV_STKHI(P3)
	CAI	0x01
	XPAH	P1
	ST	-16(P2)
	LD	-12(P2)
	ANI	0xBF
	CALL	P3,PUTASC
	JP	GETL
	LDI	0x20
	CALL	P3,PUTASC
GETL:	LD	(P2)
	ST	-25(P2)
CLRBUF:	XAE
	LDI	0x20
	ST	EREG(P1)
	DLD	-25(P2)
	JNZ	CLRBUF
INP:	CALL	P3,GETASC
	ST	-01(P1)
	ANI	0x60
	JNZ	STORE
	LDE
	XRI	0x08
	JNZ	HT
	LD	-25(P2)
	JZ	INP
	DLD	-25(P2)
	LDE
	CALL	P3,PUTASC
	JMP	INP
HT:	XRI	0x01
	JZ	OUTP
	XRI	0x05
	JNZ	CR
	LDE
	CALL	P3,PUTASC
	JMP	SV_BRK(P3)
CR:	XRI	0x01
	JZ	STORE
	XRI	0x07
	OR	-25(P2)
	JNZ	INP
EX:	LDI	0x0D
	XAE
STORE:	LD	-25(P2)
	XAE
	ST	EREG(P1)
	XAE
OUTP:	LDE
	CALL	P3,PUTASC
	XRI	0x0D
	JZ	EXT
	ILD	-25(P2)
	XOR	(P2)
	JZ	EX
	JMP	INP
EXT:	LDI	0x0A
	CALL	P3,PUTASC
	RTRN P3

	ORG	BASE+0x580
; GET CHARACTER AND ECHO IT
GETASC:
	IFDEF EMULA
	DB	READCHR
	RTRN	P3
	ELSE
	LDI	0x08
	ST	-21(P2)
GWAIT:	CSA
	ANI	0x20
	JNZ	GWAIT
	LDI	0xC2
	DLY	0
	CSA
	ANI	0x20
	JNZ	GWAIT
GINP:	LDI	0x76
	DLY	1
	CSA
	ANI	0x20
	JZ	GZERO
	LDI	0x01
GZERO:	RRL
	XAE
	SRL
	XAE
	DLD	-21(P2)
	JNZ	GINP
	DLY	1
	LDE
	ANI	0x7F
	XAE
	LDE
	ANI	0x40
	JZ	UPPERC
	LDE
	ANI	0x5F
	XAE
UPPERC:	LDE
	XRI	3
	JZ	+38(P3)		;JUMP BRK(3)
	LDE
	RTRN	P3
	ENDIF

	ORG	BASE+0x5CC
CLRS:	TSTSTR	INTR,0x0c,0xAA
	GOTO	BEGIN

INTR:	TSTSTR	PROM,"INTERPRETER\13",0x8A
	DB	0
	LDPI	P1,NIBLFP
	XPPC	P1		; TRANSFER TO NIBLFP

SPEED:	TSTSTR	CASS2,"SPEE",'D'
	DO	GETHEX,SPEED0
	GOTO	CASS1
SPEED0:	LDI	0x60
	ST	S_TP2LO(P2)
	LD	-33(P2)
	ST	-20(P2)
	RTRN P3

	ORG	BASE+0x600
HEX:	DLD	S_TP2LO(P2)	; PUSH STACK POINTER
	DLD	S_TP2LO(P2)
	XPAL	P2
	LDI	0x00
	ST	1(P2)
	ST	(P2)
	ST	S_P3LO(P2)
HEX0:	XAE
	LD	(P1)
	SCL
	CAI	0x3A
	JP	LETTR
	SCL
	CAI	0xF6
	JP	ENTR
	JMP	END
LETTR:	SCL
	CAI	0x0D
	JP	END
	SCL
	CAI	0xFA
	JP	OK
END:	LDI	L(STACK)
	XPAL	P2
	LDE
	JZ	SV_HEXERR(P3)
	SCL
	CAI	0x05
	JP	VALUE
	RTRN P3
OK:	CCL
	ADI	0x0A
ENTR:	XAE
	LDI	0x04		; BIT COUNTER
	ST	S_P3HI(P2)
SHIFT:	CCL
	LD	1(P2)		; SHIFT 16-BIT-ADDRESS 1 BIT LEFT
	ADD	1(P2)
	ST	1(P2)
	LD	(P2)
	ADD	(P2)
	ST	(P2)
	DLD	S_P3HI(P2)	; DECREASE BIT COUNTER
	JNZ	SHIFT
	LD	1(P2)
	ORE
	ST	1(P2)
	LD	@1(P1)
	ILD	S_P3LO(P2)
	JMP	HEX0
VALUE:	LDI	L(M_VALU)
	JMP	SV_ERROUT(P3)

	ORG	BASE+0x67C
PRNHEX: DLD	S_TP2LO(P2)	; POP STACK POINTER
	DLD	S_TP2LO(P2)
PRHEX:	LD	S_TP2LO(P2)
PRHEX1: XPAL	P1
	ST	-15(P2)
	LD	SV_STKHI(P3)
	XPAH	P1
	ST	-16(P2)
	LDI	' '		; LEADING SPACE
	ST	@-8(P1)		; CREATE SPACE FOR DIGITS
	LDI	0x04		; 4 DIGITS
	ST	-25(P2)		; DIGIT COUNTER
DIGIT:	XAE			; COUNTER INTO E
	LD	+9(P1)
	ANI	0x0F
	CCL
	ADI	0xF6
	JP	BUCH
	ADI	0x3A
	JMP	AUSG
BUCH:	ADI	0x40
AUSG:	ST	EREG(P1)
	LDI	0x04		; SHIFT 4 BITS
	ST	-23(P2)		; BIT COUNTER
DIVHEX: LD	+09(P1)
	RRL
	LD	+08(P1)
	RRL
	ST	+08(P1)
	LD	+09(P1)
	RRL
	ST	+09(P1)
	DLD	-23(P2)		; DECREASE BIT COUNTER
	JNZ	DIVHEX
	DLD	-25(P2)		; DECREASE DIGIT COUNTER
	JNZ	DIGIT
	LDI	0xA0		; TRAILING SPACE
	ST	5(P1)
PRNTHX: LD	@1(P1)
	CALL	P3,PUTASC
	JP	PRNTHX
	LDI	0x5E
	ST	S_TP2LO(P2)
	LD	-15(P2)
	XPAL	P1
	LD	-16(P2)
	XPAH	P1
	RTRN P3

; OUTPUT CHARACTER
	ORG	BASE+0x6D4
PUTASC:
	IFDEF EMULA
	DB	WRITECH
	RTRN	P3
	ELSE
	ANI	0x7F
	XAE
	ST	-127(P2)
	LDI	0x30
	DLY	3
	CSA
	ORI	1
	CAS
	LDI	9
	ST	-24(P2)
PUTA1:	LDI	0x5C
	DLY	1
	DLD	-24(P2)
	JZ	PUTA2
	LDE
	ANI	0x01
	ST	-23(P2)
	XAE
	RR
	XAE
	CSA
	ORI	1
	XOR	-23(P2)
	CAS
	JMP	PUTA1
PUTA2:	CSA
	ANI	0xFE
	CAS
	LD	-127(P2)
	XAE
	XRI	0x0C
	JNZ	PUTA3
	DLY	255
	LD	-96(P2)
	RTRN	P3
PUTA3:	XRI	6
	JNZ	PUTA4
	DLY	0x10
PUTA4:	LD	-96(P2)
	RTRN	P3
	ENDIF

;***************************
;*	ERROR MESSAGES	*
;***************************

	ORG	BASE+0x0730
MESGS:
M_AREA:	MESG	"ARE",'A'	; 1
M_BLK:	MESG	"BL",'K'	; 2
M_CASS:	MESG	"CAS",'S'	; 3
M_CHAR:	MESG	"CHA",'R'	; 4
M_DATA:	MESG	"DAT",'A'	; 5
M_DIV0:	MESG	"DIV",'0'	; 6
M_ENDQ:	MESG	"END",'"'	; 7
M_ERAS:	MESG	"ERAS",'E'	; 8
M_FOR:	MESG	"FO",'R'	; 9
M_HEX:	MESG	"HE",'X'	; 10
M_NEST:	MESG	"NES",'T'	; 11
M_NEXT:	MESG	"NEX",'T'	; 12
M_NOGO:	MESG	"NOG",'O'	; 13
M_PROM:	MESG	"PRO",'M'	; 14
M_RAM:	MESG	"RA",'M'	; 15
M_RTRN:	MESG	"RTR",'N'	; 16
M_SNTX	MESG	"SNT",'X'	; 17
M_STMT:	MESG	"STM",'T'	; 18
M_UNTL:	MESG	"UNT",'L'	; 19
M_VALU:	MESG	"VAL",'u'	; 20
M_ERR:	MESG	"ERRO",'R'	; 21
M_BRK:	MESG	"BREA",'K'	; 22

	ORG	BASE+0x0800
PROM:	TSTSTR	DASMBL,"PROGRA",'M'
	DO	GETHEX
	DO	PPRGM
PRGM1:	DO	PRTXT
	DB	"\13SELECT:"
	DB	" C=CHECK/"
	DB	"L=LIST/T="
	MESG	"TRANSFER\13",'\10'
PRGM2:	DO	GETASC
	TSTSTR	LST,"CHECK",' '
	DO	ERASE
	DO	PRTXT
	MESG	"O.K.",'\10'
	GOTO	PRGM1
PPRGM:	LD	-34(P2)		; EPROM TYP
	XRI	0x27
	JNZ	SV_SNTERR(P3)
	ST	-34(P2)
	LDI	0xFF
	ST	-35(P2)
	LD	-33(P2)
	XRI	0x58
	JNZ	PPRGM1
	ST	-33(P2)
	ST	-20(P2)
	LDI	0x03
	ST	-36(P2)
	RTRN P3

PPRGM1:	LDI	0x40
	ST	-20(P2)
	LD	-33(P2)
	XRI	0x16
	JNZ	SV_SNTERR(P3)
	ST	-33(P2)
	LDI	0x07
	ST	-36(P2)
	RTRN P3

	ORG	BASE+0x884
ERASE:	LDI	4
	XPAL	P1
	LDI	0x82
	XPAH	P1
	LDI	0x90
	ST	+03(P1)
ERASE0:	LD	-34(P2)
	OR	-20(P2)
	ST	2(P1)
	LD	-33(P2)
	ST	1(P1)
	SCL
	LD	(P1)
	XRI	0xFF
	JZ	ERASE1
	XPPC	P3
	LD	@EREG(P2)
	LDI	L(M_ERAS)
	JMP	SV_ERROUT(P3)
ERASE1:	ILD	-33(P2)
	JNZ	ERASE2
	ILD	-34(P2)
ERASE2:	LD	-35(P2)
	CAD	-33(P2)
	LD	-36(P2)
	CAD	-34(P2)
	JP	ERASE0
	LDI	0x00
	ST	-33(P2)
	ST	-34(P2)
	RTRN P3

LST:	TSTSTR	PRM,"LIS",'T'
	DB	0
	LDI	0x04
	XPAL	P1
	LDI	0x82
	XPAH	P1
	LDI	0x90
	ST	+03(P1)
LST1:	LDI	0x0F
	ST	-17(P2)		; LINE COUNTER
LST2:	CALL	P3,ASCOUT
	DB	0x0D,0x8A
	CALL	P3,PRHEX
	LDI	0x10
	ST	-18(P2)		; BYTE COUNTER
LST3:	LD	-34(P2)
	OR	-20(P2)
	ST	2(P1)
	LD	-33(P2)
	ST	1(P1)
	ILD	-33(P2)
	JNZ	LST4
	ILD	-34(P2)
LST4:	LD	(P1)
	CALL	P3,P2HEX1
	DLD	-18(P2)		; DECREASE BYTE COUNTER
	JNZ	LST3
	DLD	-17(P2)		; DECREASE LINE COUNTER
	JP	LST2
	CALL	P3,GETASC
	SCL
	LD	-35(P2)
	CAD	-33(P2)
	LD	-36(P2)
	CAD	-34(P2)
	JP	LST2
	RTRN P3

; PROMMER ROUTINE
PRM:	TSTSTR	PRGM2,"TRANSFE",'R'
	DB	0
	LDI	0x60
	ST	S_TP2LO(P2)
	CALL	P3,TRNSF2
	CALL	P3,TRNSF3
	CALL	P3,GETHEX
PRM1:	LD	-33(P2)
	XPAL	P1
	LD	-34(P2)
	XPAH	P1
	LD	(P1)
	XAE
	LDI	4
	XPAL	P1
	LDI	0x82
	XPAH	P1
	LDI	0x80
	ST	+3(P1)
	LDI	0x0F
	ST	+03(P1)
	LD	-37(P2)
	ST	+1(P1)
	LDE
	ST	(P1)
	LD	-38(P2)
	ANI	0x0F
	OR	-20(P2)
	ORI	0xB0
	ST	2(P1)
	LDI	0x94		; (2 MHZ), 0x37 (4 MHZ)
	DLY	0x30		; (2 MHZ), 0x61 (4 MHZ)
	LDI	0x90
	ST	+03(P1)
	LD	-38(P2)
	ANI	0x0F
	OR	-20(P2)
	ST	2(P1)
	LD	-37(P2)
	ST	1(P1)
	SCL
	LD	(P1)
	XRE
	JZ	PRM2
	CALL	P3,PRHEX
	LD	@-126(P2)
	JMP	SV_ERROUT(P3)
PRM2:	ILD	-33(P2)
	JNZ	PRM3
	ILD	-34(P2)
PRM3:	ILD	-37(P2)
	JNZ	PRM4
	ILD	-38(P2)
PRM4:	LD	-35(P2)
	CAD	-33(P2)
	LD	-36(P2)
	CAD	-34(P2)
	JP	PRM1
	RTRN P3

OPCODE	MACRO A,B,C
	  DB  A
	  DB  B
	  DB  C|0x80
	  DB  0,0
	ENDM

	ORG	BASE+0x985
DASMBL:	TSTSTR	BEGIN,"DISASSEMBL",'E'
	DO	GETHEX
NXTD:	DO	PRTXT
	DB	0x8D
	DO	PRHEX,GETBYT,P2HEX2,DSMB,DSASMB,DSMBL,GETDSP
	DO	PRTXT
	DB	0x8A
	DO	BRKR
	GOTO	NXTD
DSMB:	LD	0(P1)
	XAE
	LDI	0x00
	ST	-17(P2)
	ST	-18(P2)
	LDE
	ANI	0xF0
	XRI	0x30
	JZ	PNTR
	JP	OBYTE		; ONE-BYTE INSTRUCTION
	CALL	P3,GETDSP
	CALL	P3,P2HEX1
	CALL	P3,ASCOUT
	DB	0x20, 0xA0
	LDE
	XRI	0x8F
	JZ	SV_RTRN(P3)
PNTR:	LDE
	ANI	0x03		; ISOLATE POINTER INDEX
	ST	-18(P2)
	JZ	L1
	LDE
	ANI	0x40
	JZ	L1
	LDE
	ANI	0xF8
	XAE
	ANI	0x04
	ST	-17(P2)
	RTRN P3
L1:	LDE
	ANI	0xFC
	XAE
	ANI	0x80
	JNZ	SV_RTRN(P3)
OBYTE:	CALL	P3,ASCOUT
	DB	"    ", 0xA0
	RTRN P3
DSASMB:	SCL
	LDI	L(TAB4)		; LOAD LOW OF TAB4
	XPAL	P1
	LD	S_PAGE(P2)	; LOAD PAGE FROM STACK WITH OFFSET
	ORI	0x0A
	XPAH	P1		; SET P1 TO TAB4
DSM1:	LD	@1(P1)
	XRE
	JZ	FOUND
	XRE
	XRI	0xFF
	JZ	NOTFND
DSM2:	LD	@1(P1)
	JP	DSM2
	LD	@2(P1)
	JMP	DSM1
NOTFND:	CCL
FOUND:	LD	@1(P1)
	CALL	P3,PUTASC
	JP	FOUND
	LDI	0x20
	CALL	P3,PUTASC
	RTRN P3
DSMBL:	CSA
	JP	SV_RTRN(P3)
	CCL
	LDE
	ANI	0xF0
	XAE
	XRI	0x8F
	JZ	DSPL
	ANI	0xC4
	XRI	0x40
	JZ	DSPL
	LDE
	XRI	0x30
	JNZ	DSMB2
	LDI	0x50
	CALL	P3,PUTASC
	LD	-18(P2)
	JNZ	DSMB1
	LDI	0x13
DSMB1:	ADI	0x30
	CALL	P3,PUTASC
DSMB2:	JP	SV_RTRN(P3)
	LD	-21(P2)
	XRI	0x80
	JZ	DSMB4
	LD	-18(P2)
	JNZ	DSMB4
	CALL	P3,GETBYT
	XAE
	XRI	0x90
	JNZ	DSMB3
	LD	@1(P1)
DSMB3:	LD	@EREG(P1)
	XPAL	P1
	ST	-35(P2)
	XPAH	P1
	ST	-36(P2)
	CALL	P3,PRNHEX
	RTRN P3
DSMB4:	LD	-17(P2)
	JZ	DSPL
	LDI	0x40
	CALL	P3,PUTASC
DSPL:	LD	-21(P2)
	CALL	P3,P2HEX1
	LD	-18(P2)
	JZ	SV_RTRN(P3)
	CALL	P3,ASCOUT
	DB	'(', 0xD0
	LD	-18(P2)
	ORI	0x30
	CALL	P3,PUTASC
	LDI	0x29
	CALL	P3,PUTASC
	RTRN P3
BRKR:	LD	S_TP2LO(P2)
	XPAL	P2
	LD	1(P2)		; TOP OF STACK HOLDS P1
        XAE			; SAVE P1 LOW in E
	LDI	L(STACK)
	XPAL	P2		; RESTORE STACK
	LDE
	ANI	0x07		; STOP EACH 16 BYTES OF P1
	JNZ	AGAIN
	CALL	P3,GETASC	; PRESS CR TO CONTINUE
	XRI	0x0D
	JNZ	SV_BRK(P3)	; ELSE BREAK
AGAIN:	RTRN P3
TAB4:	OPCODE	0, "HAL",'T'
	OPCODE	1, "XA",'E'
	OPCODE	2, "CC",'L'
	OPCODE	3, "SC",'L'
	OPCODE	4, "DIN",'T'
	OPCODE	5, "IE",'N'
	OPCODE	6, "CS",'A'
	OPCODE	7, "CA",'S'
	OPCODE	8, "NO",'P'
	OPCODE	0x19, "SI",'O'
	OPCODE	0x1C, "S",'R'
	OPCODE	0x1D, "SR",'L'
	OPCODE	0x1E, "R",'R'
	OPCODE	0x1F, "RR",'L'
	OPCODE	0x30, "XPA",'L'
	OPCODE	0x34, "XPA",'H'
	OPCODE	0x3C, "XPP",'C'
	OPCODE	0x40, "LD",'E'
	OPCODE	0x50, "AN",'E'
	OPCODE	0x55, ".BYT",'E'
	OPCODE	0x58, "OR",'E'
	OPCODE	0x60, "XR",'E'
	OPCODE	0x68, "DA",'E'
	OPCODE	0x70, "AD",'E'
	OPCODE	0x78, "CA",'E'
	OPCODE	0x8F, "DL",'Y'
	OPCODE	0x90, "JM",'P'
	OPCODE	0x94, "J",'P'
	OPCODE	0x98, "J",'Z'
	OPCODE	0x9C, "JN",'Z'
	OPCODE	0xA8, "IL",'D'
	OPCODE	0xB8, "DL",'D'
	OPCODE	0xC0, "L",'D'
	OPCODE	0xC4, "LD",'I'
	OPCODE	0xC8, "S",'T'
	OPCODE	0xD0, "AN",'D'
	OPCODE	0xD4, "AN",'I'
	OPCODE	0xD8, "O",'R'
	OPCODE	0xDC, "OR",'I'
	OPCODE	0xE0, "XO",'R'
	OPCODE	0xE4, "XR",'I'
	OPCODE	0xE8, "DA",'D'
	OPCODE	0xEC, "DA",'I'
	OPCODE	0xF0, "AD",'D'
	OPCODE	0xF4, "AD",'I'
	OPCODE	0xF8, "CA",'D'
	OPCODE	0xFC, "CA",'I'
	OPCODE	0xFF, "?",'?'
	DB	0
