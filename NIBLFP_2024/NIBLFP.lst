 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 1 - 10/31/2025 04:19:39 PM


       1/   0 :                         ;
       2/   0 :                         ; NATIONAL INDUSTRIAL BASIC LANGUAGE, EXTENDED, WITH FLOATING POINT
       3/   0 :                         ;
       4/   0 :                         ; Originally written by Erich Küster during the late 1970s.
       5/   0 :                         ; Revived from old hex-dump listings in 2023. Many of the original
       6/   0 :                         ; intentions were lost, but slowly they are being reverse-engineered
       7/   0 :                         ; and documented.
       8/   0 :                         ;
       9/   0 :                         ; This code, as does all code that uses Interpretative Language,
      10/   0 :                         ; relies heavily on the use of macros, and, more to the point, on
      11/   0 :                         ; macros that support variable arguments. Currently, the assembler
      12/   0 :                         ; chosen to re-develop the project is ASL, written by Alfred Arnold,
      13/   0 :                         ; which can be found at https://john.ccac.rwth-aachen.de:8000/as/
      14/   0 :                         ;
      15/   0 :                         ; Started in May 8, 2023 by Erich, later that year increased effort
      16/   0 :                         ; put by Fred N. van Kempen to demystify the code, and to attempt to
      17/   0 :                         ; get a more or less cleaned up version ready for inclusion with his
      18/   0 :                         ; own VARCem projects. Many of the changes were developed with Erich,
      19/   0 :                         ; and many changes will find their way back into the "official"
      20/   0 :                         ; repository of this code, which, incidentally, can be found at:
      21/   0 :                         ;
      22/   0 :                         ;  https://github.com/ekuester/SCMP-INS8060-NIBL-FloatingPoint-TinyBASIC-Interpreter
      23/   0 :                         ;
      24/   0 :                         ; PLEASE NOTE that this code was rewritten to be more clear (and less
      25/   0 :                         ; dangerous) than the original, which used a number of smart tricks to
      26/   0 :                         ; save space, but which were also very dangerous for structure. So, at
      27/   0 :                         ; the expense of making the code a few bytes bigger, it is not as scary
      28/   0 :                         ; anymore!  That said.. amazing how Erich was able to write this WITHOUT
      29/   0 :                         ; the assistance of an assembler!!  His original (but updated) code will
      30/   0 :                         ; show you where these "danger zones" were, how they worked, and why
      31/   0 :                         ; they were there to begin with.
      32/   0 :                         ;
      33/   0 :                         ; AUTHORS:	National Semiconductor, NIBL, 1975
      34/   0 :                         ;		Erich Küster (ekuester), rewrite and FP, late 1970's-2024
      35/   0 :                         ;		Fred N. van Kempen (waltje), cleanup-rewrite, 2023,2024
      36/   0 :                         ;
      37/   0 :                         ;		Redistribution and  use  in source  and binary forms, with
      38/   0 :                         ;		or  without modification, are permitted  provided that the
      39/   0 :                         ;		following conditions are met:
      40/   0 :                         ;
      41/   0 :                         ;		1. Redistributions of  source  code must retain the entire
      42/   0 :                         ;		   above notice, this list of conditions and the following
      43/   0 :                         ;		   disclaimer.
      44/   0 :                         ;
      45/   0 :                         ;		2. Redistributions in binary form must reproduce the above
      46/   0 :                         ;		   copyright  notice,  this list  of  conditions  and  the
      47/   0 :                         ;		   following disclaimer in  the documentation and/or other
      48/   0 :                         ;		   materials provided with the distribution.
      49/   0 :                         ;
      50/   0 :                         ;		3. Neither the  name of the copyright holder nor the names
      51/   0 :                         ;		   of  its  contributors may be used to endorse or promote
      52/   0 :                         ;		   products  derived from  this  software without specific
      53/   0 :                         ;		   prior written permission.
      54/   0 :                         ;
      55/   0 :                         ; THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
      56/   0 :                         ; "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
      57/   0 :                         ; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
      58/   0 :                         ; PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
      59/   0 :                         ; HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      60/   0 :                         ; SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 2 - 10/31/2025 04:19:39 PM


      61/   0 :                         ; LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
      62/   0 :                         ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
      63/   0 :                         ; THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
      64/   0 :                         ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
      65/   0 :                         ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      66/   0 :                         ;
      67/   0 :                         ; last update:	2024/04/15
      68/   0 :                         ;
      69/   0 :                         ; >>>>>>>>>>>>>>>>>>>           WORK IN PROGRESS           <<<<<<<<<<<<<<<<<
      70/   0 :                         ;
      71/   0 :                         ; TODO: 	Correct severe issue from those days (nowadays detected):
      72/   0 :                         ;		 PR -64/-16 gives SNTX ERROR, PR -64/(-16) gives correct result.
      73/   0 :                         ;		 In general plus or minus sign after an operator gives error.
      74/   0 :                         ;		Implement the dynamic RAM scan at startup, to get rid of
      75/   0 :                         ;		 the static RAMBASE definition.
      76/   0 :                         ;		Complete editing commands in GETLIN.
      77/   0 :                         ;		Implement key BACKSPACE = 0x7f in GETLIN.
      78/   0 :                         ;		Merge STREXP and REXP in I.L. table into a single "EXPR"
      79/   0 :                         ;		 function.
      80/   0 :                         ;		For CLOAD, detect if no cassette present and print error.
      81/   0 :                         ;
      82/   0 :                         ;
      83/   0 :                         ;******************************************************
      84/   0 :                         ;*     WE ARE TIED DOWN TO A LANGUAGE WHICH           *
      85/   0 :                         ;*     MAKES UP IN OBSCURITY WHAT IT LACKS            *
      86/   0 :                         ;*     IN STYLE.                                      *
      87/   0 :                         ;*                      - TOM STOPPARD                *
      88/   0 :                         ;*     CONFIRMED                                      *
      89/   0 :                         ;*                      - ERICH KUESTER               *
      90/   0 :                         ;*     NO KIDDING!                                    *
      91/   0 :                         ;*                      - FRED VAN KEMPEN             *
      92/   0 :                         ;******************************************************
      93/   0 :                         
      94/   0 :                         ; Functions.
      95/   0 :                         L FUNCTION VAL16, (VAL16 & 0xFF)
      96/   0 :                         H FUNCTION VAL16, ((VAL16 >> 8) & 0xFF)
      97/   0 :                         
      98/   0 :                         ; Do we want the cassette I/O routines?
      99/   0 : =>UNDEFINED             	IFNDEF USE_CASS
     100/   0 : =0x2                    USE_CASS = 2				; 1=normal,2=full,0=disabled
     101/   0 : [99]                    	ENDIF
     102/   0 :                         
     103/   0 :                         ; Opcodes used for I/O emulation.
     104/   0 : =>UNDEFINED             	IFDEF EMULA
     105/   0 :                         WRCHAR	= 0x20				; write char to TTY
     106/   0 :                         RDCHAR	= 0x21				; read char from TTY
     107/   0 :                         	MESSAGE	"Will generate emulation code."
     108/   0 : [104]                   	ENDIF
     109/   0 :                         
     110/   0 :                         ; Define KBPLUS to use system calls to KBPLUS monitor.
     111/   0 : =>UNDEFINED                     IFDEF KBPLUS
     112/   0 :                         GETC	= 0x00DE			; KBPLUS system call
     113/   0 :                         PUTC	= 0x01C5			; KBPLUS system call
     114/   0 :                         PUTS	= 0x0052			; KBPLUS system call
     115/   0 :                         CASLD	= 0x0200			; KBPLUS system call
     116/   0 :                         CASSV	= 0x0280			; KBPLUS system call
     117/   0 :                         	MESSAGE	"Will generate for KBPLUS integration."
     118/   0 : [111]                   	ENDIF
     119/   0 :                         
     120/   0 :                         ; Set desired load address (3x4096 bytes.)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 3 - 10/31/2025 04:19:39 PM


     121/   0 : =>UNDEFINED             	IFNDEF BASE
     122/   0 : =0xD000                 BASE	= 0xD000
     123/   0 : [121]                   	ENDIF
     124/   0 :                         
     125/   0 :                         ; Set desired ram base address.
     126/   0 :                         ; Contiguous memory is assumed from 0x1000 through RAMBASE+0x0FFF.
     127/   0 : =>UNDEFINED             	IFNDEF RAMBASE
     128/   0 : =0x7000                 RAMBASE	= 0x7000			; set page of RAM to use for scratch
     129/   0 : [127]                   	ENDIF
     130/   0 : =0xC00                  STKTOP	= 0x0C00			; offset into page (1K below top)
     131/   0 : =0x7C00                 STKBASE	= RAMBASE+STKTOP		; this is the base of our scratch RAM
     132/   0 : =0x80                   STKMID	= 0x0080			; center of RAM stack (for P2 offset)
     133/   0 : =0x3B6                  STKIBUF	= 0x03B6			; input buffer offset from STKBASE
     134/   0 : =0x100                  VARSBUF	= 0x0100			; start of vars (offset from STKBASE)
     135/   0 :                         
     136/   0 : =0xF6                   RAMSTK	= 0x00F6			; offset for syscalls stack
     137/   0 :                         
     138/   0 :                         ; NOTE:	following are six internal stack offsets relative to STKBASE
     139/   0 : =0x1E                   SUBSTK	= 0x001E			; offset for CALL/RTRN stack
     140/   0 : =0x60                   AEXSTK	= 0x0060			; offset for arithmetic expression stack
     141/   0 : =0xF0                   SBRSTK	= 0x00F0			; offset for GOSUB/RETURN stack
     142/   0 :                         ; FIXME: SBRSTK was 0xFD, changed for RAMSTK
     143/   0 : =0xE0                   DOSTAK	= SBRSTK-16			; offset for DO/UNTIL stack
     144/   0 : =0xD4                   FORSTK	= DOSTAK-12			; offset for FOR/NEXT stack
     145/   0 : =0xA4                   ILCSTK	= FORSTK-48			; offset for ILCALL/ILRTRN stack
     146/   0 :                         
     147/   0 :                         ; NOTE: Input buffer for GETLIN begins at STKBASE+STKIBUF,
     148/   0 :                         ;	ends at STKBASE+STKIBUF+72 ( holds maximum 72 chars )
     149/   0 :                         
     150/   0 :                         ; RAM usage constants relative to P2 (work in progress.)
     151/   0 :                         ; Shown offsets are with P2 assumed to be at STKBASE+STKMID.
     152/   0 :                         ; -127	PUTASC:char			; temp storage for character
     153/   0 : =0xFFFFFFFFFFFFFF82     MSGOFF	= -126				; relative offset (E) in MESG
     154/   0 : =0xFFFFFFFFFFFFFF83     RAMBAS	= -125				; base address of RAM, high byte
     155/   0 : =0xFFFFFFFFFFFFFF84     PAGES	= -124				; number of valid pages for program
     156/   0 : =0xFFFFFFFFFFFFFF85     PGTOPH	= -123				; top of storage in page (H) / memory size (H)
     157/   0 : =0xFFFFFFFFFFFFFF86     PGTOPL	= -122				; top of storage in page (L) / memory size (L)
     158/   0 :                         
     159/   0 :                         ; -100	SUBSTK:init.H			; grows downwards, contains SPRVSR P3.H,
     160/   0 :                         ; -99	SUBSTK:init.L
     161/   0 :                         ; -98	SUBSTK:top.H			; set to zero byte
     162/   0 :                         ; -97	SUBSTK:top.L			; set to zero byte
     163/   0 :                         ; -96	CASS routines
     164/   0 :                         ; -95	CASS routines
     165/   0 :                         ; -94	CASS routines
     166/   0 :                         ; -32	AEXSTK:top			; STBASE+AEXSTK (grows downwards)
     167/   0 : =0xFFFFFFFFFFFFFFE1     UFRACS	= -31				; counter for '#'s behind ',' (USING routines)
     168/   0 : =0xFFFFFFFFFFFFFFE2     UTOTAL	= -30				; total counter for '#'s (USING routines)
     169/   0 :                         ; NOTE:	next used to store actual SUBSTACK.L
     170/   0 : =0xFFFFFFFFFFFFFFE3     SUBOFF	= -29				; P2 STACK (L), for CALL/RTRN, init STKBASE+SUBSTK (0x1E)
     171/   0 : =0xFFFFFFFFFFFFFFE4     RNDY	= -28
     172/   0 : =0xFFFFFFFFFFFFFFE5     RNDX	= -27				; seeds for random number
     173/   0 : =0xFFFFFFFFFFFFFFE6     RNDF	= -26
     174/   0 : =0xFFFFFFFFFFFFFFE7     CHRNUM	= -25				; char counter within line buffer, init 72 chars, also pointer.H
     175/   0 :                         ; -24	PUTASC:bitcount			; also pointer.L
     176/   0 :                         ; -23	PUTASC, ABSWP, ALGEXP, PSHSWP	; temporary counter
     177/   0 :                         ; -22	CASW, GETLIN, FADD		; temporary storage
     178/   0 : =0xFFFFFFFFFFFFFFEB     COUNTR	= -21				; CASS routines, GETASC, USING routines
     179/   0 :                         ; -20	unknown				; P1.H : begin of actual program line
     180/   0 :                         ; -19	unknown				; P1.L
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 4 - 10/31/2025 04:19:39 PM


     181/   0 :                         ; -18	unknown
     182/   0 :                         ; -17	unknown
     183/   0 : =0xFFFFFFFFFFFFFFF0     P1HIGH	= -16				; P1 SPACE (H); P3 CASW (H), CASR (H)
     184/   0 : =0xFFFFFFFFFFFFFFF1     P1LOW	= -15				; P1 SPACE (L) to save cursor
     185/   0 :                         ; -14					; save P1.H
     186/   0 :                         ; -13					; save P1.L
     187/   0 :                         ; -12	unknown
     188/   0 :                         ; -11	unknown
     189/   0 : =0xFFFFFFFFFFFFFFF6     CURPG	= -10				; current page number
     190/   0 : =0xFFFFFFFFFFFFFFF7     NUMHI	= -9				; 16-bit number (H)
     191/   0 : =0xFFFFFFFFFFFFFFF8     NUMLO	= -8				; 16-bit number (L)
     192/   0 : =0xFFFFFFFFFFFFFFF9     ILCOFF	= -7				; P2 STACK (L), for ILCALL/ILRTRN, init STKBASE+ILCSTK (was 0xB1)
     193/   0 : =0xFFFFFFFFFFFFFFFA     FOROFF	= -6				; P2 STACK (L), for FOR/NEXT/STEP STACK, init STKBASE+FORSTK (was 0xE1)
     194/   0 : =0xFFFFFFFFFFFFFFFB     DOUOFF	= -5				; P2 STACK (L), for DO/UNTIL STACK, init STKBASE+DOSTAK (was 0xED)
     195/   0 : =0xFFFFFFFFFFFFFFFC     SBROFF	= -4				; P2 STACK (L), for GOSUB/RETURN, init STKBASE+SBRSTK (was 0xFD)
     196/   0 : =0xFFFFFFFFFFFFFFFD     AEXOFF	= -3				; P2 STACK (L), for arithmetics, init STKBASE+AEXSTK (0x60)
     197/   0 :                         ; -2	known				; general temp storage (H), init ILTBL.H
     198/   0 :                         ; -1	known				; general temp storage (L), init ILTBL.L
     199/   0 :                         ; 0	known				; character limit in line buffer (72)
     200/   0 :                         ; 1	unknown
     201/   0 :                         ; 2	unknown
     202/   0 :                         ; 3	unknown
     203/   0 :                         ; 4	unknown
     204/   0 :                         ; 5	unknown
     205/   0 :                         ; 6	unknown
     206/   0 :                         ; 7	unknown
     207/   0 :                         ; 8	unknown
     208/   0 :                         ; 12	unknown
     209/   0 :                         ; 13	unknown
     210/   0 :                         ; 30	SUBSTK.top (from STKBASE on, not STKBASE+STKMID)
     211/   0 :                         ; 42	ILCSTK.top (grows downwards)
     212/   0 :                         ; 90	FORSTK.top (grows downwards)
     213/   0 :                         ; 102	DOSTAK.top (grows downwards)
     214/   0 :                         ; 118	SBRSTK.top (grows downwards)
     215/   0 :                         	; NOTE:	Downwards offset 119 begin six internal stacks, see above
     216/   0 :                         ; 119	STKP3.H	= 119			; KBPLUS
     217/   0 :                         ; 120	STKP3.L	= 120			; KBPLUS
     218/   0 :                         ; 121	STKP1.H	= 121			; KBPLUS
     219/   0 :                         ; 122	STKP1.L	= 122			; KBPLUS
     220/   0 :                         ; 123	STKP2.H	= 123			; KBPLUS
     221/   0 :                         ; 124	STKP2.L	= 124			; KBPLUS
     222/   0 : =0x7D                   ERRNUMH	= 125				; line number (H) for error message
     223/   0 : =0x7E                   ERRNUML = 126				; line number (L) for error message
     224/   0 : =0x7F                   BASMODE	= 127				; program/run mode INCMD with _QUMRK
     225/   0 :                         
     226/   0 :                         ; System constants.
     227/   0 : =0xFFFFFFFFFFFFFF80     EREG	= -128				; the extension register
     228/   0 :                         
     229/   0 :                         ; Misc constants.
     230/   0 : =0x3                    _CTLC	= 0x03				; ctrl-c (BREAK)
     231/   0 : =0x8                    _BS	= 0x08				; ctrl-h (backspace)
     232/   0 : =0x9                    _HTAB	= 0x09				; (hor.) TAB
     233/   0 : =0xA                    _LF	= 0x0A				; ctrl-j (line feed)
     234/   0 : =0xB                    _CTLK	= 0x0B				; ctrl-k (^Kill, rubout one char, also used as <vtab>)
     235/   0 : =0xC                    _CTLL	= 0x0C				; ctrl-l (one char to the ^Left, also used as <ff>)
     236/   0 : =0xC                    _FF	= 0x0C				; form feed (clear screen)
     237/   0 : =0xD                    _CR	= 0x0D				; ctrl-m (carriage return / enter)
     238/   0 : =0xF                    _CTLO	= 0x0F				; ctrl-o (m^Ove and insert character)
     239/   0 : =0x12                   _CTLR	= 0x12				; ctrl-r (one char to the ^Right)
     240/   0 : =0x18                   _CTLX	= 0x18				; ctrl-x (e^Xit, cancel input and start anew)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 5 - 10/31/2025 04:19:39 PM


     241/   0 : ='>'                    _PRMPT	= '>'				; the prompt
     242/   0 : ='?'                    _QMARK	= '?'				; question mark (for input)
     243/   0 : =0x80                   INCMD	= 0x80				; "in command mode" flag
     244/   0 :                         
     245/   0 :                         ; Important bits.
     246/   0 :                         
     247/   0 : =0x1                    S_FLAG0	= 0x01				; tty "txd" pin in SR
     248/   0 : =0x10                   S_SENSEA = 0x10				; intr pin in SR
     249/   0 : =0x20                   S_SENSEB = 0x20				; tty "rxd" pin in SR
     250/   0 :                         
     251/   0 : =>DEFINED               	IFDEF USETTY
     252/   0 :                         	INCLUDE "TTY_INIT.inc"
(1)    1/   0 : =>UNDEFINED             	IFNDEF BAUD
(1)    2/   0 : =0x960                  BAUD            = 2400
(1)    3/   0 : [1]                     	ENDIF
(1)    4/   0 :                         
(1)    5/   0 :                         ; For SC/MP I, MICROCYCLE should be 2.0
(1)    6/   0 :                         ; For SC/MP II (INS8060), MICROCYCLE should be 1.0
(1)    7/   0 : =1                      MICROCYCLE      = 1.0
(1)    8/   0 :                         
(1)    9/   0 : =0x1A0                  CYCLES_PER_BIT  = INT(1000000.0/BAUD/MICROCYCLE)
(1)   10/   0 :                         
(1)   11/   0 :                         calc_delay_cycles FUNCTION a,d,13+2*a+514*d
(1)   12/   0 :                         calc_delay_d      FUNCTION cycles,INT((cycles-13)/514)
(1)   13/   0 :                         calc_delay_a      FUNCTION cycles,INT(((cycles-13)#514)/2)
(1)   14/   0 :                         
(1)   15/   0 : =>DEFINED                       IFNDEF S_FLAG0
(1)   16/   0 :                         S_FLAG0         = 0x01
(1)   17/   0 : [15]                            ENDIF
(1)   18/   0 :                         
(1)   19/   0 : =>DEFINED                       IFNDEF S_SENSEB
(1)   20/   0 :                         S_SENSEB        = 0x20
(1)   21/   0 : [19]                            ENDIF
(1)   22/   0 :                         
     253/   0 : [251]                   	ENDIF
     254/   0 :                         
     255/   0 :                         
     256/   0 :                         ; Supervisor jumps using P3 offsetting.
     257/   0 : =0xD400                 SV_BASE		= BASE+0x0400		; which block is Supervisor at?
     258/   0 : =0xFFFFFFFFFFFFFFA2     STKPHI		= (RESTRT -SPRVSR +1)	; storage for stackpointer high
     259/   0 : =0xFFFFFFFFFFFFFFA0     SV_RESTRT	= (RESTRT -SPRVSR -1)
     260/   0 : =0xFFFFFFFFFFFFFFB4     SV_MSGOUT	= (MSGOUT -SPRVSR -1)
     261/   0 : =0xFFFFFFFFFFFFFFD6     SV_SPLOAD	= (SPLOAD -SPRVSR -1)
     262/   0 : =0x25                   SV_RTNEST	= (RTNEST -SPRVSR -1)
     263/   0 : =0x27                   SV_RTERRN	= (RTERRN -SPRVSR -1)
     264/   0 : =0x30                   SV_LINE		= (SPLINE -SPRVSR -1)
     265/   0 : =0x38                   SV_RTRN		= (SPRTN -SPRVSR -1)
     266/   0 : =0x3C                   SV_RTRN1	= (SPRTN1 -SPRVSR -1)
     267/   0 : =0x5B                   SV_RTFUNC	= (RTFUNC -SPRVSR -1)
     268/   0 : =0x6B                   SV_VALERR	= (VALERR -SPRVSR -1)
     269/   0 :                         
     270/   0 :                         ; I.L. control bits for Supervisor.
     271/   0 : =0x80                   JMPBIT		= 0x80
     272/   0 : =0x8000                 JMPBITH		= JMPBIT*256
     273/   0 : =0x40                   TSTBIT		= 0x40
     274/   0 : =0x4000                 TSTBITH		= TSTBIT*256
     275/   0 : =0x20                   CALBIT		= 0x20
     276/   0 : =0x2000                 CALBITH		= CALBIT*256
     277/   0 :                         
     278/   0 :                         
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 6 - 10/31/2025 04:19:39 PM


     279/   0 :                         ; Macros.
     280/   0 :                         JS	MACRO P,VAL			; Jump to Subroutine
     281/   0 :                         	 LDI	H(VAL-1)
     282/   0 :                         	 XPAH	P
     283/   0 :                         	 LDI	L(VAL-1)
     284/   0 :                         	 XPAL	P
     285/   0 :                         	 XPPC	P
     286/   0 :                         	ENDM
     287/   0 :                         
     288/   0 :                         LDPI	MACRO P,VAL			; Load Pointer
     289/   0 :                         	 LDI	L(VAL)
     290/   0 :                         	 XPAL	P
     291/   0 :                         	 LDI	H(VAL)
     292/   0 :                         	 XPAH	P
     293/   0 :                         	ENDM
     294/   0 :                         
     295/   0 : =>UNDEFINED             	IFDEF	KBPLUS
     296/   0 :                         SYSCALL	MACRO NUM			; perform kbplus system call
     297/   0 :                         	 XPPC	P3
     298/   0 :                         	 DB	NUM
     299/   0 :                         	ENDM
     300/   0 : [295]                   	ENDIF
     301/   0 :                         
     302/   0 : =>DEFINED               	IFDEF	INTERNAL
     303/   0 :                         SYSCALL	MACRO NUM			; perform internal system call
     304/   0 :                         	 XPPC	P3
     305/   0 :                         	 DB	NUM
     306/   0 :                         	ENDM
     307/   0 : [302]                   	ENDIF
     308/   0 :                         
     309/   0 :                         TSTSTR	MACRO FAIL,A			; I.L. macro
     310/   0 :                         	 DB	H(FAIL - TSTBITH)
     311/   0 :                         	 DB	L(FAIL)
     312/   0 :                         	 DB	A
     313/   0 :                         	ENDM
     314/   0 :                         
     315/   0 :                         TSTNUM	MACRO FAIL			; I.L. macro
     316/   0 :                         	 DB	H(FAIL)
     317/   0 :                         	 DB	L(FAIL)
     318/   0 :                         	ENDM
     319/   0 :                         
     320/   0 :                         TSTVAR	MACRO ADR			; I.L. macro
     321/   0 :                         	 DB	H(ADR - CALBITH)
     322/   0 :                         	 DB	L(ADR)
     323/   0 :                         	ENDM
     324/   0 :                         
     325/   0 :                         GOTO	MACRO ADR			; I.L. go to I.L. subroutine
     326/   0 :                         	 DB	H(ADR - JMPBITH)
     327/   0 :                         	 DB	L(ADR)
     328/   0 :                         	ENDM
     329/   0 :                         
     330/   0 :                         ILCALL	MACRO ADR			; I.L. call I.L. subroutine
     331/   0 :                         	 DB	H(ADR - (JMPBITH + TSTBITH))
     332/   0 :                         	 DB	L(ADR)
     333/   0 :                         	ENDM
     334/   0 :                         
     335/   0 :                         ILRTRN	MACRO				; I.L. return from I.L. subroutine
     336/   0 :                         	 DB	0
     337/   0 :                         	ENDM
     338/   0 :                         
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 7 - 10/31/2025 04:19:39 PM


     339/   0 :                         DO	MACRO ADR			; I.L. - execute machine code
     340/   0 :                         	 IFNB	ADR
     341/   0 :                         	  DB	H(ADR)
     342/   0 :                         	  DB	L(ADR)
     343/   0 :                         	  SHIFT
     344/   0 :                         	  DO	ALLARGS
     345/   0 :                         	 ENDIF
     346/   0 :                         	ENDM
     347/   0 :                         
     348/   0 :                         CALL	MACRO ADR			; I.L. - call subroutine
     349/   0 :                         	 XPPC	P3
     350/   0 :                         	 DB	H(ADR)
     351/   0 :                         	 DB	L(ADR)
     352/   0 :                         	ENDM
     353/   0 :                         
     354/   0 :                         RTRN	MACRO				; I.L. - return from subroutine
     355/   0 :                         	 XPPC	P3
     356/   0 :                         	 DB	0
     357/   0 :                         	ENDM
     358/   0 :                         
     359/   0 :                         MESG	MACRO A,B			; I.L. - create message string
     360/   0 :                         	 DB	A
     361/   0 :                         	 IFNB	B
     362/   0 :                         	  DB	B|0x80
     363/   0 :                         	 ENDIF
     364/   0 :                         	ENDM
     365/   0 :                         
     366/   0 :                         MESGCR	MACRO A				; message string terminated by <cr>
     367/   0 :                         	 DB	A
     368/   0 :                         	 DB	_CR
     369/   0 :                         	ENDM
     370/   0 :                         
     371/   0 :                         TOKEN	MACRO A,B,C			; I.L. - create token table entry
     372/   0 :                         	 IF A == 0x80|79
     373/   0 :                         	  ; Convert a T_STAR to the more common '^' symbol.
     374/   0 :                         	  ; NOTE: if a token is added or deleted, DO NOT forget to update this!
     375/   0 :                         	  DB	'^'
     376/   0 :                         	 ELSE
     377/   0 :                         	  DB	A
     378/   0 :                         	 ENDIF
     379/   0 :                         	 DB	B
     380/   0 :                         	 DB	C|0x80
     381/   0 :                         	ENDM
     382/   0 :                         
     383/   0 :                         
     384/   0 :                         ;**************************************
     385/   0 :                         ;*      NIBLFP - Initialization       *
     386/   0 :                         ;**************************************
     387/D000 :                         	ORG	BASE
     388/D000 : 08                      RESET:	NOP				; dummy byte
     389/D001 : 90 1F                   	JMP	ENTER
     390/D003 : 0D 4E 49 42 4C 46 50 20 VERMSG:	DB	_CR,"NIBLFP VERSION "
         D00B : 56 45 52 53 49 4F 4E 20
     391/D013 : (MACRO)[0]              VERSTR:	MESGCR	"2024/04/06"		; version ID
     391/D013 : 32 30 32 34 2F 30 34 2F          DB     "2024/04/06"
         D01B : 30 36                  
     391/D01D : 0D                               DB     _CR
     392/D01E :                         
     393/D01E : =>UNDEFINED             	IFDEF	KBPLUS
     394/D01E :                         ; Vectors for KBPLUS system calls
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 8 - 10/31/2025 04:19:39 PM


     395/D01E :                         	BIGENDIAN ON
     396/D01E :                         SCALLS:	DW	GETC			; call 1
     397/D01E :                         	DW	PUTC			; call 2
     398/D01E :                         	DW	PUTS			; call 3
     399/D01E :                         	DW	CASLD			; call 4
     400/D01E :                         	DW	CASSV			; call 5
     401/D01E : [393]                   	ENDIF
     402/D01E :                         
     403/D01E :                         ; Define input/output internally over lookup table
     404/D01E : =>DEFINED               	IFDEF INTERNAL
     405/D01E :                         	BIGENDIAN ON
     406/D01E : D0 D0                   SCALLS:	DW	GETASC			; call 1
     407/D020 : D0 97                   	DW	PUTASC			; call 2
Will generate internal system calls.
     408/D022 :                         	MESSAGE	"Will generate internal system calls."
     409/D022 : [404]                           ENDIF
     410/D022 :                         
     411/D022 :                         	; On entry, we save the initial values of the P1, P2 and P3
     412/D022 :                         	; registers of any potential calling program, for example a
     413/D022 :                         	; system monitor.
     414/D022 :                         	;
     415/D022 : C4 7C                   ENTER:	LDI	H(STKBASE)		; set P1 to variables
     416/D024 : DC 01                   	ORI	H(VARSBUF)
     417/D026 : 35                      	XPAH	P1			; get high byte of monitor P1
     418/D027 : 01                      	XAE				; save prev P1.H in E
     419/D028 : C4 00                   	LDI	0
     420/D02A : 31                      	XPAL	P1			; get low byte of monitor P1
     421/D02B : C9 FA                   	ST	-6(P1)			; store byte at STKP1.L
     422/D02D : 40                      	LDE
     423/D02E : C9 F9                   	ST	-7(P1)			; store byte at STKP1.H
     424/D030 : C4 00                   	LDI	0
     425/D032 : C9 00                   	ST	(P1)			; clear first byte of variables' buffer
     426/D034 : C4 80                   	LDI	STKMID			; set P2 to STBASE+STKMID
     427/D036 : 32                      	XPAL	P2			; get low byte of monitor P2
     428/D037 : C9 FC                   	ST	-4(P1)			; store byte at STKP2.L
     429/D039 : C4 7C                   	LDI	H(STKBASE)
     430/D03B : 36                      	XPAH	P2			; get high byte of monitor P2
     431/D03C : C9 FB                   	ST	-5(P1)			; store byte at STKP2.H
     432/D03E : C4 80                   	LDI	L(SPRVSR)		; load P3 with supervisor
     433/D040 : 33                      	XPAL	P3			; get low of return address
     434/D041 : C9 F8                   	ST	-8(P1)			; store byte at STKP3.L
     435/D043 : C4 D4                   	LDI	H(SPRVSR)
     436/D045 : 37                      	XPAH	P3			; get high of return address
     437/D046 : C9 F7                   	ST	-9(P1)			; store byte at STKP3.H
     438/D048 : C5 01                   	LD	@1(P1)			; load zero value and advance P1 by one
     439/D04A : CA 9E                   	ST	-98(P2)			; clear two bytes at top of SUBSTACK
     440/D04C : CA 9F                   	ST	-97(P2)
     441/D04E : C4 1E                   	LDI	L(SUBSTK)
     442/D050 : CA E3                   	ST	SUBOFF(P2)		; store default top of CALL/RTRN stack
     443/D052 : C4 60                   	LDI	L(AEXSTK)		; initialize working stack
     444/D054 : CA FD                   	ST	AEXOFF(P2)		; store default offset to arithmetics stack
     445/D056 : C4 01                   	LDI	1
     446/D058 : CA F6                   	ST	CURPG(P2)		; set current page to first page
     447/D05A : C4 00                   	LDI	0
     448/D05C : CA 84                   	ST	PAGES(P2)		; set available pages to zero
     449/D05E : C4 70                   	LDI	0x70			; set page 7
     450/D060 : CA 83                   	ST	RAMBAS(P2)		; store as first RAMBASE..
     451/D062 :                         	; NOTE:	P1 low was set to one above
     452/D062 : 35                      ENTR1:	XPAH	P1			; set P1.H with page value
     453/D063 : C4 0D                   	LDI	_CR			; set line terminator <cr>
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 9 - 10/31/2025 04:19:39 PM


     454/D065 : C9 00                   	ST	(P1)			; store in page
     455/D067 : C1 00                   	LD	(P1)			; re-load stored byte
     456/D069 : E4 0D                   	XRI	_CR			; is it <cr> ?
     457/D06B : 9C 1B                   	JNZ	ENTR4			; no ram, test next page
     458/D06D : C1 03                   	LD	3(P1)			; test for valid line counter
     459/D06F : 98 07                   	JZ	ENTR2			; certainly not
     460/D071 : 01                      	XAE
> > > NIBLFP.asm(461):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
     461/D072 : C1 80                   	LD	EREG(P1)		; load byte at end of line
     462/D074 : E4 0D                   	XRI	_CR			; is it <cr> ?
     463/D076 : 98 06                   	JZ	ENTR3			; valid line of existing program
     464/D078 : C4 FF                   ENTR2:	LDI	0xFF			; otherwise mark page as empty
     465/D07A : C9 01                   	ST	1(P1)			; store -1 as line number
     466/D07C : C9 02                   	ST	2(P1)
     467/D07E : AA 84                   ENTR3:	ILD	PAGES(P2)		; increase page counter
     468/D080 : 35                      	XPAH	P1
     469/D081 : 03                      	SCL
     470/D082 : FC 10                   	CAI	0x10			; corresponding value of one page
     471/D084 : 9C DC                   	JNZ	ENTR1
     472/D086 : 90 08                   	JMP	ENTR5			; page 0 reached
     473/D088 : 35                      ENTR4:	XPAH	P1
     474/D089 : 03                      	SCL
     475/D08A : FC 10                   	CAI	0x10			; corresponding value of one page
     476/D08C : CA 83                   	ST	RAMBAS(P2)		; store as new RAMBASE
     477/D08E : 9C D2                   	JNZ	ENTR1			; and test next page if not zero
     478/D090 : (MACRO)[1]              ENTR5:	JS	P1,RESTRT		; done with pre-init, start supervisor
     478/D090 : C4 D4                            LDI    H(RESTRT-1)
     478/D092 : 35                               XPAH   P1
     478/D093 : C4 20                            LDI    L(RESTRT-1)
     478/D095 : 31                               XPAL   P1
     478/D096 : 3D                               XPPC   P1
     479/D097 :                         
     480/D097 :                         
     481/D097 : =>UNDEFINED             	IFNDEF KBPLUS
     482/D097 :                         ; NOTE:	Use internal routines for output/input.
     483/D097 :                         ;***************************
     484/D097 :                         ;*   PUT CHAR TO STDOUT    *
     485/D097 :                         ;***************************
     486/D097 :                         PUTASC:
     487/D097 : =>UNDEFINED             	 IFDEF EMULA
     488/D097 :                         	  DB	WRCHAR
     489/D097 :                         	  IFDEF	INTERNAL
     490/D097 :                         	   XPPC	P3
     491/D097 :                         	   JMP	PUTASC
     492/D097 :                         	  ELSE
     493/D097 :                         	   JMP	SV_RTRN(P3)
     494/D097 : [489]                   	  ENDIF
     495/D097 : [487]                   	 ENDIF
     496/D097 :                         
     497/D097 : =>DEFINED               	IFDEF	USETTY
     498/D097 :                         	INCLUDE "TTY_PUTASC.inc"
(1)    1/D097 : =0xD                    B67_CYCLES = 13 ; minium delay for DLY
(1)    2/D097 : =0x0                    TTY_B6     = calc_delay_a(B67_CYCLES)
(1)    3/D097 : =0x0                    TTY_B7     = calc_delay_d(B67_CYCLES)
(1)    4/D097 :                         
(1)    5/D097 : =0x110                  B89_CYCLES = CYCLES_PER_BIT - 144
(1)    6/D097 : =0x81                   TTY_B8     = calc_delay_a(B89_CYCLES)
(1)    7/D097 : =0x0                    TTY_B9     = calc_delay_d(B89_CYCLES)
(1)    8/D097 :                         
(1)    9/D097 : D4 7F                           ANI     0x7F            ; MASK OFF PARITY BIT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm(TTY_PUTASC.inc) - Page 10 - 10/31/2025 04:19:39 PM


(1)   10/D099 : 01                              XAE                     ; SAVE IN EXT
(1)   11/D09A : CA 81                           ST      -127(P2)        ; STORE IN RAM
(1)   12/D09C : C4 00                           LDI     TTY_B6          ; SET DELAY FOR START BIT
(1)   13/D09E : 8F 00                           DLY     TTY_B7          ; (TTY_B6=30 AND TTY_B7=03)
(1)   14/D0A0 : 06                              CSA                     ; GET STATUS
(1)   15/D0A1 : DC 01                           ORI     1               ; SET START BIT (INVERTED LOGIC)
(1)   16/D0A3 : 07                              CAS                     ; SET STATUS
(1)   17/D0A4 : C4 09                           LDI     9               ; GET BIT COUNT
(1)   18/D0A6 : CA E8                           ST      -24(P2)         ; STORE IN RAM
(1)   19/D0A8 : C4 81                   PUTA1:  LDI     TTY_B8          ; SET DELAY FOR 1 BIT TIME      ; 10
(1)   20/D0AA : 8F 00                           DLY     TTY_B9          ; (TTY_B8=5C AND TTY_B9=01)     ;  0
(1)   21/D0AC : BA E8                           DLD     -24(P2)         ; DECREMENT BIT COUNT           ; 22
(1)   22/D0AE : 98 10                           JZ      PUTA2                                           ;  9
(1)   23/D0B0 : 40                              LDE                     ; PREPARE NEXT BIT              ;  6
(1)   24/D0B1 : D4 01                           ANI     S_FLAG0                                         ; 10
(1)   25/D0B3 : CA E9                           ST      -23(P2)                                         ; 18
(1)   26/D0B5 : 01                              XAE                     ; SHIFT DATA RIGHT ONE BIT      ;  7
(1)   27/D0B6 : 1E                              RR                                                      ;  5
(1)   28/D0B7 : 01                              XAE                                                     ;  7
(1)   29/D0B8 : 06                              CSA                     ; SET UP OUTPUT BIT             ;  5
(1)   30/D0B9 : DC 01                           ORI     S_FLAG0                                         ; 10
(1)   31/D0BB : E2 E9                           XOR     -23(P2)                                         ; 18
(1)   32/D0BD : 07                              CAS                     ; PUT BIT TO TTY                ;  6
(1)   33/D0BE : 90 E8                           JMP     PUTA1                                           ; 11
(1)   34/D0C0 : 06                      PUTA2:  CSA                     ; SET STOP BIT                  ;---
(1)   35/D0C1 : D4 FE                           ANI     0xFE                                            ;144
(1)   36/D0C3 : 07                              CAS
(1)   37/D0C4 :                         
     499/D0C4 : D4 20                   	ANI	S_SENSEB		; check for keyboard input
     500/D0C6 : 9C 04                   	JNZ	putc3			; (note that input is not inverted)
     501/D0C8 : C4 00                   	LDI	(M_BRK-M_BASE)		; 'BREAK'
     502/D0CA : 93 B4                   	JMP	SV_MSGOUT(P3)
     503/D0CC : C2 81                   putc3:	LD	-127(P2)		; restore saved byte
     504/D0CE : (MACRO)[2]              	RTRN
     504/D0CE : 3F                               XPPC   P3
     504/D0CF : 00                               DB     0
     505/D0D0 : [497]                   	ENDIF
     506/D0D0 :                         
     507/D0D0 :                         ;***************************
     508/D0D0 :                         ;*   GET CHAR FROM STDIN   *
     509/D0D0 :                         ;***************************
     510/D0D0 :                         GETASC:
     511/D0D0 : =>UNDEFINED             	 IFDEF EMULA
     512/D0D0 :                         	  DB	RDCHAR
     513/D0D0 :                         	  IFDEF	INTERNAL
     514/D0D0 :                         	   LDE
     515/D0D0 :                         	   XPPC	P3			; return
     516/D0D0 :                         	   JMP	PUTASC
     517/D0D0 :                         	  ELSE
     518/D0D0 :                         	   XRI	_CTLC			; test for CONTROL-C
     519/D0D0 :                         	   JNZ	SV_RTRN(P3)
     520/D0D0 :                         	   LDI	(M_BRK-M_BASE)		; 'BREAK'
     521/D0D0 :                         	   JMP	SV_MSGOUT(P3)
     522/D0D0 : [513]                   	  ENDIF
     523/D0D0 : [511]                   	 ENDIF
     524/D0D0 :                         
     525/D0D0 :                         ; FIXME: Former TTY routine, actually switched off
     526/D0D0 : =>DEFINED               	IFDEF	USETTY
     527/D0D0 :                         	INCLUDE "TTY_GETASC.inc"
(1)    1/D0D0 : =0x13F                  B34_CYCLES = CYCLES_PER_BIT - 97
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm(TTY_GETASC.inc) - Page 11 - 10/31/2025 04:19:39 PM


(1)    2/D0D0 : =0x99                   TTY_B3     = calc_delay_a(B34_CYCLES)
(1)    3/D0D0 : =0x0                    TTY_B4     = calc_delay_d(B34_CYCLES)
(1)    4/D0D0 :                         
(1)    5/D0D0 : =0xEF                   B12_CYCLES = 3 * CYCLES_PER_BIT / 2 - calc_delay_cycles(TTY_B3, TTY_B4) - 66
(1)    6/D0D0 : =0x71                   TTY_B1     = calc_delay_a(B12_CYCLES)
(1)    7/D0D0 : =0x0                    TTY_B2     = calc_delay_d(B12_CYCLES)
(1)    8/D0D0 :                         
(1)    9/D0D0 : =0xD0                   B5_CYCLES  = CYCLES_PER_BIT / 2
(1)   10/D0D0 : =0x1                    TTY_B5     = 1 + calc_delay_d(B5_CYCLES)
(1)   11/D0D0 :                         
(1)   12/D0D0 : C4 08                           LDI     0x08            ; SET COUNT
(1)   13/D0D2 : CA EB                           ST      -21(P2)                                         ;
(1)   14/D0D4 : 06                      GWAIT:  CSA                     ; WAIT FOR START BIT            ;        5*0.5
(1)   15/D0D5 : D4 20                           ANI     S_SENSEB                                        ;       10*0.5
(1)   16/D0D7 : 9C FB                           JNZ     GWAIT                                           ;        9*0.5
(1)   17/D0D9 : C4 71                           LDI     TTY_B1          ; DELAY 1/2 BIT TIME            ;       10
(1)   18/D0DB : 8F 00                           DLY     TTY_B2          ; (TTY_B1=C2 AND TTY_B2=00)     ;        0
(1)   19/D0DD : 06                              CSA                     ; IS START BIT STILL THERE?     ;        5
(1)   20/D0DE : D4 20                           ANI     S_SENSEB                                        ;       10
(1)   21/D0E0 : 9C F2                           JNZ     GWAIT           ; NO                            ;        9
(1)   22/D0E2 : C4 99                   GINP:   LDI     TTY_B3          ; DELAY BIT TIME                ;  10   10
(1)   23/D0E4 : 8F 00                           DLY     TTY_B4          ; (TTY_B3=76 AND TTY_B4=01)     ;   0    0
(1)   24/D0E6 : 06                              CSA                     ; GET BIT (SENSEB)              ;   5   --
(1)   25/D0E7 : D4 20                           ANI     S_SENSEB                                        ;  10   66 (=>D12_CYCLES)
(1)   26/D0E9 : 98 02                           JZ      GZERO                                           ;  10  (9+11)*0.5
(1)   27/D0EB : C4 01                           LDI     1                                               ;   5  (10+0)*0.5
(1)   28/D0ED : 1F                      GZERO:  RRL                     ; ROTATE INTO LINK              ;   5
(1)   29/D0EE : 01                              XAE                                                     ;   7
(1)   30/D0EF : 1D                              SRL                     ; SHIFT INTO CHARACTER          ;   5
(1)   31/D0F0 : 01                              XAE                     ; RETURN CHAR TO E              ;   7
(1)   32/D0F1 : BA EB                           DLD     -21(P2)         ; DECREMENT BIT COUNT           ;  22
(1)   33/D0F3 : 9C ED                           JNZ     GINP            ; LOOP UNTIL 0                  ;  11
(1)   34/D0F5 : 8F 01                           DLY     TTY_B5          ; SET DELAY (TTY_B5=01)         ;  --
(1)   35/D0F7 : 40                              LDE                     ; LOAD CHARACTER FROM E         ;  97 (=>D34_CYCLES)
(1)   36/D0F8 : D4 7F                           ANI     0x7F            ; MASK PARITY BIT
(1)   37/D0FA : 01                              XAE
(1)   38/D0FB : 40                              LDE
(1)   39/D0FC :                         
     528/D0FC : (MACRO)[3]              	RTRN
     528/D0FC : 3F                               XPPC   P3
     528/D0FD : 00                               DB     0
     529/D0FE : [526]                   	 ENDIF
     530/D0FE : [481]                   	ENDIF
     531/D0FE :                         
     532/D0FE : =>TRUE                  	IF USE_CASS == 2
     533/D0FE :                         ;**************************************
     534/D0FE :                         ;*	Cassette I/O routines.        *
     535/D0FE :                         ;**************************************
     536/D0FE :                         ; NOTE: these will be moved to KBPLUS.
     537/D0FE :                         ;
     538/D0FE : =0x17                   CSPEED_A	= 0x17			; 1200 baud, 2MHz
     539/D0FE : =0x1                    CSPEED_B	= 0x01
     540/D0FE : =0x78                   CSPEED_C	= 0x78
     541/D0FE : =0x0                    CSPEED_D	= 0x00
     542/D0FE : =0x24                   CSPEED_E	= 0x24
     543/D0FE : =0x1                    CSPEED_F	= 0x01
     544/D0FE :                         
     545/D0FE :                         ;****************************
     546/D0FE :                         ;*  WRITE ONE BYTE TO TAPE  *
     547/D0FE :                         ;****************************
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 12 - 10/31/2025 04:19:39 PM


     548/D0FE :                         ;
     549/D0FE : CA A0                   CASWR:	ST	-96(P2)			; store byte
     550/D100 : C4 0A                   	LDI	10			; set bit counter (data,2xstop)
     551/D102 : CA EB                   	ST	COUNTR(P2)		; store counter
     552/D104 : C4 00                   	LDI	0			; write 0 bit (start)
     553/D106 : 01                      	XAE
     554/D107 : 19                      	SIO
     555/D108 : 01                      	XAE
     556/D109 : BA A1                   	DLD	-95(P2)
     557/D10B : C2 A0                   	LD	-96(P2)			; re-load byte
     558/D10D : 01                      	XAE				; store in E
     559/D10E : C4 17                   CASWR1:	LDI	CSPEED_A		; delay one bit time
     560/D110 : 8F 01                   	DLY	CSPEED_B
     561/D112 : C2 A2                   	LD	-94(P2)			; get user-spec delay value
     562/D114 : CA A1                   	ST	-95(P2)			; store it
     563/D116 : BA A1                   CASWR2:	DLD	-95(P2)			; decrease until zero
     564/D118 : 9C FC                   	JNZ	CASWR2			; user-delay done?
     565/D11A : 19                      	SIO				; yes, send next bit
     566/D11B : 40                      	LDE				; load E
     567/D11C : DC 80                   	ORI	0x80			; set highest bit (set up stop bit..)
     568/D11E : 01                      	XAE				; save back to E
     569/D11F : BA EB                   	DLD	COUNTR(P2)		; decrease bit counter
     570/D121 : 9C EB                   	JNZ	CASWR1			; loop until done
     571/D123 : 3F                      	XPPC	P3			; return to caller
     572/D124 : 90 D8                   	JMP	CASWR			; for repeated calls
     573/D126 :                         
     574/D126 :                         ;*****************************
     575/D126 :                         ;*  READ ONE BYTE FROM TAPE  *
     576/D126 :                         ;*****************************
     577/D126 :                         ;
     578/D126 : C4 FF                   CASRD:	LDI	0xFF			; send out 1-bit (so no start bit!)
     579/D128 : 01                      	XAE
     580/D129 : 19                      	SIO
     581/D12A : 40                      	LDE				; load the bit received
     582/D12B : 94 02                   	JP	CASRD1			; we received a 0-bit (start) !
     583/D12D : 90 F7                   	JMP	CASRD			; try again
     584/D12F : C4 78                   CASRD1:	LDI	CSPEED_C		; delay one half bit time
     585/D131 : 8F 00                   	DLY	CSPEED_D
     586/D133 : C4 FF                   	LDI	0xFF			; set 1-bit for reading
     587/D135 : 01                      	XAE
     588/D136 : C2 A2                   	LD	-94(P2)
     589/D138 : 1C                      	SR
     590/D139 : CA A1                   	ST	-95(P2)
     591/D13B : BA A1                   CASRD2:	DLD	-95(P2)
     592/D13D : 9C FC                   	JNZ	CASRD2
     593/D13F : C4 08                   	LDI	8			; set bit counter
     594/D141 : CA EB                   	ST	COUNTR(P2)		; store bit counter
     595/D143 : C2 A2                   CASRD3:	LD	-94(P2)
     596/D145 : CA A1                   	ST	-95(P2)
     597/D147 : C4 24                   	LDI	CSPEED_E		; delay one bit time
     598/D149 : 8F 01                   	DLY	CSPEED_F
     599/D14B : BA A1                   CASRD4:	DLD	-95(P2)
     600/D14D : 9C FC                   	JNZ	CASRD4
     601/D14F : 19                      	SIO				; read one bit
     602/D150 : BA EB                   	DLD	COUNTR(P2)		; decrease bit counter
     603/D152 : 9C EF                   	JNZ	CASRD3			; not done yet, do next
     604/D154 : C2 A2                   	LD	-94(P2)			; delay for stop bits
     605/D156 : CA A1                   	ST	-95(P2)
     606/D158 : BA A1                   CASRD5:	DLD	-95(P2)
     607/D15A : 9C FC                   	JNZ	CASRD5
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 13 - 10/31/2025 04:19:39 PM


     608/D15C : 40                      	LDE				; load byte into AC
     609/D15D : 3F                      	XPPC	P3			; return to caller
     610/D15E : 90 C6                   	JMP	CASRD			; for repeated calls
     611/D160 :                         
     612/D160 :                         ;**************************
     613/D160 :                         ;*  WRITE MEMORY TO TAPE  *
     614/D160 :                         ;**************************
     615/D160 :                         ;FIXME: used P2 STACK offset -33, -34, -35, -36, -37, -38 may interfere with AEX STACK.
     616/D160 : C4 D0                   CASW:	LDI	H(CASWR-1)		; set P3 to CASWR, save old P3
     617/D162 : 37                      	XPAH	P3
     618/D163 : CA F0                   	ST	-16(P2)
     619/D165 : C4 FD                   	LDI	L(CASWR-1)
     620/D167 : 33                      	XPAL	P3
     621/D168 : CA F1                   	ST	-15(P2)
     622/D16A : C2 DE                   	LD	-34(P2)			; load start of program H
     623/D16C : CA DA                   	ST	-38(P2)			; store
     624/D16E : 35                      	XPAH	P1			; set P1.H
     625/D16F : C2 DF                   	LD	-33(P2)			; load start of program L
     626/D171 : CA DB                   	ST	-37(P2)			; store
     627/D173 : 31                      	XPAL	P1			; set P1.L
     628/D174 : C2 DE                   	LD	-34(P2)			; load start.H
     629/D176 : 3F                      	XPPC	P3			; write byte to tape
     630/D177 : C2 DF                   	LD	-33(P2)			; load start.L
     631/D179 : 3F                      	XPPC	P3			; write byte to tape
     632/D17A : C2 DC                   	LD	-36(P2)			; load end.H
     633/D17C : 3F                      	XPPC	P3			; write byte to tape
     634/D17D : C2 DD                   	LD	-35(P2)			; load end.L
     635/D17F : 3F                      	XPPC	P3			; write byte to tape
     636/D180 : C4 20                   CASW1:	LDI	32			; set byte counter for block
     637/D182 : CA EA                   	ST	-22(P2)			; store
     638/D184 : C4 00                   	LDI	0			; initialize checksum
     639/D186 : CA E9                   	ST	-23(P2)			; store
     640/D188 : 02                      	CCL				; clear carry
     641/D189 : C1 00                   CASW2:	LD	(P1)			; load byte from program
     642/D18B : F2 E9                   	ADD	-23(P2)			; add to checksum
     643/D18D : CA E9                   	ST	-23(P2)
     644/D18F : C1 00                   	LD	(P1)			; re-load byte from program
     645/D191 : 3F                      	XPPC	P3			; write byte to tape
     646/D192 : C2 DA                   	LD	-38(P2)			; load high byte of addr
     647/D194 : E2 DC                   	XOR	-36(P2)			; are we done yet?
     648/D196 : 9C 0F                   	JNZ	CASW3			; no, do next
     649/D198 :                         ;FIXME: we should check -37(P2), because we do not save LAST byte now!!
     650/D198 : 31                      	XPAL	P1			; compare low byte of addr
     651/D199 : E2 DD                   	XOR	-35(P2)
     652/D19B : 9C 0A                   	JNZ	CASW3			; not done yet
     653/D19D : C2 E9                   	LD	-23(P2)			; done, load checksum byte
     654/D19F : 3F                      	XPPC	P3			; write byte to tape
     655/D1A0 : C2 F0                   	LD	-16(P2)			; restore P3 to old value
     656/D1A2 : 37                      	XPAH	P3
     657/D1A3 : C2 F1                   	LD	-15(P2)
     658/D1A5 : 33                      	XPAL	P3
     659/D1A6 : 3F                      	XPPC	P3			; return
     660/D1A7 : AA DB                   CASW3:	ILD	-37(P2)			; end of current block
     661/D1A9 : 9C 04                   	JNZ	CASW4
     662/D1AB : 35                      	XPAH	P1
     663/D1AC : AA DA                   	ILD	-38(P2)
     664/D1AE : 35                      	XPAH	P1
     665/D1AF : 31                      CASW4:	XPAL	P1
     666/D1B0 : BA EA                   	DLD	-22(P2)			; decrease block byte counter
     667/D1B2 : 9C D5                   	JNZ	CASW2			; not done yet, do next byte in block
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 14 - 10/31/2025 04:19:39 PM


     668/D1B4 : C2 E9                   	LD	-23(P2)			; block done, load checksum
     669/D1B6 : 3F                      	XPPC	P3			; write byte to tape
     670/D1B7 : 90 C7                   	JMP	CASW1			; do next block
     671/D1B9 :                         
     672/D1B9 :                         ;***************************
     673/D1B9 :                         ;*  READ MEMORY FROM TAPE  *
     674/D1B9 :                         ;***************************
     675/D1B9 :                         ;
     676/D1B9 : C4 D1                   CASR:	LDI	H(CASRD-1)		; set P3 to CASRD, save old P3
     677/D1BB : 37                      	XPAH	P3
     678/D1BC : CA F0                   	ST	-16(P2)
     679/D1BE : C4 25                   	LDI	L(CASRD-1)
     680/D1C0 : 33                      	XPAL	P3
     681/D1C1 : CA F1                   	ST	-15(P2)
     682/D1C3 : 3F                      	XPPC	P3			; read byte from cassette
     683/D1C4 : CA DE                   	ST	-34(P2)			; store start addr H
     684/D1C6 : CA F7                   	ST	NUMHI(P2)		; save to P1.H
     685/D1C8 : 3F                      	XPPC	P3			; read byte from cassette
     686/D1C9 : CA DF                   	ST	-33(P2)			; store start addr L
     687/D1CB : CA F8                   	ST	NUMLO(P2)		; save to P1.L
     688/D1CD : 3F                      	XPPC	P3			; read byte from cassette
     689/D1CE : CA DC                   	ST	-36(P2)			; store end addr H
     690/D1D0 : 3F                      	XPPC	P3			; read byte from cassette
     691/D1D1 : CA DD                   	ST	-35(P2)			; store end addr L
     692/D1D3 : C4 20                   CASR1:	LDI	32			; set block byte counter
     693/D1D5 : CA EA                   	ST	-22(P2)			; store
     694/D1D7 : C4 00                   	LDI	0			; initialize checksum
     695/D1D9 : CA E9                   	ST	-23(P2)			; store
     696/D1DB : 02                      	CCL				; clear carry
     697/D1DC : C2 F8                   CASR2:	LD	NUMLO(P2)		; set P1 to program's current addr
     698/D1DE : 31                      	XPAL	P1
     699/D1DF : C2 F7                   	LD	NUMHI(P2)
     700/D1E1 : 35                      	XPAH	P1
     701/D1E2 : 3F                      	XPPC	P3			; read byte from cassette
     702/D1E3 : C9 00                   	ST	(P1)			; store in memory
     703/D1E5 : F2 E9                   	ADD	-23(P2)			; add to checksum
     704/D1E7 : CA E9                   	ST	-23(P2)
     705/D1E9 : 35                      	XPAH	P1			; check P1.H for all done
     706/D1EA : E2 DC                   	XOR	-36(P2)
     707/D1EC : 9C 11                   	JNZ	CASR4			; no, do next byte
     708/D1EE : 31                      	XPAL	P1			; check P1.L for all done
     709/D1EF : E2 DD                   	XOR	-35(P2)
     710/D1F1 : 9C 0C                   	JNZ	CASR4			; no, do next byte
     711/D1F3 : 3F                      	XPPC	P3			; read checksum from cassette
     712/D1F4 : E2 E9                   	XOR	-23(P2)			; check against current value
     713/D1F6 : 01                      CASR3:	XAE				; save AC
     714/D1F7 : C2 F0                   	LD	-16(P2)			; restore P3 to old value
     715/D1F9 : 37                      	XPAH	P3
     716/D1FA : C2 F1                   	LD	-15(P2)
     717/D1FC : 33                      	XPAL	P3
     718/D1FD : 40                      	LDE				; restore AC
     719/D1FE : 3F                      	XPPC	P3			; return
     720/D1FF : AA F8                   CASR4:	ILD	NUMLO(P2)		; increase P1 value by one
     721/D201 : 9C 02                   	JNZ	CASR5
     722/D203 : AA F7                   	ILD	NUMHI(P2)
     723/D205 : BA EA                   CASR5:	DLD	-22(P2)			; decrease block byte counter
     724/D207 : 9C D3                   	JNZ	CASR2			; not zero, do next byte in block
     725/D209 : 3F                      	XPPC	P3			; read checksum from cassette
     726/D20A : E2 E9                   	XOR	-23(P2)			; check against current value
     727/D20C : 9C E8                   	JNZ	CASR3			; whoops, a bad block!
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 15 - 10/31/2025 04:19:39 PM


     728/D20E : 90 C3                   	JMP	CASR1
     729/D210 : [532]                   	ENDIF
     730/D210 :                         
     731/D210 :                         ;*******************************************************
     732/D210 :                         ;*  Get 16-bit number (label) from BASIC program line  *
     733/D210 :                         ;*                and store on STACK.                  *
     734/D210 :                         ;*******************************************************
     735/D210 :                         ;
     736/D210 : C5 01                   SPRNUM:	LD	@1(P1)			; get byte from program and increase
     737/D212 : CA F7                   	ST	NUMHI(P2)		; save high byte of number
     738/D214 : C5 02                   	LD	@2(P1)			; get byte from program and advance by 2
     739/D216 : CA F8                   	ST	NUMLO(P2)		; save low byte of number
     740/D218 :                         
     741/D218 :                         ;*******************************************************
     742/D218 :                         ;*        Print 16-bit number on STACK -9, -8          *
     743/D218 :                         ;*         as decimal ASCII-representation.            *
     744/D218 :                         ;*******************************************************;
     745/D218 :                         ;
     746/D218 : C4 5A                   PRNUM:	LDI	L(AEXSTK)-6		; reserve six bytes on arithmetics stack
     747/D21A : CA FD                   	ST	AEXOFF(P2)		; save actual AEXSTK.L for later use
     748/D21C : 31                      	XPAL	P1
     749/D21D : CA F1                   	ST	-15(P2)			; save P1.low
     750/D21F : C3 A2                   	LD	STKPHI(P3)
     751/D221 : 35                      	XPAH	P1
     752/D222 : CA F0                   	ST	-16(P2)			; save P1.high
     753/D224 : C4 00                   	LDI	0
     754/D226 : C9 03                   	ST	3(P1)
     755/D228 : C2 F8                   	LD	NUMLO(P2)
     756/D22A : C9 02                   	ST	2(P1)
     757/D22C : C2 F7                   	LD	NUMHI(P2)
     758/D22E : C9 01                   	ST	1(P1)
     759/D230 :                         ; NOTE:	Convert 16-bit integer into 4-byte float.
     760/D230 : C4 8E                   	LDI	0x8E			; load +14 and..
     761/D232 : C9 00                   	ST	(P1)			; store as exponent
     762/D234 : C1 01                   PNORM:	LD	1(P1)
     763/D236 : F1 01                   	ADD	1(P1)
     764/D238 : E1 01                   	XOR	1(P1)
     765/D23A : D4 80                   	ANI	0x80			; test bit7
     766/D23C : 9C 1B                   	JNZ	PFNUM			; go, we are ready for printing
     767/D23E : C1 00                   	LD	(P1)			; normalize floating point number
     768/D240 : 98 17                   	JZ	PFNUM
     769/D242 : B9 00                   	DLD	(P1)			; decrease exponent..
     770/D244 : 02                      	CCL				; ..and shift mantissa one bit left
     771/D245 : C1 03                   	LD	3(P1)
     772/D247 : F1 03                   	ADD	3(P1)
     773/D249 : C9 03                   	ST	3(P1)
     774/D24B : C1 02                   	LD	2(P1)
     775/D24D : F1 02                   	ADD	2(P1)
     776/D24F : C9 02                   	ST	2(P1)
     777/D251 : C1 01                   	LD	1(P1)
     778/D253 : F1 01                   	ADD	1(P1)
     779/D255 : C9 01                   	ST	1(P1)
     780/D257 : 90 DB                   	JMP	PNORM
     781/D259 :                         ; NOTE: Print positive 4-byte floating point number
     782/D259 : C4 00                   PFNUM:	LDI	0			; load zero
     783/D25B : CA E7                   	ST	CHRNUM(P2)	; digit counter or sign ? 0 = positive ?
     784/D25D : C4 20                   	LDI	' '			; load <space> for positive number
     785/D25F : C9 FB                   	ST	-5(P1)			; store 5 bytes lower (below scratch)
     786/D261 :                         ; NOTE:	only positive numbers are relevant, so fall through directly to ZERO
     787/D261 : C1 01                   	LD	1(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 16 - 10/31/2025 04:19:39 PM


     788/D263 : 98 22                   	JZ	ZERO			; is MSB of mantissa zero ?
     789/D265 : 94 17                   	JP	DIG10			; go, mantissa is positive
     790/D267 : C4 2D                   	LDI	'-'			; load <minus> for negative number
     791/D269 : C9 FB                   	ST	-5(P1)			; store 5 bytes lower (below scratch)
     792/D26B : 03                      	SCL
     793/D26C : C4 00                   	LDI	0			; negate number on AEX STACK
     794/D26E : F9 03                   	CAD	3(P1)
     795/D270 : C9 03                   	ST	3(P1)
     796/D272 : C4 00                   	LDI	0
     797/D274 : F9 02                   	CAD	2(P1)
     798/D276 : C9 02                   	ST	2(P1)
     799/D278 : C4 00                   	LDI	0
     800/D27A : F9 01                   	CAD	1(P1)
     801/D27C : C9 01                   	ST	1(P1)			; now positive BUT sometimes bit7 set!
     802/D27E :                         ; NOTE:	now invert bit7 of exponent (strip characteristic)
     803/D27E : C1 00                   DIG10:	LD	(P1)
     804/D280 : E4 80                   	XRI	0x80
     805/D282 :                         ; NOTE:	If number is positive, skip and fall through directly to ZERO
     806/D282 : 94 03                   	JP	ZERO			; go, exponent is positive
     807/D284 : (MACRO)[4]              	CALL	NEGEXP
     807/D284 : 3F                               XPPC   P3
     807/D285 : F3                               DB     H(NEGEXP)
     807/D286 : D8                               DB     L(NEGEXP)
     808/D287 : C4 01                   ZERO:	LDI	1
     809/D289 : C9 FC                   	ST	-4(P1)			; store 1 temporary
     810/D28B : C1 01                   	LD	1(P1)			; load MANT1
     811/D28D : 98 77                   	JZ	DIG19			; go, MANT1 is zero
     812/D28F : C4 A0                   DIG13:	LDI	0xA0			; load b'10100000' 10<<4 ?
     813/D291 : 01                      	XAE				; preserve in E
     814/D292 : C1 03                   	LD	3(P1)			; copy number four bytes down in SCRATCH
     815/D294 : C9 FF                   	ST	-1(P1)
     816/D296 : C1 02                   	LD	2(P1)
     817/D298 : C9 FE                   	ST	-2(P1)
     818/D29A : C1 01                   	LD	1(P1)
     819/D29C : C9 FD                   	ST	-3(P1)
     820/D29E : C4 00                   	LDI	0			; set top mantissa to zero
     821/D2A0 : C9 03                   	ST	3(P1)
     822/D2A2 : C9 02                   	ST	2(P1)
     823/D2A4 : C9 01                   	ST	1(P1)
     824/D2A6 : C4 18                   	LDI	24			; shift 24 bit
     825/D2A8 : C9 FA                   	ST	-6(P1)			; store bit counter
     826/D2AA : 03                      DIGLP:	SCL				; shift left loop
     827/D2AB : C1 FD                   	LD	-3(P1)			; load MANT1
     828/D2AD : FC 50                   	CAI	0x50			; subtract b'01010000' 10<<3 ?
     829/D2AF : 94 02                   	JP	DIG15			; go, greater / equal 10
     830/D2B1 : 90 04                   	JMP	DIG16			; otherwise subtraction "failed"
     831/D2B3 : C9 FD                   DIG15:	ST	-3(P1)			; store again
     832/D2B5 : A9 03                   	ILD	3(P1)			; increase quotient
     833/D2B7 : B9 FA                   DIG16:	DLD	-6(P1)			; decrease shift counter
     834/D2B9 : 98 2A                   	JZ	DIG17			; zero, shift loop complete
     835/D2BB : 02                      	CCL
     836/D2BC : 40                      	LDE				; E holds 0xA0, see above
     837/D2BD : 70                      	ADE
     838/D2BE : 01                      	XAE
     839/D2BF : C1 FF                   	LD	-1(P1)
     840/D2C1 : F1 FF                   	ADD	-1(P1)
     841/D2C3 : C9 FF                   	ST	-1(P1)
     842/D2C5 : C1 FE                   	LD	-2(P1)
     843/D2C7 : F1 FE                   	ADD	-2(P1)
     844/D2C9 : C9 FE                   	ST	-2(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 17 - 10/31/2025 04:19:39 PM


     845/D2CB : C1 FD                   	LD	-3(P1)
     846/D2CD : F1 FD                   	ADD	-3(P1)
     847/D2CF : C9 FD                   	ST	-3(P1)
     848/D2D1 :                         ; NOTE: shifted E and mantissa 1 bit left
     849/D2D1 : C1 03                   	LD	3(P1)
     850/D2D3 : F1 03                   	ADD	3(P1)
     851/D2D5 : C9 03                   	ST	3(P1)
     852/D2D7 : C1 02                   	LD	2(P1)
     853/D2D9 : F1 02                   	ADD	2(P1)
     854/D2DB : C9 02                   	ST	2(P1)
     855/D2DD : C1 01                   	LD	1(P1)
     856/D2DF : F1 01                   	ADD	1(P1)
     857/D2E1 : C9 01                   	ST	1(P1)
     858/D2E3 :                         ; NOTE: shifted quotient 1 bit left
     859/D2E3 : 90 C5                   	JMP	DIGLP			; continue shift loop
     860/D2E5 : C1 01                   DIG17:	LD	1(P1)			; comes here from shift loop
     861/D2E7 : 94 10                   	JP	DIG18			; test bit7 of QUOTIENT1
     862/D2E9 :                         ; NOTE:	bit7 set, so shift quotient right one bit (dividde by 2)
     863/D2E9 : 02                      	CCL
     864/D2EA : 1F                      	RRL
     865/D2EB : C9 01                   	ST	1(P1)
     866/D2ED : C1 02                   	LD	2(P1)
     867/D2EF : 1F                      	RRL
     868/D2F0 : C9 02                   	ST	2(P1)
     869/D2F2 : C1 03                   	LD	3(P1)
     870/D2F4 : 1F                      	RRL
     871/D2F5 : C9 03                   	ST	3(P1)
     872/D2F7 :                         ; NOTE:	compensate divide by increasing exp by one
     873/D2F7 : A9 00                   	ILD	(P1)
     874/D2F9 : 03                      DIG18:	SCL
     875/D2FA : C1 00                   	LD	(P1)
     876/D2FC : FC 04                   	CAI	4			; subtract exponent by 4
     877/D2FE : C9 00                   	ST	(P1)
     878/D300 : 94 04                   	JP	DIG19
     879/D302 : A9 FC                   	ILD	-4(P1)			; increase temporary
     880/D304 : 90 89                   	JMP	DIG13
     881/D306 : C1 FC                   DIG19:	LD	-4(P1)			; load temporary
     882/D308 : CA EB                   	ST	COUNTR(P2)		; store on STACK -21
     883/D30A : C2 E7                   	LD	CHRNUM(P2)		; load digit counter
     884/D30C : 9C 0F                   	JNZ	DIG20
     885/D30E : 03                      	SCL
     886/D30F : C4 06                   	LDI	6			; maximal digit limit ?
     887/D311 : F9 FC                   	CAD	-4(P1)
     888/D313 : 94 08                   	JP	DIG20			; not reached
     889/D315 : B9 FC                   	DLD	-4(P1)			; decrease temporary..
     890/D317 : CA E7                   	ST	CHRNUM(P2)		; ..store as digit counter
     891/D319 : C4 01                   	LDI	1
     892/D31B : C9 FC                   	ST	-4(P1)			; store one in temporary
     893/D31D : 02                      DIG20:	CCL
     894/D31E : C1 01                   	LD	1(P1)
     895/D320 : 1F                      	RRL
     896/D321 : C9 01                   	ST	1(P1)
     897/D323 : C1 02                   	LD	2(P1)
     898/D325 : 1F                      	RRL
     899/D326 : C9 02                   	ST	2(P1)
     900/D328 : C1 03                   	LD	3(P1)
     901/D32A : 1F                      	RRL
     902/D32B : C9 03                   	ST	3(P1)
     903/D32D : 40                      	LDE
     904/D32E : 1F                      	RRL
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 18 - 10/31/2025 04:19:39 PM


     905/D32F : 01                      	XAE
     906/D330 : A9 00                   	ILD	(P1)
     907/D332 : E4 86                   	XRI	0x86
     908/D334 : 9C E7                   	JNZ	DIG20
     909/D336 :                         ; shifted E and quotient 1 bit right until exp equal 6
     910/D336 : 40                      	LDE
     911/D337 : F4 02                   	ADI	2
     912/D339 : C9 01                   	ST	1(P1)
     913/D33B : C4 05                   	LDI	5
     914/D33D : C9 00                   	ST	(P1)
     915/D33F :                         ; NOTE:	advance AEX STACK pointer to begin of number string
     916/D33F : C5 FB                   	LD	@-5(P1)
     917/D341 : 06                      	CSA
     918/D342 :                         ; NOTE: Bit7 in status reg is carry/link.
     919/D342 : 94 1E                   	JP	DEC
     920/D344 : A9 08                   	ILD	8(P1)			; was before 3(P1)
     921/D346 : 9C 1A                   	JNZ	DEC
     922/D348 : A9 07                   	ILD	7(P1)			; was before 2(P1)
     923/D34A : 9C 16                   	JNZ	DEC
     924/D34C : C4 31                   	LDI	'1'
     925/D34E : CD FF                   	ST	@-1(P1)			; increase and store <one>
     926/D350 : C2 E7                   	LD	CHRNUM(P2)		; load digit counter
     927/D352 : 9C 08                   	JNZ	DIG21
     928/D354 : C1 02                   	LD	2(P1)			; temporary, was before -4(P1) ?
     929/D356 : E4 06                   	XRI	6
     930/D358 : 9C 08                   	JNZ	DEC
     931/D35A : F4 05                   	ADI	5
     932/D35C : F4 00                   DIG21:	ADI	0
     933/D35E : CA E7                   	ST	CHRNUM(P2)		; store digit counter
     934/D360 : 90 07                   	JMP	PEXP
     935/D362 : (MACRO)[5]              DEC:	CALL	BINDEC			; convert binary to decimal digits
     935/D362 : 3F                               XPPC   P3
     935/D363 : F4                               DB     H(BINDEC)
     935/D364 : 32                               DB     L(BINDEC)
     936/D365 : C2 E7                   	LD	CHRNUM(P2)		; load digit counter
     937/D367 : 98 28                   	JZ	PFNUMD
     938/D369 : 01                      PEXP:	XAE				; calculate decimal exponent
     939/D36A : C4 45                   	LDI	'E'
     940/D36C : CD FF                   	ST	@-1(P1)			; store 'E' for exponent
     941/D36E : 40                      	LDE				; E holds exponent
     942/D36F : 94 04                   	JP	PEXP1			; positive exponent ?
     943/D371 : C4 2D                   	LDI	'-'
     944/D373 : CD FF                   	ST	@-1(P1)			; store <minus> for negative exponent
     945/D375 : 03                      PEXP1:	SCL
     946/D376 : 40                      	LDE
     947/D377 : D4 7F                   	ANI	0x7F			; strip characteristic
     948/D379 : FC 0A                   	CAI	10			; subtract 10
     949/D37B : 94 02                   	JP	PEXP2			; exponent is equal / greater 10
     950/D37D : 90 0E                   	JMP	PEXPD
     951/D37F : 01                      PEXP2:	XAE
     952/D380 : C4 30                   	LDI	'0'
     953/D382 : CD FF                   	ST	@-1(P1)			; decrease and store <zero>
     954/D384 : A9 00                   PEXP3:	ILD	(P1)			; increase digit
     955/D386 : 40                      	LDE
     956/D387 : FC 0A                   	CAI	10			; subtract 10 while positive and increase counter
     957/D389 : 01                      	XAE
     958/D38A : 40                      	LDE
     959/D38B : 94 F7                   	JP	PEXP3			; exponent still equal / greater 10
     960/D38D : F4 3A                   PEXPD:	ADI	'9'+1			; calculate ASCII value of latest digit
     961/D38F : CD FF                   	ST	@-1(P1)			; decrease and store ASCII digit
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 19 - 10/31/2025 04:19:39 PM


     962/D391 : C4 00                   PFNUMD:	LDI	0			; load <null>
     963/D393 : CD FF                   	ST	@-1(P1)			; decrease P1 and store as string delimiter
     964/D395 : C2 FD                   	LD	AEXOFF(P2)
     965/D397 : 31                      	XPAL	P1
     966/D398 : C4 5E                   	LDI	L(AEXSTK)-2		; let two bytes free for 16-bit number
     967/D39A : CA FD                   	ST	AEXOFF(P2)		; reset arithmetics stack
     968/D39C : C5 FB                   	LD	@-5(P1)			; skip after stored floating point number
     969/D39E : =>DEFINED               PTNUM:	IFDEF	SCALLS
     970/D39E : (MACRO)[6]              	 SYSCALL	2
     970/D39E : 3F                               XPPC   P3
     970/D39F : 02                               DB     2
     971/D3A0 : =>FALSE                 	ELSE
     972/D3A0 :                         	 CALL	PUTASC
     973/D3A0 : [969]                   	ENDIF
     974/D3A0 : C5 FF                   	LD	@-1(P1)
     975/D3A2 : 9C FA                   	JNZ	PTNUM			; loop until <null>
     976/D3A4 : C2 F1                   PTEND:	LD	-15(P2)			; restore P1 and return
     977/D3A6 : 31                      	XPAL	P1
     978/D3A7 : C2 F0                   	LD	-16(P2)
     979/D3A9 : 35                      	XPAH	P1
     980/D3AA : (MACRO)[7]              	RTRN
     980/D3AA : 3F                               XPPC   P3
     980/D3AB : 00                               DB     0
     981/D3AC :                         
     982/D3AC : =>FALSE                 	IF	0
     983/D3AC :                         ; NOTE: Old PRNUM routine
     984/D3AC :                         	LDI	' '			; positive, store leading space
     985/D3AC :                         	ST	-5(P1)			; save as prefix for number
     986/D3AC :                         	LDI	-6			; load index of first digit
     987/D3AC :                         	ST	CHRNUM(P2)		; store as digit counter
     988/D3AC :                         	LD	NUMLO(P2)
     989/D3AC :                         	ST	-3(P1)
     990/D3AC :                         	LD	NUMHI(P2)		; load 16-bit number..
     991/D3AC :                         	ST	-4(P1)			; and put as dividend on AEX STACK
     992/D3AC :                         ; FIXME: Negating number is omitted (not needed, should never happen.)
     993/D3AC :                         	IF	0
     994/D3AC :                         	 JP	DIV
     995/D3AC :                         	 LDI	'-'			; negative, so store <minus>
     996/D3AC :                         	 ST	-5(P1)			; save as prefix for number
     997/D3AC :                         	 SCL
     998/D3AC :                         	 LDI	0			; negate number on AEX STACK
     999/D3AC :                         	 CAD	NUMLO(P2)
    1000/D3AC :                         	 ST	-3(P1)
    1001/D3AC :                         	 LDI	0
    1002/D3AC :                         	 CAD	NUMHI(P2)
    1003/D3AC :                         	 ST	-4(P1)
    1004/D3AC : [993]                   	ENDIF
    1005/D3AC :                         ; NOTE: Place for quotient is reserved at -2 and -1 of AEX STACK.
    1006/D3AC :                         DIV:	LDI	0			; clear quotient
    1007/D3AC :                         	ST	-1(P1)
    1008/D3AC :                         	ST	-2(P1)
    1009/D3AC :                         	XAE				; set E to zero
    1010/D3AC :                         	LDI	16			; shift 16 bit
    1011/D3AC :                         	ST	-6(P1)			; store as bit counter below number
    1012/D3AC :                         DIVLP:	CCL
    1013/D3AC :                         	LD	-1(P1)			; shift 4 byte left one bit
    1014/D3AC :                         	ADD	-1(P1)
    1015/D3AC :                         	ST	-1(P1)
    1016/D3AC :                         	LD	-2(P1)
    1017/D3AC :                         	ADD	-2(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 20 - 10/31/2025 04:19:39 PM


    1018/D3AC :                         	ST	-2(P1)
    1019/D3AC :                         	LD	-3(P1)
    1020/D3AC :                         	ADD	-3(P1)
    1021/D3AC :                         	ST	-3(P1)
    1022/D3AC :                         	LD	-4(P1)
    1023/D3AC :                         	ADD	-4(P1)
    1024/D3AC :                         	ST	-4(P1)
    1025/D3AC :                         	LDE
    1026/D3AC :                         	ADE				; shift carry into E
    1027/D3AC :                         	XAE
    1028/D3AC :                         	LDE
    1029/D3AC :                         	ADI	-10			; subtract 10
    1030/D3AC :                         	JP	DIV1			; go, greater/equal 10
    1031/D3AC :                         	JMP	DIV2			; otherwise subtraction "failed"
    1032/D3AC :                         DIV1:	XAE
    1033/D3AC :                         	ILD	-1(P1)			; increase quotient
    1034/D3AC :                         DIV2:	DLD	-6(P1)			; decrease bit counter
    1035/D3AC :                         	JNZ	DIVLP			; loop again
    1036/D3AC :                         ; NOTE: AEX STACK -6 is now zero, serves as delimiter for ASCII string.
    1037/D3AC :                         	DLD	CHRNUM(P2)		; decrease digit counter
    1038/D3AC :                         	XAE				; put into E, A holds now remainder from divide
    1039/D3AC :                         	ORI	'0'			; prepare ASCII value
    1040/D3AC :                         	ST	EREG(P1)		; put it on AEX STACK
    1041/D3AC :                         	LD	-1(P1)			; store incomplete quotient as new dividend
    1042/D3AC :                         	ST	-3(P1)
    1043/D3AC :                         	LD	-2(P1)
    1044/D3AC :                         	ST	-4(P1)
    1045/D3AC :                         	OR	-3(P1)
    1046/D3AC :                         	JNZ	DIV			; loop, quotient not yet zero
    1047/D3AC :                         	DLD	CHRNUM(P2)
    1048/D3AC :                         	XAE
    1049/D3AC :                         	LD	-5(P1)			; load prefix for number
    1050/D3AC :                         	ST	@EREG(P1)		; advance stack to begin of number string and store
    1051/D3AC :                         PRNT:	LD	@1(P1)			; load digit from stack and increase
    1052/D3AC :                         	JZ	PNEND			; zero ends printing, see above
    1053/D3AC :                         	IFDEF	SCALLS
    1054/D3AC :                         	 SYSCALL	2
    1055/D3AC :                         	ELSE
    1056/D3AC :                         	 CALL	PUTASC
    1057/D3AC : [1053]                  	ENDIF
    1058/D3AC :                         	JMP	PRNT
    1059/D3AC :                         PNEND:	LD	-15(P2)			; restore P1 and return
    1060/D3AC :                         	XPAL	P1
    1061/D3AC :                         	LD	-16(P2)
    1062/D3AC :                         	XPAH	P1
    1063/D3AC :                         	RTRN
    1064/D3AC : [982]                   	ENDIF
    1065/D3AC :                         
    1066/D3AC :                         ;***************************
    1067/D3AC :                         ;*  FREE SPACE IN D BLOCK  *
    1068/D3AC :                         ;***************************
    1069/D3AC :                         
    1070/D3AC :                         
    1071/D3AC :                         ;***************************
    1072/D3AC :                         ;*  START OF NIBLFP BASIC  *
    1073/D3AC :                         ;***************************
    1074/D3AC :                         ;
    1075/D3AC :                         ; This block of code forms the core of the interpreter, centered
    1076/D3AC :                         ; around the I.L. Supervisor. This routine, in the middle of the
    1077/D3AC :                         ; block, handles most I.L. calls. Because of the limited jumping
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 21 - 10/31/2025 04:19:39 PM


    1078/D3AC :                         ; capabilities of the SC/MP, we also abuse it to place often-used
    1079/D3AC :                         ; routines very close around it, so we can 'reach' them using an
    1080/D3AC :                         ; offset off the P3 register (which permanently points to this
    1081/D3AC :                         ; core routine), effectively allowing us to address $xx00 through
    1082/D3AC :                         ; $xxFF with a single mechanism.
    1083/D3AC :                         ;
    1084/D3AC :                         ; Because of the above, THIS CODE MUST START at a $xx00-based
    1085/D3AC :                         ; offset in memory, with the Supervisor at offset $0080 for a
    1086/D3AC :                         ; maximized jump reach.
    1087/D3AC :                         ;
    1088/D3AC :                         ; Initialization code can either jump to INIT ($xx00), or directly
    1089/D3AC :                         ; to the RESTRT routine. NOTE that because of jump limitations and
    1090/D3AC :                         ; other "fun stuff", code here should not be changed unless you
    1091/D3AC :                         ; (really!) know what you are doing.
    1092/D3AC :                         
    1093/D3AC :                         ; Following for two-byte SYSCALLs taken from a lookup table.
    1094/D3AC : =>DEFINED               	IFDEF	SCALLS
    1095/D3FF :                         	ORG	SV_BASE - 1		; **MUST START HERE**
    1096/D3FF : =>UNDEFINED             	IFDEF DEBUG
    1097/D3FF :                         	 ASSERT	* == SV_BASE - 1	; **MUST** BE HERE!!
    1098/D3FF : [1096]                  	ENDIF
    1099/D3FF :                         ; Perform System call with address from lookup table
    1100/D3FF :                         ; CAVEAT: Do not change extension register.
    1101/D3FF : BA E3                   SCALL:	DLD	SUBOFF(P2)		; reserve place on SUBSTACK..
    1102/D401 : BA E3                   	DLD	SUBOFF(P2)		; ..two bytes for return address
    1103/D403 : 32                      	XPAL	P2			; load P2.L with prepared SUBSTACK.L
    1104/D404 : 02                      	CCL
    1105/D405 : C7 01                   	LD	@1(P3)			; re-get first byte in macro, advance one byte
    1106/D407 :                         	; calculate syscall address with this byte
    1107/D407 : F3 FF                   	ADD	-1(P3)			; double SYSCALL number
    1108/D409 : F4 1C                   	ADI	L(SCALLS - 2)		; add low byte base address
    1109/D40B : 33                      	XPAL	P3			; low byte address SYSCALL in P3.L
    1110/D40C : CA 01                   	ST	1(P2)			; store prev value P3.L
    1111/D40E : C4 D0                   	LDI	H(SCALLS - 2)		; load high byte base address
    1112/D410 : 37                      	XPAH	P3			; high byte address SYSCALL in P3.H
    1113/D411 : CA 00                   	ST	(P2)			; store prev value P3.H
    1114/D413 : C3 00                   	LD	(P3)			; load high byte SYSCALL
    1115/D415 : 32                      	XPAL	P2			; store temporary in P2.L ..
    1116/D416 : C3 01                   	LD	1(P3)			; load low byte SYSCALL
    1117/D418 : 33                      	XPAL	P3			; put into P3.L
    1118/D419 : =>UNDEFINED             	IFDEF	KBPLUS
    1119/D419 :                         	 LDI	RAMSTK			; default STACK.L for KBPLUS syscalls
    1120/D419 : =>TRUE                  	ELSE
    1121/D419 : C4 80                   	 LDI	STKMID			; default STACK.L for internal syscalls
    1122/D41B : [1118]                  	ENDIF
    1123/D41B : 32                      	XPAL	P2
    1124/D41C : 37                      	XPAH	P3			; load new P3.H from P2.L
    1125/D41D : 90 5E                   	JMP	SPEXEC			; go and execute
    1126/D41F : 90 DE                   SCALL1:	JMP	SCALL
    1127/D421 :                         
    1128/D421 :                         	; This is the real start of the supervisor code. Although
    1129/D421 :                         	; it does not have to start at this address, we do force it
    1130/D421 :                         	; here so we do not break the relative jump addresses which
    1131/D421 :                         	; could otherwise run "out of range".
    1132/D421 :                         	;
    1133/D421 :                         
    1134/D421 : =>FALSE                 	ELSE
    1135/D421 :                         	ORG	SV_BASE + 33		; **MUST START HERE**
    1136/D421 :                         	IFDEF DEBUG
    1137/D421 :                         	 ASSERT	* == SV_BASE + 33	; **MUST** BE HERE!!
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 22 - 10/31/2025 04:19:39 PM


    1138/D421 : [1136]                  	ENDIF
    1139/D421 : [1094]                  	ENDIF
    1140/D421 :                         
    1141/D421 :                         	; NOTE:
    1142/D421 :                         	; We cannot use LDPI here, because the second byte
    1143/D421 :                         	; of the first instruction below is used everywhere
    1144/D421 :                         	; in the code to fetch the HIGH BYTE of the stack.
    1145/D421 :                         	; This is why we add the +1 in the next instruction.
    1146/D421 :                         	;
    1147/D421 : C4 7C                   RESTRT:	LDI	H(STKBASE)		; must remain, gives RAMBASE.H
    1148/D423 :                         ; FIXME: following switched off to get space, very preliminary
    1149/D423 : =>FALSE                 	IF	0
    1150/D423 :                         	 ORI	H(VARSBUF)
    1151/D423 :                         	 XPAH	P1
    1152/D423 :                         	 LDI	L(STKBASE)
    1153/D423 :                         	 XPAL	P1			; point P1 to program memory
    1154/D423 :                         	 LDI	0			; mark variables' storage as empty
    1155/D423 :                         	 ST	(P1)			; store zero at begin
    1156/D423 :                         	 ST	BASMODE(P2)		; clear command/run flag
    1157/D423 : [1149]                  	ENDIF
    1158/D423 : C4 1F                   	LDI	0x1F
    1159/D425 : CA A2                   	ST	-94(P2)
    1160/D427 : (MACRO)[8]              	CALL	CLRSTK			; clear BASIC stack
    1160/D427 : 3F                               XPPC   P3
    1160/D428 : E4                               DB     H(CLRSTK)
    1160/D429 : C6                               DB     L(CLRSTK)
    1161/D42A : (MACRO)[9]              	CALL	VERS			; say HELLO to the user
    1161/D42A : 3F                               XPPC   P3
    1161/D42B : EF                               DB     H(VERS)
    1161/D42C : 51                               DB     L(VERS)
    1162/D42D : (MACRO)[10]             	CALL	MEMSIZ			; report memory size
    1162/D42D : 3F                               XPPC   P3
    1162/D42E : D5                               DB     H(MEMSIZ)
    1162/D42F : F3                               DB     L(MEMSIZ)
    1163/D430 : C4 1C                   	LDI	L(SUBSTK)-2		; initialize stack offset
    1164/D432 : CA E3                   	ST	SUBOFF(P2)		; store default top of CALL/RTRN stack
    1165/D434 : 40                      	LDE				; E holds offset for FREE message
    1166/D435 : (MACRO)[11]             MSGOUT:	CALL	MESG			; print messages (offset in A)
    1166/D435 : 3F                               XPPC   P3
    1166/D436 : D6                               DB     H(MESG)
    1166/D437 : 55                               DB     L(MESG)
    1167/D438 : C4 48                   	LDI	72			; max. characters per line
    1168/D43A : CA 00                   	ST	(P2)
    1169/D43C : C4 3E                   	LDI	_PRMPT			; set mode to "COMMAND PROMPT"
    1170/D43E : CA 7F                   	ST	BASMODE(P2)		; store command/run flag
    1171/D440 : C4 A4                   	LDI	L(ILCSTK)
    1172/D442 : CA F9                   	ST	ILCOFF(P2)		; store top of ILCALL/ILRTRN stack
    1173/D444 : C4 60                   	LDI	L(AEXSTK)		; initialize arithmetics stack
    1174/D446 : CA FD                   	ST	AEXOFF(P2)		; store default offset to arithmetics stack
    1175/D448 : C4 D8                   	LDI	H(ILTBL)		; get ILTBL.H
    1176/D44A : CA FE                   	ST	-2(P2)			; store
    1177/D44C : C4 A2                   	LDI	L(ILTBL)		; get ILTBL.L
    1178/D44E : CA FF                   	ST	-1(P2)			; store
    1179/D450 : (MACRO)[12]             	CALL	LINE			; print new line (to finish message)
    1179/D450 : 3F                               XPPC   P3
    1179/D451 : E0                               DB     H(LINE)
    1179/D452 : FE                               DB     L(LINE)
    1180/D453 : C4 1A                   	LDI	L(SUBSTK)-4		; reserve bytes on CALL/RTRN stack
    1181/D455 : CA E3                   	ST	SUBOFF(P2)		; set initial value for P2.L
    1182/D457 :                         
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 23 - 10/31/2025 04:19:39 PM


    1183/D457 : C2 FF                   SPLOAD:	LD	-1(P2)			; get call ADDR.L
    1184/D459 : 33                      	XPAL	P3
    1185/D45A : C2 FE                   	LD	-2(P2)			; get call ADDR.H
    1186/D45C : DC C0                   	ORI	0xC0			; set bits 7:6 for valid high byte
    1187/D45E : 37                      	XPAH	P3
    1188/D45F :                         
    1189/D45F : C3 01                   SPTEST:	LD	1(P3)			; get second (low) byte from IL code
    1190/D461 : CA FF                   	ST	-1(P2)			; store
    1191/D463 : C7 02                   	LD	@2(P3)			; get first (high) byte from IL code
    1192/D465 : 98 75                   	JZ	RTFUNC			; return if zero
    1193/D467 : CA FE                   	ST	-2(P2)			; store
    1194/D469 : D4 E0                   	ANI	(JMPBIT+TSTBIT+CALBIT)	; only test IL control (upper 3) bits
    1195/D46B : 98 5E                   	JZ	GOFUNC			; no bits set, must be ILCALL
    1196/D46D : 94 E8                   	JP	SPLOAD
    1197/D46F : E4 E0                   	XRI	(JMPBIT+TSTBIT+CALBIT)
    1198/D471 : 9C 7D                   	JNZ	TESTLP
    1199/D473 : C3 FF                   	LD	-1(P3)			; load call ADDR.L
    1200/D475 : 33                      	XPAL	P3
    1201/D476 : CA FF                   	ST	-1(P2)			; save prev P3.L
    1202/D478 : C2 FE                   	LD	-2(P2)			; load call ADDR.H
    1203/D47A : 37                      	XPAH	P3
    1204/D47B : CA FE                   	ST	-2(P2)			; save prev P3.H
    1205/D47D : C7 FF                   SPEXEC:	LD	@-1(P3)			; decrease P3 by 1 for PC prefetch
    1206/D47F : 40                      	LDE
    1207/D480 :                         
    1208/D480 :                         	; The central routine in the I.L. Supervisor. This is
    1209/D480 :                         	; where it all happens, and this is what the P3 pointer
    1210/D480 :                         	; usually is set to. We can jump here, or we can do far
    1211/D480 :                         	; jumps to co-routines in this block by using a relative
    1212/D480 :                         	; offset to the P3 pointer (the SV_xxx values above.)
    1213/D480 :                         	;
    1214/D480 : =>UNDEFINED             	IFDEF DEBUG
    1215/D480 :                         	 ASSERT	* == SV_BASE+0x0080	; **MUST** BE HERE!!
    1216/D480 : [1214]                  	ENDIF
    1217/D480 : 3F                      SPRVSR:	XPPC	P3			; supervisor for call and return
    1218/D481 : 01                      	XAE				; save A in E, content of E is lost!
    1219/D482 : C7 01                   	LD	@1(P3)			; skip last byte of ret addr, is 0x3F
    1220/D484 : C3 00                   	LD	(P3)			; grab first byte in macro
    1221/D486 : 98 31                   	JZ	SPRTN			; if zero, it is a return from subroutine
    1222/D488 : =>DEFINED               	IFDEF	SCALLS
    1223/D488 : 94 95                   	 JP	SCALL1			; if > 0, two-byte system call
    1224/D48A : E4 90                   	 XRI	0x90			; is it a return from SYSCALL ?
    1225/D48C : 98 1F                   	 JZ	SYSRTN			; if zero, it is a return from SYSCALL
    1226/D48E : [1222]                  	ENDIF
    1227/D48E : C2 E3                   	LD	SUBOFF(P2)		; reset P2.L to initial state
    1228/D490 : 32                      	XPAL	P2
    1229/D491 : C7 02                   	LD	@2(P3)			; re-get first byte in macro, advance two bytes
    1230/D493 : CA FE                   	ST	-2(P2)			; store
    1231/D495 : C3 FF                   	LD	-1(P3)			; get second byte in macro
    1232/D497 : 33                      	XPAL	P3			; set low byte of addr
    1233/D498 : CE FF                   	ST	@-1(P2)			; decrease and store prev value P3.L
    1234/D49A : C2 FF                   	LD	-1(P2)			; re-get first byte of macro
    1235/D49C : 37                      	XPAH	P3			; set high byte of addr
    1236/D49D : CE FF                   	ST	@-1(P2)			; decrease and store prev value P3.H
    1237/D49F : C4 80                   	LDI	STKMID			; initialize stack..
    1238/D4A1 : 32                      	XPAL	P2
    1239/D4A2 : CA E3                   	ST	SUBOFF(P2)		; .. and store prev SUBSTACK.L
    1240/D4A4 : 9C D7                   	JNZ	SPEXEC			; go and execute
    1241/D4A6 : C4 BA                   RTNEST:	LDI	(M_NEST-M_BASE)		; 'NEST ERROR'
    1242/D4A8 : 01                      RTERRN:	XAE				; return with error offset in AC
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 24 - 10/31/2025 04:19:39 PM


    1243/D4A9 : C4 1E                   	LDI	L(SUBSTK)		; reset CALL/RTRN stack
    1244/D4AB : 90 10                   	JMP	SPRTN1
    1245/D4AD :                         SYSRTN:
    1246/D4AD : =>UNDEFINED             	IFDEF	KBPLUS
    1247/D4AD :                         	 LD	@-118(P2)		; reset P2.L back to STKMID
    1248/D4AD : [1246]                  	ENDIF
    1249/D4AD : 90 0A                   	JMP	SPRTN
    1250/D4AF : 90 AE                   SPTST1:	JMP	SPTEST
    1251/D4B1 : C4 0D                   SPLINE:	LDI	_CR
    1252/D4B3 : =>DEFINED               	IFDEF	SCALLS
    1253/D4B3 : (MACRO)[13]             	 SYSCALL	2
    1253/D4B3 : 3F                               XPPC   P3
    1253/D4B4 : 02                               DB     2
    1254/D4B5 : =>FALSE                 	ELSE
    1255/D4B5 :                         	 CALL	PUTASC
    1256/D4B5 : [1252]                  	ENDIF
    1257/D4B5 : C4 0A                   	LDI	_LF
    1258/D4B7 : =>DEFINED               	IFDEF	SCALLS
    1259/D4B7 : (MACRO)[14]             	 SYSCALL	2
    1259/D4B7 : 3F                               XPPC   P3
    1259/D4B8 : 02                               DB     2
    1260/D4B9 : =>FALSE                 	ELSE
    1261/D4B9 :                         	 CALL	PUTASC
    1262/D4B9 : [1258]                  	ENDIF
    1263/D4B9 : AA E3                   SPRTN:	ILD	SUBOFF(P2)		; adjust SUBSTK.L by two bytes up
    1264/D4BB : AA E3                   	ILD	SUBOFF(P2)
    1265/D4BD : 32                      SPRTN1:	XPAL	P2
    1266/D4BE : C2 FF                   	LD	-1(P2)
    1267/D4C0 : 33                      	XPAL	P3
    1268/D4C1 : C2 FE                   	LD	-2(P2)
    1269/D4C3 : 37                      	XPAH	P3
    1270/D4C4 : C4 80                   	LDI	STKMID			; reset stack
    1271/D4C6 : 32                      	XPAL	P2
    1272/D4C7 : 90 B4                   	JMP	SPEXEC
    1273/D4C9 : 90 8C                   SPLOD2:	JMP	SPLOAD
    1274/D4CB : BA F9                   GOFUNC:	DLD	ILCOFF(P2)		; adjust ILCSTK.L by two down
    1275/D4CD : BA F9                   	DLD	ILCOFF(P2)
    1276/D4CF : 94 D5                   	JP	RTNEST
    1277/D4D1 : 32                      	XPAL	P2
    1278/D4D2 : 33                      	XPAL	P3
    1279/D4D3 : CA 01                   	ST	1(P2)
    1280/D4D5 : 37                      	XPAH	P3
    1281/D4D6 : CA 00                   	ST	(P2)
    1282/D4D8 : 33                      	XPAL	P3
    1283/D4D9 : 32                      	XPAL	P2
    1284/D4DA : 90 ED                   	JMP	SPLOD2
    1285/D4DC : AA F9                   RTFUNC:	ILD	ILCOFF(P2)		; adjust ILCSTK.L by two up
    1286/D4DE : AA F9                   	ILD	ILCOFF(P2)
    1287/D4E0 : 32                      	XPAL	P2
    1288/D4E1 : C2 FF                   	LD	-1(P2)
    1289/D4E3 : 33                      	XPAL	P3
    1290/D4E4 : C2 FE                   	LD	-2(P2)
    1291/D4E6 : 37                      	XPAH	P3
    1292/D4E7 : C4 80                   	LDI	STKMID			; reset stack
    1293/D4E9 : 32                      	XPAL	P2
    1294/D4EA : 90 C3                   SPTST2:	JMP	SPTST1			; only stepping stone to avoid too far jumps
    1295/D4EC :                         
    1296/D4EC : C4 EB                   VALERR:	LDI	(M_VALU-M_BASE)		; 'VALUE ERROR'
    1297/D4EE : 90 B8                   	JMP	RTERRN
    1298/D4F0 :                         
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 25 - 10/31/2025 04:19:39 PM


    1299/D4F0 :                         ; FIXME:
    1300/D4F0 :                         ; uncertain if space eating always needed, in principle only for TSTVAR.
    1301/D4F0 :                         ; TSTSTR tests for <cr> with leading spaces, in principle now needed only for token.
    1302/D4F0 : C5 01                   TESTLP:	LD	@1(P1)			; get byte from program and increase
    1303/D4F2 : E4 20                   	XRI	' '			; is it <space> ?
    1304/D4F4 : 98 FA                   	JZ	TESTLP			; yes, eat it
    1305/D4F6 : C2 FE                   	LD	-2(P2)
    1306/D4F8 : D4 60                   	ANI	(TSTBIT+CALBIT)		; look at bits 6:5 (TSTSTR or TSTNUM or TSTVAR)
    1307/D4FA : 9C 0A                   	JNZ	TESTB6			; jump for TSTNUM or TSTVAR
    1308/D4FC : C1 FF                   	LD	-1(P1)			; TSTSTR, load prev byte from program
    1309/D4FE : E7 01                   	XOR	@1(P3)
    1310/D500 : 98 E8                   	JZ	SPTST2
    1311/D502 : C5 FF                   	LD	@-1(P1)			; decrease and load byte from program
    1312/D504 : 90 C3                   	JMP	SPLOD2
    1313/D506 : E4 40                   TESTB6:	XRI	TSTBIT			; test for number (bit6=1)
    1314/D508 : 98 35                   	JZ	TESTN			; could be, jump to asure
    1315/D50A : C1 FF                   	LD	-1(P1)			; get previous byte from program
    1316/D50C : 01                      	XAE				; now test for variable,
    1317/D50D : 03                      	SCL				; must begin with letter
    1318/D50E : 40                      	LDE
    1319/D50F : FC 5B                   	CAI	'Z'+1			; no beginning letter
    1320/D511 : 94 04                   	JP	LVTST1			; leave test
    1321/D513 : F4 1A                   	ADI	26			; 'Z'-'A'+1
    1322/D515 : 94 0C                   	JP	LKVAR			; found letter
    1323/D517 : C2 FE                   LVTST1:	LD	-2(P2)
    1324/D519 : D4 DF                   	ANI	0xFF ! CALBIT		; clear TSTVAR = CALBIT
    1325/D51B : CA FE                   	ST	-2(P2)
    1326/D51D : C5 FF                   LVTST2:	LD	@-1(P1)			; decrease P1 and get previous byte
    1327/D51F : 90 A8                   	JMP	SPLOD2
    1328/D521 : 90 C9                   VALER2:	JMP	VALERR
    1329/D523 : 03                      LKVAR:	SCL				; beginning letter found, got more ?
    1330/D524 : C1 00                   	LD	(P1)			; get current byte from program
    1331/D526 : FC 5B                   	CAI	'Z'+1
    1332/D528 : 94 0F                   	JP	LVTST3			; no more letter found
    1333/D52A : F4 1A                   	ADI	26			; 'Z'-'A'+1
    1334/D52C : 94 BC                   	JP	SPTST2			; found letter
    1335/D52E : 03                      	SCL
    1336/D52F : C1 00                   	LD	(P1)
    1337/D531 : FC 3A                   	CAI	'9'+1
    1338/D533 : 94 04                   	JP	LVTST3			; no digit
    1339/D535 : F4 0A                   	ADI	10			; '9'-'0'+1
    1340/D537 : 94 B1                   	JP	SPTST2			; next test
    1341/D539 : 40                      LVTST3:	LDE
    1342/D53A : DC 80                   	ORI	0x80			; set bit7 to terminate variable
    1343/D53C : 01                      	XAE
    1344/D53D : 90 AB                   SPTST3:	JMP	SPTST2			; next test
    1345/D53F :                         
    1346/D53F : CA E8                   TESTN:	ST	-24(P2)			; clear temporary digit counter
    1347/D541 : C1 FF                   	LD	-1(P1)			; get previous byte from program
    1348/D543 : 03                      TSTN1:	SCL
    1349/D544 : FC 3A                   	CAI	'9'+1
    1350/D546 : 94 0C                   	JP	TSTN3			; no digit
    1351/D548 : F4 0A                   	ADI	10			; '9'-'0'+1
    1352/D54A : 9C 06                   	JNZ	TSTN2			; digit is not (leading) zero
    1353/D54C : AA E8                   	ILD	-24(P2)			; increase temporary digit counter
    1354/D54E : C5 01                   	LD	@1(P1)			; get current byte and increase
    1355/D550 : 90 F1                   	JMP	TSTN1			; go for next test
    1356/D552 : 94 0A                   TSTN2:	JP	TSTN4			; go store digit
    1357/D554 : C2 E8                   TSTN3:	LD	-24(P2)			; was there any digit
    1358/D556 : 98 C5                   	JZ	LVTST2			; if not leave test
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 26 - 10/31/2025 04:19:39 PM


    1359/D558 : C5 FF                   	LD	@-1(P1)			; decrease and get byte from program
    1360/D55A : C4 00                   	LDI	0
    1361/D55C : CA E8                   	ST	-24(P2)			; clear temporary counter again
    1362/D55E : 01                      TSTN4:	XAE
    1363/D55F : C2 FD                   	LD	AEXOFF(P2)		; setup arithmetics stack
    1364/D561 : 32                      	XPAL	P2
    1365/D562 : C4 96                   	LDI	0x96
    1366/D564 :                         ; NOTE:	b'10010110' is stored as exponent, means b'00010110' = 22 decimal
    1367/D564 :                         ;	MSB most, LSB least significant byte
    1368/D564 : CE FC                   	ST	@-4(P2)			; reserve four bytes on stack
    1369/D566 : C4 00                   	LDI	0			; clear mantissa,
    1370/D568 : CA 01                   	ST	1(P2)			; fractional point is at MSB between bit7 and bit6
    1371/D56A : CA 02                   	ST	2(P2)
    1372/D56C : 40                      	LDE
    1373/D56D : CA 03                   	ST	3(P2)			; store digit out of E in LSB
    1374/D56F : 03                      TSTN5:	SCL
    1375/D570 : C5 01                   	LD	@1(P1)			; load current byte and increase
    1376/D572 : FC 3A                   	CAI	'9'+1
    1377/D574 : 94 04                   	JP	TSTN6			; no digit
    1378/D576 : F4 0A                   	ADI	10			; '9'-'0'+1
    1379/D578 : 94 13                   	JP	TSTN10			; is digit
    1380/D57A : C5 FF                   TSTN6:	LD	@-1(P1)			; reset to previous byte
    1381/D57C : C2 01                   TSTN7:	LD	1(P2)			; load MSB of mantissa
    1382/D57E : F2 01                   	ADD	1(P2)			; shift bit left, bit6 -> bit7 in A
    1383/D580 : E2 01                   	XOR	1(P2)
    1384/D582 : 94 54                   	JP	TSTN9			; jump if bit6 and bit7 were set
    1385/D584 : C4 80                   TSTN8:	LDI	STKMID
    1386/D586 : 32                      	XPAL	P2
    1387/D587 : CA FD                   	ST	AEXOFF(P2)		; save arithmetics stack low
    1388/D589 : 90 B2                   	JMP	SPTST3			; go back to I.L.
    1389/D58B : 90 94                   VALER1:	JMP	VALER2			; only stepping stone to avoid too far jumps
    1390/D58D : 01                      TSTN10:	XAE				; save new digit in E
    1391/D58E : 02                      	CCL				; shift mantissa left by 1
    1392/D58F : C2 03                   	LD	3(P2)
    1393/D591 : F2 03                   	ADD	3(P2)
    1394/D593 : CA 03                   	ST	3(P2)
    1395/D595 : CA FF                   	ST	-1(P2)			; temporary store result 4 bytes lower
    1396/D597 : C2 02                   	LD	2(P2)
    1397/D599 : F2 02                   	ADD	2(P2)
    1398/D59B : CA 02                   	ST	2(P2)
    1399/D59D : CA FE                   	ST	-2(P2)
    1400/D59F : C2 01                   	LD	1(P2)
    1401/D5A1 : F2 01                   	ADD	1(P2)
    1402/D5A3 : CA 01                   	ST	1(P2)
    1403/D5A5 : CA FD                   	ST	-3(P2)
    1404/D5A7 : C4 04                   	LDI	4			; load shift counter
    1405/D5A9 : CA FC                   	ST	-4(P2)			; store 4 bytes lower
    1406/D5AB : C2 03                   TSTN11:	LD	3(P2)			; perform another shift
    1407/D5AD : F2 FF                   	ADD	-1(P2)
    1408/D5AF : CA 03                   	ST	3(P2)
    1409/D5B1 : C2 02                   	LD	2(P2)
    1410/D5B3 : F2 FE                   	ADD	-2(P2)
    1411/D5B5 : CA 02                   	ST	2(P2)
    1412/D5B7 : C2 01                   	LD	1(P2)
    1413/D5B9 : F2 FD                   	ADD	-3(P2)
    1414/D5BB : CA 01                   	ST	1(P2)
    1415/D5BD : D4 80                   	ANI	0x80
    1416/D5BF : 9C CA                   	JNZ	VALER1			; bit7 is set, throw value error
    1417/D5C1 : BA FC                   	DLD	-4(P2)			; decrease shift counter
    1418/D5C3 : 9C E6                   	JNZ	TSTN11			; and shift again
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 27 - 10/31/2025 04:19:39 PM


    1419/D5C5 : 01                      	XAE				; add in new digit, E holds zero
    1420/D5C6 : F2 03                   	ADD	3(P2)
    1421/D5C8 : CA 03                   	ST	3(P2)
    1422/D5CA : 40                      	LDE
    1423/D5CB : F2 02                   	ADD	2(P2)
    1424/D5CD : CA 02                   	ST	2(P2)
    1425/D5CF : 40                      	LDE
    1426/D5D0 : F2 01                   	ADD	1(P2)
    1427/D5D2 : CA 01                   	ST	1(P2)
    1428/D5D4 : 94 99                   	JP	TSTN5			; try for more digits
    1429/D5D6 : 90 B3                   	JMP	VALER1			; bit7 is set, throw value error
    1430/D5D8 : C2 00                   TSTN9:	LD	(P2)			; test exponent
    1431/D5DA : 98 A8                   	JZ	TSTN8			; zero, we're done
    1432/D5DC : BA 00                   	DLD	(P2)			; decrease exponent
    1433/D5DE : 02                      	CCL				; shift mantissa left by 1
    1434/D5DF : C2 03                   	LD	3(P2)
    1435/D5E1 : F2 03                   	ADD	3(P2)
    1436/D5E3 : CA 03                   	ST	3(P2)
    1437/D5E5 : C2 02                   	LD	2(P2)
    1438/D5E7 : F2 02                   	ADD	2(P2)
    1439/D5E9 : CA 02                   	ST	2(P2)
    1440/D5EB : C2 01                   	LD	1(P2)
    1441/D5ED : F2 01                   	ADD	1(P2)
    1442/D5EF : CA 01                   	ST	1(P2)
    1443/D5F1 : 90 89                   	JMP	TSTN7			; try again
    1444/D5F3 :                         
    1445/D5F3 :                         ;**************************************
    1446/D5F3 :                         ;*    PRINT AVAILABLE MEMORY SIZE     *
    1447/D5F3 :                         ;**************************************
    1448/D5F3 :                         ;
    1449/D5F3 :                         ; NOTE:	Count memory bytes in the available pages, leave out page 0,
    1450/D5F3 :                         ;	 so first accessible page is 1, highest countable page is 7.
    1451/D5F3 :                         ;	Assume contiguous memory block at least in page 1, occupied
    1452/D5F3 :                         ;	 place by an existent program is taken into account.
    1453/D5F3 :                         ;	Last page holds max. 3072 bytes until beginning of STACK.
    1454/D5F3 :                         ;
    1455/D5F3 : C4 00                   MEMSIZ:	LDI	0
    1456/D5F5 : CA F8                   	ST	NUMLO(P2)		; set memsize to zero
    1457/D5F7 : CA F7                   	ST	NUMHI(P2)
    1458/D5F9 : C2 84                   	LD	PAGES(P2)
    1459/D5FB : CA E8                   	ST	-24(P2)			; temporary store number of pages
    1460/D5FD : C4 10                   	LDI	0x10			; first page high byte
    1461/D5FF : 31                      	XPAL	P1
    1462/D600 : C4 02                   MEM1:	LDI	2			; position of first byte in line
    1463/D602 : 31                      	XPAL	P1			; use pointer P3
    1464/D603 : 35                      	XPAH	P1
    1465/D604 : C1 00                   MEM2:	LD	(P1)			; get current program byte
    1466/D606 : E4 FF                   	XRI	0xFF			; is it first byte of end termination ?
    1467/D608 : 9C 06                   	JNZ	MEM3			; no, go ahead
    1468/D60A : C1 01                   	LD	1(P1)
    1469/D60C : E4 FF                   	XRI	0xFF			; do we have second byte ?
    1470/D60E : 98 07                   	JZ	MEM4			; yes, we are done
    1471/D610 : C1 02                   MEM3:	LD	2(P1)
    1472/D612 : 01                      	XAE
> > > NIBLFP.asm(1473):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    1473/D613 : C5 80                   	LD	@EREG(P1)		; advance to next program line
    1474/D615 : 90 ED                   	JMP	MEM2
    1475/D617 : C5 02                   MEM4:	LD	@2(P1)			; advance to first free byte
    1476/D619 : 31                      	XPAL	P1			; store P1 as TOP
    1477/D61A : CA 86                   	ST	PGTOPL(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 28 - 10/31/2025 04:19:39 PM


    1478/D61C : 02                      	CCL
    1479/D61D : 35                      	XPAH	P1
    1480/D61E : CA 85                   	ST	PGTOPH(P2)
    1481/D620 : F4 10                   	ADI	0x10			; calculate next page high
    1482/D622 : D4 F0                   	ANI	0xF0			; set lowest 4 bits to zero
    1483/D624 : 31                      	XPAL	P1
    1484/D625 : 03                      	SCL				; now calculate free memory on page
    1485/D626 : C4 00                   	LDI	0			; subtract TOP from end of page
    1486/D628 : FA 86                   	CAD	PGTOPL(P2)
    1487/D62A : CA 86                   	ST	PGTOPL(P2)		; store as FREE.L
    1488/D62C : C4 00                   	LDI	0
    1489/D62E : FA 85                   	CAD	PGTOPH(P2)
    1490/D630 : D4 0F                   	ANI	0x0F			; only last 4 bits are relevant
    1491/D632 : CA 85                   	ST	PGTOPH(P2)		; store as FREE.H
    1492/D634 : 02                      	CCL
    1493/D635 : C2 86                   	LD	PGTOPL(P2)		; add to memsize in STACK -9,-8
    1494/D637 : F2 F8                   	ADD	NUMLO(P2)
    1495/D639 : CA F8                   	ST	NUMLO(P2)
    1496/D63B : C2 85                   	LD	PGTOPH(P2)
    1497/D63D : F2 F7                   	ADD	NUMHI(P2)
    1498/D63F : CA F7                   	ST	NUMHI(P2)
    1499/D641 : BA E8                   	DLD	-24(P2)			; decrease number of pages
    1500/D643 : 9C BB                   	JNZ	MEM1
    1501/D645 : 03                      	SCL				; subtract 1024 bytes for STACK
    1502/D646 : C2 F7                   	LD	NUMHI(P2)
    1503/D648 : FC 04                   	CAI	4
    1504/D64A : CA F7                   	ST	NUMHI(P2)
    1505/D64C : (MACRO)[15]             	CALL	PRNUM			; print memsize
    1505/D64C : 3F                               XPPC   P3
    1505/D64D : D2                               DB     H(PRNUM)
    1505/D64E : 18                               DB     L(PRNUM)
    1506/D64F : C4 20                   	LDI	' '			; next print a space
    1507/D651 : =>DEFINED               	IFDEF	SCALLS
    1508/D651 : (MACRO)[16]             	 SYSCALL	2
    1508/D651 : 3F                               XPPC   P3
    1508/D652 : 02                               DB     2
    1509/D653 : =>FALSE                 	ELSE
    1510/D653 :                         	 CALL	PUTASC
    1511/D653 : [1507]                  	ENDIF
    1512/D653 : C4 0F                   	LDI	(M_FREE-M_BASE)		; set message offset
    1513/D655 :                         
    1514/D655 :                         
    1515/D655 :                         ;***************************
    1516/D655 :                         ;*  PRINT ERROR MESSAGES   *
    1517/D655 :                         ;***************************
    1518/D655 :                         ;
    1519/D655 :                         ; We use relative offsets to messages instead of absolute
    1520/D655 :                         ; addresses and adjust the message pointer by adding the E
    1521/D655 :                         ; register.
    1522/D655 :                         ;
    1523/D655 :                         ; If offset is NEGATIVE, it is an error, and we print a ?
    1524/D655 :                         ; first, then the error message, followed by a SPACE and
    1525/D655 :                         ; the word 'error'. If postive, we ONLY print the word
    1526/D655 :                         ; pointed to by the offset.
    1527/D655 :                         ;
    1528/D655 : CA 82                   MESG:	ST	MSGOFF(P2)		; store relative offset
    1529/D657 : 01                      	XAE				; save offset into E
    1530/D658 : (MACRO)[17]             	LDPI	P1,M_BASE		; set P1 to message base addr
    1530/D658 : C4 1D                            LDI    L(M_BASE)
    1530/D65A : 31                               XPAL   P1
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 29 - 10/31/2025 04:19:39 PM


    1530/D65B : C4 D7                            LDI    H(M_BASE)
    1530/D65D : 35                               XPAH   P1
> > > NIBLFP.asm(1531):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    1531/D65E : C5 80                   	LD	@EREG(P1)		; adjust pointer
    1532/D660 : 40                      	LDE
    1533/D661 : 94 04                   	JP	MESG1			; not error, skip
    1534/D663 : C4 3F                   	LDI	_QMARK			; print a question mark (error!)
    1535/D665 : =>DEFINED               	IFDEF	SCALLS
    1536/D665 : (MACRO)[18]             	 SYSCALL	2
    1536/D665 : 3F                               XPPC   P3
    1536/D666 : 02                               DB     2
    1537/D667 : =>FALSE                 	ELSE
    1538/D667 :                         	 CALL	PUTASC
    1539/D667 : [1535]                  	ENDIF
    1540/D667 : C5 01                   MESG1:	LD	@1(P1)			; now print the message
    1541/D669 : =>DEFINED               	IFDEF	SCALLS
    1542/D669 : (MACRO)[19]             	 SYSCALL	2
    1542/D669 : 3F                               XPPC   P3
    1542/D66A : 02                               DB     2
    1543/D66B : =>FALSE                 	ELSE
    1544/D66B :                         	 CALL	PUTASC
    1545/D66B : [1541]                  	ENDIF
    1546/D66B : 94 FA                   	JP	MESG1
    1547/D66D : C2 82                   	LD	MSGOFF(P2)		; load used offset
    1548/D66F : 94 08                   	JP	MESG2			; no error message, skip
    1549/D671 : C4 20                   	LDI	' '			; print a space before ERROR
    1550/D673 : =>DEFINED               	IFDEF	SCALLS
    1551/D673 : (MACRO)[20]             	 SYSCALL	2
    1551/D673 : 3F                               XPPC   P3
    1551/D674 : 02                               DB     2
    1552/D675 : =>FALSE                 	ELSE
    1553/D675 :                         	 CALL	PUTASC
    1554/D675 : [1550]                  	ENDIF
    1555/D675 : C4 05                   	LDI	(M_ERR-M_BASE)		; set 'ERROR' message offset
    1556/D677 : 90 DC                   	JMP	MESG
    1557/D679 : E4 0F                   MESG2:	XRI	(M_FREE-M_BASE)		; was it 'FREE' message ?
    1558/D67B : 9C 02                   	JNZ	LNUM			; no, print line number
    1559/D67D : 93 30                   	JMP	SV_LINE(P3)		; return and print newline
    1560/D67F :                         
    1561/D67F :                         
    1562/D67F :                         ;***************************
    1563/D67F :                         ;* MESSAGE AT LINE NUMBER  *
    1564/D67F :                         ;***************************
    1565/D67F :                         ;
    1566/D67F : C2 7F                   LNUM:	LD	BASMODE(P2)		; increase command/run flag
    1567/D681 : 94 0F                   	JP	LNUM1			; return if in command mode
    1568/D683 : C4 20                   	LDI	' '			; print <space>
    1569/D685 : =>DEFINED               	IFDEF	SCALLS
    1570/D685 : (MACRO)[21]             	 SYSCALL	2
    1570/D685 : 3F                               XPPC   P3
    1570/D686 : 02                               DB     2
    1571/D687 : =>FALSE                 	ELSE
    1572/D687 :                         	 CALL	PUTASC
    1573/D687 : [1569]                  	ENDIF
    1574/D687 : C4 41                   	LDI	'A'			; print "AT"
    1575/D689 : =>DEFINED               	IFDEF	SCALLS
    1576/D689 : (MACRO)[22]             	 SYSCALL	2
    1576/D689 : 3F                               XPPC   P3
    1576/D68A : 02                               DB     2
    1577/D68B : =>FALSE                 	ELSE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 30 - 10/31/2025 04:19:39 PM


    1578/D68B :                         	 CALL	PUTASC
    1579/D68B : [1575]                  	ENDIF
    1580/D68B : C4 54                   	LDI	'T'
    1581/D68D : =>DEFINED               	IFDEF	SCALLS
    1582/D68D : (MACRO)[23]             	 SYSCALL	2
    1582/D68D : 3F                               XPPC   P3
    1582/D68E : 02                               DB     2
    1583/D68F : =>FALSE                 	ELSE
    1584/D68F :                         	 CALL	PUTASC
    1585/D68F : [1581]                  	ENDIF
    1586/D68F : (MACRO)[24]             	CALL	PRNUM			; print line number
    1586/D68F : 3F                               XPPC   P3
    1586/D690 : D2                               DB     H(PRNUM)
    1586/D691 : 18                               DB     L(PRNUM)
    1587/D692 : C2 82                   LNUM1:	LD	MSGOFF(P2)		; load last message offset
    1588/D694 : E4 05                   	XRI	(M_ERR-M_BASE)		; minus 'ERROR' message offset
    1589/D696 : 9F 38                   	JNZ	SV_RTRN(P3)
    1590/D698 : CA 7F                   	ST	BASMODE(P2)		; clear command / run flag
    1591/D69A : C4 0A                   	LDI	(M_RDY-M_BASE)		; set 'READY' message offset
    1592/D69C : (MACRO)[25]             	CALL	LINE
    1592/D69C : 3F                               XPPC   P3
    1592/D69D : E0                               DB     H(LINE)
    1592/D69E : FE                               DB     L(LINE)
    1593/D69F : 90 B4                   	JMP	MESG
    1594/D6A1 :                         
    1595/D6A1 :                         
    1596/D6A1 :                         ;***************************
    1597/D6A1 :                         ;*        MESSAGES         *
    1598/D6A1 :                         ;***************************
    1599/D6A1 :                         ;
    1600/D6A1 : (MACRO)[26]             M_AREA:	MESG	"ARE",'A'
    1600/D6A1 : 41 52 45                         DB     "ARE"
    1600/D6A4 : =>NOT BLANK                      IFNB   'A'
    1600/D6A4 : C1                                DB    'A'|0x80
    1600/D6A5 : [1600]                           ENDIF
    1601/D6A5 : (MACRO)[27]             M_ARG:	MESG	"ARGUMEN",'T'
    1601/D6A5 : 41 52 47 55 4D 45 4E             DB     "ARGUMEN"
    1601/D6AC : =>NOT BLANK                      IFNB   'T'
    1601/D6AC : D4                                DB    'T'|0x80
    1601/D6AD : [1601]                           ENDIF
    1602/D6AD : (MACRO)[28]             M_CASS:	MESG	"CAS",'S'
    1602/D6AD : 43 41 53                         DB     "CAS"
    1602/D6B0 : =>NOT BLANK                      IFNB   'S'
    1602/D6B0 : D3                                DB    'S'|0x80
    1602/D6B1 : [1602]                           ENDIF
    1603/D6B1 : (MACRO)[29]             M_CHAR:	MESG	"CHA",'R'
    1603/D6B1 : 43 48 41                         DB     "CHA"
    1603/D6B4 : =>NOT BLANK                      IFNB   'R'
    1603/D6B4 : D2                                DB    'R'|0x80
    1603/D6B5 : [1603]                           ENDIF
    1604/D6B5 : (MACRO)[30]             M_DEF:	MESG	"DEFIN",'E'
    1604/D6B5 : 44 45 46 49 4E                   DB     "DEFIN"
    1604/D6BA : =>NOT BLANK                      IFNB   'E'
    1604/D6BA : C5                                DB    'E'|0x80
    1604/D6BB : [1604]                           ENDIF
    1605/D6BB : (MACRO)[31]             M_DATA:	MESG	"DAT",'A'
    1605/D6BB : 44 41 54                         DB     "DAT"
    1605/D6BE : =>NOT BLANK                      IFNB   'A'
    1605/D6BE : C1                                DB    'A'|0x80
    1605/D6BF : [1605]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 31 - 10/31/2025 04:19:39 PM


    1606/D6BF : (MACRO)[32]             M_RDIM:	MESG	"RE"
    1606/D6BF : 52 45                            DB     "RE"
    1606/D6C1 : =>BLANK                          IFNB   
    1606/D6C1 :                                   DB    |0x80
    1606/D6C1 : [1606]                           ENDIF
    1607/D6C1 : (MACRO)[33]             M_DIM:	MESG	"DI",'M'
    1607/D6C1 : 44 49                            DB     "DI"
    1607/D6C3 : =>NOT BLANK                      IFNB   'M'
    1607/D6C3 : CD                                DB    'M'|0x80
    1607/D6C4 : [1607]                           ENDIF
    1608/D6C4 : (MACRO)[34]             M_DIV0:	MESG	"DIV/",'0'
    1608/D6C4 : 44 49 56 2F                      DB     "DIV/"
    1608/D6C8 : =>NOT BLANK                      IFNB   '0'
    1608/D6C8 : B0                                DB    '0'|0x80
    1608/D6C9 : [1608]                           ENDIF
    1609/D6C9 : (MACRO)[35]             M_ENDP:	MESG	"END",')'
    1609/D6C9 : 45 4E 44                         DB     "END"
    1609/D6CC : =>NOT BLANK                      IFNB   ')'
    1609/D6CC : A9                                DB    ')'|0x80
    1609/D6CD : [1609]                           ENDIF
    1610/D6CD : (MACRO)[36]             M_ENDQ:	MESG	"END",'"'
    1610/D6CD : 45 4E 44                         DB     "END"
    1610/D6D0 : =>NOT BLANK                      IFNB   '"'
    1610/D6D0 : A2                                DB    '"'|0x80
    1610/D6D1 : [1610]                           ENDIF
    1611/D6D1 : (MACRO)[37]             M_FOR:	MESG	"FO",'R'
    1611/D6D1 : 46 4F                            DB     "FO"
    1611/D6D3 : =>NOT BLANK                      IFNB   'R'
    1611/D6D3 : D2                                DB    'R'|0x80
    1611/D6D4 : [1611]                           ENDIF
    1612/D6D4 : (MACRO)[38]             M_HEX:	MESG	"HE",'X'
    1612/D6D4 : 48 45                            DB     "HE"
    1612/D6D6 : =>NOT BLANK                      IFNB   'X'
    1612/D6D6 : D8                                DB    'X'|0x80
    1612/D6D7 : [1612]                           ENDIF
    1613/D6D7 : (MACRO)[39]             M_NEST:	MESG	"NES",'T'
    1613/D6D7 : 4E 45 53                         DB     "NES"
    1613/D6DA : =>NOT BLANK                      IFNB   'T'
    1613/D6DA : D4                                DB    'T'|0x80
    1613/D6DB : [1613]                           ENDIF
    1614/D6DB : (MACRO)[40]             M_NEXT:	MESG	"NEX",'T'
    1614/D6DB : 4E 45 58                         DB     "NEX"
    1614/D6DE : =>NOT BLANK                      IFNB   'T'
    1614/D6DE : D4                                DB    'T'|0x80
    1614/D6DF : [1614]                           ENDIF
    1615/D6DF : (MACRO)[41]             M_NOGO:	MESG	"NOG",'O'
    1615/D6DF : 4E 4F 47                         DB     "NOG"
    1615/D6E2 : =>NOT BLANK                      IFNB   'O'
    1615/D6E2 : CF                                DB    'O'|0x80
    1615/D6E3 : [1615]                           ENDIF
    1616/D6E3 : (MACRO)[42]             M_OVRF:	MESG	"OVERFLO",'W'
    1616/D6E3 : 4F 56 45 52 46 4C 4F             DB     "OVERFLO"
    1616/D6EA : =>NOT BLANK                      IFNB   'W'
    1616/D6EA : D7                                DB    'W'|0x80
    1616/D6EB : [1616]                           ENDIF
    1617/D6EB : (MACRO)[43]             M_RAM:	MESG	"RA",'M'		; FIXME: unused (use for RAM testing)
    1617/D6EB : 52 41                            DB     "RA"
    1617/D6ED : =>NOT BLANK                      IFNB   'M'
    1617/D6ED : CD                                DB    'M'|0x80
    1617/D6EE : [1617]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 32 - 10/31/2025 04:19:39 PM


    1618/D6EE : (MACRO)[44]             M_RTRN:	MESG	"RETUR",'N'
    1618/D6EE : 52 45 54 55 52                   DB     "RETUR"
    1618/D6F3 : =>NOT BLANK                      IFNB   'N'
    1618/D6F3 : CE                                DB    'N'|0x80
    1618/D6F4 : [1618]                           ENDIF
    1619/D6F4 : (MACRO)[45]             M_SNTX:	MESG	"SYNTA",'X'
    1619/D6F4 : 53 59 4E 54 41                   DB     "SYNTA"
    1619/D6F9 : =>NOT BLANK                      IFNB   'X'
    1619/D6F9 : D8                                DB    'X'|0x80
    1619/D6FA : [1619]                           ENDIF
    1620/D6FA : (MACRO)[46]             M_STMT:	MESG	"STATEMEN",'T'
    1620/D6FA : 53 54 41 54 45 4D 45 4E          DB     "STATEMEN"
    1620/D702 : =>NOT BLANK                      IFNB   'T'
    1620/D702 : D4                                DB    'T'|0x80
    1620/D703 : [1620]                           ENDIF
    1621/D703 : (MACRO)[47]             M_UNTL:	MESG	"UNTI",'L'
    1621/D703 : 55 4E 54 49                      DB     "UNTI"
    1621/D707 : =>NOT BLANK                      IFNB   'L'
    1621/D707 : CC                                DB    'L'|0x80
    1621/D708 : [1621]                           ENDIF
    1622/D708 : (MACRO)[48]             M_VALU:	MESG	"VALU",'E'
    1622/D708 : 56 41 4C 55                      DB     "VALU"
    1622/D70C : =>NOT BLANK                      IFNB   'E'
    1622/D70C : C5                                DB    'E'|0x80
    1622/D70D : [1622]                           ENDIF
    1623/D70D : (MACRO)[49]             M_VAR:	MESG	"VARIABL",'E'
    1623/D70D : 56 41 52 49 41 42 4C             DB     "VARIABL"
    1623/D714 : =>NOT BLANK                      IFNB   'E'
    1623/D714 : C5                                DB    'E'|0x80
    1623/D715 : [1623]                           ENDIF
    1624/D715 : (MACRO)[50]             M_VRST:	MESG	"VARSTAC",'K'
    1624/D715 : 56 41 52 53 54 41 43             DB     "VARSTAC"
    1624/D71C : =>NOT BLANK                      IFNB   'K'
    1624/D71C : CB                                DB    'K'|0x80
    1624/D71D : [1624]                           ENDIF
    1625/D71D : =0xD71D                 M_BASE	= $				; message separator (see MSGOUT)
    1626/D71D : (MACRO)[51]             M_BRK:	MESG	"BREA",'K'
    1626/D71D : 42 52 45 41                      DB     "BREA"
    1626/D721 : =>NOT BLANK                      IFNB   'K'
    1626/D721 : CB                                DB    'K'|0x80
    1626/D722 : [1626]                           ENDIF
    1627/D722 : (MACRO)[52]             M_ERR:	MESG	"ERRO",'R'
    1627/D722 : 45 52 52 4F                      DB     "ERRO"
    1627/D726 : =>NOT BLANK                      IFNB   'R'
    1627/D726 : D2                                DB    'R'|0x80
    1627/D727 : [1627]                           ENDIF
    1628/D727 : (MACRO)[53]             M_RDY:	MESG	"READ",'Y'
    1628/D727 : 52 45 41 44                      DB     "READ"
    1628/D72B : =>NOT BLANK                      IFNB   'Y'
    1628/D72B : D9                                DB    'Y'|0x80
    1628/D72C : [1628]                           ENDIF
    1629/D72C : (MACRO)[54]             M_FREE:	MESG	"BYTES MEMORY FRE",'E'
    1629/D72C : 42 59 54 45 53 20 4D 45          DB     "BYTES MEMORY FRE"
         D734 : 4D 4F 52 59 20 46 52 45
    1629/D73C : =>NOT BLANK                      IFNB   'E'
    1629/D73C : C5                                DB    'E'|0x80
    1629/D73D : [1629]                           ENDIF
    1630/D73D :                         
    1631/D73D :                         
    1632/D73D :                         ;***************************
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 33 - 10/31/2025 04:19:39 PM


    1633/D73D :                         ;*       TOKEN TABLE       *
    1634/D73D :                         ;***************************
    1635/D73D :                         ;
    1636/D73D :                         TOKENS:
    1637/D73D : =0x80                   T_AUTO	= 0x80|0
    1638/D73D : (MACRO)[55]             	TOKEN	T_AUTO,"AUT",'O'
    1638/D73D : =>FALSE                          IF T_AUTO == 0x80|79
    1638/D73D :                                   ; Convert T_AUTO T_STAR to the more common '^' symbol.
    1638/D73D :                                   ; NOTE: if T_AUTO token is added or deleted, DO NOT forget to update this!
    1638/D73D :                                   DB    '^'
    1638/D73D : =>TRUE                           ELSE
    1638/D73D : 80                                DB    T_AUTO
    1638/D73E : [1638]                           ENDIF
    1638/D73E : 41 55 54                         DB     "AUT"
    1638/D741 : CF                               DB     'O'|0x80
    1639/D742 : =0x81                   T_BYE	= 0x80|1
    1640/D742 : (MACRO)[56]             	TOKEN	T_BYE,"BY",'E'
    1640/D742 : =>FALSE                          IF T_BYE == 0x80|79
    1640/D742 :                                   ; Convert T_BYE T_STAR to the more common '^' symbol.
    1640/D742 :                                   ; NOTE: if T_BYE token is added or deleted, DO NOT forget to update this!
    1640/D742 :                                   DB    '^'
    1640/D742 : =>TRUE                           ELSE
    1640/D742 : 81                                DB    T_BYE
    1640/D743 : [1640]                           ENDIF
    1640/D743 : 42 59                            DB     "BY"
    1640/D745 : C5                               DB     'E'|0x80
    1641/D746 : =0x82                   T_CLEAR	= 0x80|2
    1642/D746 : (MACRO)[57]             	TOKEN	T_CLEAR,"CLEA",'R'
    1642/D746 : =>FALSE                          IF T_CLEAR == 0x80|79
    1642/D746 :                                   ; Convert T_CLEAR T_STAR to the more common '^' symbol.
    1642/D746 :                                   ; NOTE: if T_CLEAR token is added or deleted, DO NOT forget to update this!
    1642/D746 :                                   DB    '^'
    1642/D746 : =>TRUE                           ELSE
    1642/D746 : 82                                DB    T_CLEAR
    1642/D747 : [1642]                           ENDIF
    1642/D747 : 43 4C 45 41                      DB     "CLEA"
    1642/D74B : D2                               DB     'R'|0x80
    1643/D74C : =0x83                   T_CLOAD	= 0x80|3
    1644/D74C : (MACRO)[58]             	TOKEN	T_CLOAD,"CLOA",'D'
    1644/D74C : =>FALSE                          IF T_CLOAD == 0x80|79
    1644/D74C :                                   ; Convert T_CLOAD T_STAR to the more common '^' symbol.
    1644/D74C :                                   ; NOTE: if T_CLOAD token is added or deleted, DO NOT forget to update this!
    1644/D74C :                                   DB    '^'
    1644/D74C : =>TRUE                           ELSE
    1644/D74C : 83                                DB    T_CLOAD
    1644/D74D : [1644]                           ENDIF
    1644/D74D : 43 4C 4F 41                      DB     "CLOA"
    1644/D751 : C4                               DB     'D'|0x80
    1645/D752 : =0x84                   T_CSAVE	= 0x80|4
    1646/D752 : (MACRO)[59]             	TOKEN	T_CSAVE,"CSAV",'E'
    1646/D752 : =>FALSE                          IF T_CSAVE == 0x80|79
    1646/D752 :                                   ; Convert T_CSAVE T_STAR to the more common '^' symbol.
    1646/D752 :                                   ; NOTE: if T_CSAVE token is added or deleted, DO NOT forget to update this!
    1646/D752 :                                   DB    '^'
    1646/D752 : =>TRUE                           ELSE
    1646/D752 : 84                                DB    T_CSAVE
    1646/D753 : [1646]                           ENDIF
    1646/D753 : 43 53 41 56                      DB     "CSAV"
    1646/D757 : C5                               DB     'E'|0x80
    1647/D758 : =0x85                   T_EDIT	= 0x80|5
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 34 - 10/31/2025 04:19:39 PM


    1648/D758 : (MACRO)[60]             	TOKEN	T_EDIT,"EDI",'T'
    1648/D758 : =>FALSE                          IF T_EDIT == 0x80|79
    1648/D758 :                                   ; Convert T_EDIT T_STAR to the more common '^' symbol.
    1648/D758 :                                   ; NOTE: if T_EDIT token is added or deleted, DO NOT forget to update this!
    1648/D758 :                                   DB    '^'
    1648/D758 : =>TRUE                           ELSE
    1648/D758 : 85                                DB    T_EDIT
    1648/D759 : [1648]                           ENDIF
    1648/D759 : 45 44 49                         DB     "EDI"
    1648/D75C : D4                               DB     'T'|0x80
    1649/D75D : =0x86                   T_LIST	= 0x80|6
    1650/D75D : (MACRO)[61]             	TOKEN	T_LIST,"LIS",'T'
    1650/D75D : =>FALSE                          IF T_LIST == 0x80|79
    1650/D75D :                                   ; Convert T_LIST T_STAR to the more common '^' symbol.
    1650/D75D :                                   ; NOTE: if T_LIST token is added or deleted, DO NOT forget to update this!
    1650/D75D :                                   DB    '^'
    1650/D75D : =>TRUE                           ELSE
    1650/D75D : 86                                DB    T_LIST
    1650/D75E : [1650]                           ENDIF
    1650/D75E : 4C 49 53                         DB     "LIS"
    1650/D761 : D4                               DB     'T'|0x80
    1651/D762 : =0x87                   T_NEW	= 0x80|7
    1652/D762 : (MACRO)[62]             	TOKEN	T_NEW,"NE",'W'
    1652/D762 : =>FALSE                          IF T_NEW == 0x80|79
    1652/D762 :                                   ; Convert T_NEW T_STAR to the more common '^' symbol.
    1652/D762 :                                   ; NOTE: if T_NEW token is added or deleted, DO NOT forget to update this!
    1652/D762 :                                   DB    '^'
    1652/D762 : =>TRUE                           ELSE
    1652/D762 : 87                                DB    T_NEW
    1652/D763 : [1652]                           ENDIF
    1652/D763 : 4E 45                            DB     "NE"
    1652/D765 : D7                               DB     'W'|0x80
    1653/D766 : =0x88                   T_RUN	= 0x80|8
    1654/D766 : (MACRO)[63]             	TOKEN	T_RUN,"RU",'N'
    1654/D766 : =>FALSE                          IF T_RUN == 0x80|79
    1654/D766 :                                   ; Convert T_RUN T_STAR to the more common '^' symbol.
    1654/D766 :                                   ; NOTE: if T_RUN token is added or deleted, DO NOT forget to update this!
    1654/D766 :                                   DB    '^'
    1654/D766 : =>TRUE                           ELSE
    1654/D766 : 88                                DB    T_RUN
    1654/D767 : [1654]                           ENDIF
    1654/D767 : 52 55                            DB     "RU"
    1654/D769 : CE                               DB     'N'|0x80
    1655/D76A : =0x89                   T_VERS	= 0x80|9
    1656/D76A : (MACRO)[64]             	TOKEN	T_VERS,"VER",'S'
    1656/D76A : =>FALSE                          IF T_VERS == 0x80|79
    1656/D76A :                                   ; Convert T_VERS T_STAR to the more common '^' symbol.
    1656/D76A :                                   ; NOTE: if T_VERS token is added or deleted, DO NOT forget to update this!
    1656/D76A :                                   DB    '^'
    1656/D76A : =>TRUE                           ELSE
    1656/D76A : 89                                DB    T_VERS
    1656/D76B : [1656]                           ENDIF
    1656/D76B : 56 45 52                         DB     "VER"
    1656/D76E : D3                               DB     'S'|0x80
    1657/D76F : =0x89                   T_LAST	= T_VERS			; last command
    1658/D76F : =0x8A                   T_DATA	= 0x80|10
    1659/D76F : (MACRO)[65]             	TOKEN	T_DATA,"DAT",'A'
    1659/D76F : =>FALSE                          IF T_DATA == 0x80|79
    1659/D76F :                                   ; Convert T_DATA T_STAR to the more common '^' symbol.
    1659/D76F :                                   ; NOTE: if T_DATA token is added or deleted, DO NOT forget to update this!
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 35 - 10/31/2025 04:19:39 PM


    1659/D76F :                                   DB    '^'
    1659/D76F : =>TRUE                           ELSE
    1659/D76F : 8A                                DB    T_DATA
    1659/D770 : [1659]                           ENDIF
    1659/D770 : 44 41 54                         DB     "DAT"
    1659/D773 : C1                               DB     'A'|0x80
    1660/D774 : =0x8B                   T_DEF	= 0x80|11
    1661/D774 : (MACRO)[66]             	TOKEN	T_DEF,"DE",'F'
    1661/D774 : =>FALSE                          IF T_DEF == 0x80|79
    1661/D774 :                                   ; Convert T_DEF T_STAR to the more common '^' symbol.
    1661/D774 :                                   ; NOTE: if T_DEF token is added or deleted, DO NOT forget to update this!
    1661/D774 :                                   DB    '^'
    1661/D774 : =>TRUE                           ELSE
    1661/D774 : 8B                                DB    T_DEF
    1661/D775 : [1661]                           ENDIF
    1661/D775 : 44 45                            DB     "DE"
    1661/D777 : C6                               DB     'F'|0x80
    1662/D778 : =0x8C                   T_DIM	= 0x80|12
    1663/D778 : (MACRO)[67]             	TOKEN	T_DIM,"DI",'M'
    1663/D778 : =>FALSE                          IF T_DIM == 0x80|79
    1663/D778 :                                   ; Convert T_DIM T_STAR to the more common '^' symbol.
    1663/D778 :                                   ; NOTE: if T_DIM token is added or deleted, DO NOT forget to update this!
    1663/D778 :                                   DB    '^'
    1663/D778 : =>TRUE                           ELSE
    1663/D778 : 8C                                DB    T_DIM
    1663/D779 : [1663]                           ENDIF
    1663/D779 : 44 49                            DB     "DI"
    1663/D77B : CD                               DB     'M'|0x80
    1664/D77C : =0x8D                   T_DO	= 0x80|13
    1665/D77C : (MACRO)[68]             	TOKEN	T_DO,"D",'O'
    1665/D77C : =>FALSE                          IF T_DO == 0x80|79
    1665/D77C :                                   ; Convert T_DO T_STAR to the more common '^' symbol.
    1665/D77C :                                   ; NOTE: if T_DO token is added or deleted, DO NOT forget to update this!
    1665/D77C :                                   DB    '^'
    1665/D77C : =>TRUE                           ELSE
    1665/D77C : 8D                                DB    T_DO
    1665/D77D : [1665]                           ENDIF
    1665/D77D : 44                               DB     "D"
    1665/D77E : CF                               DB     'O'|0x80
    1666/D77F : =0x8E                   T_ELSE	= 0x80|14
    1667/D77F : (MACRO)[69]             	TOKEN	T_ELSE,"ELS",'E'
    1667/D77F : =>FALSE                          IF T_ELSE == 0x80|79
    1667/D77F :                                   ; Convert T_ELSE T_STAR to the more common '^' symbol.
    1667/D77F :                                   ; NOTE: if T_ELSE token is added or deleted, DO NOT forget to update this!
    1667/D77F :                                   DB    '^'
    1667/D77F : =>TRUE                           ELSE
    1667/D77F : 8E                                DB    T_ELSE
    1667/D780 : [1667]                           ENDIF
    1667/D780 : 45 4C 53                         DB     "ELS"
    1667/D783 : C5                               DB     'E'|0x80
    1668/D784 : =0x8F                   T_END	= 0x80|15
    1669/D784 : (MACRO)[70]             	TOKEN	T_END,"EN",'D'
    1669/D784 : =>FALSE                          IF T_END == 0x80|79
    1669/D784 :                                   ; Convert T_END T_STAR to the more common '^' symbol.
    1669/D784 :                                   ; NOTE: if T_END token is added or deleted, DO NOT forget to update this!
    1669/D784 :                                   DB    '^'
    1669/D784 : =>TRUE                           ELSE
    1669/D784 : 8F                                DB    T_END
    1669/D785 : [1669]                           ENDIF
    1669/D785 : 45 4E                            DB     "EN"
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 36 - 10/31/2025 04:19:39 PM


    1669/D787 : C4                               DB     'D'|0x80
    1670/D788 : =0x90                   T_FOR	= 0x80|16
    1671/D788 : (MACRO)[71]             	TOKEN	T_FOR,"FO",'R'
    1671/D788 : =>FALSE                          IF T_FOR == 0x80|79
    1671/D788 :                                   ; Convert T_FOR T_STAR to the more common '^' symbol.
    1671/D788 :                                   ; NOTE: if T_FOR token is added or deleted, DO NOT forget to update this!
    1671/D788 :                                   DB    '^'
    1671/D788 : =>TRUE                           ELSE
    1671/D788 : 90                                DB    T_FOR
    1671/D789 : [1671]                           ENDIF
    1671/D789 : 46 4F                            DB     "FO"
    1671/D78B : D2                               DB     'R'|0x80
    1672/D78C : =0x91                   T_GOSUB	= 0x80|17
    1673/D78C : (MACRO)[72]             	TOKEN	T_GOSUB,"GOSU",'B'
    1673/D78C : =>FALSE                          IF T_GOSUB == 0x80|79
    1673/D78C :                                   ; Convert T_GOSUB T_STAR to the more common '^' symbol.
    1673/D78C :                                   ; NOTE: if T_GOSUB token is added or deleted, DO NOT forget to update this!
    1673/D78C :                                   DB    '^'
    1673/D78C : =>TRUE                           ELSE
    1673/D78C : 91                                DB    T_GOSUB
    1673/D78D : [1673]                           ENDIF
    1673/D78D : 47 4F 53 55                      DB     "GOSU"
    1673/D791 : C2                               DB     'B'|0x80
    1674/D792 : =0x92                   T_GOTO	= 0x80|18
    1675/D792 : (MACRO)[73]             	TOKEN	T_GOTO,"GOT",'O'
    1675/D792 : =>FALSE                          IF T_GOTO == 0x80|79
    1675/D792 :                                   ; Convert T_GOTO T_STAR to the more common '^' symbol.
    1675/D792 :                                   ; NOTE: if T_GOTO token is added or deleted, DO NOT forget to update this!
    1675/D792 :                                   DB    '^'
    1675/D792 : =>TRUE                           ELSE
    1675/D792 : 92                                DB    T_GOTO
    1675/D793 : [1675]                           ENDIF
    1675/D793 : 47 4F 54                         DB     "GOT"
    1675/D796 : CF                               DB     'O'|0x80
    1676/D797 : =0x93                   T_IF	= 0x80|19
    1677/D797 : (MACRO)[74]             	TOKEN	T_IF,"I",'F'
    1677/D797 : =>FALSE                          IF T_IF == 0x80|79
    1677/D797 :                                   ; Convert T_IF T_STAR to the more common '^' symbol.
    1677/D797 :                                   ; NOTE: if T_IF token is added or deleted, DO NOT forget to update this!
    1677/D797 :                                   DB    '^'
    1677/D797 : =>TRUE                           ELSE
    1677/D797 : 93                                DB    T_IF
    1677/D798 : [1677]                           ENDIF
    1677/D798 : 49                               DB     "I"
    1677/D799 : C6                               DB     'F'|0x80
    1678/D79A : =0x94                   T_INPUT	= 0x80|20
    1679/D79A : (MACRO)[75]             	TOKEN	T_INPUT,"INPU",'T'
    1679/D79A : =>FALSE                          IF T_INPUT == 0x80|79
    1679/D79A :                                   ; Convert T_INPUT T_STAR to the more common '^' symbol.
    1679/D79A :                                   ; NOTE: if T_INPUT token is added or deleted, DO NOT forget to update this!
    1679/D79A :                                   DB    '^'
    1679/D79A : =>TRUE                           ELSE
    1679/D79A : 94                                DB    T_INPUT
    1679/D79B : [1679]                           ENDIF
    1679/D79B : 49 4E 50 55                      DB     "INPU"
    1679/D79F : D4                               DB     'T'|0x80
    1680/D7A0 : =0x95                   T_LINK	= 0x80|21
    1681/D7A0 : (MACRO)[76]             	TOKEN	T_LINK,"LIN",'K'
    1681/D7A0 : =>FALSE                          IF T_LINK == 0x80|79
    1681/D7A0 :                                   ; Convert T_LINK T_STAR to the more common '^' symbol.
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 37 - 10/31/2025 04:19:39 PM


    1681/D7A0 :                                   ; NOTE: if T_LINK token is added or deleted, DO NOT forget to update this!
    1681/D7A0 :                                   DB    '^'
    1681/D7A0 : =>TRUE                           ELSE
    1681/D7A0 : 95                                DB    T_LINK
    1681/D7A1 : [1681]                           ENDIF
    1681/D7A1 : 4C 49 4E                         DB     "LIN"
    1681/D7A4 : CB                               DB     'K'|0x80
    1682/D7A5 : =0x96                   T_NEXT	= 0x80|22
    1683/D7A5 : (MACRO)[77]             	TOKEN	T_NEXT,"NEX",'T'
    1683/D7A5 : =>FALSE                          IF T_NEXT == 0x80|79
    1683/D7A5 :                                   ; Convert T_NEXT T_STAR to the more common '^' symbol.
    1683/D7A5 :                                   ; NOTE: if T_NEXT token is added or deleted, DO NOT forget to update this!
    1683/D7A5 :                                   DB    '^'
    1683/D7A5 : =>TRUE                           ELSE
    1683/D7A5 : 96                                DB    T_NEXT
    1683/D7A6 : [1683]                           ENDIF
    1683/D7A6 : 4E 45 58                         DB     "NEX"
    1683/D7A9 : D4                               DB     'T'|0x80
    1684/D7AA : =0x97                   T_ON	= 0x80|23
    1685/D7AA : (MACRO)[78]             	TOKEN	T_ON,"O",'N'
    1685/D7AA : =>FALSE                          IF T_ON == 0x80|79
    1685/D7AA :                                   ; Convert T_ON T_STAR to the more common '^' symbol.
    1685/D7AA :                                   ; NOTE: if T_ON token is added or deleted, DO NOT forget to update this!
    1685/D7AA :                                   DB    '^'
    1685/D7AA : =>TRUE                           ELSE
    1685/D7AA : 97                                DB    T_ON
    1685/D7AB : [1685]                           ENDIF
    1685/D7AB : 4F                               DB     "O"
    1685/D7AC : CE                               DB     'N'|0x80
    1686/D7AD : =0x98                   T_PAGE	= 0x80|24
    1687/D7AD : (MACRO)[79]             	TOKEN	T_PAGE,"PAG",'E'
    1687/D7AD : =>FALSE                          IF T_PAGE == 0x80|79
    1687/D7AD :                                   ; Convert T_PAGE T_STAR to the more common '^' symbol.
    1687/D7AD :                                   ; NOTE: if T_PAGE token is added or deleted, DO NOT forget to update this!
    1687/D7AD :                                   DB    '^'
    1687/D7AD : =>TRUE                           ELSE
    1687/D7AD : 98                                DB    T_PAGE
    1687/D7AE : [1687]                           ENDIF
    1687/D7AE : 50 41 47                         DB     "PAG"
    1687/D7B1 : C5                               DB     'E'|0x80
    1688/D7B2 : =0x99                   T_POKE	= 0x80|25
    1689/D7B2 : (MACRO)[80]             	TOKEN	T_POKE,"POK",'E'
    1689/D7B2 : =>FALSE                          IF T_POKE == 0x80|79
    1689/D7B2 :                                   ; Convert T_POKE T_STAR to the more common '^' symbol.
    1689/D7B2 :                                   ; NOTE: if T_POKE token is added or deleted, DO NOT forget to update this!
    1689/D7B2 :                                   DB    '^'
    1689/D7B2 : =>TRUE                           ELSE
    1689/D7B2 : 99                                DB    T_POKE
    1689/D7B3 : [1689]                           ENDIF
    1689/D7B3 : 50 4F 4B                         DB     "POK"
    1689/D7B6 : C5                               DB     'E'|0x80
    1690/D7B7 : =0x9A                   T_PRINT	= 0x80|26
    1691/D7B7 : (MACRO)[81]             	TOKEN	T_PRINT,"PRIN",'T'
    1691/D7B7 : =>FALSE                          IF T_PRINT == 0x80|79
    1691/D7B7 :                                   ; Convert T_PRINT T_STAR to the more common '^' symbol.
    1691/D7B7 :                                   ; NOTE: if T_PRINT token is added or deleted, DO NOT forget to update this!
    1691/D7B7 :                                   DB    '^'
    1691/D7B7 : =>TRUE                           ELSE
    1691/D7B7 : 9A                                DB    T_PRINT
    1691/D7B8 : [1691]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 38 - 10/31/2025 04:19:39 PM


    1691/D7B8 : 50 52 49 4E                      DB     "PRIN"
    1691/D7BC : D4                               DB     'T'|0x80
    1692/D7BD : =0x9B                   T_PR	= 0x80|27
    1693/D7BD : (MACRO)[82]             	TOKEN	T_PR,"P",'R'
    1693/D7BD : =>FALSE                          IF T_PR == 0x80|79
    1693/D7BD :                                   ; Convert T_PR T_STAR to the more common '^' symbol.
    1693/D7BD :                                   ; NOTE: if T_PR token is added or deleted, DO NOT forget to update this!
    1693/D7BD :                                   DB    '^'
    1693/D7BD : =>TRUE                           ELSE
    1693/D7BD : 9B                                DB    T_PR
    1693/D7BE : [1693]                           ENDIF
    1693/D7BE : 50                               DB     "P"
    1693/D7BF : D2                               DB     'R'|0x80
    1694/D7C0 : =0x9C                   T_READ	= 0x80|28
    1695/D7C0 : (MACRO)[83]             	TOKEN	T_READ,"REA",'D'
    1695/D7C0 : =>FALSE                          IF T_READ == 0x80|79
    1695/D7C0 :                                   ; Convert T_READ T_STAR to the more common '^' symbol.
    1695/D7C0 :                                   ; NOTE: if T_READ token is added or deleted, DO NOT forget to update this!
    1695/D7C0 :                                   DB    '^'
    1695/D7C0 : =>TRUE                           ELSE
    1695/D7C0 : 9C                                DB    T_READ
    1695/D7C1 : [1695]                           ENDIF
    1695/D7C1 : 52 45 41                         DB     "REA"
    1695/D7C4 : C4                               DB     'D'|0x80
    1696/D7C5 : =0x9D                   T_REM	= 0x80|29
    1697/D7C5 : (MACRO)[84]             	TOKEN	T_REM,"RE",'M'
    1697/D7C5 : =>FALSE                          IF T_REM == 0x80|79
    1697/D7C5 :                                   ; Convert T_REM T_STAR to the more common '^' symbol.
    1697/D7C5 :                                   ; NOTE: if T_REM token is added or deleted, DO NOT forget to update this!
    1697/D7C5 :                                   DB    '^'
    1697/D7C5 : =>TRUE                           ELSE
    1697/D7C5 : 9D                                DB    T_REM
    1697/D7C6 : [1697]                           ENDIF
    1697/D7C6 : 52 45                            DB     "RE"
    1697/D7C8 : CD                               DB     'M'|0x80
    1698/D7C9 : =0x9E                   T_RESTORE = 0x80|30
    1699/D7C9 : (MACRO)[85]             	TOKEN	T_RESTORE,"RESTOR",'E'
    1699/D7C9 : =>FALSE                          IF T_RESTORE == 0x80|79
    1699/D7C9 :                                   ; Convert T_RESTORE T_STAR to the more common '^' symbol.
    1699/D7C9 :                                   ; NOTE: if T_RESTORE token is added or deleted, DO NOT forget to update this!
    1699/D7C9 :                                   DB    '^'
    1699/D7C9 : =>TRUE                           ELSE
    1699/D7C9 : 9E                                DB    T_RESTORE
    1699/D7CA : [1699]                           ENDIF
    1699/D7CA : 52 45 53 54 4F 52                DB     "RESTOR"
    1699/D7D0 : C5                               DB     'E'|0x80
    1700/D7D1 : =0x9F                   T_RETURN = 0x80|31
    1701/D7D1 : (MACRO)[86]             	TOKEN	T_RETURN,"RETUR",'N'
    1701/D7D1 : =>FALSE                          IF T_RETURN == 0x80|79
    1701/D7D1 :                                   ; Convert T_RETURN T_STAR to the more common '^' symbol.
    1701/D7D1 :                                   ; NOTE: if T_RETURN token is added or deleted, DO NOT forget to update this!
    1701/D7D1 :                                   DB    '^'
    1701/D7D1 : =>TRUE                           ELSE
    1701/D7D1 : 9F                                DB    T_RETURN
    1701/D7D2 : [1701]                           ENDIF
    1701/D7D2 : 52 45 54 55 52                   DB     "RETUR"
    1701/D7D7 : CE                               DB     'N'|0x80
    1702/D7D8 : =0xA0                   T_STAT	= 0x80|32
    1703/D7D8 : (MACRO)[87]             	TOKEN	T_STAT,"STA",'T'
    1703/D7D8 : =>FALSE                          IF T_STAT == 0x80|79
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 39 - 10/31/2025 04:19:39 PM


    1703/D7D8 :                                   ; Convert T_STAT T_STAR to the more common '^' symbol.
    1703/D7D8 :                                   ; NOTE: if T_STAT token is added or deleted, DO NOT forget to update this!
    1703/D7D8 :                                   DB    '^'
    1703/D7D8 : =>TRUE                           ELSE
    1703/D7D8 : A0                                DB    T_STAT
    1703/D7D9 : [1703]                           ENDIF
    1703/D7D9 : 53 54 41                         DB     "STA"
    1703/D7DC : D4                               DB     'T'|0x80
    1704/D7DD : =0xA1                   T_UNTIL	= 0x80|33
    1705/D7DD : (MACRO)[88]             	TOKEN	T_UNTIL,"UNTI",'L'
    1705/D7DD : =>FALSE                          IF T_UNTIL == 0x80|79
    1705/D7DD :                                   ; Convert T_UNTIL T_STAR to the more common '^' symbol.
    1705/D7DD :                                   ; NOTE: if T_UNTIL token is added or deleted, DO NOT forget to update this!
    1705/D7DD :                                   DB    '^'
    1705/D7DD : =>TRUE                           ELSE
    1705/D7DD : A1                                DB    T_UNTIL
    1705/D7DE : [1705]                           ENDIF
    1705/D7DE : 55 4E 54 49                      DB     "UNTI"
    1705/D7E2 : CC                               DB     'L'|0x80
    1706/D7E3 : =0xA2                   T_LET	= 0x80|34
    1707/D7E3 : (MACRO)[89]             	TOKEN	T_LET,"LE",'T'
    1707/D7E3 : =>FALSE                          IF T_LET == 0x80|79
    1707/D7E3 :                                   ; Convert T_LET T_STAR to the more common '^' symbol.
    1707/D7E3 :                                   ; NOTE: if T_LET token is added or deleted, DO NOT forget to update this!
    1707/D7E3 :                                   DB    '^'
    1707/D7E3 : =>TRUE                           ELSE
    1707/D7E3 : A2                                DB    T_LET
    1707/D7E4 : [1707]                           ENDIF
    1707/D7E4 : 4C 45                            DB     "LE"
    1707/D7E6 : D4                               DB     'T'|0x80
    1708/D7E7 : =0xA3                   T_AND	= 0x80|35
    1709/D7E7 : (MACRO)[90]             	TOKEN	T_AND,"AN",'D'
    1709/D7E7 : =>FALSE                          IF T_AND == 0x80|79
    1709/D7E7 :                                   ; Convert T_AND T_STAR to the more common '^' symbol.
    1709/D7E7 :                                   ; NOTE: if T_AND token is added or deleted, DO NOT forget to update this!
    1709/D7E7 :                                   DB    '^'
    1709/D7E7 : =>TRUE                           ELSE
    1709/D7E7 : A3                                DB    T_AND
    1709/D7E8 : [1709]                           ENDIF
    1709/D7E8 : 41 4E                            DB     "AN"
    1709/D7EA : C4                               DB     'D'|0x80
    1710/D7EB : =0xA4                   T_DIV	= 0x80|36
    1711/D7EB : (MACRO)[91]             	TOKEN	T_DIV,"DI",'V'
    1711/D7EB : =>FALSE                          IF T_DIV == 0x80|79
    1711/D7EB :                                   ; Convert T_DIV T_STAR to the more common '^' symbol.
    1711/D7EB :                                   ; NOTE: if T_DIV token is added or deleted, DO NOT forget to update this!
    1711/D7EB :                                   DB    '^'
    1711/D7EB : =>TRUE                           ELSE
    1711/D7EB : A4                                DB    T_DIV
    1711/D7EC : [1711]                           ENDIF
    1711/D7EC : 44 49                            DB     "DI"
    1711/D7EE : D6                               DB     'V'|0x80
    1712/D7EF : =0xA5                   T_EXOR	= 0x80|37
    1713/D7EF : (MACRO)[92]             	TOKEN	T_EXOR,"EXO",'R'
    1713/D7EF : =>FALSE                          IF T_EXOR == 0x80|79
    1713/D7EF :                                   ; Convert T_EXOR T_STAR to the more common '^' symbol.
    1713/D7EF :                                   ; NOTE: if T_EXOR token is added or deleted, DO NOT forget to update this!
    1713/D7EF :                                   DB    '^'
    1713/D7EF : =>TRUE                           ELSE
    1713/D7EF : A5                                DB    T_EXOR
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 40 - 10/31/2025 04:19:39 PM


    1713/D7F0 : [1713]                           ENDIF
    1713/D7F0 : 45 58 4F                         DB     "EXO"
    1713/D7F3 : D2                               DB     'R'|0x80
    1714/D7F4 : =0xA6                   T_MOD	= 0x80|38
    1715/D7F4 : (MACRO)[93]             	TOKEN	T_MOD,"MO",'D'
    1715/D7F4 : =>FALSE                          IF T_MOD == 0x80|79
    1715/D7F4 :                                   ; Convert T_MOD T_STAR to the more common '^' symbol.
    1715/D7F4 :                                   ; NOTE: if T_MOD token is added or deleted, DO NOT forget to update this!
    1715/D7F4 :                                   DB    '^'
    1715/D7F4 : =>TRUE                           ELSE
    1715/D7F4 : A6                                DB    T_MOD
    1715/D7F5 : [1715]                           ENDIF
    1715/D7F5 : 4D 4F                            DB     "MO"
    1715/D7F7 : C4                               DB     'D'|0x80
    1716/D7F8 : =0xA7                   T_OR	= 0x80|39
    1717/D7F8 : (MACRO)[94]             	TOKEN	T_OR,"O",'R'
    1717/D7F8 : =>FALSE                          IF T_OR == 0x80|79
    1717/D7F8 :                                   ; Convert T_OR T_STAR to the more common '^' symbol.
    1717/D7F8 :                                   ; NOTE: if T_OR token is added or deleted, DO NOT forget to update this!
    1717/D7F8 :                                   DB    '^'
    1717/D7F8 : =>TRUE                           ELSE
    1717/D7F8 : A7                                DB    T_OR
    1717/D7F9 : [1717]                           ENDIF
    1717/D7F9 : 4F                               DB     "O"
    1717/D7FA : D2                               DB     'R'|0x80
    1718/D7FB : =0xA8                   T_PEEK	= 0x80|40
    1719/D7FB : (MACRO)[95]             	TOKEN	T_PEEK,"PEE",'K'
    1719/D7FB : =>FALSE                          IF T_PEEK == 0x80|79
    1719/D7FB :                                   ; Convert T_PEEK T_STAR to the more common '^' symbol.
    1719/D7FB :                                   ; NOTE: if T_PEEK token is added or deleted, DO NOT forget to update this!
    1719/D7FB :                                   DB    '^'
    1719/D7FB : =>TRUE                           ELSE
    1719/D7FB : A8                                DB    T_PEEK
    1719/D7FC : [1719]                           ENDIF
    1719/D7FC : 50 45 45                         DB     "PEE"
    1719/D7FF : CB                               DB     'K'|0x80
    1720/D800 : =0xA9                   T_LE	= 0x80|41
    1721/D800 : (MACRO)[96]             	TOKEN	T_LE,"<",'='
    1721/D800 : =>FALSE                          IF T_LE == 0x80|79
    1721/D800 :                                   ; Convert T_LE T_STAR to the more common '^' symbol.
    1721/D800 :                                   ; NOTE: if T_LE token is added or deleted, DO NOT forget to update this!
    1721/D800 :                                   DB    '^'
    1721/D800 : =>TRUE                           ELSE
    1721/D800 : A9                                DB    T_LE
    1721/D801 : [1721]                           ENDIF
    1721/D801 : 3C                               DB     "<"
    1721/D802 : BD                               DB     '='|0x80
    1722/D803 : =0xAA                   T_GE	= 0x80|42
    1723/D803 : (MACRO)[97]             	TOKEN	T_GE,">",'='
    1723/D803 : =>FALSE                          IF T_GE == 0x80|79
    1723/D803 :                                   ; Convert T_GE T_STAR to the more common '^' symbol.
    1723/D803 :                                   ; NOTE: if T_GE token is added or deleted, DO NOT forget to update this!
    1723/D803 :                                   DB    '^'
    1723/D803 : =>TRUE                           ELSE
    1723/D803 : AA                                DB    T_GE
    1723/D804 : [1723]                           ENDIF
    1723/D804 : 3E                               DB     ">"
    1723/D805 : BD                               DB     '='|0x80
    1724/D806 : =0xAB                   T_NE	= 0x80|43
    1725/D806 : (MACRO)[98]             	TOKEN	T_NE,"<",'>'
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 41 - 10/31/2025 04:19:39 PM


    1725/D806 : =>FALSE                          IF T_NE == 0x80|79
    1725/D806 :                                   ; Convert T_NE T_STAR to the more common '^' symbol.
    1725/D806 :                                   ; NOTE: if T_NE token is added or deleted, DO NOT forget to update this!
    1725/D806 :                                   DB    '^'
    1725/D806 : =>TRUE                           ELSE
    1725/D806 : AB                                DB    T_NE
    1725/D807 : [1725]                           ENDIF
    1725/D807 : 3C                               DB     "<"
    1725/D808 : BE                               DB     '>'|0x80
    1726/D809 : =0xAC                   T_ABS	= 0x80|44
    1727/D809 : (MACRO)[99]             	TOKEN	T_ABS,"AB",'S'
    1727/D809 : =>FALSE                          IF T_ABS == 0x80|79
    1727/D809 :                                   ; Convert T_ABS T_STAR to the more common '^' symbol.
    1727/D809 :                                   ; NOTE: if T_ABS token is added or deleted, DO NOT forget to update this!
    1727/D809 :                                   DB    '^'
    1727/D809 : =>TRUE                           ELSE
    1727/D809 : AC                                DB    T_ABS
    1727/D80A : [1727]                           ENDIF
    1727/D80A : 41 42                            DB     "AB"
    1727/D80C : D3                               DB     'S'|0x80
    1728/D80D : =0xAD                   T_ATN	= 0x80|45
    1729/D80D : (MACRO)[100]            	TOKEN	T_ATN,"AT",'N'
    1729/D80D : =>FALSE                          IF T_ATN == 0x80|79
    1729/D80D :                                   ; Convert T_ATN T_STAR to the more common '^' symbol.
    1729/D80D :                                   ; NOTE: if T_ATN token is added or deleted, DO NOT forget to update this!
    1729/D80D :                                   DB    '^'
    1729/D80D : =>TRUE                           ELSE
    1729/D80D : AD                                DB    T_ATN
    1729/D80E : [1729]                           ENDIF
    1729/D80E : 41 54                            DB     "AT"
    1729/D810 : CE                               DB     'N'|0x80
    1730/D811 : =0xAE                   T_COS	= 0x80|46
    1731/D811 : (MACRO)[101]            	TOKEN	T_COS,"CO",'S'
    1731/D811 : =>FALSE                          IF T_COS == 0x80|79
    1731/D811 :                                   ; Convert T_COS T_STAR to the more common '^' symbol.
    1731/D811 :                                   ; NOTE: if T_COS token is added or deleted, DO NOT forget to update this!
    1731/D811 :                                   DB    '^'
    1731/D811 : =>TRUE                           ELSE
    1731/D811 : AE                                DB    T_COS
    1731/D812 : [1731]                           ENDIF
    1731/D812 : 43 4F                            DB     "CO"
    1731/D814 : D3                               DB     'S'|0x80
    1732/D815 : =0xAF                   T_EXP	= 0x80|47
    1733/D815 : (MACRO)[102]            	TOKEN	T_EXP,"EX",'P'
    1733/D815 : =>FALSE                          IF T_EXP == 0x80|79
    1733/D815 :                                   ; Convert T_EXP T_STAR to the more common '^' symbol.
    1733/D815 :                                   ; NOTE: if T_EXP token is added or deleted, DO NOT forget to update this!
    1733/D815 :                                   DB    '^'
    1733/D815 : =>TRUE                           ELSE
    1733/D815 : AF                                DB    T_EXP
    1733/D816 : [1733]                           ENDIF
    1733/D816 : 45 58                            DB     "EX"
    1733/D818 : D0                               DB     'P'|0x80
    1734/D819 : =0xB0                   T_FN	= 0x80|48
    1735/D819 : (MACRO)[103]            	TOKEN	T_FN,"F",'N'
    1735/D819 : =>FALSE                          IF T_FN == 0x80|79
    1735/D819 :                                   ; Convert T_FN T_STAR to the more common '^' symbol.
    1735/D819 :                                   ; NOTE: if T_FN token is added or deleted, DO NOT forget to update this!
    1735/D819 :                                   DB    '^'
    1735/D819 : =>TRUE                           ELSE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 42 - 10/31/2025 04:19:39 PM


    1735/D819 : B0                                DB    T_FN
    1735/D81A : [1735]                           ENDIF
    1735/D81A : 46                               DB     "F"
    1735/D81B : CE                               DB     'N'|0x80
    1736/D81C : =0xB1                   T_INT	= 0x80|49
    1737/D81C : (MACRO)[104]            	TOKEN	T_INT,"IN",'T'
    1737/D81C : =>FALSE                          IF T_INT == 0x80|79
    1737/D81C :                                   ; Convert T_INT T_STAR to the more common '^' symbol.
    1737/D81C :                                   ; NOTE: if T_INT token is added or deleted, DO NOT forget to update this!
    1737/D81C :                                   DB    '^'
    1737/D81C : =>TRUE                           ELSE
    1737/D81C : B1                                DB    T_INT
    1737/D81D : [1737]                           ENDIF
    1737/D81D : 49 4E                            DB     "IN"
    1737/D81F : D4                               DB     'T'|0x80
    1738/D820 : =0xB2                   T_LB	= 0x80|50
    1739/D820 : (MACRO)[105]            	TOKEN	T_LB,"L",'B'
    1739/D820 : =>FALSE                          IF T_LB == 0x80|79
    1739/D820 :                                   ; Convert T_LB T_STAR to the more common '^' symbol.
    1739/D820 :                                   ; NOTE: if T_LB token is added or deleted, DO NOT forget to update this!
    1739/D820 :                                   DB    '^'
    1739/D820 : =>TRUE                           ELSE
    1739/D820 : B2                                DB    T_LB
    1739/D821 : [1739]                           ENDIF
    1739/D821 : 4C                               DB     "L"
    1739/D822 : C2                               DB     'B'|0x80
    1740/D823 : =0xB3                   T_LG	= 0x80|51
    1741/D823 : (MACRO)[106]            	TOKEN	T_LG,"L",'G'
    1741/D823 : =>FALSE                          IF T_LG == 0x80|79
    1741/D823 :                                   ; Convert T_LG T_STAR to the more common '^' symbol.
    1741/D823 :                                   ; NOTE: if T_LG token is added or deleted, DO NOT forget to update this!
    1741/D823 :                                   DB    '^'
    1741/D823 : =>TRUE                           ELSE
    1741/D823 : B3                                DB    T_LG
    1741/D824 : [1741]                           ENDIF
    1741/D824 : 4C                               DB     "L"
    1741/D825 : C7                               DB     'G'|0x80
    1742/D826 : =0xB4                   T_LN	= 0x80|52
    1743/D826 : (MACRO)[107]            	TOKEN	T_LN,"L",'N'
    1743/D826 : =>FALSE                          IF T_LN == 0x80|79
    1743/D826 :                                   ; Convert T_LN T_STAR to the more common '^' symbol.
    1743/D826 :                                   ; NOTE: if T_LN token is added or deleted, DO NOT forget to update this!
    1743/D826 :                                   DB    '^'
    1743/D826 : =>TRUE                           ELSE
    1743/D826 : B4                                DB    T_LN
    1743/D827 : [1743]                           ENDIF
    1743/D827 : 4C                               DB     "L"
    1743/D828 : CE                               DB     'N'|0x80
    1744/D829 : =0xB5                   T_NOT	= 0x80|53
    1745/D829 : (MACRO)[108]            	TOKEN	T_NOT,"NO",'T'
    1745/D829 : =>FALSE                          IF T_NOT == 0x80|79
    1745/D829 :                                   ; Convert T_NOT T_STAR to the more common '^' symbol.
    1745/D829 :                                   ; NOTE: if T_NOT token is added or deleted, DO NOT forget to update this!
    1745/D829 :                                   DB    '^'
    1745/D829 : =>TRUE                           ELSE
    1745/D829 : B5                                DB    T_NOT
    1745/D82A : [1745]                           ENDIF
    1745/D82A : 4E 4F                            DB     "NO"
    1745/D82C : D4                               DB     'T'|0x80
    1746/D82D : =0xB6                   T_PI	= 0x80|54
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 43 - 10/31/2025 04:19:39 PM


    1747/D82D : (MACRO)[109]            	TOKEN	T_PI,"P",'I'
    1747/D82D : =>FALSE                          IF T_PI == 0x80|79
    1747/D82D :                                   ; Convert T_PI T_STAR to the more common '^' symbol.
    1747/D82D :                                   ; NOTE: if T_PI token is added or deleted, DO NOT forget to update this!
    1747/D82D :                                   DB    '^'
    1747/D82D : =>TRUE                           ELSE
    1747/D82D : B6                                DB    T_PI
    1747/D82E : [1747]                           ENDIF
    1747/D82E : 50                               DB     "P"
    1747/D82F : C9                               DB     'I'|0x80
    1748/D830 : =0xB7                   T_RND	= 0x80|55
    1749/D830 : (MACRO)[110]            	TOKEN	T_RND,"RN",'D'
    1749/D830 : =>FALSE                          IF T_RND == 0x80|79
    1749/D830 :                                   ; Convert T_RND T_STAR to the more common '^' symbol.
    1749/D830 :                                   ; NOTE: if T_RND token is added or deleted, DO NOT forget to update this!
    1749/D830 :                                   DB    '^'
    1749/D830 : =>TRUE                           ELSE
    1749/D830 : B7                                DB    T_RND
    1749/D831 : [1749]                           ENDIF
    1749/D831 : 52 4E                            DB     "RN"
    1749/D833 : C4                               DB     'D'|0x80
    1750/D834 : =0xB8                   T_SGN	= 0x80|56
    1751/D834 : (MACRO)[111]            	TOKEN	T_SGN,"SG",'N'
    1751/D834 : =>FALSE                          IF T_SGN == 0x80|79
    1751/D834 :                                   ; Convert T_SGN T_STAR to the more common '^' symbol.
    1751/D834 :                                   ; NOTE: if T_SGN token is added or deleted, DO NOT forget to update this!
    1751/D834 :                                   DB    '^'
    1751/D834 : =>TRUE                           ELSE
    1751/D834 : B8                                DB    T_SGN
    1751/D835 : [1751]                           ENDIF
    1751/D835 : 53 47                            DB     "SG"
    1751/D837 : CE                               DB     'N'|0x80
    1752/D838 : =0xB9                   T_SIN	= 0x80|57
    1753/D838 : (MACRO)[112]            	TOKEN	T_SIN,"SI",'N'
    1753/D838 : =>FALSE                          IF T_SIN == 0x80|79
    1753/D838 :                                   ; Convert T_SIN T_STAR to the more common '^' symbol.
    1753/D838 :                                   ; NOTE: if T_SIN token is added or deleted, DO NOT forget to update this!
    1753/D838 :                                   DB    '^'
    1753/D838 : =>TRUE                           ELSE
    1753/D838 : B9                                DB    T_SIN
    1753/D839 : [1753]                           ENDIF
    1753/D839 : 53 49                            DB     "SI"
    1753/D83B : CE                               DB     'N'|0x80
    1754/D83C : =0xBA                   T_SQR	= 0x80|58
    1755/D83C : (MACRO)[113]            	TOKEN	T_SQR,"SQ",'R'
    1755/D83C : =>FALSE                          IF T_SQR == 0x80|79
    1755/D83C :                                   ; Convert T_SQR T_STAR to the more common '^' symbol.
    1755/D83C :                                   ; NOTE: if T_SQR token is added or deleted, DO NOT forget to update this!
    1755/D83C :                                   DB    '^'
    1755/D83C : =>TRUE                           ELSE
    1755/D83C : BA                                DB    T_SQR
    1755/D83D : [1755]                           ENDIF
    1755/D83D : 53 51                            DB     "SQ"
    1755/D83F : D2                               DB     'R'|0x80
    1756/D840 : =0xBB                   T_TAN	= 0x80|59
    1757/D840 : (MACRO)[114]            	TOKEN	T_TAN,"TA",'N'
    1757/D840 : =>FALSE                          IF T_TAN == 0x80|79
    1757/D840 :                                   ; Convert T_TAN T_STAR to the more common '^' symbol.
    1757/D840 :                                   ; NOTE: if T_TAN token is added or deleted, DO NOT forget to update this!
    1757/D840 :                                   DB    '^'
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 44 - 10/31/2025 04:19:39 PM


    1757/D840 : =>TRUE                           ELSE
    1757/D840 : BB                                DB    T_TAN
    1757/D841 : [1757]                           ENDIF
    1757/D841 : 54 41                            DB     "TA"
    1757/D843 : CE                               DB     'N'|0x80
    1758/D844 : =0xBC                   T_VAL	= 0x80|60
    1759/D844 : (MACRO)[115]            	TOKEN	T_VAL,"VA",'L'
    1759/D844 : =>FALSE                          IF T_VAL == 0x80|79
    1759/D844 :                                   ; Convert T_VAL T_STAR to the more common '^' symbol.
    1759/D844 :                                   ; NOTE: if T_VAL token is added or deleted, DO NOT forget to update this!
    1759/D844 :                                   DB    '^'
    1759/D844 : =>TRUE                           ELSE
    1759/D844 : BC                                DB    T_VAL
    1759/D845 : [1759]                           ENDIF
    1759/D845 : 56 41                            DB     "VA"
    1759/D847 : CC                               DB     'L'|0x80
    1760/D848 : =0xBD                   T_ASC	= 0x80|61
    1761/D848 : (MACRO)[116]            	TOKEN	T_ASC,"AS",'C'
    1761/D848 : =>FALSE                          IF T_ASC == 0x80|79
    1761/D848 :                                   ; Convert T_ASC T_STAR to the more common '^' symbol.
    1761/D848 :                                   ; NOTE: if T_ASC token is added or deleted, DO NOT forget to update this!
    1761/D848 :                                   DB    '^'
    1761/D848 : =>TRUE                           ELSE
    1761/D848 : BD                                DB    T_ASC
    1761/D849 : [1761]                           ENDIF
    1761/D849 : 41 53                            DB     "AS"
    1761/D84B : C3                               DB     'C'|0x80
    1762/D84C : =0xBE                   T_FREE	= 0x80|62
    1763/D84C : (MACRO)[117]            	TOKEN	T_FREE,"FRE",'E'
    1763/D84C : =>FALSE                          IF T_FREE == 0x80|79
    1763/D84C :                                   ; Convert T_FREE T_STAR to the more common '^' symbol.
    1763/D84C :                                   ; NOTE: if T_FREE token is added or deleted, DO NOT forget to update this!
    1763/D84C :                                   DB    '^'
    1763/D84C : =>TRUE                           ELSE
    1763/D84C : BE                                DB    T_FREE
    1763/D84D : [1763]                           ENDIF
    1763/D84D : 46 52 45                         DB     "FRE"
    1763/D850 : C5                               DB     'E'|0x80
    1764/D851 : =0xBF                   T_LEN	= 0x80|63
    1765/D851 : (MACRO)[118]            	TOKEN	T_LEN,"LE",'N'
    1765/D851 : =>FALSE                          IF T_LEN == 0x80|79
    1765/D851 :                                   ; Convert T_LEN T_STAR to the more common '^' symbol.
    1765/D851 :                                   ; NOTE: if T_LEN token is added or deleted, DO NOT forget to update this!
    1765/D851 :                                   DB    '^'
    1765/D851 : =>TRUE                           ELSE
    1765/D851 : BF                                DB    T_LEN
    1765/D852 : [1765]                           ENDIF
    1765/D852 : 4C 45                            DB     "LE"
    1765/D854 : CE                               DB     'N'|0x80
    1766/D855 : =0xC0                   T_POS	= 0x80|64
    1767/D855 : (MACRO)[119]            	TOKEN	T_POS,"PO",'S'
    1767/D855 : =>FALSE                          IF T_POS == 0x80|79
    1767/D855 :                                   ; Convert T_POS T_STAR to the more common '^' symbol.
    1767/D855 :                                   ; NOTE: if T_POS token is added or deleted, DO NOT forget to update this!
    1767/D855 :                                   DB    '^'
    1767/D855 : =>TRUE                           ELSE
    1767/D855 : C0                                DB    T_POS
    1767/D856 : [1767]                           ENDIF
    1767/D856 : 50 4F                            DB     "PO"
    1767/D858 : D3                               DB     'S'|0x80
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 45 - 10/31/2025 04:19:39 PM


    1768/D859 : =0xC1                   T_TOP	= 0x80|65
    1769/D859 : (MACRO)[120]            	TOKEN	T_TOP,"TO",'P'
    1769/D859 : =>FALSE                          IF T_TOP == 0x80|79
    1769/D859 :                                   ; Convert T_TOP T_STAR to the more common '^' symbol.
    1769/D859 :                                   ; NOTE: if T_TOP token is added or deleted, DO NOT forget to update this!
    1769/D859 :                                   DB    '^'
    1769/D859 : =>TRUE                           ELSE
    1769/D859 : C1                                DB    T_TOP
    1769/D85A : [1769]                           ENDIF
    1769/D85A : 54 4F                            DB     "TO"
    1769/D85C : D0                               DB     'P'|0x80
    1770/D85D : =0xC2                   T_STEP	= 0x80|66
    1771/D85D : (MACRO)[121]            	TOKEN	T_STEP,"STE",'P'
    1771/D85D : =>FALSE                          IF T_STEP == 0x80|79
    1771/D85D :                                   ; Convert T_STEP T_STAR to the more common '^' symbol.
    1771/D85D :                                   ; NOTE: if T_STEP token is added or deleted, DO NOT forget to update this!
    1771/D85D :                                   DB    '^'
    1771/D85D : =>TRUE                           ELSE
    1771/D85D : C2                                DB    T_STEP
    1771/D85E : [1771]                           ENDIF
    1771/D85E : 53 54 45                         DB     "STE"
    1771/D861 : D0                               DB     'P'|0x80
    1772/D862 : =0xC3                   T_THEN	= 0x80|67
    1773/D862 : (MACRO)[122]            	TOKEN	T_THEN,"THE",'N'
    1773/D862 : =>FALSE                          IF T_THEN == 0x80|79
    1773/D862 :                                   ; Convert T_THEN T_STAR to the more common '^' symbol.
    1773/D862 :                                   ; NOTE: if T_THEN token is added or deleted, DO NOT forget to update this!
    1773/D862 :                                   DB    '^'
    1773/D862 : =>TRUE                           ELSE
    1773/D862 : C3                                DB    T_THEN
    1773/D863 : [1773]                           ENDIF
    1773/D863 : 54 48 45                         DB     "THE"
    1773/D866 : CE                               DB     'N'|0x80
    1774/D867 : =0xC4                   T_TO	= 0x80|68
    1775/D867 : (MACRO)[123]            	TOKEN	T_TO,"T",'O'
    1775/D867 : =>FALSE                          IF T_TO == 0x80|79
    1775/D867 :                                   ; Convert T_TO T_STAR to the more common '^' symbol.
    1775/D867 :                                   ; NOTE: if T_TO token is added or deleted, DO NOT forget to update this!
    1775/D867 :                                   DB    '^'
    1775/D867 : =>TRUE                           ELSE
    1775/D867 : C4                                DB    T_TO
    1775/D868 : [1775]                           ENDIF
    1775/D868 : 54                               DB     "T"
    1775/D869 : CF                               DB     'O'|0x80
    1776/D86A : =0xC5                   T_CHR	= 0x80|69
    1777/D86A : (MACRO)[124]            	TOKEN	T_CHR,"CHR",'$'
    1777/D86A : =>FALSE                          IF T_CHR == 0x80|79
    1777/D86A :                                   ; Convert T_CHR T_STAR to the more common '^' symbol.
    1777/D86A :                                   ; NOTE: if T_CHR token is added or deleted, DO NOT forget to update this!
    1777/D86A :                                   DB    '^'
    1777/D86A : =>TRUE                           ELSE
    1777/D86A : C5                                DB    T_CHR
    1777/D86B : [1777]                           ENDIF
    1777/D86B : 43 48 52                         DB     "CHR"
    1777/D86E : A4                               DB     '$'|0x80
    1778/D86F : =0xC6                   T_LEFT	= 0x80|70
    1779/D86F : (MACRO)[125]            	TOKEN	T_LEFT,"LEFT",'$'
    1779/D86F : =>FALSE                          IF T_LEFT == 0x80|79
    1779/D86F :                                   ; Convert T_LEFT T_STAR to the more common '^' symbol.
    1779/D86F :                                   ; NOTE: if T_LEFT token is added or deleted, DO NOT forget to update this!
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 46 - 10/31/2025 04:19:39 PM


    1779/D86F :                                   DB    '^'
    1779/D86F : =>TRUE                           ELSE
    1779/D86F : C6                                DB    T_LEFT
    1779/D870 : [1779]                           ENDIF
    1779/D870 : 4C 45 46 54                      DB     "LEFT"
    1779/D874 : A4                               DB     '$'|0x80
    1780/D875 : =0xC7                   T_MID	= 0x80|71
    1781/D875 : (MACRO)[126]            	TOKEN	T_MID,"MID",'$'
    1781/D875 : =>FALSE                          IF T_MID == 0x80|79
    1781/D875 :                                   ; Convert T_MID T_STAR to the more common '^' symbol.
    1781/D875 :                                   ; NOTE: if T_MID token is added or deleted, DO NOT forget to update this!
    1781/D875 :                                   DB    '^'
    1781/D875 : =>TRUE                           ELSE
    1781/D875 : C7                                DB    T_MID
    1781/D876 : [1781]                           ENDIF
    1781/D876 : 4D 49 44                         DB     "MID"
    1781/D879 : A4                               DB     '$'|0x80
    1782/D87A : =0xC8                   T_RIGHT	= 0x80|72
    1783/D87A : (MACRO)[127]            	TOKEN	T_RIGHT,"RIGHT",'$'
    1783/D87A : =>FALSE                          IF T_RIGHT == 0x80|79
    1783/D87A :                                   ; Convert T_RIGHT T_STAR to the more common '^' symbol.
    1783/D87A :                                   ; NOTE: if T_RIGHT token is added or deleted, DO NOT forget to update this!
    1783/D87A :                                   DB    '^'
    1783/D87A : =>TRUE                           ELSE
    1783/D87A : C8                                DB    T_RIGHT
    1783/D87B : [1783]                           ENDIF
    1783/D87B : 52 49 47 48 54                   DB     "RIGHT"
    1783/D880 : A4                               DB     '$'|0x80
    1784/D881 : =0xC9                   T_SPC	= 0x80|73
    1785/D881 : (MACRO)[128]            	TOKEN	T_SPC,"SP",'C'
    1785/D881 : =>FALSE                          IF T_SPC == 0x80|79
    1785/D881 :                                   ; Convert T_SPC T_STAR to the more common '^' symbol.
    1785/D881 :                                   ; NOTE: if T_SPC token is added or deleted, DO NOT forget to update this!
    1785/D881 :                                   DB    '^'
    1785/D881 : =>TRUE                           ELSE
    1785/D881 : C9                                DB    T_SPC
    1785/D882 : [1785]                           ENDIF
    1785/D882 : 53 50                            DB     "SP"
    1785/D884 : C3                               DB     'C'|0x80
    1786/D885 : =0xCA                   T_STR	= 0x80|74
    1787/D885 : (MACRO)[129]            	TOKEN	T_STR,"STR",'$'
    1787/D885 : =>FALSE                          IF T_STR == 0x80|79
    1787/D885 :                                   ; Convert T_STR T_STAR to the more common '^' symbol.
    1787/D885 :                                   ; NOTE: if T_STR token is added or deleted, DO NOT forget to update this!
    1787/D885 :                                   DB    '^'
    1787/D885 : =>TRUE                           ELSE
    1787/D885 : CA                                DB    T_STR
    1787/D886 : [1787]                           ENDIF
    1787/D886 : 53 54 52                         DB     "STR"
    1787/D889 : A4                               DB     '$'|0x80
    1788/D88A : =0xCB                   T_TAB	= 0x80|75
    1789/D88A : (MACRO)[130]            	TOKEN	T_TAB,"TA",'B'
    1789/D88A : =>FALSE                          IF T_TAB == 0x80|79
    1789/D88A :                                   ; Convert T_TAB T_STAR to the more common '^' symbol.
    1789/D88A :                                   ; NOTE: if T_TAB token is added or deleted, DO NOT forget to update this!
    1789/D88A :                                   DB    '^'
    1789/D88A : =>TRUE                           ELSE
    1789/D88A : CB                                DB    T_TAB
    1789/D88B : [1789]                           ENDIF
    1789/D88B : 54 41                            DB     "TA"
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 47 - 10/31/2025 04:19:39 PM


    1789/D88D : C2                               DB     'B'|0x80
    1790/D88E : =0xCC                   T_USING	= 0x80|76
    1791/D88E : (MACRO)[131]            	TOKEN	T_USING,"USIN",'G'
    1791/D88E : =>FALSE                          IF T_USING == 0x80|79
    1791/D88E :                                   ; Convert T_USING T_STAR to the more common '^' symbol.
    1791/D88E :                                   ; NOTE: if T_USING token is added or deleted, DO NOT forget to update this!
    1791/D88E :                                   DB    '^'
    1791/D88E : =>TRUE                           ELSE
    1791/D88E : CC                                DB    T_USING
    1791/D88F : [1791]                           ENDIF
    1791/D88F : 55 53 49 4E                      DB     "USIN"
    1791/D893 : C7                               DB     'G'|0x80
    1792/D894 : =0xCD                   T_VER	= 0x80|77
    1793/D894 : (MACRO)[132]            	TOKEN	T_VER,"VER",'$'
    1793/D894 : =>FALSE                          IF T_VER == 0x80|79
    1793/D894 :                                   ; Convert T_VER T_STAR to the more common '^' symbol.
    1793/D894 :                                   ; NOTE: if T_VER token is added or deleted, DO NOT forget to update this!
    1793/D894 :                                   DB    '^'
    1793/D894 : =>TRUE                           ELSE
    1793/D894 : CD                                DB    T_VER
    1793/D895 : [1793]                           ENDIF
    1793/D895 : 56 45 52                         DB     "VER"
    1793/D898 : A4                               DB     '$'|0x80
    1794/D899 : =0xCE                   T_VERT	= 0x80|78
    1795/D899 : (MACRO)[133]            	TOKEN	T_VERT,"VER",'T'
    1795/D899 : =>FALSE                          IF T_VERT == 0x80|79
    1795/D899 :                                   ; Convert T_VERT T_STAR to the more common '^' symbol.
    1795/D899 :                                   ; NOTE: if T_VERT token is added or deleted, DO NOT forget to update this!
    1795/D899 :                                   DB    '^'
    1795/D899 : =>TRUE                           ELSE
    1795/D899 : CE                                DB    T_VERT
    1795/D89A : [1795]                           ENDIF
    1795/D89A : 56 45 52                         DB     "VER"
    1795/D89D : D4                               DB     'T'|0x80
    1796/D89E : =0xCF                   T_STAR	= 0x80|79
    1797/D89E : (MACRO)[134]            	TOKEN	T_STAR,"*",'*'
    1797/D89E : =>TRUE                           IF T_STAR == 0x80|79
    1797/D89E :                                   ; Convert T_STAR T_STAR to the more common '^' symbol.
    1797/D89E :                                   ; NOTE: if T_STAR token is added or deleted, DO NOT forget to update this!
    1797/D89E : 5E                                DB    '^'
    1797/D89F : =>FALSE                          ELSE
    1797/D89F :                                   DB    T_STAR
    1797/D89F : [1797]                           ENDIF
    1797/D89F : 2A                               DB     "*"
    1797/D8A0 : AA                               DB     '*'|0x80
    1798/D8A1 : 00                      	DB	0
    1799/D8A2 :                         
    1800/D8A2 :                         
    1801/D8A2 :                         ;*************************************
    1802/D8A2 :                         ;*      I. L. TABLE PREAMBLE         *
    1803/D8A2 :                         ;*************************************
    1804/D8A2 :                         ;
    1805/D8A2 : (MACRO)[135]            ILTBL:	DO	GETLIN			; get next line of input
    1805/D8A2 : =>NOT BLANK                      IFNB   GETLIN
    1805/D8A2 : E0                                DB    H(GETLIN)
    1805/D8A3 : 01                                DB    L(GETLIN)
    1805/D8A4 :                                   SHIFT
    1805/D8A4 :  (MACRO-2)[136]                   DO    
    1805/D8A4 : =>BLANK                          IFNB   
    1805/D8A4 :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 48 - 10/31/2025 04:19:39 PM


    1805/D8A4 :                                   DB    L()
    1805/D8A4 :                                   SHIFT
    1805/D8A4 :                                   DO    
    1805/D8A4 : [1805]                           ENDIF
    1805/D8A4 : [1805]                           ENDIF
    1806/D8A4 : (MACRO)[137]            ILTB1:	TSTSTR	ILTB2,_CR		; if just a <cr>, do it again
    1806/D8A4 : 98                               DB     H(ILTB2 - TSTBITH)
    1806/D8A5 : A9                               DB     L(ILTB2)
    1806/D8A6 : 0D                               DB     _CR
    1807/D8A7 : (MACRO)[138]            	GOTO	ILTBL
    1807/D8A7 : 58                               DB     H(ILTBL - JMPBITH)
    1807/D8A8 : A2                               DB     L(ILTBL)
    1808/D8A9 : (MACRO)[139]            ILTB2:	DO	SCANR			; scan and parse the line
    1808/D8A9 : =>NOT BLANK                      IFNB   SCANR
    1808/D8A9 : E1                                DB    H(SCANR)
    1808/D8AA : 2A                                DB    L(SCANR)
    1808/D8AB :                                   SHIFT
    1808/D8AB :  (MACRO-2)[140]                   DO    
    1808/D8AB : =>BLANK                          IFNB   
    1808/D8AB :                                   DB    H()
    1808/D8AB :                                   DB    L()
    1808/D8AB :                                   SHIFT
    1808/D8AB :                                   DO    
    1808/D8AB : [1808]                           ENDIF
    1808/D8AB : [1808]                           ENDIF
    1809/D8AB : (MACRO)[141]            	TSTNUM	ILSTRT			; do we have a line number?
    1809/D8AB : D8                               DB     H(ILSTRT)
    1809/D8AC : B5                               DB     L(ILSTRT)
    1810/D8AD : (MACRO)[142]            	DO	POPAE		 	; yes, so handle that
    1810/D8AD : =>NOT BLANK                      IFNB   POPAE
    1810/D8AD : E1                                DB    H(POPAE)
    1810/D8AE : BD                                DB    L(POPAE)
    1810/D8AF :                                   SHIFT
    1810/D8AF :  (MACRO-2)[143]                   DO    
    1810/D8AF : =>BLANK                          IFNB   
    1810/D8AF :                                   DB    H()
    1810/D8AF :                                   DB    L()
    1810/D8AF :                                   SHIFT
    1810/D8AF :                                   DO    
    1810/D8AF : [1810]                           ENDIF
    1810/D8AF : [1810]                           ENDIF
    1811/D8AF : (MACRO)[144]            	DO	FNDLBL
    1811/D8AF : =>NOT BLANK                      IFNB   FNDLBL
    1811/D8AF : E5                                DB    H(FNDLBL)
    1811/D8B0 : 69                                DB    L(FNDLBL)
    1811/D8B1 :                                   SHIFT
    1811/D8B1 :  (MACRO-2)[145]                   DO    
    1811/D8B1 : =>BLANK                          IFNB   
    1811/D8B1 :                                   DB    H()
    1811/D8B1 :                                   DB    L()
    1811/D8B1 :                                   SHIFT
    1811/D8B1 :                                   DO    
    1811/D8B1 : [1811]                           ENDIF
    1811/D8B1 : [1811]                           ENDIF
    1812/D8B1 : (MACRO)[146]            	DO	INSRT
    1812/D8B1 : =>NOT BLANK                      IFNB   INSRT
    1812/D8B1 : E2                                DB    H(INSRT)
    1812/D8B2 : 09                                DB    L(INSRT)
    1812/D8B3 :                                   SHIFT
    1812/D8B3 :  (MACRO-2)[147]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 49 - 10/31/2025 04:19:39 PM


    1812/D8B3 : =>BLANK                          IFNB   
    1812/D8B3 :                                   DB    H()
    1812/D8B3 :                                   DB    L()
    1812/D8B3 :                                   SHIFT
    1812/D8B3 :                                   DO    
    1812/D8B3 : [1812]                           ENDIF
    1812/D8B3 : [1812]                           ENDIF
    1813/D8B3 : (MACRO)[148]            	GOTO	ILTBL			; and do again
    1813/D8B3 : 58                               DB     H(ILTBL - JMPBITH)
    1813/D8B4 : A2                               DB     L(ILTBL)
    1814/D8B5 :                         
    1815/D8B5 :                         ;*************************************
    1816/D8B5 :                         ;*         I. L. LOOKUP TABLE        *
    1817/D8B5 :                         ;*    FOR COMMANDS AND STATEMENTS    *
    1818/D8B5 :                         ;*************************************
    1819/D8B5 :                         ;
    1820/D8B5 : (MACRO)[149]            ILSTRT:	DO	NEXT			; find token or variable
    1820/D8B5 : =>NOT BLANK                      IFNB   NEXT
    1820/D8B5 : E4                                DB    H(NEXT)
    1820/D8B6 : 2F                                DB    L(NEXT)
    1820/D8B7 :                                   SHIFT
    1820/D8B7 :  (MACRO-2)[150]                   DO    
    1820/D8B7 : =>BLANK                          IFNB   
    1820/D8B7 :                                   DB    H()
    1820/D8B7 :                                   DB    L()
    1820/D8B7 :                                   SHIFT
    1820/D8B7 :                                   DO    
    1820/D8B7 : [1820]                           ENDIF
    1820/D8B7 : [1820]                           ENDIF
    1821/D8B7 : (MACRO)[151]            	GOTO	AUTO			; handle AUTO
    1821/D8B7 : 5A                               DB     H(AUTO - JMPBITH)
    1821/D8B8 : 95                               DB     L(AUTO)
    1822/D8B9 : (MACRO)[152]            	DO	BYE			; handle BYE
    1822/D8B9 : =>NOT BLANK                      IFNB   BYE
    1822/D8B9 : E3                                DB    H(BYE)
    1822/D8BA : 83                                DB    L(BYE)
    1822/D8BB :                                   SHIFT
    1822/D8BB :  (MACRO-2)[153]                   DO    
    1822/D8BB : =>BLANK                          IFNB   
    1822/D8BB :                                   DB    H()
    1822/D8BB :                                   DB    L()
    1822/D8BB :                                   SHIFT
    1822/D8BB :                                   DO    
    1822/D8BB : [1822]                           ENDIF
    1822/D8BB : [1822]                           ENDIF
    1823/D8BB : (MACRO)[154]            	DO	CLEAR			; handle CLEAR
    1823/D8BB : =>NOT BLANK                      IFNB   CLEAR
    1823/D8BB : F0                                DB    H(CLEAR)
    1823/D8BC : 23                                DB    L(CLEAR)
    1823/D8BD :                                   SHIFT
    1823/D8BD :  (MACRO-2)[155]                   DO    
    1823/D8BD : =>BLANK                          IFNB   
    1823/D8BD :                                   DB    H()
    1823/D8BD :                                   DB    L()
    1823/D8BD :                                   SHIFT
    1823/D8BD :                                   DO    
    1823/D8BD : [1823]                           ENDIF
    1823/D8BD : [1823]                           ENDIF
    1824/D8BD : =>TRUE                  	IF USE_CASS
    1825/D8BD : (MACRO)[156]            	 GOTO	CLOAD			; handle CLOAD
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 50 - 10/31/2025 04:19:39 PM


    1825/D8BD : 5F                               DB     H(CLOAD - JMPBITH)
    1825/D8BE : 61                               DB     L(CLOAD)
    1826/D8BF : (MACRO)[157]            	 GOTO	CSAVE			; handle CSAVE
    1826/D8BF : 5F                               DB     H(CSAVE - JMPBITH)
    1826/D8C0 : 59                               DB     L(CSAVE)
    1827/D8C1 : =>FALSE                 	ELSE
    1828/D8C1 :                         	 DO	IGNRE			; ignore CLOAD (not implemented)
    1829/D8C1 :                         	 DO	IGNRE			; ignore CSAVE (not implemented)
    1830/D8C1 : [1824]                  	ENDIF
    1831/D8C1 : (MACRO)[158]            	GOTO	EDIT			; handle EDIT
    1831/D8C1 : 5A                               DB     H(EDIT - JMPBITH)
    1831/D8C2 : 89                               DB     L(EDIT)
    1832/D8C3 : (MACRO)[159]            	GOTO	LIST			; handle LIST
    1832/D8C3 : 59                               DB     H(LIST - JMPBITH)
    1832/D8C4 : 44                               DB     L(LIST)
    1833/D8C5 : (MACRO)[160]            	GOTO	NEW			; handle NEW
    1833/D8C5 : 59                               DB     H(NEW - JMPBITH)
    1833/D8C6 : 61                               DB     L(NEW)
    1834/D8C7 : (MACRO)[161]            	GOTO	RUN			; handle RUN
    1834/D8C7 : 59                               DB     H(RUN - JMPBITH)
    1834/D8C8 : A0                               DB     L(RUN)
    1835/D8C9 : (MACRO)[162]            	DO	VERS			; handle VERS
    1835/D8C9 : =>NOT BLANK                      IFNB   VERS
    1835/D8C9 : EF                                DB    H(VERS)
    1835/D8CA : 51                                DB    L(VERS)
    1835/D8CB :                                   SHIFT
    1835/D8CB :  (MACRO-2)[163]                   DO    
    1835/D8CB : =>BLANK                          IFNB   
    1835/D8CB :                                   DB    H()
    1835/D8CB :                                   DB    L()
    1835/D8CB :                                   SHIFT
    1835/D8CB :                                   DO    
    1835/D8CB : [1835]                           ENDIF
    1835/D8CB : [1835]                           ENDIF
    1836/D8CB : (MACRO)[164]            	DO	IGNRE			; ignore DATA (handled elsewhere)
    1836/D8CB : =>NOT BLANK                      IFNB   IGNRE
    1836/D8CB : E3                                DB    H(IGNRE)
    1836/D8CC : 8A                                DB    L(IGNRE)
    1836/D8CD :                                   SHIFT
    1836/D8CD :  (MACRO-2)[165]                   DO    
    1836/D8CD : =>BLANK                          IFNB   
    1836/D8CD :                                   DB    H()
    1836/D8CD :                                   DB    L()
    1836/D8CD :                                   SHIFT
    1836/D8CD :                                   DO    
    1836/D8CD : [1836]                           ENDIF
    1836/D8CD : [1836]                           ENDIF
    1837/D8CD : (MACRO)[166]            	DO	IGNRE			; ignore DEF (handled elsewhere)
    1837/D8CD : =>NOT BLANK                      IFNB   IGNRE
    1837/D8CD : E3                                DB    H(IGNRE)
    1837/D8CE : 8A                                DB    L(IGNRE)
    1837/D8CF :                                   SHIFT
    1837/D8CF :  (MACRO-2)[167]                   DO    
    1837/D8CF : =>BLANK                          IFNB   
    1837/D8CF :                                   DB    H()
    1837/D8CF :                                   DB    L()
    1837/D8CF :                                   SHIFT
    1837/D8CF :                                   DO    
    1837/D8CF : [1837]                           ENDIF
    1837/D8CF : [1837]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 51 - 10/31/2025 04:19:39 PM


    1838/D8CF : (MACRO)[168]            	GOTO	DIM			; handle DIM
    1838/D8CF : 5A                               DB     H(DIM - JMPBITH)
    1838/D8D0 : CF                               DB     L(DIM)
    1839/D8D1 : (MACRO)[169]            	GOTO	DO			; handle DO
    1839/D8D1 : 5A                               DB     H(DO - JMPBITH)
    1839/D8D2 : 41                               DB     L(DO)
    1840/D8D3 : (MACRO)[170]            	DO	IGNORE			; ignore ELSE (handled elsewhere)
    1840/D8D3 : =>NOT BLANK                      IFNB   IGNORE
    1840/D8D3 : E4                                DB    H(IGNORE)
    1840/D8D4 : 08                                DB    L(IGNORE)
    1840/D8D5 :                                   SHIFT
    1840/D8D5 :  (MACRO-2)[171]                   DO    
    1840/D8D5 : =>BLANK                          IFNB   
    1840/D8D5 :                                   DB    H()
    1840/D8D5 :                                   DB    L()
    1840/D8D5 :                                   SHIFT
    1840/D8D5 :                                   DO    
    1840/D8D5 : [1840]                           ENDIF
    1840/D8D5 : [1840]                           ENDIF
    1841/D8D5 : (MACRO)[172]            	DO	BRK			; handle END
    1841/D8D5 : =>NOT BLANK                      IFNB   BRK
    1841/D8D5 : E4                                DB    H(BRK)
    1841/D8D6 : 92                                DB    L(BRK)
    1841/D8D7 :                                   SHIFT
    1841/D8D7 :  (MACRO-2)[173]                   DO    
    1841/D8D7 : =>BLANK                          IFNB   
    1841/D8D7 :                                   DB    H()
    1841/D8D7 :                                   DB    L()
    1841/D8D7 :                                   SHIFT
    1841/D8D7 :                                   DO    
    1841/D8D7 : [1841]                           ENDIF
    1841/D8D7 : [1841]                           ENDIF
    1842/D8D7 : (MACRO)[174]            	GOTO	FOR			; handle FOR
    1842/D8D7 : 59                               DB     H(FOR - JMPBITH)
    1842/D8D8 : 71                               DB     L(FOR)
    1843/D8D9 : (MACRO)[175]            	GOTO	GOSUB			; handle GOSUB
    1843/D8D9 : 5A                               DB     H(GOSUB - JMPBITH)
    1843/D8DA : 79                               DB     L(GOSUB)
    1844/D8DB : (MACRO)[176]            	GOTO	GOTO			; handle GOTO
    1844/D8DB : 5A                               DB     H(GOTO - JMPBITH)
    1844/D8DC : 73                               DB     L(GOTO)
    1845/D8DD : (MACRO)[177]            	GOTO	IF			; handle IF
    1845/D8DD : 5A                               DB     H(IF - JMPBITH)
    1845/D8DE : B4                               DB     L(IF)
    1846/D8DF : (MACRO)[178]            	GOTO	INPUT			; handle INPUT
    1846/D8DF : 5A                               DB     H(INPUT - JMPBITH)
    1846/D8E0 : 06                               DB     L(INPUT)
    1847/D8E1 : (MACRO)[179]            	GOTO	LINK			; handle LINK
    1847/D8E1 : 5A                               DB     H(LINK - JMPBITH)
    1847/D8E2 : 4F                               DB     L(LINK)
    1848/D8E3 : (MACRO)[180]            	GOTO	NEXTG			; handle NEXT
    1848/D8E3 : 59                               DB     H(NEXTG - JMPBITH)
    1848/D8E4 : 92                               DB     L(NEXTG)
    1849/D8E5 : (MACRO)[181]            	GOTO	ON			; handle ON
    1849/D8E5 : 5A                               DB     H(ON - JMPBITH)
    1849/D8E6 : 5D                               DB     L(ON)
    1850/D8E7 : (MACRO)[182]            	GOTO	PAGE			; handle PAGE
    1850/D8E7 : 59                               DB     H(PAGE - JMPBITH)
    1850/D8E8 : 20                               DB     L(PAGE)
    1851/D8E9 : (MACRO)[183]            	GOTO	POKE			; handle POKE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 52 - 10/31/2025 04:19:39 PM


    1851/D8E9 : 5A                               DB     H(POKE - JMPBITH)
    1851/D8EA : C0                               DB     L(POKE)
    1852/D8EB : (MACRO)[184]            	GOTO	PRINT			; handle PRINT
    1852/D8EB : 5A                               DB     H(PRINT - JMPBITH)
    1852/D8EC : ED                               DB     L(PRINT)
    1853/D8ED : (MACRO)[185]            	GOTO	PRINT			; handle PR
    1853/D8ED : 5A                               DB     H(PRINT - JMPBITH)
    1853/D8EE : ED                               DB     L(PRINT)
    1854/D8EF : (MACRO)[186]            	GOTO	READ			; handle READ
    1854/D8EF : 59                               DB     H(READ - JMPBITH)
    1854/D8F0 : A8                               DB     L(READ)
    1855/D8F1 : (MACRO)[187]            	DO	IGNORE			; ignore REM (handled elsewhere)
    1855/D8F1 : =>NOT BLANK                      IFNB   IGNORE
    1855/D8F1 : E4                                DB    H(IGNORE)
    1855/D8F2 : 08                                DB    L(IGNORE)
    1855/D8F3 :                                   SHIFT
    1855/D8F3 :  (MACRO-2)[188]                   DO    
    1855/D8F3 : =>BLANK                          IFNB   
    1855/D8F3 :                                   DB    H()
    1855/D8F3 :                                   DB    L()
    1855/D8F3 :                                   SHIFT
    1855/D8F3 :                                   DO    
    1855/D8F3 : [1855]                           ENDIF
    1855/D8F3 : [1855]                           ENDIF
    1856/D8F3 : (MACRO)[189]            	GOTO	RESTOR			; handle RESTORE
    1856/D8F3 : 59                               DB     H(RESTOR - JMPBITH)
    1856/D8F4 : F6                               DB     L(RESTOR)
    1857/D8F5 : (MACRO)[190]            	GOTO	RETURN			; handle RETURN
    1857/D8F5 : 5A                               DB     H(RETURN - JMPBITH)
    1857/D8F6 : 85                               DB     L(RETURN)
    1858/D8F7 : (MACRO)[191]            	GOTO	STAT			; handle STAT
    1858/D8F7 : 59                               DB     H(STAT - JMPBITH)
    1858/D8F8 : 39                               DB     L(STAT)
    1859/D8F9 : (MACRO)[192]            	GOTO	UNTIL			; handle UNTIL
    1859/D8F9 : 5A                               DB     H(UNTIL - JMPBITH)
    1859/D8FA : 47                               DB     L(UNTIL)
    1860/D8FB :                         
    1861/D8FB :                         ;*************************************
    1862/D8FB :                         ;*         MAIN I. L. TABLE          *
    1863/D8FB :                         ;*************************************
    1864/D8FB :                         ; This part is a regular I.L. processor, where we check
    1865/D8FB :                         ; and process tokens as we parse them. Using the 'FAIL'
    1866/D8FB :                         ; argument, it creates a linked list of things to try.
    1867/D8FB :                         ;
    1868/D8FB : (MACRO)[193]            	TSTVAR	PAGE0
    1868/D8FB : B9                               DB     H(PAGE0 - CALBITH)
    1868/D8FC : 1D                               DB     L(PAGE0)
    1869/D8FD : (MACRO)[194]            	DO	FNDVAR
    1869/D8FD : =>NOT BLANK                      IFNB   FNDVAR
    1869/D8FD : E2                                DB    H(FNDVAR)
    1869/D8FE : E1                                DB    L(FNDVAR)
    1869/D8FF :                                   SHIFT
    1869/D8FF :  (MACRO-2)[195]                   DO    
    1869/D8FF : =>BLANK                          IFNB   
    1869/D8FF :                                   DB    H()
    1869/D8FF :                                   DB    L()
    1869/D8FF :                                   SHIFT
    1869/D8FF :                                   DO    
    1869/D8FF : [1869]                           ENDIF
    1869/D8FF : [1869]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 53 - 10/31/2025 04:19:39 PM


    1870/D8FF : (MACRO)[196]            	DO	DEFVAR
    1870/D8FF : =>NOT BLANK                      IFNB   DEFVAR
    1870/D8FF : E5                                DB    H(DEFVAR)
    1870/D900 : 0E                                DB    L(DEFVAR)
    1870/D901 :                                   SHIFT
    1870/D901 :  (MACRO-2)[197]                   DO    
    1870/D901 : =>BLANK                          IFNB   
    1870/D901 :                                   DB    H()
    1870/D901 :                                   DB    L()
    1870/D901 :                                   SHIFT
    1870/D901 :                                   DO    
    1870/D901 : [1870]                           ENDIF
    1870/D901 : [1870]                           ENDIF
    1871/D901 : (MACRO)[198]            	TSTSTR	DOLLAR,'('
    1871/D901 : 99                               DB     H(DOLLAR - TSTBITH)
    1871/D902 : 0F                               DB     L(DOLLAR)
    1871/D903 : 28                               DB     '('
    1872/D904 : (MACRO)[199]            	ILCALL	INDEX
    1872/D904 : 1F                               DB     H(INDEX - (JMPBITH + TSTBITH))
    1872/D905 : 51                               DB     L(INDEX)
    1873/D906 : (MACRO)[200]            LET:	TSTSTR	SYNTAX,'='		; check for implied 'LET'
    1873/D906 : 99                               DB     H(SYNTAX - TSTBITH)
    1873/D907 : 42                               DB     L(SYNTAX)
    1873/D908 : 3D                               DB     '='
    1874/D909 : (MACRO)[201]            	ILCALL	REXPR
    1874/D909 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    1874/D90A : C6                               DB     L(REXPR)
    1875/D90B : (MACRO)[202]            	DO	STVAR
    1875/D90B : =>NOT BLANK                      IFNB   STVAR
    1875/D90B : E7                                DB    H(STVAR)
    1875/D90C : 8A                                DB    L(STVAR)
    1875/D90D :                                   SHIFT
    1875/D90D :  (MACRO-2)[203]                   DO    
    1875/D90D : =>BLANK                          IFNB   
    1875/D90D :                                   DB    H()
    1875/D90D :                                   DB    L()
    1875/D90D :                                   SHIFT
    1875/D90D :                                   DO    
    1875/D90D : [1875]                           ENDIF
    1875/D90D : [1875]                           ENDIF
    1876/D90D : (MACRO)[204]            	DO	DNE
    1876/D90D : =>NOT BLANK                      IFNB   DNE
    1876/D90D : E3                                DB    H(DNE)
    1876/D90E : B3                                DB    L(DNE)
    1876/D90F :                                   SHIFT
    1876/D90F :  (MACRO-2)[205]                   DO    
    1876/D90F : =>BLANK                          IFNB   
    1876/D90F :                                   DB    H()
    1876/D90F :                                   DB    L()
    1876/D90F :                                   SHIFT
    1876/D90F :                                   DO    
    1876/D90F : [1876]                           ENDIF
    1876/D90F : [1876]                           ENDIF
    1877/D90F : (MACRO)[206]            DOLLAR:	TSTSTR	LET,'$'			; test for var$, string expression
    1877/D90F : 99                               DB     H(LET - TSTBITH)
    1877/D910 : 06                               DB     L(LET)
    1877/D911 : 24                               DB     '$'
    1878/D912 : (MACRO)[207]            	DO	LDVAR
    1878/D912 : =>NOT BLANK                      IFNB   LDVAR
    1878/D912 : E8                                DB    H(LDVAR)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 54 - 10/31/2025 04:19:39 PM


    1878/D913 : 15                                DB    L(LDVAR)
    1878/D914 :                                   SHIFT
    1878/D914 :  (MACRO-2)[208]                   DO    
    1878/D914 : =>BLANK                          IFNB   
    1878/D914 :                                   DB    H()
    1878/D914 :                                   DB    L()
    1878/D914 :                                   SHIFT
    1878/D914 :                                   DO    
    1878/D914 : [1878]                           ENDIF
    1878/D914 : [1878]                           ENDIF
    1879/D914 : (MACRO)[209]            	DO	FIX
    1879/D914 : =>NOT BLANK                      IFNB   FIX
    1879/D914 : EB                                DB    H(FIX)
    1879/D915 : 2F                                DB    L(FIX)
    1879/D916 :                                   SHIFT
    1879/D916 :  (MACRO-2)[210]                   DO    
    1879/D916 : =>BLANK                          IFNB   
    1879/D916 :                                   DB    H()
    1879/D916 :                                   DB    L()
    1879/D916 :                                   SHIFT
    1879/D916 :                                   DO    
    1879/D916 : [1879]                           ENDIF
    1879/D916 : [1879]                           ENDIF
    1880/D916 : (MACRO)[211]            	TSTSTR	SYNTAX,'='
    1880/D916 : 99                               DB     H(SYNTAX - TSTBITH)
    1880/D917 : 42                               DB     L(SYNTAX)
    1880/D918 : 3D                               DB     '='
    1881/D919 : (MACRO)[212]            	ILCALL	STREXP
    1881/D919 : 1B                               DB     H(STREXP - (JMPBITH + TSTBITH))
    1881/D91A : 92                               DB     L(STREXP)
    1882/D91B : (MACRO)[213]            	DO	DNE
    1882/D91B : =>NOT BLANK                      IFNB   DNE
    1882/D91B : E3                                DB    H(DNE)
    1882/D91C : B3                                DB    L(DNE)
    1882/D91D :                                   SHIFT
    1882/D91D :  (MACRO-2)[214]                   DO    
    1882/D91D : =>BLANK                          IFNB   
    1882/D91D :                                   DB    H()
    1882/D91D :                                   DB    L()
    1882/D91D :                                   SHIFT
    1882/D91D :                                   DO    
    1882/D91D : [1882]                           ENDIF
    1882/D91D : [1882]                           ENDIF
    1883/D91D : (MACRO)[215]            PAGE0:	TSTSTR	PRINT0,T_PAGE		; handle PAGE
    1883/D91D : 99                               DB     H(PRINT0 - TSTBITH)
    1883/D91E : 31                               DB     L(PRINT0)
    1883/D91F : 98                               DB     T_PAGE
    1884/D920 : (MACRO)[216]            PAGE:	TSTSTR	SYNTAX,'='
    1884/D920 : 99                               DB     H(SYNTAX - TSTBITH)
    1884/D921 : 42                               DB     L(SYNTAX)
    1884/D922 : 3D                               DB     '='
    1885/D923 : (MACRO)[217]            	ILCALL	REXPR
    1885/D923 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    1885/D924 : C6                               DB     L(REXPR)
    1886/D925 : (MACRO)[218]            	DO	DONE
    1886/D925 : =>NOT BLANK                      IFNB   DONE
    1886/D925 : E3                                DB    H(DONE)
    1886/D926 : 71                                DB    L(DONE)
    1886/D927 :                                   SHIFT
    1886/D927 :  (MACRO-2)[219]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 55 - 10/31/2025 04:19:39 PM


    1886/D927 : =>BLANK                          IFNB   
    1886/D927 :                                   DB    H()
    1886/D927 :                                   DB    L()
    1886/D927 :                                   SHIFT
    1886/D927 :                                   DO    
    1886/D927 : [1886]                           ENDIF
    1886/D927 : [1886]                           ENDIF
    1887/D927 : (MACRO)[220]            	DO	POPAE
    1887/D927 : =>NOT BLANK                      IFNB   POPAE
    1887/D927 : E1                                DB    H(POPAE)
    1887/D928 : BD                                DB    L(POPAE)
    1887/D929 :                                   SHIFT
    1887/D929 :  (MACRO-2)[221]                   DO    
    1887/D929 : =>BLANK                          IFNB   
    1887/D929 :                                   DB    H()
    1887/D929 :                                   DB    L()
    1887/D929 :                                   SHIFT
    1887/D929 :                                   DO    
    1887/D929 : [1887]                           ENDIF
    1887/D929 : [1887]                           ENDIF
    1888/D929 : (MACRO)[222]            	DO	NUPAGE
    1888/D929 : =>NOT BLANK                      IFNB   NUPAGE
    1888/D929 : F0                                DB    H(NUPAGE)
    1888/D92A : 01                                DB    L(NUPAGE)
    1888/D92B :                                   SHIFT
    1888/D92B :  (MACRO-2)[223]                   DO    
    1888/D92B : =>BLANK                          IFNB   
    1888/D92B :                                   DB    H()
    1888/D92B :                                   DB    L()
    1888/D92B :                                   SHIFT
    1888/D92B :                                   DO    
    1888/D92B : [1888]                           ENDIF
    1888/D92B : [1888]                           ENDIF
    1889/D92B : (MACRO)[224]            	DO	LKPAGE
    1889/D92B : =>NOT BLANK                      IFNB   LKPAGE
    1889/D92B : E6                                DB    H(LKPAGE)
    1889/D92C : DD                                DB    L(LKPAGE)
    1889/D92D :                                   SHIFT
    1889/D92D :  (MACRO-2)[225]                   DO    
    1889/D92D : =>BLANK                          IFNB   
    1889/D92D :                                   DB    H()
    1889/D92D :                                   DB    L()
    1889/D92D :                                   SHIFT
    1889/D92D :                                   DO    
    1889/D92D : [1889]                           ENDIF
    1889/D92D : [1889]                           ENDIF
    1890/D92D : (MACRO)[226]            	DO	NXT
    1890/D92D : =>NOT BLANK                      IFNB   NXT
    1890/D92D : E4                                DB    H(NXT)
    1890/D92E : 0E                                DB    L(NXT)
    1890/D92F :                                   SHIFT
    1890/D92F :  (MACRO-2)[227]                   DO    
    1890/D92F : =>BLANK                          IFNB   
    1890/D92F :                                   DB    H()
    1890/D92F :                                   DB    L()
    1890/D92F :                                   SHIFT
    1890/D92F :                                   DO    
    1890/D92F : [1890]                           ENDIF
    1890/D92F : [1890]                           ENDIF
    1891/D92F : (MACRO)[228]            ENDPAR:	DO	ENDPR			; complain about missing parenthesis
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 56 - 10/31/2025 04:19:39 PM


    1891/D92F : =>NOT BLANK                      IFNB   ENDPR
    1891/D92F : E4                                DB    H(ENDPR)
    1891/D930 : 04                                DB    L(ENDPR)
    1891/D931 :                                   SHIFT
    1891/D931 :  (MACRO-2)[229]                   DO    
    1891/D931 : =>BLANK                          IFNB   
    1891/D931 :                                   DB    H()
    1891/D931 :                                   DB    L()
    1891/D931 :                                   SHIFT
    1891/D931 :                                   DO    
    1891/D931 : [1891]                           ENDIF
    1891/D931 : [1891]                           ENDIF
    1892/D931 : (MACRO)[230]            PRINT0:	TSTSTR	STAT0,'?'		; handle ? (short for PR[INT])
    1892/D931 : 99                               DB     H(STAT0 - TSTBITH)
    1892/D932 : 36                               DB     L(STAT0)
    1892/D933 : 3F                               DB     '?'
    1893/D934 : (MACRO)[231]            	GOTO	PRINT
    1893/D934 : 5A                               DB     H(PRINT - JMPBITH)
    1893/D935 : ED                               DB     L(PRINT)
    1894/D936 : (MACRO)[232]            STAT0:	TSTSTR	SYNTAX,T_STAT		; handle STAT
    1894/D936 : 99                               DB     H(SYNTAX - TSTBITH)
    1894/D937 : 42                               DB     L(SYNTAX)
    1894/D938 : A0                               DB     T_STAT
    1895/D939 : (MACRO)[233]            STAT:	TSTSTR	SYNTAX,'='
    1895/D939 : 99                               DB     H(SYNTAX - TSTBITH)
    1895/D93A : 42                               DB     L(SYNTAX)
    1895/D93B : 3D                               DB     '='
    1896/D93C : (MACRO)[234]            	ILCALL	REXPR
    1896/D93C : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    1896/D93D : C6                               DB     L(REXPR)
    1897/D93E : (MACRO)[235]            	DO	POPAE
    1897/D93E : =>NOT BLANK                      IFNB   POPAE
    1897/D93E : E1                                DB    H(POPAE)
    1897/D93F : BD                                DB    L(POPAE)
    1897/D940 :                                   SHIFT
    1897/D940 :  (MACRO-2)[236]                   DO    
    1897/D940 : =>BLANK                          IFNB   
    1897/D940 :                                   DB    H()
    1897/D940 :                                   DB    L()
    1897/D940 :                                   SHIFT
    1897/D940 :                                   DO    
    1897/D940 : [1897]                           ENDIF
    1897/D940 : [1897]                           ENDIF
    1898/D940 : (MACRO)[237]            	DO	MOVESR
    1898/D940 : =>NOT BLANK                      IFNB   MOVESR
    1898/D940 : E3                                DB    H(MOVESR)
    1898/D941 : B0                                DB    L(MOVESR)
    1898/D942 :                                   SHIFT
    1898/D942 :  (MACRO-2)[238]                   DO    
    1898/D942 : =>BLANK                          IFNB   
    1898/D942 :                                   DB    H()
    1898/D942 :                                   DB    L()
    1898/D942 :                                   SHIFT
    1898/D942 :                                   DO    
    1898/D942 : [1898]                           ENDIF
    1898/D942 : [1898]                           ENDIF
    1899/D942 : (MACRO)[239]            SYNTAX:	DO	SYNTX			; complain about syntax error
    1899/D942 : =>NOT BLANK                      IFNB   SYNTX
    1899/D942 : E4                                DB    H(SYNTX)
    1899/D943 : 00                                DB    L(SYNTX)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 57 - 10/31/2025 04:19:39 PM


    1899/D944 :                                   SHIFT
    1899/D944 :  (MACRO-2)[240]                   DO    
    1899/D944 : =>BLANK                          IFNB   
    1899/D944 :                                   DB    H()
    1899/D944 :                                   DB    L()
    1899/D944 :                                   SHIFT
    1899/D944 :                                   DO    
    1899/D944 : [1899]                           ENDIF
    1899/D944 : [1899]                           ENDIF
    1900/D944 : (MACRO)[241]            LIST:	TSTNUM	LIST2			; handle LIST
    1900/D944 : D9                               DB     H(LIST2)
    1900/D945 : 55                               DB     L(LIST2)
    1901/D946 : (MACRO)[242]            	DO	POPAE
    1901/D946 : =>NOT BLANK                      IFNB   POPAE
    1901/D946 : E1                                DB    H(POPAE)
    1901/D947 : BD                                DB    L(POPAE)
    1901/D948 :                                   SHIFT
    1901/D948 :  (MACRO-2)[243]                   DO    
    1901/D948 : =>BLANK                          IFNB   
    1901/D948 :                                   DB    H()
    1901/D948 :                                   DB    L()
    1901/D948 :                                   SHIFT
    1901/D948 :                                   DO    
    1901/D948 : [1901]                           ENDIF
    1901/D948 : [1901]                           ENDIF
    1902/D948 : (MACRO)[244]            	TSTSTR	LIST4,'-'
    1902/D948 : 99                               DB     H(LIST4 - TSTBITH)
    1902/D949 : 5B                               DB     L(LIST4)
    1902/D94A : 2D                               DB     '-'
    1903/D94B : (MACRO)[245]            	TSTNUM	SYNTAX
    1903/D94B : D9                               DB     H(SYNTAX)
    1903/D94C : 42                               DB     L(SYNTAX)
    1904/D94D : (MACRO)[246]            	DO	FNDLBL
    1904/D94D : =>NOT BLANK                      IFNB   FNDLBL
    1904/D94D : E5                                DB    H(FNDLBL)
    1904/D94E : 69                                DB    L(FNDLBL)
    1904/D94F :                                   SHIFT
    1904/D94F :  (MACRO-2)[247]                   DO    
    1904/D94F : =>BLANK                          IFNB   
    1904/D94F :                                   DB    H()
    1904/D94F :                                   DB    L()
    1904/D94F :                                   SHIFT
    1904/D94F :                                   DO    
    1904/D94F : [1904]                           ENDIF
    1904/D94F : [1904]                           ENDIF
    1905/D94F : (MACRO)[248]            	DO	POPAE
    1905/D94F : =>NOT BLANK                      IFNB   POPAE
    1905/D94F : E1                                DB    H(POPAE)
    1905/D950 : BD                                DB    L(POPAE)
    1905/D951 :                                   SHIFT
    1905/D951 :  (MACRO-2)[249]                   DO    
    1905/D951 : =>BLANK                          IFNB   
    1905/D951 :                                   DB    H()
    1905/D951 :                                   DB    L()
    1905/D951 :                                   SHIFT
    1905/D951 :                                   DO    
    1905/D951 : [1905]                           ENDIF
    1905/D951 : [1905]                           ENDIF
    1906/D951 : (MACRO)[250]            LIST1:	DO	LST1
    1906/D951 : =>NOT BLANK                      IFNB   LST1
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 58 - 10/31/2025 04:19:39 PM


    1906/D951 : E6                                DB    H(LST1)
    1906/D952 : 7E                                DB    L(LST1)
    1906/D953 :                                   SHIFT
    1906/D953 :  (MACRO-2)[251]                   DO    
    1906/D953 : =>BLANK                          IFNB   
    1906/D953 :                                   DB    H()
    1906/D953 :                                   DB    L()
    1906/D953 :                                   SHIFT
    1906/D953 :                                   DO    
    1906/D953 : [1906]                           ENDIF
    1906/D953 : [1906]                           ENDIF
    1907/D953 : (MACRO)[252]            	GOTO	LIST1
    1907/D953 : 59                               DB     H(LIST1 - JMPBITH)
    1907/D954 : 51                               DB     L(LIST1)
    1908/D955 : (MACRO)[253]            LIST2:	DO	CHPAGE
    1908/D955 : =>NOT BLANK                      IFNB   CHPAGE
    1908/D955 : E6                                DB    H(CHPAGE)
    1908/D956 : F8                                DB    L(CHPAGE)
    1908/D957 :                                   SHIFT
    1908/D957 :  (MACRO-2)[254]                   DO    
    1908/D957 : =>BLANK                          IFNB   
    1908/D957 :                                   DB    H()
    1908/D957 :                                   DB    L()
    1908/D957 :                                   SHIFT
    1908/D957 :                                   DO    
    1908/D957 : [1908]                           ENDIF
    1908/D957 : [1908]                           ENDIF
    1909/D957 : (MACRO)[255]            LIST3:	DO	LST2
    1909/D957 : =>NOT BLANK                      IFNB   LST2
    1909/D957 : E6                                DB    H(LST2)
    1909/D958 : 8A                                DB    L(LST2)
    1909/D959 :                                   SHIFT
    1909/D959 :  (MACRO-2)[256]                   DO    
    1909/D959 : =>BLANK                          IFNB   
    1909/D959 :                                   DB    H()
    1909/D959 :                                   DB    L()
    1909/D959 :                                   SHIFT
    1909/D959 :                                   DO    
    1909/D959 : [1909]                           ENDIF
    1909/D959 : [1909]                           ENDIF
    1910/D959 : (MACRO)[257]            	GOTO	LIST3
    1910/D959 : 59                               DB     H(LIST3 - JMPBITH)
    1910/D95A : 57                               DB     L(LIST3)
    1911/D95B : (MACRO)[258]            LIST4:	DO	FNDLBL
    1911/D95B : =>NOT BLANK                      IFNB   FNDLBL
    1911/D95B : E5                                DB    H(FNDLBL)
    1911/D95C : 69                                DB    L(FNDLBL)
    1911/D95D :                                   SHIFT
    1911/D95D :  (MACRO-2)[259]                   DO    
    1911/D95D : =>BLANK                          IFNB   
    1911/D95D :                                   DB    H()
    1911/D95D :                                   DB    L()
    1911/D95D :                                   SHIFT
    1911/D95D :                                   DO    
    1911/D95D : [1911]                           ENDIF
    1911/D95D : [1911]                           ENDIF
    1912/D95D : (MACRO)[260]            	DO	LST1
    1912/D95D : =>NOT BLANK                      IFNB   LST1
    1912/D95D : E6                                DB    H(LST1)
    1912/D95E : 7E                                DB    L(LST1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 59 - 10/31/2025 04:19:39 PM


    1912/D95F :                                   SHIFT
    1912/D95F :  (MACRO-2)[261]                   DO    
    1912/D95F : =>BLANK                          IFNB   
    1912/D95F :                                   DB    H()
    1912/D95F :                                   DB    L()
    1912/D95F :                                   SHIFT
    1912/D95F :                                   DO    
    1912/D95F : [1912]                           ENDIF
    1912/D95F : [1912]                           ENDIF
    1913/D95F : (MACRO)[262]            	DO	NXT
    1913/D95F : =>NOT BLANK                      IFNB   NXT
    1913/D95F : E4                                DB    H(NXT)
    1913/D960 : 0E                                DB    L(NXT)
    1913/D961 :                                   SHIFT
    1913/D961 :  (MACRO-2)[263]                   DO    
    1913/D961 : =>BLANK                          IFNB   
    1913/D961 :                                   DB    H()
    1913/D961 :                                   DB    L()
    1913/D961 :                                   SHIFT
    1913/D961 :                                   DO    
    1913/D961 : [1913]                           ENDIF
    1913/D961 : [1913]                           ENDIF
    1914/D961 : (MACRO)[264]            NEW:	TSTNUM	NEW1			; handle NEW
    1914/D961 : D9                               DB     H(NEW1)
    1914/D962 : 69                               DB     L(NEW1)
    1915/D963 : (MACRO)[265]            	DO	POPAE
    1915/D963 : =>NOT BLANK                      IFNB   POPAE
    1915/D963 : E1                                DB    H(POPAE)
    1915/D964 : BD                                DB    L(POPAE)
    1915/D965 :                                   SHIFT
    1915/D965 :  (MACRO-2)[266]                   DO    
    1915/D965 : =>BLANK                          IFNB   
    1915/D965 :                                   DB    H()
    1915/D965 :                                   DB    L()
    1915/D965 :                                   SHIFT
    1915/D965 :                                   DO    
    1915/D965 : [1915]                           ENDIF
    1915/D965 : [1915]                           ENDIF
    1916/D965 : (MACRO)[267]            	DO	NUPAGE
    1916/D965 : =>NOT BLANK                      IFNB   NUPAGE
    1916/D965 : F0                                DB    H(NUPAGE)
    1916/D966 : 01                                DB    L(NUPAGE)
    1916/D967 :                                   SHIFT
    1916/D967 :  (MACRO-2)[268]                   DO    
    1916/D967 : =>BLANK                          IFNB   
    1916/D967 :                                   DB    H()
    1916/D967 :                                   DB    L()
    1916/D967 :                                   SHIFT
    1916/D967 :                                   DO    
    1916/D967 : [1916]                           ENDIF
    1916/D967 : [1916]                           ENDIF
    1917/D967 : (MACRO)[269]            	GOTO	NEW2
    1917/D967 : 59                               DB     H(NEW2 - JMPBITH)
    1917/D968 : 6B                               DB     L(NEW2)
    1918/D969 : (MACRO)[270]            NEW1:	DO	NUPGE1
    1918/D969 : =>NOT BLANK                      IFNB   NUPGE1
    1918/D969 : F0                                DB    H(NUPGE1)
    1918/D96A : 07                                DB    L(NUPGE1)
    1918/D96B :                                   SHIFT
    1918/D96B :  (MACRO-2)[271]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 60 - 10/31/2025 04:19:39 PM


    1918/D96B : =>BLANK                          IFNB   
    1918/D96B :                                   DB    H()
    1918/D96B :                                   DB    L()
    1918/D96B :                                   SHIFT
    1918/D96B :                                   DO    
    1918/D96B : [1918]                           ENDIF
    1918/D96B : [1918]                           ENDIF
    1919/D96B : (MACRO)[272]            NEW2:	DO	DONE
    1919/D96B : =>NOT BLANK                      IFNB   DONE
    1919/D96B : E3                                DB    H(DONE)
    1919/D96C : 71                                DB    L(DONE)
    1919/D96D :                                   SHIFT
    1919/D96D :  (MACRO-2)[273]                   DO    
    1919/D96D : =>BLANK                          IFNB   
    1919/D96D :                                   DB    H()
    1919/D96D :                                   DB    L()
    1919/D96D :                                   SHIFT
    1919/D96D :                                   DO    
    1919/D96D : [1919]                           ENDIF
    1919/D96D : [1919]                           ENDIF
    1920/D96D : (MACRO)[274]            	DO	NEWPGM
    1920/D96D : =>NOT BLANK                      IFNB   NEWPGM
    1920/D96D : F0                                DB    H(NEWPGM)
    1920/D96E : 0D                                DB    L(NEWPGM)
    1920/D96F :                                   SHIFT
    1920/D96F :  (MACRO-2)[275]                   DO    
    1920/D96F : =>BLANK                          IFNB   
    1920/D96F :                                   DB    H()
    1920/D96F :                                   DB    L()
    1920/D96F :                                   SHIFT
    1920/D96F :                                   DO    
    1920/D96F : [1920]                           ENDIF
    1920/D96F : [1920]                           ENDIF
    1921/D96F : (MACRO)[276]            	DO	NXT2
    1921/D96F : =>NOT BLANK                      IFNB   NXT2
    1921/D96F : E4                                DB    H(NXT2)
    1921/D970 : 18                                DB    L(NXT2)
    1921/D971 :                                   SHIFT
    1921/D971 :  (MACRO-2)[277]                   DO    
    1921/D971 : =>BLANK                          IFNB   
    1921/D971 :                                   DB    H()
    1921/D971 :                                   DB    L()
    1921/D971 :                                   SHIFT
    1921/D971 :                                   DO    
    1921/D971 : [1921]                           ENDIF
    1921/D971 : [1921]                           ENDIF
    1922/D971 : (MACRO)[278]            FOR:	DO	CKMODE			; handle FOR
    1922/D971 : =>NOT BLANK                      IFNB   CKMODE
    1922/D971 : E5                                DB    H(CKMODE)
    1922/D972 : B8                                DB    L(CKMODE)
    1922/D973 :                                   SHIFT
    1922/D973 :  (MACRO-2)[279]                   DO    
    1922/D973 : =>BLANK                          IFNB   
    1922/D973 :                                   DB    H()
    1922/D973 :                                   DB    L()
    1922/D973 :                                   SHIFT
    1922/D973 :                                   DO    
    1922/D973 : [1922]                           ENDIF
    1922/D973 : [1922]                           ENDIF
    1923/D973 : (MACRO)[280]            	TSTVAR	SYNTAX
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 61 - 10/31/2025 04:19:39 PM


    1923/D973 : B9                               DB     H(SYNTAX - CALBITH)
    1923/D974 : 42                               DB     L(SYNTAX)
    1924/D975 : (MACRO)[281]            	DO	FNDVAR
    1924/D975 : =>NOT BLANK                      IFNB   FNDVAR
    1924/D975 : E2                                DB    H(FNDVAR)
    1924/D976 : E1                                DB    L(FNDVAR)
    1924/D977 :                                   SHIFT
    1924/D977 :  (MACRO-2)[282]                   DO    
    1924/D977 : =>BLANK                          IFNB   
    1924/D977 :                                   DB    H()
    1924/D977 :                                   DB    L()
    1924/D977 :                                   SHIFT
    1924/D977 :                                   DO    
    1924/D977 : [1924]                           ENDIF
    1924/D977 : [1924]                           ENDIF
    1925/D977 : (MACRO)[283]            	DO	DEFVAR
    1925/D977 : =>NOT BLANK                      IFNB   DEFVAR
    1925/D977 : E5                                DB    H(DEFVAR)
    1925/D978 : 0E                                DB    L(DEFVAR)
    1925/D979 :                                   SHIFT
    1925/D979 :  (MACRO-2)[284]                   DO    
    1925/D979 : =>BLANK                          IFNB   
    1925/D979 :                                   DB    H()
    1925/D979 :                                   DB    L()
    1925/D979 :                                   SHIFT
    1925/D979 :                                   DO    
    1925/D979 : [1925]                           ENDIF
    1925/D979 : [1925]                           ENDIF
    1926/D979 : (MACRO)[285]            	TSTSTR	SYNTAX,'='
    1926/D979 : 99                               DB     H(SYNTAX - TSTBITH)
    1926/D97A : 42                               DB     L(SYNTAX)
    1926/D97B : 3D                               DB     '='
    1927/D97C : (MACRO)[286]            	ILCALL	REXPR
    1927/D97C : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    1927/D97D : C6                               DB     L(REXPR)
    1928/D97E : (MACRO)[287]            	TSTSTR	SYNTAX,T_TO		; handle TO
    1928/D97E : 99                               DB     H(SYNTAX - TSTBITH)
    1928/D97F : 42                               DB     L(SYNTAX)
    1928/D980 : C4                               DB     T_TO
    1929/D981 : (MACRO)[288]            	ILCALL	REXPR
    1929/D981 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    1929/D982 : C6                               DB     L(REXPR)
    1930/D983 : (MACRO)[289]            	TSTSTR	FOR1,T_STEP		; handle STEP
    1930/D983 : 99                               DB     H(FOR1 - TSTBITH)
    1930/D984 : 8A                               DB     L(FOR1)
    1930/D985 : C2                               DB     T_STEP
    1931/D986 : (MACRO)[290]            	ILCALL	REXPR
    1931/D986 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    1931/D987 : C6                               DB     L(REXPR)
    1932/D988 : (MACRO)[291]            	GOTO	FOR2
    1932/D988 : 59                               DB     H(FOR2 - JMPBITH)
    1932/D989 : 8C                               DB     L(FOR2)
    1933/D98A : (MACRO)[292]            FOR1:	DO	ONE
    1933/D98A : =>NOT BLANK                      IFNB   ONE
    1933/D98A : E7                                DB    H(ONE)
    1933/D98B : 16                                DB    L(ONE)
    1933/D98C :                                   SHIFT
    1933/D98C :  (MACRO-2)[293]                   DO    
    1933/D98C : =>BLANK                          IFNB   
    1933/D98C :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 62 - 10/31/2025 04:19:39 PM


    1933/D98C :                                   DB    L()
    1933/D98C :                                   SHIFT
    1933/D98C :                                   DO    
    1933/D98C : [1933]                           ENDIF
    1933/D98C : [1933]                           ENDIF
    1934/D98C : (MACRO)[294]            FOR2:	DO	DONE
    1934/D98C : =>NOT BLANK                      IFNB   DONE
    1934/D98C : E3                                DB    H(DONE)
    1934/D98D : 71                                DB    L(DONE)
    1934/D98E :                                   SHIFT
    1934/D98E :  (MACRO-2)[295]                   DO    
    1934/D98E : =>BLANK                          IFNB   
    1934/D98E :                                   DB    H()
    1934/D98E :                                   DB    L()
    1934/D98E :                                   SHIFT
    1934/D98E :                                   DO    
    1934/D98E : [1934]                           ENDIF
    1934/D98E : [1934]                           ENDIF
    1935/D98E : (MACRO)[296]            	DO	SAVFOR
    1935/D98E : =>NOT BLANK                      IFNB   SAVFOR
    1935/D98E : E7                                DB    H(SAVFOR)
    1935/D98F : 2B                                DB    L(SAVFOR)
    1935/D990 :                                   SHIFT
    1935/D990 :  (MACRO-2)[297]                   DO    
    1935/D990 : =>BLANK                          IFNB   
    1935/D990 :                                   DB    H()
    1935/D990 :                                   DB    L()
    1935/D990 :                                   SHIFT
    1935/D990 :                                   DO    
    1935/D990 : [1935]                           ENDIF
    1935/D990 : [1935]                           ENDIF
    1936/D990 : (MACRO)[298]            	DO	NXT
    1936/D990 : =>NOT BLANK                      IFNB   NXT
    1936/D990 : E4                                DB    H(NXT)
    1936/D991 : 0E                                DB    L(NXT)
    1936/D992 :                                   SHIFT
    1936/D992 :  (MACRO-2)[299]                   DO    
    1936/D992 : =>BLANK                          IFNB   
    1936/D992 :                                   DB    H()
    1936/D992 :                                   DB    L()
    1936/D992 :                                   SHIFT
    1936/D992 :                                   DO    
    1936/D992 : [1936]                           ENDIF
    1936/D992 : [1936]                           ENDIF
    1937/D992 : (MACRO)[300]            NEXTG:	DO	CKMODE			; handle NEXT
    1937/D992 : =>NOT BLANK                      IFNB   CKMODE
    1937/D992 : E5                                DB    H(CKMODE)
    1937/D993 : B8                                DB    L(CKMODE)
    1937/D994 :                                   SHIFT
    1937/D994 :  (MACRO-2)[301]                   DO    
    1937/D994 : =>BLANK                          IFNB   
    1937/D994 :                                   DB    H()
    1937/D994 :                                   DB    L()
    1937/D994 :                                   SHIFT
    1937/D994 :                                   DO    
    1937/D994 : [1937]                           ENDIF
    1937/D994 : [1937]                           ENDIF
    1938/D994 : (MACRO)[302]            	TSTVAR	SYNTAX
    1938/D994 : B9                               DB     H(SYNTAX - CALBITH)
    1938/D995 : 42                               DB     L(SYNTAX)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 63 - 10/31/2025 04:19:39 PM


    1939/D996 : (MACRO)[303]            	DO	FNDVAR
    1939/D996 : =>NOT BLANK                      IFNB   FNDVAR
    1939/D996 : E2                                DB    H(FNDVAR)
    1939/D997 : E1                                DB    L(FNDVAR)
    1939/D998 :                                   SHIFT
    1939/D998 :  (MACRO-2)[304]                   DO    
    1939/D998 : =>BLANK                          IFNB   
    1939/D998 :                                   DB    H()
    1939/D998 :                                   DB    L()
    1939/D998 :                                   SHIFT
    1939/D998 :                                   DO    
    1939/D998 : [1939]                           ENDIF
    1939/D998 : [1939]                           ENDIF
    1940/D998 : (MACRO)[305]            	DO	NXTVAR
    1940/D998 : =>NOT BLANK                      IFNB   NXTVAR
    1940/D998 : E7                                DB    H(NXTVAR)
    1940/D999 : B0                                DB    L(NXTVAR)
    1940/D99A :                                   SHIFT
    1940/D99A :  (MACRO-2)[306]                   DO    
    1940/D99A : =>BLANK                          IFNB   
    1940/D99A :                                   DB    H()
    1940/D99A :                                   DB    L()
    1940/D99A :                                   SHIFT
    1940/D99A :                                   DO    
    1940/D99A : [1940]                           ENDIF
    1940/D99A : [1940]                           ENDIF
    1941/D99A : (MACRO)[307]            	DO	FADD
    1941/D99A : =>NOT BLANK                      IFNB   FADD
    1941/D99A : F1                                DB    H(FADD)
    1941/D99B : 3C                                DB    L(FADD)
    1941/D99C :                                   SHIFT
    1941/D99C :  (MACRO-2)[308]                   DO    
    1941/D99C : =>BLANK                          IFNB   
    1941/D99C :                                   DB    H()
    1941/D99C :                                   DB    L()
    1941/D99C :                                   SHIFT
    1941/D99C :                                   DO    
    1941/D99C : [1941]                           ENDIF
    1941/D99C : [1941]                           ENDIF
    1942/D99C : (MACRO)[309]            	DO	NXTV
    1942/D99C : =>NOT BLANK                      IFNB   NXTV
    1942/D99C : E8                                DB    H(NXTV)
    1942/D99D : 4D                                DB    L(NXTV)
    1942/D99E :                                   SHIFT
    1942/D99E :  (MACRO-2)[310]                   DO    
    1942/D99E : =>BLANK                          IFNB   
    1942/D99E :                                   DB    H()
    1942/D99E :                                   DB    L()
    1942/D99E :                                   SHIFT
    1942/D99E :                                   DO    
    1942/D99E : [1942]                           ENDIF
    1942/D99E : [1942]                           ENDIF
    1943/D99E : (MACRO)[311]            	DO	DETPGE
    1943/D99E : =>NOT BLANK                      IFNB   DETPGE
    1943/D99E : E4                                DB    H(DETPGE)
    1943/D99F : 7F                                DB    L(DETPGE)
    1943/D9A0 :                                   SHIFT
    1943/D9A0 :  (MACRO-2)[312]                   DO    
    1943/D9A0 : =>BLANK                          IFNB   
    1943/D9A0 :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 64 - 10/31/2025 04:19:39 PM


    1943/D9A0 :                                   DB    L()
    1943/D9A0 :                                   SHIFT
    1943/D9A0 :                                   DO    
    1943/D9A0 : [1943]                           ENDIF
    1943/D9A0 : [1943]                           ENDIF
    1944/D9A0 : (MACRO)[313]            RUN:	DO	DONE			; handle RUN
    1944/D9A0 : =>NOT BLANK                      IFNB   DONE
    1944/D9A0 : E3                                DB    H(DONE)
    1944/D9A1 : 71                                DB    L(DONE)
    1944/D9A2 :                                   SHIFT
    1944/D9A2 :  (MACRO-2)[314]                   DO    
    1944/D9A2 : =>BLANK                          IFNB   
    1944/D9A2 :                                   DB    H()
    1944/D9A2 :                                   DB    L()
    1944/D9A2 :                                   SHIFT
    1944/D9A2 :                                   DO    
    1944/D9A2 : [1944]                           ENDIF
    1944/D9A2 : [1944]                           ENDIF
    1945/D9A2 : (MACRO)[315]            	DO	CHPAGE
    1945/D9A2 : =>NOT BLANK                      IFNB   CHPAGE
    1945/D9A2 : E6                                DB    H(CHPAGE)
    1945/D9A3 : F8                                DB    L(CHPAGE)
    1945/D9A4 :                                   SHIFT
    1945/D9A4 :  (MACRO-2)[316]                   DO    
    1945/D9A4 : =>BLANK                          IFNB   
    1945/D9A4 :                                   DB    H()
    1945/D9A4 :                                   DB    L()
    1945/D9A4 :                                   SHIFT
    1945/D9A4 :                                   DO    
    1945/D9A4 : [1945]                           ENDIF
    1945/D9A4 : [1945]                           ENDIF
    1946/D9A4 : (MACRO)[317]            	DO	STRT
    1946/D9A4 : =>NOT BLANK                      IFNB   STRT
    1946/D9A4 : E4                                DB    H(STRT)
    1946/D9A5 : BC                                DB    L(STRT)
    1946/D9A6 :                                   SHIFT
    1946/D9A6 :  (MACRO-2)[318]                   DO    
    1946/D9A6 : =>BLANK                          IFNB   
    1946/D9A6 :                                   DB    H()
    1946/D9A6 :                                   DB    L()
    1946/D9A6 :                                   SHIFT
    1946/D9A6 :                                   DO    
    1946/D9A6 : [1946]                           ENDIF
    1946/D9A6 : [1946]                           ENDIF
    1947/D9A6 : (MACRO)[319]            RUN1:	DO	NXT1
    1947/D9A6 : =>NOT BLANK                      IFNB   NXT1
    1947/D9A6 : E4                                DB    H(NXT1)
    1947/D9A7 : 12                                DB    L(NXT1)
    1947/D9A8 :                                   SHIFT
    1947/D9A8 :  (MACRO-2)[320]                   DO    
    1947/D9A8 : =>BLANK                          IFNB   
    1947/D9A8 :                                   DB    H()
    1947/D9A8 :                                   DB    L()
    1947/D9A8 :                                   SHIFT
    1947/D9A8 :                                   DO    
    1947/D9A8 : [1947]                           ENDIF
    1947/D9A8 : [1947]                           ENDIF
    1948/D9A8 : (MACRO)[321]            READ:	DO	CKMODE			; handle READ
    1948/D9A8 : =>NOT BLANK                      IFNB   CKMODE
    1948/D9A8 : E5                                DB    H(CKMODE)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 65 - 10/31/2025 04:19:39 PM


    1948/D9A9 : B8                                DB    L(CKMODE)
    1948/D9AA :                                   SHIFT
    1948/D9AA :  (MACRO-2)[322]                   DO    
    1948/D9AA : =>BLANK                          IFNB   
    1948/D9AA :                                   DB    H()
    1948/D9AA :                                   DB    L()
    1948/D9AA :                                   SHIFT
    1948/D9AA :                                   DO    
    1948/D9AA : [1948]                           ENDIF
    1948/D9AA : [1948]                           ENDIF
    1949/D9AA : (MACRO)[323]            	DO	LDDTA
    1949/D9AA : =>NOT BLANK                      IFNB   LDDTA
    1949/D9AA : E8                                DB    H(LDDTA)
    1949/D9AB : A6                                DB    L(LDDTA)
    1949/D9AC :                                   SHIFT
    1949/D9AC :  (MACRO-2)[324]                   DO    
    1949/D9AC : =>BLANK                          IFNB   
    1949/D9AC :                                   DB    H()
    1949/D9AC :                                   DB    L()
    1949/D9AC :                                   SHIFT
    1949/D9AC :                                   DO    
    1949/D9AC : [1949]                           ENDIF
    1949/D9AC : [1949]                           ENDIF
    1950/D9AC : (MACRO)[325]            READ1:	DO	NXTDTA
    1950/D9AC : =>NOT BLANK                      IFNB   NXTDTA
    1950/D9AC : E8                                DB    H(NXTDTA)
    1950/D9AD : B2                                DB    L(NXTDTA)
    1950/D9AE :                                   SHIFT
    1950/D9AE :  (MACRO-2)[326]                   DO    
    1950/D9AE : =>BLANK                          IFNB   
    1950/D9AE :                                   DB    H()
    1950/D9AE :                                   DB    L()
    1950/D9AE :                                   SHIFT
    1950/D9AE :                                   DO    
    1950/D9AE : [1950]                           ENDIF
    1950/D9AE : [1950]                           ENDIF
    1951/D9AE : (MACRO)[327]            	DO	XCHPNT
    1951/D9AE : =>NOT BLANK                      IFNB   XCHPNT
    1951/D9AE : E9                                DB    H(XCHPNT)
    1951/D9AF : 1E                                DB    L(XCHPNT)
    1951/D9B0 :                                   SHIFT
    1951/D9B0 :  (MACRO-2)[328]                   DO    
    1951/D9B0 : =>BLANK                          IFNB   
    1951/D9B0 :                                   DB    H()
    1951/D9B0 :                                   DB    L()
    1951/D9B0 :                                   SHIFT
    1951/D9B0 :                                   DO    
    1951/D9B0 : [1951]                           ENDIF
    1951/D9B0 : [1951]                           ENDIF
    1952/D9B0 : (MACRO)[329]            	TSTVAR	LIST
    1952/D9B0 : B9                               DB     H(LIST - CALBITH)
    1952/D9B1 : 44                               DB     L(LIST)
    1953/D9B2 : (MACRO)[330]            	DO	FNDVAR
    1953/D9B2 : =>NOT BLANK                      IFNB   FNDVAR
    1953/D9B2 : E2                                DB    H(FNDVAR)
    1953/D9B3 : E1                                DB    L(FNDVAR)
    1953/D9B4 :                                   SHIFT
    1953/D9B4 :  (MACRO-2)[331]                   DO    
    1953/D9B4 : =>BLANK                          IFNB   
    1953/D9B4 :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 66 - 10/31/2025 04:19:39 PM


    1953/D9B4 :                                   DB    L()
    1953/D9B4 :                                   SHIFT
    1953/D9B4 :                                   DO    
    1953/D9B4 : [1953]                           ENDIF
    1953/D9B4 : [1953]                           ENDIF
    1954/D9B4 : (MACRO)[332]            	DO	DEFVAR
    1954/D9B4 : =>NOT BLANK                      IFNB   DEFVAR
    1954/D9B4 : E5                                DB    H(DEFVAR)
    1954/D9B5 : 0E                                DB    L(DEFVAR)
    1954/D9B6 :                                   SHIFT
    1954/D9B6 :  (MACRO-2)[333]                   DO    
    1954/D9B6 : =>BLANK                          IFNB   
    1954/D9B6 :                                   DB    H()
    1954/D9B6 :                                   DB    L()
    1954/D9B6 :                                   SHIFT
    1954/D9B6 :                                   DO    
    1954/D9B6 : [1954]                           ENDIF
    1954/D9B6 : [1954]                           ENDIF
    1955/D9B6 : (MACRO)[334]            	TSTSTR	READ5,'('
    1955/D9B6 : 99                               DB     H(READ5 - TSTBITH)
    1955/D9B7 : D5                               DB     L(READ5)
    1955/D9B8 : 28                               DB     '('
    1956/D9B9 : (MACRO)[335]            	ILCALL	INDEX
    1956/D9B9 : 1F                               DB     H(INDEX - (JMPBITH + TSTBITH))
    1956/D9BA : 51                               DB     L(INDEX)
    1957/D9BB : (MACRO)[336]            READ2:	DO	XCHPNT
    1957/D9BB : =>NOT BLANK                      IFNB   XCHPNT
    1957/D9BB : E9                                DB    H(XCHPNT)
    1957/D9BC : 1E                                DB    L(XCHPNT)
    1957/D9BD :                                   SHIFT
    1957/D9BD :  (MACRO-2)[337]                   DO    
    1957/D9BD : =>BLANK                          IFNB   
    1957/D9BD :                                   DB    H()
    1957/D9BD :                                   DB    L()
    1957/D9BD :                                   SHIFT
    1957/D9BD :                                   DO    
    1957/D9BD : [1957]                           ENDIF
    1957/D9BD : [1957]                           ENDIF
    1958/D9BD : (MACRO)[338]            	TSTSTR	READ3,'-'
    1958/D9BD : 99                               DB     H(READ3 - TSTBITH)
    1958/D9BE : CA                               DB     L(READ3)
    1958/D9BF : 2D                               DB     '-'
    1959/D9C0 : (MACRO)[339]            	TSTNUM	READ9
    1959/D9C0 : D9                               DB     H(READ9)
    1959/D9C1 : F4                               DB     L(READ9)
    1960/D9C2 : (MACRO)[340]            	ILCALL	RNUM
    1960/D9C2 : 1D                               DB     H(RNUM - (JMPBITH + TSTBITH))
    1960/D9C3 : 7B                               DB     L(RNUM)
    1961/D9C4 : (MACRO)[341]            	ILCALL	NEG
    1961/D9C4 : 1A                               DB     H(NEG - (JMPBITH + TSTBITH))
    1961/D9C5 : E7                               DB     L(NEG)
    1962/D9C6 : (MACRO)[342]            	DO	STVAR
    1962/D9C6 : =>NOT BLANK                      IFNB   STVAR
    1962/D9C6 : E7                                DB    H(STVAR)
    1962/D9C7 : 8A                                DB    L(STVAR)
    1962/D9C8 :                                   SHIFT
    1962/D9C8 :  (MACRO-2)[343]                   DO    
    1962/D9C8 : =>BLANK                          IFNB   
    1962/D9C8 :                                   DB    H()
    1962/D9C8 :                                   DB    L()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 67 - 10/31/2025 04:19:39 PM


    1962/D9C8 :                                   SHIFT
    1962/D9C8 :                                   DO    
    1962/D9C8 : [1962]                           ENDIF
    1962/D9C8 : [1962]                           ENDIF
    1963/D9C8 : (MACRO)[344]            	GOTO	READ7
    1963/D9C8 : 59                               DB     H(READ7 - JMPBITH)
    1963/D9C9 : E7                               DB     L(READ7)
    1964/D9CA : (MACRO)[345]            READ3:	TSTSTR	READ4,'+'
    1964/D9CA : 99                               DB     H(READ4 - TSTBITH)
    1964/D9CB : CD                               DB     L(READ4)
    1964/D9CC : 2B                               DB     '+'
    1965/D9CD : (MACRO)[346]            READ4:	TSTNUM	READ9
    1965/D9CD : D9                               DB     H(READ9)
    1965/D9CE : F4                               DB     L(READ9)
    1966/D9CF : (MACRO)[347]            	ILCALL	RNUM
    1966/D9CF : 1D                               DB     H(RNUM - (JMPBITH + TSTBITH))
    1966/D9D0 : 7B                               DB     L(RNUM)
    1967/D9D1 : (MACRO)[348]            	DO	STVAR
    1967/D9D1 : =>NOT BLANK                      IFNB   STVAR
    1967/D9D1 : E7                                DB    H(STVAR)
    1967/D9D2 : 8A                                DB    L(STVAR)
    1967/D9D3 :                                   SHIFT
    1967/D9D3 :  (MACRO-2)[349]                   DO    
    1967/D9D3 : =>BLANK                          IFNB   
    1967/D9D3 :                                   DB    H()
    1967/D9D3 :                                   DB    L()
    1967/D9D3 :                                   SHIFT
    1967/D9D3 :                                   DO    
    1967/D9D3 : [1967]                           ENDIF
    1967/D9D3 : [1967]                           ENDIF
    1968/D9D3 : (MACRO)[350]            	GOTO	READ7
    1968/D9D3 : 59                               DB     H(READ7 - JMPBITH)
    1968/D9D4 : E7                               DB     L(READ7)
    1969/D9D5 : (MACRO)[351]            READ5:	TSTSTR	READ2,'$'
    1969/D9D5 : 99                               DB     H(READ2 - TSTBITH)
    1969/D9D6 : BB                               DB     L(READ2)
    1969/D9D7 : 24                               DB     '$'
    1970/D9D8 : (MACRO)[352]            	DO	LDVAR
    1970/D9D8 : =>NOT BLANK                      IFNB   LDVAR
    1970/D9D8 : E8                                DB    H(LDVAR)
    1970/D9D9 : 15                                DB    L(LDVAR)
    1970/D9DA :                                   SHIFT
    1970/D9DA :  (MACRO-2)[353]                   DO    
    1970/D9DA : =>BLANK                          IFNB   
    1970/D9DA :                                   DB    H()
    1970/D9DA :                                   DB    L()
    1970/D9DA :                                   SHIFT
    1970/D9DA :                                   DO    
    1970/D9DA : [1970]                           ENDIF
    1970/D9DA : [1970]                           ENDIF
    1971/D9DA : (MACRO)[354]            	DO	POPAE
    1971/D9DA : =>NOT BLANK                      IFNB   POPAE
    1971/D9DA : E1                                DB    H(POPAE)
    1971/D9DB : BD                                DB    L(POPAE)
    1971/D9DC :                                   SHIFT
    1971/D9DC :  (MACRO-2)[355]                   DO    
    1971/D9DC : =>BLANK                          IFNB   
    1971/D9DC :                                   DB    H()
    1971/D9DC :                                   DB    L()
    1971/D9DC :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 68 - 10/31/2025 04:19:39 PM


    1971/D9DC :                                   DO    
    1971/D9DC : [1971]                           ENDIF
    1971/D9DC : [1971]                           ENDIF
    1972/D9DC : (MACRO)[356]            	DO	XCHPNT
    1972/D9DC : =>NOT BLANK                      IFNB   XCHPNT
    1972/D9DC : E9                                DB    H(XCHPNT)
    1972/D9DD : 1E                                DB    L(XCHPNT)
    1972/D9DE :                                   SHIFT
    1972/D9DE :  (MACRO-2)[357]                   DO    
    1972/D9DE : =>BLANK                          IFNB   
    1972/D9DE :                                   DB    H()
    1972/D9DE :                                   DB    L()
    1972/D9DE :                                   SHIFT
    1972/D9DE :                                   DO    
    1972/D9DE : [1972]                           ENDIF
    1972/D9DE : [1972]                           ENDIF
    1973/D9DE : (MACRO)[358]            	TSTSTR	READ6,'"'
    1973/D9DE : 99                               DB     H(READ6 - TSTBITH)
    1973/D9DF : E5                               DB     L(READ6)
    1973/D9E0 : 22                               DB     '"'
    1974/D9E1 : (MACRO)[359]            	DO	PUTSTR
    1974/D9E1 : =>NOT BLANK                      IFNB   PUTSTR
    1974/D9E1 : E9                                DB    H(PUTSTR)
    1974/D9E2 : 45                                DB    L(PUTSTR)
    1974/D9E3 :                                   SHIFT
    1974/D9E3 :  (MACRO-2)[360]                   DO    
    1974/D9E3 : =>BLANK                          IFNB   
    1974/D9E3 :                                   DB    H()
    1974/D9E3 :                                   DB    L()
    1974/D9E3 :                                   SHIFT
    1974/D9E3 :                                   DO    
    1974/D9E3 : [1974]                           ENDIF
    1974/D9E3 : [1974]                           ENDIF
    1975/D9E3 : (MACRO)[361]            	GOTO	READ7
    1975/D9E3 : 59                               DB     H(READ7 - JMPBITH)
    1975/D9E4 : E7                               DB     L(READ7)
    1976/D9E5 : (MACRO)[362]            READ6:	DO	INSTR
    1976/D9E5 : =>NOT BLANK                      IFNB   INSTR
    1976/D9E5 : E9                                DB    H(INSTR)
    1976/D9E6 : 2A                                DB    L(INSTR)
    1976/D9E7 :                                   SHIFT
    1976/D9E7 :  (MACRO-2)[363]                   DO    
    1976/D9E7 : =>BLANK                          IFNB   
    1976/D9E7 :                                   DB    H()
    1976/D9E7 :                                   DB    L()
    1976/D9E7 :                                   SHIFT
    1976/D9E7 :                                   DO    
    1976/D9E7 : [1976]                           ENDIF
    1976/D9E7 : [1976]                           ENDIF
    1977/D9E7 : (MACRO)[364]            READ7:	DO	XCHPNT
    1977/D9E7 : =>NOT BLANK                      IFNB   XCHPNT
    1977/D9E7 : E9                                DB    H(XCHPNT)
    1977/D9E8 : 1E                                DB    L(XCHPNT)
    1977/D9E9 :                                   SHIFT
    1977/D9E9 :  (MACRO-2)[365]                   DO    
    1977/D9E9 : =>BLANK                          IFNB   
    1977/D9E9 :                                   DB    H()
    1977/D9E9 :                                   DB    L()
    1977/D9E9 :                                   SHIFT
    1977/D9E9 :                                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 69 - 10/31/2025 04:19:39 PM


    1977/D9E9 : [1977]                           ENDIF
    1977/D9E9 : [1977]                           ENDIF
    1978/D9E9 : (MACRO)[366]            	TSTSTR	READ8,','
    1978/D9E9 : 99                               DB     H(READ8 - TSTBITH)
    1978/D9EA : F0                               DB     L(READ8)
    1978/D9EB : 2C                               DB     ','
    1979/D9EC : (MACRO)[367]            	DO	XCHPNT
    1979/D9EC : =>NOT BLANK                      IFNB   XCHPNT
    1979/D9EC : E9                                DB    H(XCHPNT)
    1979/D9ED : 1E                                DB    L(XCHPNT)
    1979/D9EE :                                   SHIFT
    1979/D9EE :  (MACRO-2)[368]                   DO    
    1979/D9EE : =>BLANK                          IFNB   
    1979/D9EE :                                   DB    H()
    1979/D9EE :                                   DB    L()
    1979/D9EE :                                   SHIFT
    1979/D9EE :                                   DO    
    1979/D9EE : [1979]                           ENDIF
    1979/D9EE : [1979]                           ENDIF
    1980/D9EE : (MACRO)[369]            	GOTO	READ1
    1980/D9EE : 59                               DB     H(READ1 - JMPBITH)
    1980/D9EF : AC                               DB     L(READ1)
    1981/D9F0 : (MACRO)[370]            READ8:	DO	LDPNT
    1981/D9F0 : =>NOT BLANK                      IFNB   LDPNT
    1981/D9F0 : E5                                DB    H(LDPNT)
    1981/D9F1 : 04                                DB    L(LDPNT)
    1981/D9F2 :                                   SHIFT
    1981/D9F2 :  (MACRO-2)[371]                   DO    
    1981/D9F2 : =>BLANK                          IFNB   
    1981/D9F2 :                                   DB    H()
    1981/D9F2 :                                   DB    L()
    1981/D9F2 :                                   SHIFT
    1981/D9F2 :                                   DO    
    1981/D9F2 : [1981]                           ENDIF
    1981/D9F2 : [1981]                           ENDIF
    1982/D9F2 : (MACRO)[372]            	DO	DNE
    1982/D9F2 : =>NOT BLANK                      IFNB   DNE
    1982/D9F2 : E3                                DB    H(DNE)
    1982/D9F3 : B3                                DB    L(DNE)
    1982/D9F4 :                                   SHIFT
    1982/D9F4 :  (MACRO-2)[373]                   DO    
    1982/D9F4 : =>BLANK                          IFNB   
    1982/D9F4 :                                   DB    H()
    1982/D9F4 :                                   DB    L()
    1982/D9F4 :                                   SHIFT
    1982/D9F4 :                                   DO    
    1982/D9F4 : [1982]                           ENDIF
    1982/D9F4 : [1982]                           ENDIF
    1983/D9F4 : (MACRO)[374]            READ9:	DO	SNTX
    1983/D9F4 : =>NOT BLANK                      IFNB   SNTX
    1983/D9F4 : E3                                DB    H(SNTX)
    1983/D9F5 : F8                                DB    L(SNTX)
    1983/D9F6 :                                   SHIFT
    1983/D9F6 :  (MACRO-2)[375]                   DO    
    1983/D9F6 : =>BLANK                          IFNB   
    1983/D9F6 :                                   DB    H()
    1983/D9F6 :                                   DB    L()
    1983/D9F6 :                                   SHIFT
    1983/D9F6 :                                   DO    
    1983/D9F6 : [1983]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 70 - 10/31/2025 04:19:39 PM


    1983/D9F6 : [1983]                           ENDIF
    1984/D9F6 : (MACRO)[376]            RESTOR:	DO	CKMODE			; handle RESTORE
    1984/D9F6 : =>NOT BLANK                      IFNB   CKMODE
    1984/D9F6 : E5                                DB    H(CKMODE)
    1984/D9F7 : B8                                DB    L(CKMODE)
    1984/D9F8 :                                   SHIFT
    1984/D9F8 :  (MACRO-2)[377]                   DO    
    1984/D9F8 : =>BLANK                          IFNB   
    1984/D9F8 :                                   DB    H()
    1984/D9F8 :                                   DB    L()
    1984/D9F8 :                                   SHIFT
    1984/D9F8 :                                   DO    
    1984/D9F8 : [1984]                           ENDIF
    1984/D9F8 : [1984]                           ENDIF
    1985/D9F8 : (MACRO)[378]            	DO	FNDDTA
    1985/D9F8 : =>NOT BLANK                      IFNB   FNDDTA
    1985/D9F8 : E9                                DB    H(FNDDTA)
    1985/D9F9 : 63                                DB    L(FNDDTA)
    1985/D9FA :                                   SHIFT
    1985/D9FA :  (MACRO-2)[379]                   DO    
    1985/D9FA : =>BLANK                          IFNB   
    1985/D9FA :                                   DB    H()
    1985/D9FA :                                   DB    L()
    1985/D9FA :                                   SHIFT
    1985/D9FA :                                   DO    
    1985/D9FA : [1985]                           ENDIF
    1985/D9FA : [1985]                           ENDIF
    1986/D9FA : (MACRO)[380]            	TSTNUM	RESTR1
    1986/D9FA : DA                               DB     H(RESTR1)
    1986/D9FB : 02                               DB     L(RESTR1)
    1987/D9FC : (MACRO)[381]            	DO	POPAE
    1987/D9FC : =>NOT BLANK                      IFNB   POPAE
    1987/D9FC : E1                                DB    H(POPAE)
    1987/D9FD : BD                                DB    L(POPAE)
    1987/D9FE :                                   SHIFT
    1987/D9FE :  (MACRO-2)[382]                   DO    
    1987/D9FE : =>BLANK                          IFNB   
    1987/D9FE :                                   DB    H()
    1987/D9FE :                                   DB    L()
    1987/D9FE :                                   SHIFT
    1987/D9FE :                                   DO    
    1987/D9FE : [1987]                           ENDIF
    1987/D9FE : [1987]                           ENDIF
    1988/D9FE : (MACRO)[383]            	DO	FNDLBL
    1988/D9FE : =>NOT BLANK                      IFNB   FNDLBL
    1988/D9FE : E5                                DB    H(FNDLBL)
    1988/D9FF : 69                                DB    L(FNDLBL)
    1988/DA00 :                                   SHIFT
    1988/DA00 :  (MACRO-2)[384]                   DO    
    1988/DA00 : =>BLANK                          IFNB   
    1988/DA00 :                                   DB    H()
    1988/DA00 :                                   DB    L()
    1988/DA00 :                                   SHIFT
    1988/DA00 :                                   DO    
    1988/DA00 : [1988]                           ENDIF
    1988/DA00 : [1988]                           ENDIF
    1989/DA00 : (MACRO)[385]            	DO	XCHPNT
    1989/DA00 : =>NOT BLANK                      IFNB   XCHPNT
    1989/DA00 : E9                                DB    H(XCHPNT)
    1989/DA01 : 1E                                DB    L(XCHPNT)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 71 - 10/31/2025 04:19:39 PM


    1989/DA02 :                                   SHIFT
    1989/DA02 :  (MACRO-2)[386]                   DO    
    1989/DA02 : =>BLANK                          IFNB   
    1989/DA02 :                                   DB    H()
    1989/DA02 :                                   DB    L()
    1989/DA02 :                                   SHIFT
    1989/DA02 :                                   DO    
    1989/DA02 : [1989]                           ENDIF
    1989/DA02 : [1989]                           ENDIF
    1990/DA02 : (MACRO)[387]            RESTR1:	DO	LDPNT
    1990/DA02 : =>NOT BLANK                      IFNB   LDPNT
    1990/DA02 : E5                                DB    H(LDPNT)
    1990/DA03 : 04                                DB    L(LDPNT)
    1990/DA04 :                                   SHIFT
    1990/DA04 :  (MACRO-2)[388]                   DO    
    1990/DA04 : =>BLANK                          IFNB   
    1990/DA04 :                                   DB    H()
    1990/DA04 :                                   DB    L()
    1990/DA04 :                                   SHIFT
    1990/DA04 :                                   DO    
    1990/DA04 : [1990]                           ENDIF
    1990/DA04 : [1990]                           ENDIF
    1991/DA04 : (MACRO)[389]            	DO	DNE
    1991/DA04 : =>NOT BLANK                      IFNB   DNE
    1991/DA04 : E3                                DB    H(DNE)
    1991/DA05 : B3                                DB    L(DNE)
    1991/DA06 :                                   SHIFT
    1991/DA06 :  (MACRO-2)[390]                   DO    
    1991/DA06 : =>BLANK                          IFNB   
    1991/DA06 :                                   DB    H()
    1991/DA06 :                                   DB    L()
    1991/DA06 :                                   SHIFT
    1991/DA06 :                                   DO    
    1991/DA06 : [1991]                           ENDIF
    1991/DA06 : [1991]                           ENDIF
    1992/DA06 : (MACRO)[391]            INPUT:	DO	CKMODE			; handle INPUT
    1992/DA06 : =>NOT BLANK                      IFNB   CKMODE
    1992/DA06 : E5                                DB    H(CKMODE)
    1992/DA07 : B8                                DB    L(CKMODE)
    1992/DA08 :                                   SHIFT
    1992/DA08 :  (MACRO-2)[392]                   DO    
    1992/DA08 : =>BLANK                          IFNB   
    1992/DA08 :                                   DB    H()
    1992/DA08 :                                   DB    L()
    1992/DA08 :                                   SHIFT
    1992/DA08 :                                   DO    
    1992/DA08 : [1992]                           ENDIF
    1992/DA08 : [1992]                           ENDIF
    1993/DA08 : (MACRO)[393]            	TSTSTR	INPUT1,'"'
    1993/DA08 : 9A                               DB     H(INPUT1 - TSTBITH)
    1993/DA09 : 0D                               DB     L(INPUT1)
    1993/DA0A : 22                               DB     '"'
    1994/DA0B : (MACRO)[394]            	DO	PRSTR
    1994/DA0B : =>NOT BLANK                      IFNB   PRSTR
    1994/DA0B : E9                                DB    H(PRSTR)
    1994/DA0C : 71                                DB    L(PRSTR)
    1994/DA0D :                                   SHIFT
    1994/DA0D :  (MACRO-2)[395]                   DO    
    1994/DA0D : =>BLANK                          IFNB   
    1994/DA0D :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 72 - 10/31/2025 04:19:39 PM


    1994/DA0D :                                   DB    L()
    1994/DA0D :                                   SHIFT
    1994/DA0D :                                   DO    
    1994/DA0D : [1994]                           ENDIF
    1994/DA0D : [1994]                           ENDIF
    1995/DA0D : (MACRO)[396]            INPUT1:	TSTVAR	SYNTAX
    1995/DA0D : B9                               DB     H(SYNTAX - CALBITH)
    1995/DA0E : 42                               DB     L(SYNTAX)
    1996/DA0F : (MACRO)[397]            	DO	FNDVAR
    1996/DA0F : =>NOT BLANK                      IFNB   FNDVAR
    1996/DA0F : E2                                DB    H(FNDVAR)
    1996/DA10 : E1                                DB    L(FNDVAR)
    1996/DA11 :                                   SHIFT
    1996/DA11 :  (MACRO-2)[398]                   DO    
    1996/DA11 : =>BLANK                          IFNB   
    1996/DA11 :                                   DB    H()
    1996/DA11 :                                   DB    L()
    1996/DA11 :                                   SHIFT
    1996/DA11 :                                   DO    
    1996/DA11 : [1996]                           ENDIF
    1996/DA11 : [1996]                           ENDIF
    1997/DA11 : (MACRO)[399]            	DO	DEFVAR
    1997/DA11 : =>NOT BLANK                      IFNB   DEFVAR
    1997/DA11 : E5                                DB    H(DEFVAR)
    1997/DA12 : 0E                                DB    L(DEFVAR)
    1997/DA13 :                                   SHIFT
    1997/DA13 :  (MACRO-2)[400]                   DO    
    1997/DA13 : =>BLANK                          IFNB   
    1997/DA13 :                                   DB    H()
    1997/DA13 :                                   DB    L()
    1997/DA13 :                                   SHIFT
    1997/DA13 :                                   DO    
    1997/DA13 : [1997]                           ENDIF
    1997/DA13 : [1997]                           ENDIF
    1998/DA13 : (MACRO)[401]            	TSTSTR	INPUT3,'$'
    1998/DA13 : 9A                               DB     H(INPUT3 - TSTBITH)
    1998/DA14 : 20                               DB     L(INPUT3)
    1998/DA15 : 24                               DB     '$'
    1999/DA16 : (MACRO)[402]            	DO	LDVAR
    1999/DA16 : =>NOT BLANK                      IFNB   LDVAR
    1999/DA16 : E8                                DB    H(LDVAR)
    1999/DA17 : 15                                DB    L(LDVAR)
    1999/DA18 :                                   SHIFT
    1999/DA18 :  (MACRO-2)[403]                   DO    
    1999/DA18 : =>BLANK                          IFNB   
    1999/DA18 :                                   DB    H()
    1999/DA18 :                                   DB    L()
    1999/DA18 :                                   SHIFT
    1999/DA18 :                                   DO    
    1999/DA18 : [1999]                           ENDIF
    1999/DA18 : [1999]                           ENDIF
    2000/DA18 : (MACRO)[404]            	DO	POPAE
    2000/DA18 : =>NOT BLANK                      IFNB   POPAE
    2000/DA18 : E1                                DB    H(POPAE)
    2000/DA19 : BD                                DB    L(POPAE)
    2000/DA1A :                                   SHIFT
    2000/DA1A :  (MACRO-2)[405]                   DO    
    2000/DA1A : =>BLANK                          IFNB   
    2000/DA1A :                                   DB    H()
    2000/DA1A :                                   DB    L()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 73 - 10/31/2025 04:19:39 PM


    2000/DA1A :                                   SHIFT
    2000/DA1A :                                   DO    
    2000/DA1A : [2000]                           ENDIF
    2000/DA1A : [2000]                           ENDIF
    2001/DA1A : (MACRO)[406]            	DO	GETLIN
    2001/DA1A : =>NOT BLANK                      IFNB   GETLIN
    2001/DA1A : E0                                DB    H(GETLIN)
    2001/DA1B : 01                                DB    L(GETLIN)
    2001/DA1C :                                   SHIFT
    2001/DA1C :  (MACRO-2)[407]                   DO    
    2001/DA1C : =>BLANK                          IFNB   
    2001/DA1C :                                   DB    H()
    2001/DA1C :                                   DB    L()
    2001/DA1C :                                   SHIFT
    2001/DA1C :                                   DO    
    2001/DA1C : [2001]                           ENDIF
    2001/DA1C : [2001]                           ENDIF
    2002/DA1C : (MACRO)[408]            	DO	ISTRNG
    2002/DA1C : =>NOT BLANK                      IFNB   ISTRNG
    2002/DA1C : E9                                DB    H(ISTRNG)
    2002/DA1D : 0A                                DB    L(ISTRNG)
    2002/DA1E :                                   SHIFT
    2002/DA1E :  (MACRO-2)[409]                   DO    
    2002/DA1E : =>BLANK                          IFNB   
    2002/DA1E :                                   DB    H()
    2002/DA1E :                                   DB    L()
    2002/DA1E :                                   SHIFT
    2002/DA1E :                                   DO    
    2002/DA1E : [2002]                           ENDIF
    2002/DA1E : [2002]                           ENDIF
    2003/DA1E : (MACRO)[410]            INPUT2:	DO	DNE
    2003/DA1E : =>NOT BLANK                      IFNB   DNE
    2003/DA1E : E3                                DB    H(DNE)
    2003/DA1F : B3                                DB    L(DNE)
    2003/DA20 :                                   SHIFT
    2003/DA20 :  (MACRO-2)[411]                   DO    
    2003/DA20 : =>BLANK                          IFNB   
    2003/DA20 :                                   DB    H()
    2003/DA20 :                                   DB    L()
    2003/DA20 :                                   SHIFT
    2003/DA20 :                                   DO    
    2003/DA20 : [2003]                           ENDIF
    2003/DA20 : [2003]                           ENDIF
    2004/DA20 : (MACRO)[412]            INPUT3:	DO	GETLIN
    2004/DA20 : =>NOT BLANK                      IFNB   GETLIN
    2004/DA20 : E0                                DB    H(GETLIN)
    2004/DA21 : 01                                DB    L(GETLIN)
    2004/DA22 :                                   SHIFT
    2004/DA22 :  (MACRO-2)[413]                   DO    
    2004/DA22 : =>BLANK                          IFNB   
    2004/DA22 :                                   DB    H()
    2004/DA22 :                                   DB    L()
    2004/DA22 :                                   SHIFT
    2004/DA22 :                                   DO    
    2004/DA22 : [2004]                           ENDIF
    2004/DA22 : [2004]                           ENDIF
    2005/DA22 : (MACRO)[414]            INPUT4:	DO	XCHPNT
    2005/DA22 : =>NOT BLANK                      IFNB   XCHPNT
    2005/DA22 : E9                                DB    H(XCHPNT)
    2005/DA23 : 1E                                DB    L(XCHPNT)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 74 - 10/31/2025 04:19:39 PM


    2005/DA24 :                                   SHIFT
    2005/DA24 :  (MACRO-2)[415]                   DO    
    2005/DA24 : =>BLANK                          IFNB   
    2005/DA24 :                                   DB    H()
    2005/DA24 :                                   DB    L()
    2005/DA24 :                                   SHIFT
    2005/DA24 :                                   DO    
    2005/DA24 : [2005]                           ENDIF
    2005/DA24 : [2005]                           ENDIF
    2006/DA24 : (MACRO)[416]            	TSTSTR	INPUT5,'('
    2006/DA24 : 9A                               DB     H(INPUT5 - TSTBITH)
    2006/DA25 : 29                               DB     L(INPUT5)
    2006/DA26 : 28                               DB     '('
    2007/DA27 : (MACRO)[417]            	ILCALL	INDEX
    2007/DA27 : 1F                               DB     H(INDEX - (JMPBITH + TSTBITH))
    2007/DA28 : 51                               DB     L(INDEX)
    2008/DA29 : (MACRO)[418]            INPUT5:	DO	XCHPNT
    2008/DA29 : =>NOT BLANK                      IFNB   XCHPNT
    2008/DA29 : E9                                DB    H(XCHPNT)
    2008/DA2A : 1E                                DB    L(XCHPNT)
    2008/DA2B :                                   SHIFT
    2008/DA2B :  (MACRO-2)[419]                   DO    
    2008/DA2B : =>BLANK                          IFNB   
    2008/DA2B :                                   DB    H()
    2008/DA2B :                                   DB    L()
    2008/DA2B :                                   SHIFT
    2008/DA2B :                                   DO    
    2008/DA2B : [2008]                           ENDIF
    2008/DA2B : [2008]                           ENDIF
    2009/DA2B : (MACRO)[420]            	ILCALL	REXPR
    2009/DA2B : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2009/DA2C : C6                               DB     L(REXPR)
    2010/DA2D : (MACRO)[421]            	DO	STVAR
    2010/DA2D : =>NOT BLANK                      IFNB   STVAR
    2010/DA2D : E7                                DB    H(STVAR)
    2010/DA2E : 8A                                DB    L(STVAR)
    2010/DA2F :                                   SHIFT
    2010/DA2F :  (MACRO-2)[422]                   DO    
    2010/DA2F : =>BLANK                          IFNB   
    2010/DA2F :                                   DB    H()
    2010/DA2F :                                   DB    L()
    2010/DA2F :                                   SHIFT
    2010/DA2F :                                   DO    
    2010/DA2F : [2010]                           ENDIF
    2010/DA2F : [2010]                           ENDIF
    2011/DA2F : (MACRO)[423]            	DO	XCHPNT
    2011/DA2F : =>NOT BLANK                      IFNB   XCHPNT
    2011/DA2F : E9                                DB    H(XCHPNT)
    2011/DA30 : 1E                                DB    L(XCHPNT)
    2011/DA31 :                                   SHIFT
    2011/DA31 :  (MACRO-2)[424]                   DO    
    2011/DA31 : =>BLANK                          IFNB   
    2011/DA31 :                                   DB    H()
    2011/DA31 :                                   DB    L()
    2011/DA31 :                                   SHIFT
    2011/DA31 :                                   DO    
    2011/DA31 : [2011]                           ENDIF
    2011/DA31 : [2011]                           ENDIF
    2012/DA31 : (MACRO)[425]            	TSTSTR	INPUT2,','
    2012/DA31 : 9A                               DB     H(INPUT2 - TSTBITH)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 75 - 10/31/2025 04:19:39 PM


    2012/DA32 : 1E                               DB     L(INPUT2)
    2012/DA33 : 2C                               DB     ','
    2013/DA34 : (MACRO)[426]            	TSTVAR	SYNTAX
    2013/DA34 : B9                               DB     H(SYNTAX - CALBITH)
    2013/DA35 : 42                               DB     L(SYNTAX)
    2014/DA36 : (MACRO)[427]            	DO	FNDVAR
    2014/DA36 : =>NOT BLANK                      IFNB   FNDVAR
    2014/DA36 : E2                                DB    H(FNDVAR)
    2014/DA37 : E1                                DB    L(FNDVAR)
    2014/DA38 :                                   SHIFT
    2014/DA38 :  (MACRO-2)[428]                   DO    
    2014/DA38 : =>BLANK                          IFNB   
    2014/DA38 :                                   DB    H()
    2014/DA38 :                                   DB    L()
    2014/DA38 :                                   SHIFT
    2014/DA38 :                                   DO    
    2014/DA38 : [2014]                           ENDIF
    2014/DA38 : [2014]                           ENDIF
    2015/DA38 : (MACRO)[429]            	DO	DEFVAR
    2015/DA38 : =>NOT BLANK                      IFNB   DEFVAR
    2015/DA38 : E5                                DB    H(DEFVAR)
    2015/DA39 : 0E                                DB    L(DEFVAR)
    2015/DA3A :                                   SHIFT
    2015/DA3A :  (MACRO-2)[430]                   DO    
    2015/DA3A : =>BLANK                          IFNB   
    2015/DA3A :                                   DB    H()
    2015/DA3A :                                   DB    L()
    2015/DA3A :                                   SHIFT
    2015/DA3A :                                   DO    
    2015/DA3A : [2015]                           ENDIF
    2015/DA3A : [2015]                           ENDIF
    2016/DA3A : (MACRO)[431]            	DO	XCHPNT
    2016/DA3A : =>NOT BLANK                      IFNB   XCHPNT
    2016/DA3A : E9                                DB    H(XCHPNT)
    2016/DA3B : 1E                                DB    L(XCHPNT)
    2016/DA3C :                                   SHIFT
    2016/DA3C :  (MACRO-2)[432]                   DO    
    2016/DA3C : =>BLANK                          IFNB   
    2016/DA3C :                                   DB    H()
    2016/DA3C :                                   DB    L()
    2016/DA3C :                                   SHIFT
    2016/DA3C :                                   DO    
    2016/DA3C : [2016]                           ENDIF
    2016/DA3C : [2016]                           ENDIF
    2017/DA3C : (MACRO)[433]            	TSTSTR	SYNTAX,','
    2017/DA3C : 99                               DB     H(SYNTAX - TSTBITH)
    2017/DA3D : 42                               DB     L(SYNTAX)
    2017/DA3E : 2C                               DB     ','
    2018/DA3F : (MACRO)[434]            	GOTO	INPUT4
    2018/DA3F : 5A                               DB     H(INPUT4 - JMPBITH)
    2018/DA40 : 22                               DB     L(INPUT4)
    2019/DA41 : (MACRO)[435]            DO:	DO	CKMODE			; handle DO
    2019/DA41 : =>NOT BLANK                      IFNB   CKMODE
    2019/DA41 : E5                                DB    H(CKMODE)
    2019/DA42 : B8                                DB    L(CKMODE)
    2019/DA43 :                                   SHIFT
    2019/DA43 :  (MACRO-2)[436]                   DO    
    2019/DA43 : =>BLANK                          IFNB   
    2019/DA43 :                                   DB    H()
    2019/DA43 :                                   DB    L()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 76 - 10/31/2025 04:19:39 PM


    2019/DA43 :                                   SHIFT
    2019/DA43 :                                   DO    
    2019/DA43 : [2019]                           ENDIF
    2019/DA43 : [2019]                           ENDIF
    2020/DA43 : (MACRO)[437]            	DO	DONE
    2020/DA43 : =>NOT BLANK                      IFNB   DONE
    2020/DA43 : E3                                DB    H(DONE)
    2020/DA44 : 71                                DB    L(DONE)
    2020/DA45 :                                   SHIFT
    2020/DA45 :  (MACRO-2)[438]                   DO    
    2020/DA45 : =>BLANK                          IFNB   
    2020/DA45 :                                   DB    H()
    2020/DA45 :                                   DB    L()
    2020/DA45 :                                   SHIFT
    2020/DA45 :                                   DO    
    2020/DA45 : [2020]                           ENDIF
    2020/DA45 : [2020]                           ENDIF
    2021/DA45 : (MACRO)[439]            	DO	SAVEDO
    2021/DA45 : =>NOT BLANK                      IFNB   SAVEDO
    2021/DA45 : E4                                DB    H(SAVEDO)
    2021/DA46 : 69                                DB    L(SAVEDO)
    2021/DA47 :                                   SHIFT
    2021/DA47 :  (MACRO-2)[440]                   DO    
    2021/DA47 : =>BLANK                          IFNB   
    2021/DA47 :                                   DB    H()
    2021/DA47 :                                   DB    L()
    2021/DA47 :                                   SHIFT
    2021/DA47 :                                   DO    
    2021/DA47 : [2021]                           ENDIF
    2021/DA47 : [2021]                           ENDIF
    2022/DA47 : (MACRO)[441]            UNTIL:	DO	CKMODE			; handle UNTIL
    2022/DA47 : =>NOT BLANK                      IFNB   CKMODE
    2022/DA47 : E5                                DB    H(CKMODE)
    2022/DA48 : B8                                DB    L(CKMODE)
    2022/DA49 :                                   SHIFT
    2022/DA49 :  (MACRO-2)[442]                   DO    
    2022/DA49 : =>BLANK                          IFNB   
    2022/DA49 :                                   DB    H()
    2022/DA49 :                                   DB    L()
    2022/DA49 :                                   SHIFT
    2022/DA49 :                                   DO    
    2022/DA49 : [2022]                           ENDIF
    2022/DA49 : [2022]                           ENDIF
    2023/DA49 : (MACRO)[443]            	ILCALL	RELSTR
    2023/DA49 : 1C                               DB     H(RELSTR - (JMPBITH + TSTBITH))
    2023/DA4A : 72                               DB     L(RELSTR)
    2024/DA4B : (MACRO)[444]            	DO	DONE
    2024/DA4B : =>NOT BLANK                      IFNB   DONE
    2024/DA4B : E3                                DB    H(DONE)
    2024/DA4C : 71                                DB    L(DONE)
    2024/DA4D :                                   SHIFT
    2024/DA4D :  (MACRO-2)[445]                   DO    
    2024/DA4D : =>BLANK                          IFNB   
    2024/DA4D :                                   DB    H()
    2024/DA4D :                                   DB    L()
    2024/DA4D :                                   SHIFT
    2024/DA4D :                                   DO    
    2024/DA4D : [2024]                           ENDIF
    2024/DA4D : [2024]                           ENDIF
    2025/DA4D : (MACRO)[446]            	DO	UNTL
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 77 - 10/31/2025 04:19:39 PM


    2025/DA4D : =>NOT BLANK                      IFNB   UNTL
    2025/DA4D : E4                                DB    H(UNTL)
    2025/DA4E : 96                                DB    L(UNTL)
    2025/DA4F :                                   SHIFT
    2025/DA4F :  (MACRO-2)[447]                   DO    
    2025/DA4F : =>BLANK                          IFNB   
    2025/DA4F :                                   DB    H()
    2025/DA4F :                                   DB    L()
    2025/DA4F :                                   SHIFT
    2025/DA4F :                                   DO    
    2025/DA4F : [2025]                           ENDIF
    2025/DA4F : [2025]                           ENDIF
    2026/DA4F : (MACRO)[448]            LINK:	ILCALL	REXPR			; handle LINK
    2026/DA4F : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2026/DA50 : C6                               DB     L(REXPR)
    2027/DA51 : (MACRO)[449]            	DO	POPAE
    2027/DA51 : =>NOT BLANK                      IFNB   POPAE
    2027/DA51 : E1                                DB    H(POPAE)
    2027/DA52 : BD                                DB    L(POPAE)
    2027/DA53 :                                   SHIFT
    2027/DA53 :  (MACRO-2)[450]                   DO    
    2027/DA53 : =>BLANK                          IFNB   
    2027/DA53 :                                   DB    H()
    2027/DA53 :                                   DB    L()
    2027/DA53 :                                   SHIFT
    2027/DA53 :                                   DO    
    2027/DA53 : [2027]                           ENDIF
    2027/DA53 : [2027]                           ENDIF
    2028/DA53 : (MACRO)[451]            	DO	DONE
    2028/DA53 : =>NOT BLANK                      IFNB   DONE
    2028/DA53 : E3                                DB    H(DONE)
    2028/DA54 : 71                                DB    L(DONE)
    2028/DA55 :                                   SHIFT
    2028/DA55 :  (MACRO-2)[452]                   DO    
    2028/DA55 : =>BLANK                          IFNB   
    2028/DA55 :                                   DB    H()
    2028/DA55 :                                   DB    L()
    2028/DA55 :                                   SHIFT
    2028/DA55 :                                   DO    
    2028/DA55 : [2028]                           ENDIF
    2028/DA55 : [2028]                           ENDIF
    2029/DA55 : (MACRO)[453]            	DO	XCHPNT
    2029/DA55 : =>NOT BLANK                      IFNB   XCHPNT
    2029/DA55 : E9                                DB    H(XCHPNT)
    2029/DA56 : 1E                                DB    L(XCHPNT)
    2029/DA57 :                                   SHIFT
    2029/DA57 :  (MACRO-2)[454]                   DO    
    2029/DA57 : =>BLANK                          IFNB   
    2029/DA57 :                                   DB    H()
    2029/DA57 :                                   DB    L()
    2029/DA57 :                                   SHIFT
    2029/DA57 :                                   DO    
    2029/DA57 : [2029]                           ENDIF
    2029/DA57 : [2029]                           ENDIF
    2030/DA57 : (MACRO)[455]            	DO	MC			; execute machine code
    2030/DA57 : =>NOT BLANK                      IFNB   MC
    2030/DA57 : E9                                DB    H(MC)
    2030/DA58 : B9                                DB    L(MC)
    2030/DA59 :                                   SHIFT
    2030/DA59 :  (MACRO-2)[456]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 78 - 10/31/2025 04:19:39 PM


    2030/DA59 : =>BLANK                          IFNB   
    2030/DA59 :                                   DB    H()
    2030/DA59 :                                   DB    L()
    2030/DA59 :                                   SHIFT
    2030/DA59 :                                   DO    
    2030/DA59 : [2030]                           ENDIF
    2030/DA59 : [2030]                           ENDIF
    2031/DA59 : (MACRO)[457]            	DO	XCHPNT
    2031/DA59 : =>NOT BLANK                      IFNB   XCHPNT
    2031/DA59 : E9                                DB    H(XCHPNT)
    2031/DA5A : 1E                                DB    L(XCHPNT)
    2031/DA5B :                                   SHIFT
    2031/DA5B :  (MACRO-2)[458]                   DO    
    2031/DA5B : =>BLANK                          IFNB   
    2031/DA5B :                                   DB    H()
    2031/DA5B :                                   DB    L()
    2031/DA5B :                                   SHIFT
    2031/DA5B :                                   DO    
    2031/DA5B : [2031]                           ENDIF
    2031/DA5B : [2031]                           ENDIF
    2032/DA5B : (MACRO)[459]            	DO	NXT
    2032/DA5B : =>NOT BLANK                      IFNB   NXT
    2032/DA5B : E4                                DB    H(NXT)
    2032/DA5C : 0E                                DB    L(NXT)
    2032/DA5D :                                   SHIFT
    2032/DA5D :  (MACRO-2)[460]                   DO    
    2032/DA5D : =>BLANK                          IFNB   
    2032/DA5D :                                   DB    H()
    2032/DA5D :                                   DB    L()
    2032/DA5D :                                   SHIFT
    2032/DA5D :                                   DO    
    2032/DA5D : [2032]                           ENDIF
    2032/DA5D : [2032]                           ENDIF
    2033/DA5D : (MACRO)[461]            ON:	ILCALL	REXPR			; handle ON..
    2033/DA5D : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2033/DA5E : C6                               DB     L(REXPR)
    2034/DA5F : (MACRO)[462]            	DO	POPAE
    2034/DA5F : =>NOT BLANK                      IFNB   POPAE
    2034/DA5F : E1                                DB    H(POPAE)
    2034/DA60 : BD                                DB    L(POPAE)
    2034/DA61 :                                   SHIFT
    2034/DA61 :  (MACRO-2)[463]                   DO    
    2034/DA61 : =>BLANK                          IFNB   
    2034/DA61 :                                   DB    H()
    2034/DA61 :                                   DB    L()
    2034/DA61 :                                   SHIFT
    2034/DA61 :                                   DO    
    2034/DA61 : [2034]                           ENDIF
    2034/DA61 : [2034]                           ENDIF
    2035/DA61 : (MACRO)[464]            	TSTSTR	ON1,T_GOSUB		; ..GOSUB
    2035/DA61 : 9A                               DB     H(ON1 - TSTBITH)
    2035/DA62 : 6A                               DB     L(ON1)
    2035/DA63 : 91                               DB     T_GOSUB
    2036/DA64 : (MACRO)[465]            	ILCALL	REXPR
    2036/DA64 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2036/DA65 : C6                               DB     L(REXPR)
    2037/DA66 : (MACRO)[466]            	DO	GTO
    2037/DA66 : =>NOT BLANK                      IFNB   GTO
    2037/DA66 : E9                                DB    H(GTO)
    2037/DA67 : 7D                                DB    L(GTO)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 79 - 10/31/2025 04:19:39 PM


    2037/DA68 :                                   SHIFT
    2037/DA68 :  (MACRO-2)[467]                   DO    
    2037/DA68 : =>BLANK                          IFNB   
    2037/DA68 :                                   DB    H()
    2037/DA68 :                                   DB    L()
    2037/DA68 :                                   SHIFT
    2037/DA68 :                                   DO    
    2037/DA68 : [2037]                           ENDIF
    2037/DA68 : [2037]                           ENDIF
    2038/DA68 : (MACRO)[468]            	GOTO	GOSUB1
    2038/DA68 : 5A                               DB     H(GOSUB1 - JMPBITH)
    2038/DA69 : 7D                               DB     L(GOSUB1)
    2039/DA6A : (MACRO)[469]            ON1:	TSTSTR	SYNTAX,T_GOTO		; ..GOTO
    2039/DA6A : 99                               DB     H(SYNTAX - TSTBITH)
    2039/DA6B : 42                               DB     L(SYNTAX)
    2039/DA6C : 92                               DB     T_GOTO
    2040/DA6D : (MACRO)[470]            	ILCALL	REXPR
    2040/DA6D : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2040/DA6E : C6                               DB     L(REXPR)
    2041/DA6F : (MACRO)[471]            	DO	GTO
    2041/DA6F : =>NOT BLANK                      IFNB   GTO
    2041/DA6F : E9                                DB    H(GTO)
    2041/DA70 : 7D                                DB    L(GTO)
    2041/DA71 :                                   SHIFT
    2041/DA71 :  (MACRO-2)[472]                   DO    
    2041/DA71 : =>BLANK                          IFNB   
    2041/DA71 :                                   DB    H()
    2041/DA71 :                                   DB    L()
    2041/DA71 :                                   SHIFT
    2041/DA71 :                                   DO    
    2041/DA71 : [2041]                           ENDIF
    2041/DA71 : [2041]                           ENDIF
    2042/DA71 : (MACRO)[473]            	GOTO	GOTO1
    2042/DA71 : 5A                               DB     H(GOTO1 - JMPBITH)
    2042/DA72 : 7F                               DB     L(GOTO1)
    2043/DA73 : (MACRO)[474]            GOTO:	ILCALL	REXPR			; handle GOTO
    2043/DA73 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2043/DA74 : C6                               DB     L(REXPR)
    2044/DA75 : (MACRO)[475]            	DO	DONE
    2044/DA75 : =>NOT BLANK                      IFNB   DONE
    2044/DA75 : E3                                DB    H(DONE)
    2044/DA76 : 71                                DB    L(DONE)
    2044/DA77 :                                   SHIFT
    2044/DA77 :  (MACRO-2)[476]                   DO    
    2044/DA77 : =>BLANK                          IFNB   
    2044/DA77 :                                   DB    H()
    2044/DA77 :                                   DB    L()
    2044/DA77 :                                   SHIFT
    2044/DA77 :                                   DO    
    2044/DA77 : [2044]                           ENDIF
    2044/DA77 : [2044]                           ENDIF
    2045/DA77 : (MACRO)[477]            	GOTO	GOTO1
    2045/DA77 : 5A                               DB     H(GOTO1 - JMPBITH)
    2045/DA78 : 7F                               DB     L(GOTO1)
    2046/DA79 : (MACRO)[478]            GOSUB:	ILCALL	REXPR			; handle GOSUB
    2046/DA79 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2046/DA7A : C6                               DB     L(REXPR)
    2047/DA7B : (MACRO)[479]            	DO	DONE
    2047/DA7B : =>NOT BLANK                      IFNB   DONE
    2047/DA7B : E3                                DB    H(DONE)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 80 - 10/31/2025 04:19:39 PM


    2047/DA7C : 71                                DB    L(DONE)
    2047/DA7D :                                   SHIFT
    2047/DA7D :  (MACRO-2)[480]                   DO    
    2047/DA7D : =>BLANK                          IFNB   
    2047/DA7D :                                   DB    H()
    2047/DA7D :                                   DB    L()
    2047/DA7D :                                   SHIFT
    2047/DA7D :                                   DO    
    2047/DA7D : [2047]                           ENDIF
    2047/DA7D : [2047]                           ENDIF
    2048/DA7D : (MACRO)[481]            GOSUB1:	DO	SAV
    2048/DA7D : =>NOT BLANK                      IFNB   SAV
    2048/DA7D : E3                                DB    H(SAV)
    2048/DA7E : 50                                DB    L(SAV)
    2048/DA7F :                                   SHIFT
    2048/DA7F :  (MACRO-2)[482]                   DO    
    2048/DA7F : =>BLANK                          IFNB   
    2048/DA7F :                                   DB    H()
    2048/DA7F :                                   DB    L()
    2048/DA7F :                                   SHIFT
    2048/DA7F :                                   DO    
    2048/DA7F : [2048]                           ENDIF
    2048/DA7F : [2048]                           ENDIF
    2049/DA7F : (MACRO)[483]            GOTO1:	DO	POPAE
    2049/DA7F : =>NOT BLANK                      IFNB   POPAE
    2049/DA7F : E1                                DB    H(POPAE)
    2049/DA80 : BD                                DB    L(POPAE)
    2049/DA81 :                                   SHIFT
    2049/DA81 :  (MACRO-2)[484]                   DO    
    2049/DA81 : =>BLANK                          IFNB   
    2049/DA81 :                                   DB    H()
    2049/DA81 :                                   DB    L()
    2049/DA81 :                                   SHIFT
    2049/DA81 :                                   DO    
    2049/DA81 : [2049]                           ENDIF
    2049/DA81 : [2049]                           ENDIF
    2050/DA81 : (MACRO)[485]            	DO	FNDLBL
    2050/DA81 : =>NOT BLANK                      IFNB   FNDLBL
    2050/DA81 : E5                                DB    H(FNDLBL)
    2050/DA82 : 69                                DB    L(FNDLBL)
    2050/DA83 :                                   SHIFT
    2050/DA83 :  (MACRO-2)[486]                   DO    
    2050/DA83 : =>BLANK                          IFNB   
    2050/DA83 :                                   DB    H()
    2050/DA83 :                                   DB    L()
    2050/DA83 :                                   SHIFT
    2050/DA83 :                                   DO    
    2050/DA83 : [2050]                           ENDIF
    2050/DA83 : [2050]                           ENDIF
    2051/DA83 : (MACRO)[487]            	DO	XFER
    2051/DA83 : =>NOT BLANK                      IFNB   XFER
    2051/DA83 : E3                                DB    H(XFER)
    2051/DA84 : 96                                DB    L(XFER)
    2051/DA85 :                                   SHIFT
    2051/DA85 :  (MACRO-2)[488]                   DO    
    2051/DA85 : =>BLANK                          IFNB   
    2051/DA85 :                                   DB    H()
    2051/DA85 :                                   DB    L()
    2051/DA85 :                                   SHIFT
    2051/DA85 :                                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 81 - 10/31/2025 04:19:39 PM


    2051/DA85 : [2051]                           ENDIF
    2051/DA85 : [2051]                           ENDIF
    2052/DA85 : (MACRO)[489]            RETURN:	DO	DONE			; handle RETURN
    2052/DA85 : =>NOT BLANK                      IFNB   DONE
    2052/DA85 : E3                                DB    H(DONE)
    2052/DA86 : 71                                DB    L(DONE)
    2052/DA87 :                                   SHIFT
    2052/DA87 :  (MACRO-2)[490]                   DO    
    2052/DA87 : =>BLANK                          IFNB   
    2052/DA87 :                                   DB    H()
    2052/DA87 :                                   DB    L()
    2052/DA87 :                                   SHIFT
    2052/DA87 :                                   DO    
    2052/DA87 : [2052]                           ENDIF
    2052/DA87 : [2052]                           ENDIF
    2053/DA87 : (MACRO)[491]            	DO	RSTR
    2053/DA87 : =>NOT BLANK                      IFNB   RSTR
    2053/DA87 : E4                                DB    H(RSTR)
    2053/DA88 : D4                                DB    L(RSTR)
    2053/DA89 :                                   SHIFT
    2053/DA89 :  (MACRO-2)[492]                   DO    
    2053/DA89 : =>BLANK                          IFNB   
    2053/DA89 :                                   DB    H()
    2053/DA89 :                                   DB    L()
    2053/DA89 :                                   SHIFT
    2053/DA89 :                                   DO    
    2053/DA89 : [2053]                           ENDIF
    2053/DA89 : [2053]                           ENDIF
    2054/DA89 : (MACRO)[493]            EDIT:	TSTNUM	SYNTAX			; handle EDIT
    2054/DA89 : D9                               DB     H(SYNTAX)
    2054/DA8A : 42                               DB     L(SYNTAX)
    2055/DA8B : (MACRO)[494]            	DO	POPAE
    2055/DA8B : =>NOT BLANK                      IFNB   POPAE
    2055/DA8B : E1                                DB    H(POPAE)
    2055/DA8C : BD                                DB    L(POPAE)
    2055/DA8D :                                   SHIFT
    2055/DA8D :  (MACRO-2)[495]                   DO    
    2055/DA8D : =>BLANK                          IFNB   
    2055/DA8D :                                   DB    H()
    2055/DA8D :                                   DB    L()
    2055/DA8D :                                   SHIFT
    2055/DA8D :                                   DO    
    2055/DA8D : [2055]                           ENDIF
    2055/DA8D : [2055]                           ENDIF
    2056/DA8D : (MACRO)[496]            	DO	FNDLBL
    2056/DA8D : =>NOT BLANK                      IFNB   FNDLBL
    2056/DA8D : E5                                DB    H(FNDLBL)
    2056/DA8E : 69                                DB    L(FNDLBL)
    2056/DA8F :                                   SHIFT
    2056/DA8F :  (MACRO-2)[497]                   DO    
    2056/DA8F : =>BLANK                          IFNB   
    2056/DA8F :                                   DB    H()
    2056/DA8F :                                   DB    L()
    2056/DA8F :                                   SHIFT
    2056/DA8F :                                   DO    
    2056/DA8F : [2056]                           ENDIF
    2056/DA8F : [2056]                           ENDIF
    2057/DA8F : (MACRO)[498]            	DO	EDITR
    2057/DA8F : =>NOT BLANK                      IFNB   EDITR
    2057/DA8F : E9                                DB    H(EDITR)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 82 - 10/31/2025 04:19:39 PM


    2057/DA90 : BD                                DB    L(EDITR)
    2057/DA91 :                                   SHIFT
    2057/DA91 :  (MACRO-2)[499]                   DO    
    2057/DA91 : =>BLANK                          IFNB   
    2057/DA91 :                                   DB    H()
    2057/DA91 :                                   DB    L()
    2057/DA91 :                                   SHIFT
    2057/DA91 :                                   DO    
    2057/DA91 : [2057]                           ENDIF
    2057/DA91 : [2057]                           ENDIF
    2058/DA91 : (MACRO)[500]            	DO	INPT
    2058/DA91 : =>NOT BLANK                      IFNB   INPT
    2058/DA91 : E0                                DB    H(INPT)
    2058/DA92 : 2B                                DB    L(INPT)
    2058/DA93 :                                   SHIFT
    2058/DA93 :  (MACRO-2)[501]                   DO    
    2058/DA93 : =>BLANK                          IFNB   
    2058/DA93 :                                   DB    H()
    2058/DA93 :                                   DB    L()
    2058/DA93 :                                   SHIFT
    2058/DA93 :                                   DO    
    2058/DA93 : [2058]                           ENDIF
    2058/DA93 : [2058]                           ENDIF
    2059/DA93 : (MACRO)[502]            	GOTO	ILTB1
    2059/DA93 : 58                               DB     H(ILTB1 - JMPBITH)
    2059/DA94 : A4                               DB     L(ILTB1)
    2060/DA95 : (MACRO)[503]            AUTO:	TSTNUM	SYNTAX			; handle AUTO
    2060/DA95 : D9                               DB     H(SYNTAX)
    2060/DA96 : 42                               DB     L(SYNTAX)
    2061/DA97 : (MACRO)[504]            	DO	POPAE
    2061/DA97 : =>NOT BLANK                      IFNB   POPAE
    2061/DA97 : E1                                DB    H(POPAE)
    2061/DA98 : BD                                DB    L(POPAE)
    2061/DA99 :                                   SHIFT
    2061/DA99 :  (MACRO-2)[505]                   DO    
    2061/DA99 : =>BLANK                          IFNB   
    2061/DA99 :                                   DB    H()
    2061/DA99 :                                   DB    L()
    2061/DA99 :                                   SHIFT
    2061/DA99 :                                   DO    
    2061/DA99 : [2061]                           ENDIF
    2061/DA99 : [2061]                           ENDIF
    2062/DA99 : (MACRO)[506]            	TSTSTR	AUTO1,','
    2062/DA99 : 9A                               DB     H(AUTO1 - TSTBITH)
    2062/DA9A : A0                               DB     L(AUTO1)
    2062/DA9B : 2C                               DB     ','
    2063/DA9C : (MACRO)[507]            	DO	NUMTST
    2063/DA9C : =>NOT BLANK                      IFNB   NUMTST
    2063/DA9C : EA                                DB    H(NUMTST)
    2063/DA9D : 8D                                DB    L(NUMTST)
    2063/DA9E :                                   SHIFT
    2063/DA9E :  (MACRO-2)[508]                   DO    
    2063/DA9E : =>BLANK                          IFNB   
    2063/DA9E :                                   DB    H()
    2063/DA9E :                                   DB    L()
    2063/DA9E :                                   SHIFT
    2063/DA9E :                                   DO    
    2063/DA9E : [2063]                           ENDIF
    2063/DA9E : [2063]                           ENDIF
    2064/DA9E : (MACRO)[509]            	GOTO	AUTO2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 83 - 10/31/2025 04:19:39 PM


    2064/DA9E : 5A                               DB     H(AUTO2 - JMPBITH)
    2064/DA9F : A2                               DB     L(AUTO2)
    2065/DAA0 : (MACRO)[510]            AUTO1:	DO	TEN
    2065/DAA0 : =>NOT BLANK                      IFNB   TEN
    2065/DAA0 : FA                                DB    H(TEN)
    2065/DAA1 : BA                                DB    L(TEN)
    2065/DAA2 :                                   SHIFT
    2065/DAA2 :  (MACRO-2)[511]                   DO    
    2065/DAA2 : =>BLANK                          IFNB   
    2065/DAA2 :                                   DB    H()
    2065/DAA2 :                                   DB    L()
    2065/DAA2 :                                   SHIFT
    2065/DAA2 :                                   DO    
    2065/DAA2 : [2065]                           ENDIF
    2065/DAA2 : [2065]                           ENDIF
    2066/DAA2 : (MACRO)[512]            AUTO2:	DO	AUTONM
    2066/DAA2 : =>NOT BLANK                      IFNB   AUTONM
    2066/DAA2 : EB                                DB    H(AUTONM)
    2066/DAA3 : 05                                DB    L(AUTONM)
    2066/DAA4 :                                   SHIFT
    2066/DAA4 :  (MACRO-2)[513]                   DO    
    2066/DAA4 : =>BLANK                          IFNB   
    2066/DAA4 :                                   DB    H()
    2066/DAA4 :                                   DB    L()
    2066/DAA4 :                                   SHIFT
    2066/DAA4 :                                   DO    
    2066/DAA4 : [2066]                           ENDIF
    2066/DAA4 : [2066]                           ENDIF
    2067/DAA4 : (MACRO)[514]            	DO	GETLN1
    2067/DAA4 : =>NOT BLANK                      IFNB   GETLN1
    2067/DAA4 : E0                                DB    H(GETLN1)
    2067/DAA5 : 0B                                DB    L(GETLN1)
    2067/DAA6 :                                   SHIFT
    2067/DAA6 :  (MACRO-2)[515]                   DO    
    2067/DAA6 : =>BLANK                          IFNB   
    2067/DAA6 :                                   DB    H()
    2067/DAA6 :                                   DB    L()
    2067/DAA6 :                                   SHIFT
    2067/DAA6 :                                   DO    
    2067/DAA6 : [2067]                           ENDIF
    2067/DAA6 : [2067]                           ENDIF
    2068/DAA6 : (MACRO)[516]            	DO	SCANR
    2068/DAA6 : =>NOT BLANK                      IFNB   SCANR
    2068/DAA6 : E1                                DB    H(SCANR)
    2068/DAA7 : 2A                                DB    L(SCANR)
    2068/DAA8 :                                   SHIFT
    2068/DAA8 :  (MACRO-2)[517]                   DO    
    2068/DAA8 : =>BLANK                          IFNB   
    2068/DAA8 :                                   DB    H()
    2068/DAA8 :                                   DB    L()
    2068/DAA8 :                                   SHIFT
    2068/DAA8 :                                   DO    
    2068/DAA8 : [2068]                           ENDIF
    2068/DAA8 : [2068]                           ENDIF
    2069/DAA8 : (MACRO)[518]            	TSTNUM	AUTO3
    2069/DAA8 : DA                               DB     H(AUTO3)
    2069/DAA9 : AC                               DB     L(AUTO3)
    2070/DAAA : (MACRO)[519]            	DO	POPAE
    2070/DAAA : =>NOT BLANK                      IFNB   POPAE
    2070/DAAA : E1                                DB    H(POPAE)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 84 - 10/31/2025 04:19:39 PM


    2070/DAAB : BD                                DB    L(POPAE)
    2070/DAAC :                                   SHIFT
    2070/DAAC :  (MACRO-2)[520]                   DO    
    2070/DAAC : =>BLANK                          IFNB   
    2070/DAAC :                                   DB    H()
    2070/DAAC :                                   DB    L()
    2070/DAAC :                                   SHIFT
    2070/DAAC :                                   DO    
    2070/DAAC : [2070]                           ENDIF
    2070/DAAC : [2070]                           ENDIF
    2071/DAAC : (MACRO)[521]            AUTO3:	DO	FNDLBL
    2071/DAAC : =>NOT BLANK                      IFNB   FNDLBL
    2071/DAAC : E5                                DB    H(FNDLBL)
    2071/DAAD : 69                                DB    L(FNDLBL)
    2071/DAAE :                                   SHIFT
    2071/DAAE :  (MACRO-2)[522]                   DO    
    2071/DAAE : =>BLANK                          IFNB   
    2071/DAAE :                                   DB    H()
    2071/DAAE :                                   DB    L()
    2071/DAAE :                                   SHIFT
    2071/DAAE :                                   DO    
    2071/DAAE : [2071]                           ENDIF
    2071/DAAE : [2071]                           ENDIF
    2072/DAAE : (MACRO)[523]            	DO	INSRT
    2072/DAAE : =>NOT BLANK                      IFNB   INSRT
    2072/DAAE : E2                                DB    H(INSRT)
    2072/DAAF : 09                                DB    L(INSRT)
    2072/DAB0 :                                   SHIFT
    2072/DAB0 :  (MACRO-2)[524]                   DO    
    2072/DAB0 : =>BLANK                          IFNB   
    2072/DAB0 :                                   DB    H()
    2072/DAB0 :                                   DB    L()
    2072/DAB0 :                                   SHIFT
    2072/DAB0 :                                   DO    
    2072/DAB0 : [2072]                           ENDIF
    2072/DAB0 : [2072]                           ENDIF
    2073/DAB0 : (MACRO)[525]            	DO	AUTON
    2073/DAB0 : =>NOT BLANK                      IFNB   AUTON
    2073/DAB0 : EB                                DB    H(AUTON)
    2073/DAB1 : 16                                DB    L(AUTON)
    2073/DAB2 :                                   SHIFT
    2073/DAB2 :  (MACRO-2)[526]                   DO    
    2073/DAB2 : =>BLANK                          IFNB   
    2073/DAB2 :                                   DB    H()
    2073/DAB2 :                                   DB    L()
    2073/DAB2 :                                   SHIFT
    2073/DAB2 :                                   DO    
    2073/DAB2 : [2073]                           ENDIF
    2073/DAB2 : [2073]                           ENDIF
    2074/DAB2 : (MACRO)[527]            	GOTO	AUTO2
    2074/DAB2 : 5A                               DB     H(AUTO2 - JMPBITH)
    2074/DAB3 : A2                               DB     L(AUTO2)
    2075/DAB4 : (MACRO)[528]            IF:	ILCALL	RELSTR			; handle IF
    2075/DAB4 : 1C                               DB     H(RELSTR - (JMPBITH + TSTBITH))
    2075/DAB5 : 72                               DB     L(RELSTR)
    2076/DAB6 : (MACRO)[529]            	DO	CMPRE
    2076/DAB6 : =>NOT BLANK                      IFNB   CMPRE
    2076/DAB6 : E3                                DB    H(CMPRE)
    2076/DAB7 : C5                                DB    L(CMPRE)
    2076/DAB8 :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 85 - 10/31/2025 04:19:39 PM


    2076/DAB8 :  (MACRO-2)[530]                   DO    
    2076/DAB8 : =>BLANK                          IFNB   
    2076/DAB8 :                                   DB    H()
    2076/DAB8 :                                   DB    L()
    2076/DAB8 :                                   SHIFT
    2076/DAB8 :                                   DO    
    2076/DAB8 : [2076]                           ENDIF
    2076/DAB8 : [2076]                           ENDIF
    2077/DAB8 : (MACRO)[531]            	TSTNUM	RUN1
    2077/DAB8 : D9                               DB     H(RUN1)
    2077/DAB9 : A6                               DB     L(RUN1)
    2078/DABA : (MACRO)[532]            	DO	POPAE
    2078/DABA : =>NOT BLANK                      IFNB   POPAE
    2078/DABA : E1                                DB    H(POPAE)
    2078/DABB : BD                                DB    L(POPAE)
    2078/DABC :                                   SHIFT
    2078/DABC :  (MACRO-2)[533]                   DO    
    2078/DABC : =>BLANK                          IFNB   
    2078/DABC :                                   DB    H()
    2078/DABC :                                   DB    L()
    2078/DABC :                                   SHIFT
    2078/DABC :                                   DO    
    2078/DABC : [2078]                           ENDIF
    2078/DABC : [2078]                           ENDIF
    2079/DABC : (MACRO)[534]            	DO	FNDLBL
    2079/DABC : =>NOT BLANK                      IFNB   FNDLBL
    2079/DABC : E5                                DB    H(FNDLBL)
    2079/DABD : 69                                DB    L(FNDLBL)
    2079/DABE :                                   SHIFT
    2079/DABE :  (MACRO-2)[535]                   DO    
    2079/DABE : =>BLANK                          IFNB   
    2079/DABE :                                   DB    H()
    2079/DABE :                                   DB    L()
    2079/DABE :                                   SHIFT
    2079/DABE :                                   DO    
    2079/DABE : [2079]                           ENDIF
    2079/DABE : [2079]                           ENDIF
    2080/DABE : (MACRO)[536]            	DO	XFER
    2080/DABE : =>NOT BLANK                      IFNB   XFER
    2080/DABE : E3                                DB    H(XFER)
    2080/DABF : 96                                DB    L(XFER)
    2080/DAC0 :                                   SHIFT
    2080/DAC0 :  (MACRO-2)[537]                   DO    
    2080/DAC0 : =>BLANK                          IFNB   
    2080/DAC0 :                                   DB    H()
    2080/DAC0 :                                   DB    L()
    2080/DAC0 :                                   SHIFT
    2080/DAC0 :                                   DO    
    2080/DAC0 : [2080]                           ENDIF
    2080/DAC0 : [2080]                           ENDIF
    2081/DAC0 : (MACRO)[538]            POKE:	ILCALL	REXPR			; handle POKE
    2081/DAC0 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2081/DAC1 : C6                               DB     L(REXPR)
    2082/DAC2 : (MACRO)[539]            	DO	FIX
    2082/DAC2 : =>NOT BLANK                      IFNB   FIX
    2082/DAC2 : EB                                DB    H(FIX)
    2082/DAC3 : 2F                                DB    L(FIX)
    2082/DAC4 :                                   SHIFT
    2082/DAC4 :  (MACRO-2)[540]                   DO    
    2082/DAC4 : =>BLANK                          IFNB   
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 86 - 10/31/2025 04:19:39 PM


    2082/DAC4 :                                   DB    H()
    2082/DAC4 :                                   DB    L()
    2082/DAC4 :                                   SHIFT
    2082/DAC4 :                                   DO    
    2082/DAC4 : [2082]                           ENDIF
    2082/DAC4 : [2082]                           ENDIF
    2083/DAC4 : (MACRO)[541]            	TSTSTR	SYNTAX,','
    2083/DAC4 : 99                               DB     H(SYNTAX - TSTBITH)
    2083/DAC5 : 42                               DB     L(SYNTAX)
    2083/DAC6 : 2C                               DB     ','
    2084/DAC7 : (MACRO)[542]            	ILCALL	REXPR
    2084/DAC7 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2084/DAC8 : C6                               DB     L(REXPR)
    2085/DAC9 : (MACRO)[543]            	DO	FIX
    2085/DAC9 : =>NOT BLANK                      IFNB   FIX
    2085/DAC9 : EB                                DB    H(FIX)
    2085/DACA : 2F                                DB    L(FIX)
    2085/DACB :                                   SHIFT
    2085/DACB :  (MACRO-2)[544]                   DO    
    2085/DACB : =>BLANK                          IFNB   
    2085/DACB :                                   DB    H()
    2085/DACB :                                   DB    L()
    2085/DACB :                                   SHIFT
    2085/DACB :                                   DO    
    2085/DACB : [2085]                           ENDIF
    2085/DACB : [2085]                           ENDIF
    2086/DACB : (MACRO)[545]            	DO	PUTBYT
    2086/DACB : =>NOT BLANK                      IFNB   PUTBYT
    2086/DACB : ED                                DB    H(PUTBYT)
    2086/DACC : CC                                DB    L(PUTBYT)
    2086/DACD :                                   SHIFT
    2086/DACD :  (MACRO-2)[546]                   DO    
    2086/DACD : =>BLANK                          IFNB   
    2086/DACD :                                   DB    H()
    2086/DACD :                                   DB    L()
    2086/DACD :                                   SHIFT
    2086/DACD :                                   DO    
    2086/DACD : [2086]                           ENDIF
    2086/DACD : [2086]                           ENDIF
    2087/DACD : (MACRO)[547]            	DO	DNE
    2087/DACD : =>NOT BLANK                      IFNB   DNE
    2087/DACD : E3                                DB    H(DNE)
    2087/DACE : B3                                DB    L(DNE)
    2087/DACF :                                   SHIFT
    2087/DACF :  (MACRO-2)[548]                   DO    
    2087/DACF : =>BLANK                          IFNB   
    2087/DACF :                                   DB    H()
    2087/DACF :                                   DB    L()
    2087/DACF :                                   SHIFT
    2087/DACF :                                   DO    
    2087/DACF : [2087]                           ENDIF
    2087/DACF : [2087]                           ENDIF
    2088/DACF : (MACRO)[549]            DIM:	TSTVAR	SYNTAX			; handle DIM
    2088/DACF : B9                               DB     H(SYNTAX - CALBITH)
    2088/DAD0 : 42                               DB     L(SYNTAX)
    2089/DAD1 : (MACRO)[550]            	DO	FNDVAR
    2089/DAD1 : =>NOT BLANK                      IFNB   FNDVAR
    2089/DAD1 : E2                                DB    H(FNDVAR)
    2089/DAD2 : E1                                DB    L(FNDVAR)
    2089/DAD3 :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 87 - 10/31/2025 04:19:39 PM


    2089/DAD3 :  (MACRO-2)[551]                   DO    
    2089/DAD3 : =>BLANK                          IFNB   
    2089/DAD3 :                                   DB    H()
    2089/DAD3 :                                   DB    L()
    2089/DAD3 :                                   SHIFT
    2089/DAD3 :                                   DO    
    2089/DAD3 : [2089]                           ENDIF
    2089/DAD3 : [2089]                           ENDIF
    2090/DAD3 : (MACRO)[552]            	DO	LODVAR
    2090/DAD3 : =>NOT BLANK                      IFNB   LODVAR
    2090/DAD3 : FC                                DB    H(LODVAR)
    2090/DAD4 : 0F                                DB    L(LODVAR)
    2090/DAD5 :                                   SHIFT
    2090/DAD5 :  (MACRO-2)[553]                   DO    
    2090/DAD5 : =>BLANK                          IFNB   
    2090/DAD5 :                                   DB    H()
    2090/DAD5 :                                   DB    L()
    2090/DAD5 :                                   SHIFT
    2090/DAD5 :                                   DO    
    2090/DAD5 : [2090]                           ENDIF
    2090/DAD5 : [2090]                           ENDIF
    2091/DAD5 : (MACRO)[554]            	DO	FIX
    2091/DAD5 : =>NOT BLANK                      IFNB   FIX
    2091/DAD5 : EB                                DB    H(FIX)
    2091/DAD6 : 2F                                DB    L(FIX)
    2091/DAD7 :                                   SHIFT
    2091/DAD7 :  (MACRO-2)[555]                   DO    
    2091/DAD7 : =>BLANK                          IFNB   
    2091/DAD7 :                                   DB    H()
    2091/DAD7 :                                   DB    L()
    2091/DAD7 :                                   SHIFT
    2091/DAD7 :                                   DO    
    2091/DAD7 : [2091]                           ENDIF
    2091/DAD7 : [2091]                           ENDIF
    2092/DAD7 : (MACRO)[556]            	DO	STFLD
    2092/DAD7 : =>NOT BLANK                      IFNB   STFLD
    2092/DAD7 : FC                                DB    H(STFLD)
    2092/DAD8 : 51                                DB    L(STFLD)
    2092/DAD9 :                                   SHIFT
    2092/DAD9 :  (MACRO-2)[557]                   DO    
    2092/DAD9 : =>BLANK                          IFNB   
    2092/DAD9 :                                   DB    H()
    2092/DAD9 :                                   DB    L()
    2092/DAD9 :                                   SHIFT
    2092/DAD9 :                                   DO    
    2092/DAD9 : [2092]                           ENDIF
    2092/DAD9 : [2092]                           ENDIF
    2093/DAD9 : (MACRO)[558]            	ILCALL	REXPR
    2093/DAD9 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2093/DADA : C6                               DB     L(REXPR)
    2094/DADB : (MACRO)[559]            	DO	FIX
    2094/DADB : =>NOT BLANK                      IFNB   FIX
    2094/DADB : EB                                DB    H(FIX)
    2094/DADC : 2F                                DB    L(FIX)
    2094/DADD :                                   SHIFT
    2094/DADD :  (MACRO-2)[560]                   DO    
    2094/DADD : =>BLANK                          IFNB   
    2094/DADD :                                   DB    H()
    2094/DADD :                                   DB    L()
    2094/DADD :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 88 - 10/31/2025 04:19:39 PM


    2094/DADD :                                   DO    
    2094/DADD : [2094]                           ENDIF
    2094/DADD : [2094]                           ENDIF
    2095/DADD : (MACRO)[561]            	DO	DIMSN
    2095/DADD : =>NOT BLANK                      IFNB   DIMSN
    2095/DADD : FC                                DB    H(DIMSN)
    2095/DADE : 79                                DB    L(DIMSN)
    2095/DADF :                                   SHIFT
    2095/DADF :  (MACRO-2)[562]                   DO    
    2095/DADF : =>BLANK                          IFNB   
    2095/DADF :                                   DB    H()
    2095/DADF :                                   DB    L()
    2095/DADF :                                   SHIFT
    2095/DADF :                                   DO    
    2095/DADF : [2095]                           ENDIF
    2095/DADF : [2095]                           ENDIF
    2096/DADF : (MACRO)[563]            	TSTSTR	ENDPAR,')'
    2096/DADF : 99                               DB     H(ENDPAR - TSTBITH)
    2096/DAE0 : 2F                               DB     L(ENDPAR)
    2096/DAE1 : 29                               DB     ')'
    2097/DAE2 : (MACRO)[564]            	TSTSTR	INPUT2,','
    2097/DAE2 : 9A                               DB     H(INPUT2 - TSTBITH)
    2097/DAE3 : 1E                               DB     L(INPUT2)
    2097/DAE4 : 2C                               DB     ','
    2098/DAE5 : (MACRO)[565]            	GOTO	DIM
    2098/DAE5 : 5A                               DB     H(DIM - JMPBITH)
    2098/DAE6 : CF                               DB     L(DIM)
    2099/DAE7 : (MACRO)[566]            NEG:	DO	STACK
    2099/DAE7 : =>NOT BLANK                      IFNB   STACK
    2099/DAE7 : F2                                DB    H(STACK)
    2099/DAE8 : 8E                                DB    L(STACK)
    2099/DAE9 :                                   SHIFT
    2099/DAE9 :  (MACRO-2)[567]                   DO    
    2099/DAE9 : =>BLANK                          IFNB   
    2099/DAE9 :                                   DB    H()
    2099/DAE9 :                                   DB    L()
    2099/DAE9 :                                   SHIFT
    2099/DAE9 :                                   DO    
    2099/DAE9 : [2099]                           ENDIF
    2099/DAE9 : [2099]                           ENDIF
    2100/DAE9 : (MACRO)[568]            	DO	FNEG
    2100/DAE9 : =>NOT BLANK                      IFNB   FNEG
    2100/DAE9 : F1                                DB    H(FNEG)
    2100/DAEA : AC                                DB    L(FNEG)
    2100/DAEB :                                   SHIFT
    2100/DAEB :  (MACRO-2)[569]                   DO    
    2100/DAEB : =>BLANK                          IFNB   
    2100/DAEB :                                   DB    H()
    2100/DAEB :                                   DB    L()
    2100/DAEB :                                   SHIFT
    2100/DAEB :                                   DO    
    2100/DAEB : [2100]                           ENDIF
    2100/DAEB : [2100]                           ENDIF
    2101/DAEB : (MACRO)[570]            	DO	STBCK
    2101/DAEB : =>NOT BLANK                      IFNB   STBCK
    2101/DAEB : E6                                DB    H(STBCK)
    2101/DAEC : 74                                DB    L(STBCK)
    2101/DAED :                                   SHIFT
    2101/DAED :  (MACRO-2)[571]                   DO    
    2101/DAED : =>BLANK                          IFNB   
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 89 - 10/31/2025 04:19:39 PM


    2101/DAED :                                   DB    H()
    2101/DAED :                                   DB    L()
    2101/DAED :                                   SHIFT
    2101/DAED :                                   DO    
    2101/DAED : [2101]                           ENDIF
    2101/DAED : [2101]                           ENDIF
    2102/DAED :                         
    2103/DAED :                         
    2104/DAED :                         ; Handle the PRINT commands.
    2105/DAED :                         ;
    2106/DAED :                         ; We use PREXP for both USING/formatted and unformatted printing.
    2107/DAED :                         ; Since we moved the number printing out of the ILCALL procedure,
    2108/DAED :                         ; it is now called every time the loop is executed. So number
    2109/DAED :                         ; printing only takes place IF a number is found on the STACK.
    2110/DAED :                         ;
    2111/DAED : (MACRO)[572]            PRINT:	TSTSTR	PRNT2,T_USING		; handle PR[INT] and USING
    2111/DAED : 9A                               DB     H(PRNT2 - TSTBITH)
    2111/DAEE : FE                               DB     L(PRNT2)
    2111/DAEF : CC                               DB     T_USING
    2112/DAF0 : (MACRO)[573]            	TSTSTR	SYNTAX,'"'		; do we have a literal?
    2112/DAF0 : 99                               DB     H(SYNTAX - TSTBITH)
    2112/DAF1 : 42                               DB     L(SYNTAX)
    2112/DAF2 : 22                               DB     '"'
    2113/DAF3 : (MACRO)[574]            	DO	USING			; yes, handle format for USING
    2113/DAF3 : =>NOT BLANK                      IFNB   USING
    2113/DAF3 : FE                                DB    H(USING)
    2113/DAF4 : 9D                                DB    L(USING)
    2113/DAF5 :                                   SHIFT
    2113/DAF5 :  (MACRO-2)[575]                   DO    
    2113/DAF5 : =>BLANK                          IFNB   
    2113/DAF5 :                                   DB    H()
    2113/DAF5 :                                   DB    L()
    2113/DAF5 :                                   SHIFT
    2113/DAF5 :                                   DO    
    2113/DAF5 : [2113]                           ENDIF
    2113/DAF5 : [2113]                           ENDIF
    2114/DAF5 : (MACRO)[576]            PRNT1:	ILCALL	PREXP			; handle the expression
    2114/DAF5 : 1B                               DB     H(PREXP - (JMPBITH + TSTBITH))
    2114/DAF6 : 41                               DB     L(PREXP)
    2115/DAF7 : (MACRO)[577]            	DO	USING2			; format the result
    2115/DAF7 : =>NOT BLANK                      IFNB   USING2
    2115/DAF7 : FE                                DB    H(USING2)
    2115/DAF8 : DB                                DB    L(USING2)
    2115/DAF9 :                                   SHIFT
    2115/DAF9 :  (MACRO-2)[578]                   DO    
    2115/DAF9 : =>BLANK                          IFNB   
    2115/DAF9 :                                   DB    H()
    2115/DAF9 :                                   DB    L()
    2115/DAF9 :                                   SHIFT
    2115/DAF9 :                                   DO    
    2115/DAF9 : [2115]                           ENDIF
    2115/DAF9 : [2115]                           ENDIF
    2116/DAF9 : (MACRO)[579]            	TSTSTR	PRNT6,','		; test if next is comma
    2116/DAF9 : 9B                               DB     H(PRNT6 - TSTBITH)
    2116/DAFA : 13                               DB     L(PRNT6)
    2116/DAFB : 2C                               DB     ','
    2117/DAFC : (MACRO)[580]            	GOTO	PRNT1			; yes, do again
    2117/DAFC : 5A                               DB     H(PRNT1 - JMPBITH)
    2117/DAFD : F5                               DB     L(PRNT1)
    2118/DAFE : (MACRO)[581]            PRNT2:	TSTSTR	PRNT3,':'		; test if next is colon
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 90 - 10/31/2025 04:19:39 PM


    2118/DAFE : 9B                               DB     H(PRNT3 - TSTBITH)
    2118/DAFF : 03                               DB     L(PRNT3)
    2118/DB00 : 3A                               DB     ':'
    2119/DB01 : (MACRO)[582]            	GOTO	PRNT4			; yes, all done
    2119/DB01 : 5B                               DB     H(PRNT4 - JMPBITH)
    2119/DB02 : 06                               DB     L(PRNT4)
    2120/DB03 : (MACRO)[583]            PRNT3:	TSTSTR	PRNT5,_CR		; test if next is <cr>
    2120/DB03 : 9B                               DB     H(PRNT5 - TSTBITH)
    2120/DB04 : 0A                               DB     L(PRNT5)
    2120/DB05 : 0D                               DB     _CR
    2121/DB06 : (MACRO)[584]            PRNT4:	DO	LINE			; print newline
    2121/DB06 : =>NOT BLANK                      IFNB   LINE
    2121/DB06 : E0                                DB    H(LINE)
    2121/DB07 : FE                                DB    L(LINE)
    2121/DB08 :                                   SHIFT
    2121/DB08 :  (MACRO-2)[585]                   DO    
    2121/DB08 : =>BLANK                          IFNB   
    2121/DB08 :                                   DB    H()
    2121/DB08 :                                   DB    L()
    2121/DB08 :                                   SHIFT
    2121/DB08 :                                   DO    
    2121/DB08 : [2121]                           ENDIF
    2121/DB08 : [2121]                           ENDIF
    2122/DB08 : (MACRO)[586]            	DO	NXT			; end of statement
    2122/DB08 : =>NOT BLANK                      IFNB   NXT
    2122/DB08 : E4                                DB    H(NXT)
    2122/DB09 : 0E                                DB    L(NXT)
    2122/DB0A :                                   SHIFT
    2122/DB0A :  (MACRO-2)[587]                   DO    
    2122/DB0A : =>BLANK                          IFNB   
    2122/DB0A :                                   DB    H()
    2122/DB0A :                                   DB    L()
    2122/DB0A :                                   SHIFT
    2122/DB0A :                                   DO    
    2122/DB0A : [2122]                           ENDIF
    2122/DB0A : [2122]                           ENDIF
    2123/DB0A : (MACRO)[588]            PRNT5:	ILCALL	PREXP			; handle the expression
    2123/DB0A : 1B                               DB     H(PREXP - (JMPBITH + TSTBITH))
    2123/DB0B : 41                               DB     L(PREXP)
    2124/DB0C : (MACRO)[589]            	DO	PRFNUM			; print the result
    2124/DB0C : =>NOT BLANK                      IFNB   PRFNUM
    2124/DB0C : FF                                DB    H(PRFNUM)
    2124/DB0D : 65                                DB    L(PRFNUM)
    2124/DB0E :                                   SHIFT
    2124/DB0E :  (MACRO-2)[590]                   DO    
    2124/DB0E : =>BLANK                          IFNB   
    2124/DB0E :                                   DB    H()
    2124/DB0E :                                   DB    L()
    2124/DB0E :                                   SHIFT
    2124/DB0E :                                   DO    
    2124/DB0E : [2124]                           ENDIF
    2124/DB0E : [2124]                           ENDIF
    2125/DB0E : (MACRO)[591]            	TSTSTR	PRNT6,','		; test if next is comma
    2125/DB0E : 9B                               DB     H(PRNT6 - TSTBITH)
    2125/DB0F : 13                               DB     L(PRNT6)
    2125/DB10 : 2C                               DB     ','
    2126/DB11 : (MACRO)[592]            	GOTO	PRNT5			; yes, do again
    2126/DB11 : 5B                               DB     H(PRNT5 - JMPBITH)
    2126/DB12 : 0A                               DB     L(PRNT5)
    2127/DB13 : (MACRO)[593]            PRNT6:	TSTSTR	PRNT7,';'		; test if semicolon
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 91 - 10/31/2025 04:19:39 PM


    2127/DB13 : 9B                               DB     H(PRNT7 - TSTBITH)
    2127/DB14 : 18                               DB     L(PRNT7)
    2127/DB15 : 3B                               DB     ';'
    2128/DB16 : (MACRO)[594]            	DO	DNE			; yes, done
    2128/DB16 : =>NOT BLANK                      IFNB   DNE
    2128/DB16 : E3                                DB    H(DNE)
    2128/DB17 : B3                                DB    L(DNE)
    2128/DB18 :                                   SHIFT
    2128/DB18 :  (MACRO-2)[595]                   DO    
    2128/DB18 : =>BLANK                          IFNB   
    2128/DB18 :                                   DB    H()
    2128/DB18 :                                   DB    L()
    2128/DB18 :                                   SHIFT
    2128/DB18 :                                   DO    
    2128/DB18 : [2128]                           ENDIF
    2128/DB18 : [2128]                           ENDIF
    2129/DB18 : (MACRO)[596]            PRNT7:	DO	LINE			; print newline
    2129/DB18 : =>NOT BLANK                      IFNB   LINE
    2129/DB18 : E0                                DB    H(LINE)
    2129/DB19 : FE                                DB    L(LINE)
    2129/DB1A :                                   SHIFT
    2129/DB1A :  (MACRO-2)[597]                   DO    
    2129/DB1A : =>BLANK                          IFNB   
    2129/DB1A :                                   DB    H()
    2129/DB1A :                                   DB    L()
    2129/DB1A :                                   SHIFT
    2129/DB1A :                                   DO    
    2129/DB1A : [2129]                           ENDIF
    2129/DB1A : [2129]                           ENDIF
    2130/DB1A : (MACRO)[598]            	DO	DNE			; done
    2130/DB1A : =>NOT BLANK                      IFNB   DNE
    2130/DB1A : E3                                DB    H(DNE)
    2130/DB1B : B3                                DB    L(DNE)
    2130/DB1C :                                   SHIFT
    2130/DB1C :  (MACRO-2)[599]                   DO    
    2130/DB1C : =>BLANK                          IFNB   
    2130/DB1C :                                   DB    H()
    2130/DB1C :                                   DB    L()
    2130/DB1C :                                   SHIFT
    2130/DB1C :                                   DO    
    2130/DB1C : [2130]                           ENDIF
    2130/DB1C : [2130]                           ENDIF
    2131/DB1C : (MACRO)[600]            	ILRTRN				; return
    2131/DB1C : 00                               DB     0
    2132/DB1D :                         
    2133/DB1D :                         ; PRINT USING routine (part 3.)
    2134/DB1D : C5 FF                   USING3:	LD	@-1(P1)			; decr P1 and load prev program byte
    2135/DB1F : E4 2E                   	XRI	'.'			; is it <dot> ?
    2136/DB21 : 98 FA                   	JZ	USING3
    2137/DB23 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    2138/DB25 : E4 45                   	XRI	'E'			; is it 'E' ?
    2139/DB27 : 98 04                   	JZ	USNG31
    2140/DB29 : C1 FF                   	LD	-1(P1)
    2141/DB2B : 9C 0A                   	JNZ	USNG32			; jump if not terminated by <null>
    2142/DB2D : C4 30                   USNG31:	LDI	'0'
    2143/DB2F : =>DEFINED               	IFDEF	SCALLS
    2144/DB2F : (MACRO)[601]            	 SYSCALL	2
    2144/DB2F : 3F                               XPPC   P3
    2144/DB30 : 02                               DB     2
    2145/DB31 : =>FALSE                 	ELSE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 92 - 10/31/2025 04:19:39 PM


    2146/DB31 :                         	 CALL	PUTASC
    2147/DB31 : [2143]                  	ENDIF
    2148/DB31 : BA EB                   	DLD	COUNTR(P2)
    2149/DB33 : 9C F8                   	JNZ	USNG31
    2150/DB35 : 93 38                   	JMP	SV_RTRN(P3)
    2151/DB37 : C5 FF                   USNG32:	LD	@-1(P1)
    2152/DB39 : =>DEFINED               	IFDEF	SCALLS
    2153/DB39 : (MACRO)[602]            	 SYSCALL	2
    2153/DB39 : 3F                               XPPC   P3
    2153/DB3A : 02                               DB     2
    2154/DB3B : =>FALSE                 	ELSE
    2155/DB3B :                         	 CALL	PUTASC
    2156/DB3B : [2152]                  	ENDIF
    2157/DB3B : BA EB                   	DLD	COUNTR(P2)
    2158/DB3D : 9C DE                   	JNZ	USING3
    2159/DB3F : 93 38                   	JMP	SV_RTRN(P3)
    2160/DB41 :                         
    2161/DB41 :                         ; Handle expression to print.
    2162/DB41 : (MACRO)[603]            PREXP:	TSTSTR	PREX1,'"'		; do we have a literal?
    2162/DB41 : 9B                               DB     H(PREX1 - TSTBITH)
    2162/DB42 : 46                               DB     L(PREX1)
    2162/DB43 : 22                               DB     '"'
    2163/DB44 : (MACRO)[604]            	DO	PRSTRG			; yes, print it
    2163/DB44 : =>NOT BLANK                      IFNB   PRSTRG
    2163/DB44 : E5                                DB    H(PRSTRG)
    2163/DB45 : D0                                DB    L(PRSTRG)
    2163/DB46 :                                   SHIFT
    2163/DB46 :  (MACRO-2)[605]                   DO    
    2163/DB46 : =>BLANK                          IFNB   
    2163/DB46 :                                   DB    H()
    2163/DB46 :                                   DB    L()
    2163/DB46 :                                   SHIFT
    2163/DB46 :                                   DO    
    2163/DB46 : [2163]                           ENDIF
    2163/DB46 : [2163]                           ENDIF
    2164/DB46 : (MACRO)[606]            PREX1:	TSTSTR	PREX2,T_CHR		; handle CHR$(x)
    2164/DB46 : 9B                               DB     H(PREX2 - TSTBITH)
    2164/DB47 : 4F                               DB     L(PREX2)
    2164/DB48 : C5                               DB     T_CHR
    2165/DB49 : (MACRO)[607]            	ILCALL	SNGL
    2165/DB49 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2165/DB4A : 70                               DB     L(SNGL)
    2166/DB4B : (MACRO)[608]            	DO	POPAE
    2166/DB4B : =>NOT BLANK                      IFNB   POPAE
    2166/DB4B : E1                                DB    H(POPAE)
    2166/DB4C : BD                                DB    L(POPAE)
    2166/DB4D :                                   SHIFT
    2166/DB4D :  (MACRO-2)[609]                   DO    
    2166/DB4D : =>BLANK                          IFNB   
    2166/DB4D :                                   DB    H()
    2166/DB4D :                                   DB    L()
    2166/DB4D :                                   SHIFT
    2166/DB4D :                                   DO    
    2166/DB4D : [2166]                           ENDIF
    2166/DB4D : [2166]                           ENDIF
    2167/DB4D : (MACRO)[610]            	DO	PRCHAR
    2167/DB4D : =>NOT BLANK                      IFNB   PRCHAR
    2167/DB4D : EE                                DB    H(PRCHAR)
    2167/DB4E : 9D                                DB    L(PRCHAR)
    2167/DB4F :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 93 - 10/31/2025 04:19:39 PM


    2167/DB4F :  (MACRO-2)[611]                   DO    
    2167/DB4F : =>BLANK                          IFNB   
    2167/DB4F :                                   DB    H()
    2167/DB4F :                                   DB    L()
    2167/DB4F :                                   SHIFT
    2167/DB4F :                                   DO    
    2167/DB4F : [2167]                           ENDIF
    2167/DB4F : [2167]                           ENDIF
    2168/DB4F : (MACRO)[612]            PREX2:	TSTSTR	PREX3,T_SPC		; handle SPC(x)
    2168/DB4F : 9B                               DB     H(PREX3 - TSTBITH)
    2168/DB50 : 58                               DB     L(PREX3)
    2168/DB51 : C9                               DB     T_SPC
    2169/DB52 : (MACRO)[613]            	ILCALL	SNGL
    2169/DB52 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2169/DB53 : 70                               DB     L(SNGL)
    2170/DB54 : (MACRO)[614]            	DO	POPAE
    2170/DB54 : =>NOT BLANK                      IFNB   POPAE
    2170/DB54 : E1                                DB    H(POPAE)
    2170/DB55 : BD                                DB    L(POPAE)
    2170/DB56 :                                   SHIFT
    2170/DB56 :  (MACRO-2)[615]                   DO    
    2170/DB56 : =>BLANK                          IFNB   
    2170/DB56 :                                   DB    H()
    2170/DB56 :                                   DB    L()
    2170/DB56 :                                   SHIFT
    2170/DB56 :                                   DO    
    2170/DB56 : [2170]                           ENDIF
    2170/DB56 : [2170]                           ENDIF
    2171/DB56 : (MACRO)[616]            	DO	SPC
    2171/DB56 : =>NOT BLANK                      IFNB   SPC
    2171/DB56 : E5                                DB    H(SPC)
    2171/DB57 : C2                                DB    L(SPC)
    2171/DB58 :                                   SHIFT
    2171/DB58 :  (MACRO-2)[617]                   DO    
    2171/DB58 : =>BLANK                          IFNB   
    2171/DB58 :                                   DB    H()
    2171/DB58 :                                   DB    L()
    2171/DB58 :                                   SHIFT
    2171/DB58 :                                   DO    
    2171/DB58 : [2171]                           ENDIF
    2171/DB58 : [2171]                           ENDIF
    2172/DB58 : (MACRO)[618]            PREX3:	TSTSTR	PREX4,T_STR		; handle STR$(x)
    2172/DB58 : 9B                               DB     H(PREX4 - TSTBITH)
    2172/DB59 : 5F                               DB     L(PREX4)
    2172/DB5A : CA                               DB     T_STR
    2173/DB5B : (MACRO)[619]            	ILCALL	SNGL
    2173/DB5B : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2173/DB5C : 70                               DB     L(SNGL)
    2174/DB5D : (MACRO)[620]            	GOTO	PREX10
    2174/DB5D : 5B                               DB     H(PREX10 - JMPBITH)
    2174/DB5E : 8B                               DB     L(PREX10)
    2175/DB5F : (MACRO)[621]            PREX4:	TSTSTR	PREX5,T_TAB		; handle TAB(x)
    2175/DB5F : 9B                               DB     H(PREX5 - TSTBITH)
    2175/DB60 : 68                               DB     L(PREX5)
    2175/DB61 : CB                               DB     T_TAB
    2176/DB62 : (MACRO)[622]            	ILCALL	SNGL
    2176/DB62 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2176/DB63 : 70                               DB     L(SNGL)
    2177/DB64 : (MACRO)[623]            	DO	POPAE
    2177/DB64 : =>NOT BLANK                      IFNB   POPAE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 94 - 10/31/2025 04:19:39 PM


    2177/DB64 : E1                                DB    H(POPAE)
    2177/DB65 : BD                                DB    L(POPAE)
    2177/DB66 :                                   SHIFT
    2177/DB66 :  (MACRO-2)[624]                   DO    
    2177/DB66 : =>BLANK                          IFNB   
    2177/DB66 :                                   DB    H()
    2177/DB66 :                                   DB    L()
    2177/DB66 :                                   SHIFT
    2177/DB66 :                                   DO    
    2177/DB66 : [2177]                           ENDIF
    2177/DB66 : [2177]                           ENDIF
    2178/DB66 : (MACRO)[625]            	DO	TAB
    2178/DB66 : =>NOT BLANK                      IFNB   TAB
    2178/DB66 : FD                                DB    H(TAB)
    2178/DB67 : CB                                DB    L(TAB)
    2178/DB68 :                                   SHIFT
    2178/DB68 :  (MACRO-2)[626]                   DO    
    2178/DB68 : =>BLANK                          IFNB   
    2178/DB68 :                                   DB    H()
    2178/DB68 :                                   DB    L()
    2178/DB68 :                                   SHIFT
    2178/DB68 :                                   DO    
    2178/DB68 : [2178]                           ENDIF
    2178/DB68 : [2178]                           ENDIF
    2179/DB68 : (MACRO)[627]            PREX5:	TSTSTR	PREX6,T_VER		; handle VER$
    2179/DB68 : 9B                               DB     H(PREX6 - TSTBITH)
    2179/DB69 : 6D                               DB     L(PREX6)
    2179/DB6A : CD                               DB     T_VER
    2180/DB6B : (MACRO)[628]            	DO	VSTRNG
    2180/DB6B : =>NOT BLANK                      IFNB   VSTRNG
    2180/DB6B : FD                                DB    H(VSTRNG)
    2180/DB6C : A2                                DB    L(VSTRNG)
    2180/DB6D :                                   SHIFT
    2180/DB6D :  (MACRO-2)[629]                   DO    
    2180/DB6D : =>BLANK                          IFNB   
    2180/DB6D :                                   DB    H()
    2180/DB6D :                                   DB    L()
    2180/DB6D :                                   SHIFT
    2180/DB6D :                                   DO    
    2180/DB6D : [2180]                           ENDIF
    2180/DB6D : [2180]                           ENDIF
    2181/DB6D : (MACRO)[630]            PREX6:	TSTSTR	PREX7,T_VERT		; handle VERT(x)
    2181/DB6D : 9B                               DB     H(PREX7 - TSTBITH)
    2181/DB6E : 76                               DB     L(PREX7)
    2181/DB6F : CE                               DB     T_VERT
    2182/DB70 : (MACRO)[631]            	ILCALL	SNGL
    2182/DB70 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2182/DB71 : 70                               DB     L(SNGL)
    2183/DB72 : (MACRO)[632]            	DO	POPAE
    2183/DB72 : =>NOT BLANK                      IFNB   POPAE
    2183/DB72 : E1                                DB    H(POPAE)
    2183/DB73 : BD                                DB    L(POPAE)
    2183/DB74 :                                   SHIFT
    2183/DB74 :  (MACRO-2)[633]                   DO    
    2183/DB74 : =>BLANK                          IFNB   
    2183/DB74 :                                   DB    H()
    2183/DB74 :                                   DB    L()
    2183/DB74 :                                   SHIFT
    2183/DB74 :                                   DO    
    2183/DB74 : [2183]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 95 - 10/31/2025 04:19:39 PM


    2183/DB74 : [2183]                           ENDIF
    2184/DB74 : (MACRO)[634]            	DO	VERT
    2184/DB74 : =>NOT BLANK                      IFNB   VERT
    2184/DB74 : F2                                DB    H(VERT)
    2184/DB75 : 3F                                DB    L(VERT)
    2184/DB76 :                                   SHIFT
    2184/DB76 :  (MACRO-2)[635]                   DO    
    2184/DB76 : =>BLANK                          IFNB   
    2184/DB76 :                                   DB    H()
    2184/DB76 :                                   DB    L()
    2184/DB76 :                                   SHIFT
    2184/DB76 :                                   DO    
    2184/DB76 : [2184]                           ENDIF
    2184/DB76 : [2184]                           ENDIF
    2185/DB76 : (MACRO)[636]            PREX7:	DO	STRPNT
    2185/DB76 : =>NOT BLANK                      IFNB   STRPNT
    2185/DB76 : ED                                DB    H(STRPNT)
    2185/DB77 : 42                                DB    L(STRPNT)
    2185/DB78 :                                   SHIFT
    2185/DB78 :  (MACRO-2)[637]                   DO    
    2185/DB78 : =>BLANK                          IFNB   
    2185/DB78 :                                   DB    H()
    2185/DB78 :                                   DB    L()
    2185/DB78 :                                   SHIFT
    2185/DB78 :                                   DO    
    2185/DB78 : [2185]                           ENDIF
    2185/DB78 : [2185]                           ENDIF
    2186/DB78 : (MACRO)[638]            	TSTVAR	PREX9
    2186/DB78 : BB                               DB     H(PREX9 - CALBITH)
    2186/DB79 : 89                               DB     L(PREX9)
    2187/DB7A : (MACRO)[639]            	DO	FNDVAR
    2187/DB7A : =>NOT BLANK                      IFNB   FNDVAR
    2187/DB7A : E2                                DB    H(FNDVAR)
    2187/DB7B : E1                                DB    L(FNDVAR)
    2187/DB7C :                                   SHIFT
    2187/DB7C :  (MACRO-2)[640]                   DO    
    2187/DB7C : =>BLANK                          IFNB   
    2187/DB7C :                                   DB    H()
    2187/DB7C :                                   DB    L()
    2187/DB7C :                                   SHIFT
    2187/DB7C :                                   DO    
    2187/DB7C : [2187]                           ENDIF
    2187/DB7C : [2187]                           ENDIF
    2188/DB7C : (MACRO)[641]            	DO	POPDLR
    2188/DB7C : =>NOT BLANK                      IFNB   POPDLR
    2188/DB7C : FD                                DB    H(POPDLR)
    2188/DB7D : 90                                DB    L(POPDLR)
    2188/DB7E :                                   SHIFT
    2188/DB7E :  (MACRO-2)[642]                   DO    
    2188/DB7E : =>BLANK                          IFNB   
    2188/DB7E :                                   DB    H()
    2188/DB7E :                                   DB    L()
    2188/DB7E :                                   SHIFT
    2188/DB7E :                                   DO    
    2188/DB7E : [2188]                           ENDIF
    2188/DB7E : [2188]                           ENDIF
    2189/DB7E : (MACRO)[643]            	TSTSTR	PREX8,'$'
    2189/DB7E : 9B                               DB     H(PREX8 - TSTBITH)
    2189/DB7F : 87                               DB     L(PREX8)
    2189/DB80 : 24                               DB     '$'
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 96 - 10/31/2025 04:19:39 PM


    2190/DB81 : (MACRO)[644]            	DO	LDVAR
    2190/DB81 : =>NOT BLANK                      IFNB   LDVAR
    2190/DB81 : E8                                DB    H(LDVAR)
    2190/DB82 : 15                                DB    L(LDVAR)
    2190/DB83 :                                   SHIFT
    2190/DB83 :  (MACRO-2)[645]                   DO    
    2190/DB83 : =>BLANK                          IFNB   
    2190/DB83 :                                   DB    H()
    2190/DB83 :                                   DB    L()
    2190/DB83 :                                   SHIFT
    2190/DB83 :                                   DO    
    2190/DB83 : [2190]                           ENDIF
    2190/DB83 : [2190]                           ENDIF
    2191/DB83 : (MACRO)[646]            	DO	POPAE
    2191/DB83 : =>NOT BLANK                      IFNB   POPAE
    2191/DB83 : E1                                DB    H(POPAE)
    2191/DB84 : BD                                DB    L(POPAE)
    2191/DB85 :                                   SHIFT
    2191/DB85 :  (MACRO-2)[647]                   DO    
    2191/DB85 : =>BLANK                          IFNB   
    2191/DB85 :                                   DB    H()
    2191/DB85 :                                   DB    L()
    2191/DB85 :                                   SHIFT
    2191/DB85 :                                   DO    
    2191/DB85 : [2191]                           ENDIF
    2191/DB85 : [2191]                           ENDIF
    2192/DB85 : (MACRO)[648]            	DO	PSTRNG
    2192/DB85 : =>NOT BLANK                      IFNB   PSTRNG
    2192/DB85 : FD                                DB    H(PSTRNG)
    2192/DB86 : AA                                DB    L(PSTRNG)
    2192/DB87 :                                   SHIFT
    2192/DB87 :  (MACRO-2)[649]                   DO    
    2192/DB87 : =>BLANK                          IFNB   
    2192/DB87 :                                   DB    H()
    2192/DB87 :                                   DB    L()
    2192/DB87 :                                   SHIFT
    2192/DB87 :                                   DO    
    2192/DB87 : [2192]                           ENDIF
    2192/DB87 : [2192]                           ENDIF
    2193/DB87 : (MACRO)[650]            PREX8:	DO	XCHPNT
    2193/DB87 : =>NOT BLANK                      IFNB   XCHPNT
    2193/DB87 : E9                                DB    H(XCHPNT)
    2193/DB88 : 1E                                DB    L(XCHPNT)
    2193/DB89 :                                   SHIFT
    2193/DB89 :  (MACRO-2)[651]                   DO    
    2193/DB89 : =>BLANK                          IFNB   
    2193/DB89 :                                   DB    H()
    2193/DB89 :                                   DB    L()
    2193/DB89 :                                   SHIFT
    2193/DB89 :                                   DO    
    2193/DB89 : [2193]                           ENDIF
    2193/DB89 : [2193]                           ENDIF
    2194/DB89 : (MACRO)[652]            PREX9:	ILCALL	REXPR			; handle numeric expression
    2194/DB89 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2194/DB8A : C6                               DB     L(REXPR)
    2195/DB8B : (MACRO)[653]            PREX10:	DO	STACK
    2195/DB8B : =>NOT BLANK                      IFNB   STACK
    2195/DB8B : F2                                DB    H(STACK)
    2195/DB8C : 8E                                DB    L(STACK)
    2195/DB8D :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 97 - 10/31/2025 04:19:39 PM


    2195/DB8D :  (MACRO-2)[654]                   DO    
    2195/DB8D : =>BLANK                          IFNB   
    2195/DB8D :                                   DB    H()
    2195/DB8D :                                   DB    L()
    2195/DB8D :                                   SHIFT
    2195/DB8D :                                   DO    
    2195/DB8D : [2195]                           ENDIF
    2195/DB8D : [2195]                           ENDIF
    2196/DB8D : (MACRO)[655]            	DO	FNUM
    2196/DB8D : =>NOT BLANK                      IFNB   FNUM
    2196/DB8D : F2                                DB    H(FNUM)
    2196/DB8E : 9A                                DB    L(FNUM)
    2196/DB8F :                                   SHIFT
    2196/DB8F :  (MACRO-2)[656]                   DO    
    2196/DB8F : =>BLANK                          IFNB   
    2196/DB8F :                                   DB    H()
    2196/DB8F :                                   DB    L()
    2196/DB8F :                                   SHIFT
    2196/DB8F :                                   DO    
    2196/DB8F : [2196]                           ENDIF
    2196/DB8F : [2196]                           ENDIF
    2197/DB8F : (MACRO)[657]            	DO	STPBCK
    2197/DB8F : =>NOT BLANK                      IFNB   STPBCK
    2197/DB8F : F4                                DB    H(STPBCK)
    2197/DB90 : AE                                DB    L(STPBCK)
    2197/DB91 :                                   SHIFT
    2197/DB91 :  (MACRO-2)[658]                   DO    
    2197/DB91 : =>BLANK                          IFNB   
    2197/DB91 :                                   DB    H()
    2197/DB91 :                                   DB    L()
    2197/DB91 :                                   SHIFT
    2197/DB91 :                                   DO    
    2197/DB91 : [2197]                           ENDIF
    2197/DB91 : [2197]                           ENDIF
    2198/DB91 : (MACRO)[659]            	ILRTRN
    2198/DB91 : 00                               DB     0
    2199/DB92 :                         
    2200/DB92 :                         ; Handle string expressions
    2201/DB92 : (MACRO)[660]            STREXP:	ILCALL	STRF
    2201/DB92 : 1B                               DB     H(STRF - (JMPBITH + TSTBITH))
    2201/DB93 : 9D                               DB     L(STRF)
    2202/DB94 : (MACRO)[661]            STREX1:	TSTSTR	STREX2,'&'
    2202/DB94 : 9B                               DB     H(STREX2 - TSTBITH)
    2202/DB95 : 9B                               DB     L(STREX2)
    2202/DB96 : 26                               DB     '&'
    2203/DB97 : (MACRO)[662]            	ILCALL	STRF
    2203/DB97 : 1B                               DB     H(STRF - (JMPBITH + TSTBITH))
    2203/DB98 : 9D                               DB     L(STRF)
    2204/DB99 : (MACRO)[663]            	GOTO	STREX1
    2204/DB99 : 5B                               DB     H(STREX1 - JMPBITH)
    2204/DB9A : 94                               DB     L(STREX1)
    2205/DB9B : (MACRO)[664]            STREX2:	DO	POPSTR
    2205/DB9B : =>NOT BLANK                      IFNB   POPSTR
    2205/DB9B : ED                                DB    H(POPSTR)
    2205/DB9C : 3C                                DB    L(POPSTR)
    2205/DB9D :                                   SHIFT
    2205/DB9D :  (MACRO-2)[665]                   DO    
    2205/DB9D : =>BLANK                          IFNB   
    2205/DB9D :                                   DB    H()
    2205/DB9D :                                   DB    L()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 98 - 10/31/2025 04:19:39 PM


    2205/DB9D :                                   SHIFT
    2205/DB9D :                                   DO    
    2205/DB9D : [2205]                           ENDIF
    2205/DB9D : [2205]                           ENDIF
    2206/DB9D : (MACRO)[666]            STRF:	TSTSTR	STRF1,'"'
    2206/DB9D : 9B                               DB     H(STRF1 - TSTBITH)
    2206/DB9E : A2                               DB     L(STRF1)
    2206/DB9F : 22                               DB     '"'
    2207/DBA0 : (MACRO)[667]            	DO	PUTST
    2207/DBA0 : =>NOT BLANK                      IFNB   PUTST
    2207/DBA0 : EC                                DB    H(PUTST)
    2207/DBA1 : 19                                DB    L(PUTST)
    2207/DBA2 :                                   SHIFT
    2207/DBA2 :  (MACRO-2)[668]                   DO    
    2207/DBA2 : =>BLANK                          IFNB   
    2207/DBA2 :                                   DB    H()
    2207/DBA2 :                                   DB    L()
    2207/DBA2 :                                   SHIFT
    2207/DBA2 :                                   DO    
    2207/DBA2 : [2207]                           ENDIF
    2207/DBA2 : [2207]                           ENDIF
    2208/DBA2 : (MACRO)[669]            STRF1:	TSTSTR	STRF2,T_CHR		; handle CHR$(x)
    2208/DBA2 : 9B                               DB     H(STRF2 - TSTBITH)
    2208/DBA3 : AB                               DB     L(STRF2)
    2208/DBA4 : C5                               DB     T_CHR
    2209/DBA5 : (MACRO)[670]            	ILCALL	SNGL
    2209/DBA5 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2209/DBA6 : 70                               DB     L(SNGL)
    2210/DBA7 : (MACRO)[671]            	DO	FIX
    2210/DBA7 : =>NOT BLANK                      IFNB   FIX
    2210/DBA7 : EB                                DB    H(FIX)
    2210/DBA8 : 2F                                DB    L(FIX)
    2210/DBA9 :                                   SHIFT
    2210/DBA9 :  (MACRO-2)[672]                   DO    
    2210/DBA9 : =>BLANK                          IFNB   
    2210/DBA9 :                                   DB    H()
    2210/DBA9 :                                   DB    L()
    2210/DBA9 :                                   SHIFT
    2210/DBA9 :                                   DO    
    2210/DBA9 : [2210]                           ENDIF
    2210/DBA9 : [2210]                           ENDIF
    2211/DBA9 : (MACRO)[673]            	DO	CHRSTR
    2211/DBA9 : =>NOT BLANK                      IFNB   CHRSTR
    2211/DBA9 : EC                                DB    H(CHRSTR)
    2211/DBAA : 07                                DB    L(CHRSTR)
    2211/DBAB :                                   SHIFT
    2211/DBAB :  (MACRO-2)[674]                   DO    
    2211/DBAB : =>BLANK                          IFNB   
    2211/DBAB :                                   DB    H()
    2211/DBAB :                                   DB    L()
    2211/DBAB :                                   SHIFT
    2211/DBAB :                                   DO    
    2211/DBAB : [2211]                           ENDIF
    2211/DBAB : [2211]                           ENDIF
    2212/DBAB : (MACRO)[675]            STRF2:	TSTSTR	STRF4,T_LEFT		; handle LEFT$(x$,y)
    2212/DBAB : 9B                               DB     H(STRF4 - TSTBITH)
    2212/DBAC : DD                               DB     L(STRF4)
    2212/DBAD : C6                               DB     T_LEFT
    2213/DBAE : (MACRO)[676]            	TSTSTR	SYNTAX,'('
    2213/DBAE : 99                               DB     H(SYNTAX - TSTBITH)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 99 - 10/31/2025 04:19:39 PM


    2213/DBAF : 42                               DB     L(SYNTAX)
    2213/DBB0 : 28                               DB     '('
    2214/DBB1 : (MACRO)[677]            	TSTSTR	STRF3,'"'
    2214/DBB1 : 9B                               DB     H(STRF3 - TSTBITH)
    2214/DBB2 : C4                               DB     L(STRF3)
    2214/DBB3 : 22                               DB     '"'
    2215/DBB4 : (MACRO)[678]            	DO	STPNT
    2215/DBB4 : =>NOT BLANK                      IFNB   STPNT
    2215/DBB4 : E4                                DB    H(STPNT)
    2215/DBB5 : F4                                DB    L(STPNT)
    2215/DBB6 :                                   SHIFT
    2215/DBB6 :  (MACRO-2)[679]                   DO    
    2215/DBB6 : =>BLANK                          IFNB   
    2215/DBB6 :                                   DB    H()
    2215/DBB6 :                                   DB    L()
    2215/DBB6 :                                   SHIFT
    2215/DBB6 :                                   DO    
    2215/DBB6 : [2215]                           ENDIF
    2215/DBB6 : [2215]                           ENDIF
    2216/DBB6 : (MACRO)[680]            	TSTSTR	SYNTAX,','
    2216/DBB6 : 99                               DB     H(SYNTAX - TSTBITH)
    2216/DBB7 : 42                               DB     L(SYNTAX)
    2216/DBB8 : 2C                               DB     ','
    2217/DBB9 : (MACRO)[681]            	ILCALL	REXPR
    2217/DBB9 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2217/DBBA : C6                               DB     L(REXPR)
    2218/DBBB : (MACRO)[682]            	DO	FIX
    2218/DBBB : =>NOT BLANK                      IFNB   FIX
    2218/DBBB : EB                                DB    H(FIX)
    2218/DBBC : 2F                                DB    L(FIX)
    2218/DBBD :                                   SHIFT
    2218/DBBD :  (MACRO-2)[683]                   DO    
    2218/DBBD : =>BLANK                          IFNB   
    2218/DBBD :                                   DB    H()
    2218/DBBD :                                   DB    L()
    2218/DBBD :                                   SHIFT
    2218/DBBD :                                   DO    
    2218/DBBD : [2218]                           ENDIF
    2218/DBBD : [2218]                           ENDIF
    2219/DBBD : (MACRO)[684]            	TSTSTR	ENDPAR,')'
    2219/DBBD : 99                               DB     H(ENDPAR - TSTBITH)
    2219/DBBE : 2F                               DB     L(ENDPAR)
    2219/DBBF : 29                               DB     ')'
    2220/DBC0 : (MACRO)[685]            	DO	XCHPNT
    2220/DBC0 : =>NOT BLANK                      IFNB   XCHPNT
    2220/DBC0 : E9                                DB    H(XCHPNT)
    2220/DBC1 : 1E                                DB    L(XCHPNT)
    2220/DBC2 :                                   SHIFT
    2220/DBC2 :  (MACRO-2)[686]                   DO    
    2220/DBC2 : =>BLANK                          IFNB   
    2220/DBC2 :                                   DB    H()
    2220/DBC2 :                                   DB    L()
    2220/DBC2 :                                   SHIFT
    2220/DBC2 :                                   DO    
    2220/DBC2 : [2220]                           ENDIF
    2220/DBC2 : [2220]                           ENDIF
    2221/DBC2 : (MACRO)[687]            	DO	LEFTST
    2221/DBC2 : =>NOT BLANK                      IFNB   LEFTST
    2221/DBC2 : EB                                DB    H(LEFTST)
    2221/DBC3 : 99                                DB    L(LEFTST)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 100 - 10/31/2025 04:19:39 PM


    2221/DBC4 :                                   SHIFT
    2221/DBC4 :  (MACRO-2)[688]                   DO    
    2221/DBC4 : =>BLANK                          IFNB   
    2221/DBC4 :                                   DB    H()
    2221/DBC4 :                                   DB    L()
    2221/DBC4 :                                   SHIFT
    2221/DBC4 :                                   DO    
    2221/DBC4 : [2221]                           ENDIF
    2221/DBC4 : [2221]                           ENDIF
    2222/DBC4 : (MACRO)[689]            STRF3:	TSTVAR	SYNTAX
    2222/DBC4 : B9                               DB     H(SYNTAX - CALBITH)
    2222/DBC5 : 42                               DB     L(SYNTAX)
    2223/DBC6 : (MACRO)[690]            	DO	FNDVAR
    2223/DBC6 : =>NOT BLANK                      IFNB   FNDVAR
    2223/DBC6 : E2                                DB    H(FNDVAR)
    2223/DBC7 : E1                                DB    L(FNDVAR)
    2223/DBC8 :                                   SHIFT
    2223/DBC8 :  (MACRO-2)[691]                   DO    
    2223/DBC8 : =>BLANK                          IFNB   
    2223/DBC8 :                                   DB    H()
    2223/DBC8 :                                   DB    L()
    2223/DBC8 :                                   SHIFT
    2223/DBC8 :                                   DO    
    2223/DBC8 : [2223]                           ENDIF
    2223/DBC8 : [2223]                           ENDIF
    2224/DBC8 : (MACRO)[692]            	DO	DEFVAR
    2224/DBC8 : =>NOT BLANK                      IFNB   DEFVAR
    2224/DBC8 : E5                                DB    H(DEFVAR)
    2224/DBC9 : 0E                                DB    L(DEFVAR)
    2224/DBCA :                                   SHIFT
    2224/DBCA :  (MACRO-2)[693]                   DO    
    2224/DBCA : =>BLANK                          IFNB   
    2224/DBCA :                                   DB    H()
    2224/DBCA :                                   DB    L()
    2224/DBCA :                                   SHIFT
    2224/DBCA :                                   DO    
    2224/DBCA : [2224]                           ENDIF
    2224/DBCA : [2224]                           ENDIF
    2225/DBCA : (MACRO)[694]            	TSTSTR	SYNTAX,'$'
    2225/DBCA : 99                               DB     H(SYNTAX - TSTBITH)
    2225/DBCB : 42                               DB     L(SYNTAX)
    2225/DBCC : 24                               DB     '$'
    2226/DBCD : (MACRO)[695]            	DO	LDVAR
    2226/DBCD : =>NOT BLANK                      IFNB   LDVAR
    2226/DBCD : E8                                DB    H(LDVAR)
    2226/DBCE : 15                                DB    L(LDVAR)
    2226/DBCF :                                   SHIFT
    2226/DBCF :  (MACRO-2)[696]                   DO    
    2226/DBCF : =>BLANK                          IFNB   
    2226/DBCF :                                   DB    H()
    2226/DBCF :                                   DB    L()
    2226/DBCF :                                   SHIFT
    2226/DBCF :                                   DO    
    2226/DBCF : [2226]                           ENDIF
    2226/DBCF : [2226]                           ENDIF
    2227/DBCF : (MACRO)[697]            	DO	FIX
    2227/DBCF : =>NOT BLANK                      IFNB   FIX
    2227/DBCF : EB                                DB    H(FIX)
    2227/DBD0 : 2F                                DB    L(FIX)
    2227/DBD1 :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 101 - 10/31/2025 04:19:39 PM


    2227/DBD1 :  (MACRO-2)[698]                   DO    
    2227/DBD1 : =>BLANK                          IFNB   
    2227/DBD1 :                                   DB    H()
    2227/DBD1 :                                   DB    L()
    2227/DBD1 :                                   SHIFT
    2227/DBD1 :                                   DO    
    2227/DBD1 : [2227]                           ENDIF
    2227/DBD1 : [2227]                           ENDIF
    2228/DBD1 : (MACRO)[699]            	TSTSTR	SYNTAX,','
    2228/DBD1 : 99                               DB     H(SYNTAX - TSTBITH)
    2228/DBD2 : 42                               DB     L(SYNTAX)
    2228/DBD3 : 2C                               DB     ','
    2229/DBD4 : (MACRO)[700]            	ILCALL	REXPR
    2229/DBD4 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2229/DBD5 : C6                               DB     L(REXPR)
    2230/DBD6 : (MACRO)[701]            	DO	FIX
    2230/DBD6 : =>NOT BLANK                      IFNB   FIX
    2230/DBD6 : EB                                DB    H(FIX)
    2230/DBD7 : 2F                                DB    L(FIX)
    2230/DBD8 :                                   SHIFT
    2230/DBD8 :  (MACRO-2)[702]                   DO    
    2230/DBD8 : =>BLANK                          IFNB   
    2230/DBD8 :                                   DB    H()
    2230/DBD8 :                                   DB    L()
    2230/DBD8 :                                   SHIFT
    2230/DBD8 :                                   DO    
    2230/DBD8 : [2230]                           ENDIF
    2230/DBD8 : [2230]                           ENDIF
    2231/DBD8 : (MACRO)[703]            	TSTSTR	ENDPAR,')'
    2231/DBD8 : 99                               DB     H(ENDPAR - TSTBITH)
    2231/DBD9 : 2F                               DB     L(ENDPAR)
    2231/DBDA : 29                               DB     ')'
    2232/DBDB : (MACRO)[704]            	DO	LFTSTR
    2232/DBDB : =>NOT BLANK                      IFNB   LFTSTR
    2232/DBDB : EC                                DB    H(LFTSTR)
    2232/DBDC : 6C                                DB    L(LFTSTR)
    2232/DBDD :                                   SHIFT
    2232/DBDD :  (MACRO-2)[705]                   DO    
    2232/DBDD : =>BLANK                          IFNB   
    2232/DBDD :                                   DB    H()
    2232/DBDD :                                   DB    L()
    2232/DBDD :                                   SHIFT
    2232/DBDD :                                   DO    
    2232/DBDD : [2232]                           ENDIF
    2232/DBDD : [2232]                           ENDIF
    2233/DBDD : (MACRO)[706]            STRF4:	TSTSTR	STRF6,T_MID		; handle MID$(x$,y,z)
    2233/DBDD : 9C                               DB     H(STRF6 - TSTBITH)
    2233/DBDE : 1D                               DB     L(STRF6)
    2233/DBDF : C7                               DB     T_MID
    2234/DBE0 : (MACRO)[707]            	TSTSTR	SYNTAX,'('
    2234/DBE0 : 99                               DB     H(SYNTAX - TSTBITH)
    2234/DBE1 : 42                               DB     L(SYNTAX)
    2234/DBE2 : 28                               DB     '('
    2235/DBE3 : (MACRO)[708]            	TSTSTR	STRF5,'"'
    2235/DBE3 : 9B                               DB     H(STRF5 - TSTBITH)
    2235/DBE4 : FD                               DB     L(STRF5)
    2235/DBE5 : 22                               DB     '"'
    2236/DBE6 : (MACRO)[709]            	DO	STPNT
    2236/DBE6 : =>NOT BLANK                      IFNB   STPNT
    2236/DBE6 : E4                                DB    H(STPNT)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 102 - 10/31/2025 04:19:39 PM


    2236/DBE7 : F4                                DB    L(STPNT)
    2236/DBE8 :                                   SHIFT
    2236/DBE8 :  (MACRO-2)[710]                   DO    
    2236/DBE8 : =>BLANK                          IFNB   
    2236/DBE8 :                                   DB    H()
    2236/DBE8 :                                   DB    L()
    2236/DBE8 :                                   SHIFT
    2236/DBE8 :                                   DO    
    2236/DBE8 : [2236]                           ENDIF
    2236/DBE8 : [2236]                           ENDIF
    2237/DBE8 : (MACRO)[711]            	TSTSTR	SYNTAX,','
    2237/DBE8 : 99                               DB     H(SYNTAX - TSTBITH)
    2237/DBE9 : 42                               DB     L(SYNTAX)
    2237/DBEA : 2C                               DB     ','
    2238/DBEB : (MACRO)[712]            	ILCALL	REXPR
    2238/DBEB : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2238/DBEC : C6                               DB     L(REXPR)
    2239/DBED : (MACRO)[713]            	DO	FIX
    2239/DBED : =>NOT BLANK                      IFNB   FIX
    2239/DBED : EB                                DB    H(FIX)
    2239/DBEE : 2F                                DB    L(FIX)
    2239/DBEF :                                   SHIFT
    2239/DBEF :  (MACRO-2)[714]                   DO    
    2239/DBEF : =>BLANK                          IFNB   
    2239/DBEF :                                   DB    H()
    2239/DBEF :                                   DB    L()
    2239/DBEF :                                   SHIFT
    2239/DBEF :                                   DO    
    2239/DBEF : [2239]                           ENDIF
    2239/DBEF : [2239]                           ENDIF
    2240/DBEF : (MACRO)[715]            	TSTSTR	SYNTAX,','
    2240/DBEF : 99                               DB     H(SYNTAX - TSTBITH)
    2240/DBF0 : 42                               DB     L(SYNTAX)
    2240/DBF1 : 2C                               DB     ','
    2241/DBF2 : (MACRO)[716]            	ILCALL	REXPR
    2241/DBF2 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2241/DBF3 : C6                               DB     L(REXPR)
    2242/DBF4 : (MACRO)[717]            	DO	FIX
    2242/DBF4 : =>NOT BLANK                      IFNB   FIX
    2242/DBF4 : EB                                DB    H(FIX)
    2242/DBF5 : 2F                                DB    L(FIX)
    2242/DBF6 :                                   SHIFT
    2242/DBF6 :  (MACRO-2)[718]                   DO    
    2242/DBF6 : =>BLANK                          IFNB   
    2242/DBF6 :                                   DB    H()
    2242/DBF6 :                                   DB    L()
    2242/DBF6 :                                   SHIFT
    2242/DBF6 :                                   DO    
    2242/DBF6 : [2242]                           ENDIF
    2242/DBF6 : [2242]                           ENDIF
    2243/DBF6 : (MACRO)[719]            	TSTSTR	ENDPAR,')'
    2243/DBF6 : 99                               DB     H(ENDPAR - TSTBITH)
    2243/DBF7 : 2F                               DB     L(ENDPAR)
    2243/DBF8 : 29                               DB     ')'
    2244/DBF9 : (MACRO)[720]            	DO	XCHPNT
    2244/DBF9 : =>NOT BLANK                      IFNB   XCHPNT
    2244/DBF9 : E9                                DB    H(XCHPNT)
    2244/DBFA : 1E                                DB    L(XCHPNT)
    2244/DBFB :                                   SHIFT
    2244/DBFB :  (MACRO-2)[721]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 103 - 10/31/2025 04:19:39 PM


    2244/DBFB : =>BLANK                          IFNB   
    2244/DBFB :                                   DB    H()
    2244/DBFB :                                   DB    L()
    2244/DBFB :                                   SHIFT
    2244/DBFB :                                   DO    
    2244/DBFB : [2244]                           ENDIF
    2244/DBFB : [2244]                           ENDIF
    2245/DBFB : (MACRO)[722]            	DO	MIDST
    2245/DBFB : =>NOT BLANK                      IFNB   MIDST
    2245/DBFB : EB                                DB    H(MIDST)
    2245/DBFC : 75                                DB    L(MIDST)
    2245/DBFD :                                   SHIFT
    2245/DBFD :  (MACRO-2)[723]                   DO    
    2245/DBFD : =>BLANK                          IFNB   
    2245/DBFD :                                   DB    H()
    2245/DBFD :                                   DB    L()
    2245/DBFD :                                   SHIFT
    2245/DBFD :                                   DO    
    2245/DBFD : [2245]                           ENDIF
    2245/DBFD : [2245]                           ENDIF
    2246/DBFD : (MACRO)[724]            STRF5:	TSTVAR	SYNTAX
    2246/DBFD : B9                               DB     H(SYNTAX - CALBITH)
    2246/DBFE : 42                               DB     L(SYNTAX)
    2247/DBFF : (MACRO)[725]            	DO	FNDVAR
    2247/DBFF : =>NOT BLANK                      IFNB   FNDVAR
    2247/DBFF : E2                                DB    H(FNDVAR)
    2247/DC00 : E1                                DB    L(FNDVAR)
    2247/DC01 :                                   SHIFT
    2247/DC01 :  (MACRO-2)[726]                   DO    
    2247/DC01 : =>BLANK                          IFNB   
    2247/DC01 :                                   DB    H()
    2247/DC01 :                                   DB    L()
    2247/DC01 :                                   SHIFT
    2247/DC01 :                                   DO    
    2247/DC01 : [2247]                           ENDIF
    2247/DC01 : [2247]                           ENDIF
    2248/DC01 : (MACRO)[727]            	DO	DEFVAR
    2248/DC01 : =>NOT BLANK                      IFNB   DEFVAR
    2248/DC01 : E5                                DB    H(DEFVAR)
    2248/DC02 : 0E                                DB    L(DEFVAR)
    2248/DC03 :                                   SHIFT
    2248/DC03 :  (MACRO-2)[728]                   DO    
    2248/DC03 : =>BLANK                          IFNB   
    2248/DC03 :                                   DB    H()
    2248/DC03 :                                   DB    L()
    2248/DC03 :                                   SHIFT
    2248/DC03 :                                   DO    
    2248/DC03 : [2248]                           ENDIF
    2248/DC03 : [2248]                           ENDIF
    2249/DC03 : (MACRO)[729]            	TSTSTR	SYNTAX,'$'
    2249/DC03 : 99                               DB     H(SYNTAX - TSTBITH)
    2249/DC04 : 42                               DB     L(SYNTAX)
    2249/DC05 : 24                               DB     '$'
    2250/DC06 : (MACRO)[730]            	DO	LDVAR
    2250/DC06 : =>NOT BLANK                      IFNB   LDVAR
    2250/DC06 : E8                                DB    H(LDVAR)
    2250/DC07 : 15                                DB    L(LDVAR)
    2250/DC08 :                                   SHIFT
    2250/DC08 :  (MACRO-2)[731]                   DO    
    2250/DC08 : =>BLANK                          IFNB   
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 104 - 10/31/2025 04:19:39 PM


    2250/DC08 :                                   DB    H()
    2250/DC08 :                                   DB    L()
    2250/DC08 :                                   SHIFT
    2250/DC08 :                                   DO    
    2250/DC08 : [2250]                           ENDIF
    2250/DC08 : [2250]                           ENDIF
    2251/DC08 : (MACRO)[732]            	DO	FIX
    2251/DC08 : =>NOT BLANK                      IFNB   FIX
    2251/DC08 : EB                                DB    H(FIX)
    2251/DC09 : 2F                                DB    L(FIX)
    2251/DC0A :                                   SHIFT
    2251/DC0A :  (MACRO-2)[733]                   DO    
    2251/DC0A : =>BLANK                          IFNB   
    2251/DC0A :                                   DB    H()
    2251/DC0A :                                   DB    L()
    2251/DC0A :                                   SHIFT
    2251/DC0A :                                   DO    
    2251/DC0A : [2251]                           ENDIF
    2251/DC0A : [2251]                           ENDIF
    2252/DC0A : (MACRO)[734]            	TSTSTR	SYNTAX,','
    2252/DC0A : 99                               DB     H(SYNTAX - TSTBITH)
    2252/DC0B : 42                               DB     L(SYNTAX)
    2252/DC0C : 2C                               DB     ','
    2253/DC0D : (MACRO)[735]            	ILCALL	REXPR
    2253/DC0D : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2253/DC0E : C6                               DB     L(REXPR)
    2254/DC0F : (MACRO)[736]            	DO	FIX
    2254/DC0F : =>NOT BLANK                      IFNB   FIX
    2254/DC0F : EB                                DB    H(FIX)
    2254/DC10 : 2F                                DB    L(FIX)
    2254/DC11 :                                   SHIFT
    2254/DC11 :  (MACRO-2)[737]                   DO    
    2254/DC11 : =>BLANK                          IFNB   
    2254/DC11 :                                   DB    H()
    2254/DC11 :                                   DB    L()
    2254/DC11 :                                   SHIFT
    2254/DC11 :                                   DO    
    2254/DC11 : [2254]                           ENDIF
    2254/DC11 : [2254]                           ENDIF
    2255/DC11 : (MACRO)[738]            	TSTSTR	SYNTAX,','
    2255/DC11 : 99                               DB     H(SYNTAX - TSTBITH)
    2255/DC12 : 42                               DB     L(SYNTAX)
    2255/DC13 : 2C                               DB     ','
    2256/DC14 : (MACRO)[739]            	ILCALL	REXPR
    2256/DC14 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2256/DC15 : C6                               DB     L(REXPR)
    2257/DC16 : (MACRO)[740]            	DO	FIX
    2257/DC16 : =>NOT BLANK                      IFNB   FIX
    2257/DC16 : EB                                DB    H(FIX)
    2257/DC17 : 2F                                DB    L(FIX)
    2257/DC18 :                                   SHIFT
    2257/DC18 :  (MACRO-2)[741]                   DO    
    2257/DC18 : =>BLANK                          IFNB   
    2257/DC18 :                                   DB    H()
    2257/DC18 :                                   DB    L()
    2257/DC18 :                                   SHIFT
    2257/DC18 :                                   DO    
    2257/DC18 : [2257]                           ENDIF
    2257/DC18 : [2257]                           ENDIF
    2258/DC18 : (MACRO)[742]            	TSTSTR	ENDPAR,')'
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 105 - 10/31/2025 04:19:39 PM


    2258/DC18 : 99                               DB     H(ENDPAR - TSTBITH)
    2258/DC19 : 2F                               DB     L(ENDPAR)
    2258/DC1A : 29                               DB     ')'
    2259/DC1B : (MACRO)[743]            	DO	MIDSTR
    2259/DC1B : =>NOT BLANK                      IFNB   MIDSTR
    2259/DC1B : EC                                DB    H(MIDSTR)
    2259/DC1C : 41                                DB    L(MIDSTR)
    2259/DC1D :                                   SHIFT
    2259/DC1D :  (MACRO-2)[744]                   DO    
    2259/DC1D : =>BLANK                          IFNB   
    2259/DC1D :                                   DB    H()
    2259/DC1D :                                   DB    L()
    2259/DC1D :                                   SHIFT
    2259/DC1D :                                   DO    
    2259/DC1D : [2259]                           ENDIF
    2259/DC1D : [2259]                           ENDIF
    2260/DC1D : (MACRO)[745]            STRF6:	TSTSTR	STRF8,T_RIGHT		; handle RIGHT$(x$,y)
    2260/DC1D : 9C                               DB     H(STRF8 - TSTBITH)
    2260/DC1E : 4F                               DB     L(STRF8)
    2260/DC1F : C8                               DB     T_RIGHT
    2261/DC20 : (MACRO)[746]            	TSTSTR	SYNTAX,'('
    2261/DC20 : 99                               DB     H(SYNTAX - TSTBITH)
    2261/DC21 : 42                               DB     L(SYNTAX)
    2261/DC22 : 28                               DB     '('
    2262/DC23 : (MACRO)[747]            	TSTSTR	STRF7,'"'
    2262/DC23 : 9C                               DB     H(STRF7 - TSTBITH)
    2262/DC24 : 36                               DB     L(STRF7)
    2262/DC25 : 22                               DB     '"'
    2263/DC26 : (MACRO)[748]            	DO	STPNT
    2263/DC26 : =>NOT BLANK                      IFNB   STPNT
    2263/DC26 : E4                                DB    H(STPNT)
    2263/DC27 : F4                                DB    L(STPNT)
    2263/DC28 :                                   SHIFT
    2263/DC28 :  (MACRO-2)[749]                   DO    
    2263/DC28 : =>BLANK                          IFNB   
    2263/DC28 :                                   DB    H()
    2263/DC28 :                                   DB    L()
    2263/DC28 :                                   SHIFT
    2263/DC28 :                                   DO    
    2263/DC28 : [2263]                           ENDIF
    2263/DC28 : [2263]                           ENDIF
    2264/DC28 : (MACRO)[750]            	TSTSTR	SYNTAX,','
    2264/DC28 : 99                               DB     H(SYNTAX - TSTBITH)
    2264/DC29 : 42                               DB     L(SYNTAX)
    2264/DC2A : 2C                               DB     ','
    2265/DC2B : (MACRO)[751]            	ILCALL	REXPR
    2265/DC2B : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2265/DC2C : C6                               DB     L(REXPR)
    2266/DC2D : (MACRO)[752]            	DO	FIX
    2266/DC2D : =>NOT BLANK                      IFNB   FIX
    2266/DC2D : EB                                DB    H(FIX)
    2266/DC2E : 2F                                DB    L(FIX)
    2266/DC2F :                                   SHIFT
    2266/DC2F :  (MACRO-2)[753]                   DO    
    2266/DC2F : =>BLANK                          IFNB   
    2266/DC2F :                                   DB    H()
    2266/DC2F :                                   DB    L()
    2266/DC2F :                                   SHIFT
    2266/DC2F :                                   DO    
    2266/DC2F : [2266]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 106 - 10/31/2025 04:19:39 PM


    2266/DC2F : [2266]                           ENDIF
    2267/DC2F : (MACRO)[754]            	TSTSTR	ENDPAR,')'
    2267/DC2F : 99                               DB     H(ENDPAR - TSTBITH)
    2267/DC30 : 2F                               DB     L(ENDPAR)
    2267/DC31 : 29                               DB     ')'
    2268/DC32 : (MACRO)[755]            	DO	XCHPNT
    2268/DC32 : =>NOT BLANK                      IFNB   XCHPNT
    2268/DC32 : E9                                DB    H(XCHPNT)
    2268/DC33 : 1E                                DB    L(XCHPNT)
    2268/DC34 :                                   SHIFT
    2268/DC34 :  (MACRO-2)[756]                   DO    
    2268/DC34 : =>BLANK                          IFNB   
    2268/DC34 :                                   DB    H()
    2268/DC34 :                                   DB    L()
    2268/DC34 :                                   SHIFT
    2268/DC34 :                                   DO    
    2268/DC34 : [2268]                           ENDIF
    2268/DC34 : [2268]                           ENDIF
    2269/DC34 : (MACRO)[757]            	DO	RGHTST
    2269/DC34 : =>NOT BLANK                      IFNB   RGHTST
    2269/DC34 : EB                                DB    H(RGHTST)
    2269/DC35 : D3                                DB    L(RGHTST)
    2269/DC36 :                                   SHIFT
    2269/DC36 :  (MACRO-2)[758]                   DO    
    2269/DC36 : =>BLANK                          IFNB   
    2269/DC36 :                                   DB    H()
    2269/DC36 :                                   DB    L()
    2269/DC36 :                                   SHIFT
    2269/DC36 :                                   DO    
    2269/DC36 : [2269]                           ENDIF
    2269/DC36 : [2269]                           ENDIF
    2270/DC36 : (MACRO)[759]            STRF7:	TSTVAR	SYNTAX
    2270/DC36 : B9                               DB     H(SYNTAX - CALBITH)
    2270/DC37 : 42                               DB     L(SYNTAX)
    2271/DC38 : (MACRO)[760]            	DO	FNDVAR
    2271/DC38 : =>NOT BLANK                      IFNB   FNDVAR
    2271/DC38 : E2                                DB    H(FNDVAR)
    2271/DC39 : E1                                DB    L(FNDVAR)
    2271/DC3A :                                   SHIFT
    2271/DC3A :  (MACRO-2)[761]                   DO    
    2271/DC3A : =>BLANK                          IFNB   
    2271/DC3A :                                   DB    H()
    2271/DC3A :                                   DB    L()
    2271/DC3A :                                   SHIFT
    2271/DC3A :                                   DO    
    2271/DC3A : [2271]                           ENDIF
    2271/DC3A : [2271]                           ENDIF
    2272/DC3A : (MACRO)[762]            	DO	DEFVAR
    2272/DC3A : =>NOT BLANK                      IFNB   DEFVAR
    2272/DC3A : E5                                DB    H(DEFVAR)
    2272/DC3B : 0E                                DB    L(DEFVAR)
    2272/DC3C :                                   SHIFT
    2272/DC3C :  (MACRO-2)[763]                   DO    
    2272/DC3C : =>BLANK                          IFNB   
    2272/DC3C :                                   DB    H()
    2272/DC3C :                                   DB    L()
    2272/DC3C :                                   SHIFT
    2272/DC3C :                                   DO    
    2272/DC3C : [2272]                           ENDIF
    2272/DC3C : [2272]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 107 - 10/31/2025 04:19:39 PM


    2273/DC3C : (MACRO)[764]            	TSTSTR	SYNTAX,'$'
    2273/DC3C : 99                               DB     H(SYNTAX - TSTBITH)
    2273/DC3D : 42                               DB     L(SYNTAX)
    2273/DC3E : 24                               DB     '$'
    2274/DC3F : (MACRO)[765]            	DO	LDVAR
    2274/DC3F : =>NOT BLANK                      IFNB   LDVAR
    2274/DC3F : E8                                DB    H(LDVAR)
    2274/DC40 : 15                                DB    L(LDVAR)
    2274/DC41 :                                   SHIFT
    2274/DC41 :  (MACRO-2)[766]                   DO    
    2274/DC41 : =>BLANK                          IFNB   
    2274/DC41 :                                   DB    H()
    2274/DC41 :                                   DB    L()
    2274/DC41 :                                   SHIFT
    2274/DC41 :                                   DO    
    2274/DC41 : [2274]                           ENDIF
    2274/DC41 : [2274]                           ENDIF
    2275/DC41 : (MACRO)[767]            	DO	FIX
    2275/DC41 : =>NOT BLANK                      IFNB   FIX
    2275/DC41 : EB                                DB    H(FIX)
    2275/DC42 : 2F                                DB    L(FIX)
    2275/DC43 :                                   SHIFT
    2275/DC43 :  (MACRO-2)[768]                   DO    
    2275/DC43 : =>BLANK                          IFNB   
    2275/DC43 :                                   DB    H()
    2275/DC43 :                                   DB    L()
    2275/DC43 :                                   SHIFT
    2275/DC43 :                                   DO    
    2275/DC43 : [2275]                           ENDIF
    2275/DC43 : [2275]                           ENDIF
    2276/DC43 : (MACRO)[769]            	TSTSTR	SYNTAX,','
    2276/DC43 : 99                               DB     H(SYNTAX - TSTBITH)
    2276/DC44 : 42                               DB     L(SYNTAX)
    2276/DC45 : 2C                               DB     ','
    2277/DC46 : (MACRO)[770]            	ILCALL	REXPR
    2277/DC46 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2277/DC47 : C6                               DB     L(REXPR)
    2278/DC48 : (MACRO)[771]            	DO	FIX
    2278/DC48 : =>NOT BLANK                      IFNB   FIX
    2278/DC48 : EB                                DB    H(FIX)
    2278/DC49 : 2F                                DB    L(FIX)
    2278/DC4A :                                   SHIFT
    2278/DC4A :  (MACRO-2)[772]                   DO    
    2278/DC4A : =>BLANK                          IFNB   
    2278/DC4A :                                   DB    H()
    2278/DC4A :                                   DB    L()
    2278/DC4A :                                   SHIFT
    2278/DC4A :                                   DO    
    2278/DC4A : [2278]                           ENDIF
    2278/DC4A : [2278]                           ENDIF
    2279/DC4A : (MACRO)[773]            	TSTSTR	ENDPAR,')'
    2279/DC4A : 99                               DB     H(ENDPAR - TSTBITH)
    2279/DC4B : 2F                               DB     L(ENDPAR)
    2279/DC4C : 29                               DB     ')'
    2280/DC4D : (MACRO)[774]            	DO	RGHSTR
    2280/DC4D : =>NOT BLANK                      IFNB   RGHSTR
    2280/DC4D : EC                                DB    H(RGHSTR)
    2280/DC4E : 9E                                DB    L(RGHSTR)
    2280/DC4F :                                   SHIFT
    2280/DC4F :  (MACRO-2)[775]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 108 - 10/31/2025 04:19:39 PM


    2280/DC4F : =>BLANK                          IFNB   
    2280/DC4F :                                   DB    H()
    2280/DC4F :                                   DB    L()
    2280/DC4F :                                   SHIFT
    2280/DC4F :                                   DO    
    2280/DC4F : [2280]                           ENDIF
    2280/DC4F : [2280]                           ENDIF
    2281/DC4F : (MACRO)[776]            STRF8:	TSTSTR	STRF9,T_STR		; handle STR$(x)
    2281/DC4F : 9C                               DB     H(STRF9 - TSTBITH)
    2281/DC50 : 5C                               DB     L(STRF9)
    2281/DC51 : CA                               DB     T_STR
    2282/DC52 : (MACRO)[777]            	ILCALL	SNGL
    2282/DC52 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2282/DC53 : 70                               DB     L(SNGL)
    2283/DC54 : (MACRO)[778]            	DO	STACK
    2283/DC54 : =>NOT BLANK                      IFNB   STACK
    2283/DC54 : F2                                DB    H(STACK)
    2283/DC55 : 8E                                DB    L(STACK)
    2283/DC56 :                                   SHIFT
    2283/DC56 :  (MACRO-2)[779]                   DO    
    2283/DC56 : =>BLANK                          IFNB   
    2283/DC56 :                                   DB    H()
    2283/DC56 :                                   DB    L()
    2283/DC56 :                                   SHIFT
    2283/DC56 :                                   DO    
    2283/DC56 : [2283]                           ENDIF
    2283/DC56 : [2283]                           ENDIF
    2284/DC56 : (MACRO)[780]            	DO	FNUM
    2284/DC56 : =>NOT BLANK                      IFNB   FNUM
    2284/DC56 : F2                                DB    H(FNUM)
    2284/DC57 : 9A                                DB    L(FNUM)
    2284/DC58 :                                   SHIFT
    2284/DC58 :  (MACRO-2)[781]                   DO    
    2284/DC58 : =>BLANK                          IFNB   
    2284/DC58 :                                   DB    H()
    2284/DC58 :                                   DB    L()
    2284/DC58 :                                   SHIFT
    2284/DC58 :                                   DO    
    2284/DC58 : [2284]                           ENDIF
    2284/DC58 : [2284]                           ENDIF
    2285/DC58 : (MACRO)[782]            	DO	FSTRNG
    2285/DC58 : =>NOT BLANK                      IFNB   FSTRNG
    2285/DC58 : ED                                DB    H(FSTRNG)
    2285/DC59 : 18                                DB    L(FSTRNG)
    2285/DC5A :                                   SHIFT
    2285/DC5A :  (MACRO-2)[783]                   DO    
    2285/DC5A : =>BLANK                          IFNB   
    2285/DC5A :                                   DB    H()
    2285/DC5A :                                   DB    L()
    2285/DC5A :                                   SHIFT
    2285/DC5A :                                   DO    
    2285/DC5A : [2285]                           ENDIF
    2285/DC5A : [2285]                           ENDIF
    2286/DC5A : (MACRO)[784]            	DO	STBCK
    2286/DC5A : =>NOT BLANK                      IFNB   STBCK
    2286/DC5A : E6                                DB    H(STBCK)
    2286/DC5B : 74                                DB    L(STBCK)
    2286/DC5C :                                   SHIFT
    2286/DC5C :  (MACRO-2)[785]                   DO    
    2286/DC5C : =>BLANK                          IFNB   
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 109 - 10/31/2025 04:19:39 PM


    2286/DC5C :                                   DB    H()
    2286/DC5C :                                   DB    L()
    2286/DC5C :                                   SHIFT
    2286/DC5C :                                   DO    
    2286/DC5C : [2286]                           ENDIF
    2286/DC5C : [2286]                           ENDIF
    2287/DC5C : (MACRO)[786]            STRF9:	TSTSTR	STRF10,T_VER		; handle VER$
    2287/DC5C : 9C                               DB     H(STRF10 - TSTBITH)
    2287/DC5D : 63                               DB     L(STRF10)
    2287/DC5E : CD                               DB     T_VER
    2288/DC5F : (MACRO)[787]            	DO	LDVER
    2288/DC5F : =>NOT BLANK                      IFNB   LDVER
    2288/DC5F : E8                                DB    H(LDVER)
    2288/DC60 : 3B                                DB    L(LDVER)
    2288/DC61 :                                   SHIFT
    2288/DC61 :  (MACRO-2)[788]                   DO    
    2288/DC61 : =>BLANK                          IFNB   
    2288/DC61 :                                   DB    H()
    2288/DC61 :                                   DB    L()
    2288/DC61 :                                   SHIFT
    2288/DC61 :                                   DO    
    2288/DC61 : [2288]                           ENDIF
    2288/DC61 : [2288]                           ENDIF
    2289/DC61 : (MACRO)[789]            	DO	MOVSTR
    2289/DC61 : =>NOT BLANK                      IFNB   MOVSTR
    2289/DC61 : EC                                DB    H(MOVSTR)
    2289/DC62 : E4                                DB    L(MOVSTR)
    2289/DC63 :                                   SHIFT
    2289/DC63 :  (MACRO-2)[790]                   DO    
    2289/DC63 : =>BLANK                          IFNB   
    2289/DC63 :                                   DB    H()
    2289/DC63 :                                   DB    L()
    2289/DC63 :                                   SHIFT
    2289/DC63 :                                   DO    
    2289/DC63 : [2289]                           ENDIF
    2289/DC63 : [2289]                           ENDIF
    2290/DC63 : (MACRO)[791]            STRF10:	TSTVAR	SYNTAX			; test for variable
    2290/DC63 : B9                               DB     H(SYNTAX - CALBITH)
    2290/DC64 : 42                               DB     L(SYNTAX)
    2291/DC65 : (MACRO)[792]            	DO	FNDVAR
    2291/DC65 : =>NOT BLANK                      IFNB   FNDVAR
    2291/DC65 : E2                                DB    H(FNDVAR)
    2291/DC66 : E1                                DB    L(FNDVAR)
    2291/DC67 :                                   SHIFT
    2291/DC67 :  (MACRO-2)[793]                   DO    
    2291/DC67 : =>BLANK                          IFNB   
    2291/DC67 :                                   DB    H()
    2291/DC67 :                                   DB    L()
    2291/DC67 :                                   SHIFT
    2291/DC67 :                                   DO    
    2291/DC67 : [2291]                           ENDIF
    2291/DC67 : [2291]                           ENDIF
    2292/DC67 : (MACRO)[794]            	DO	DEFVAR
    2292/DC67 : =>NOT BLANK                      IFNB   DEFVAR
    2292/DC67 : E5                                DB    H(DEFVAR)
    2292/DC68 : 0E                                DB    L(DEFVAR)
    2292/DC69 :                                   SHIFT
    2292/DC69 :  (MACRO-2)[795]                   DO    
    2292/DC69 : =>BLANK                          IFNB   
    2292/DC69 :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 110 - 10/31/2025 04:19:39 PM


    2292/DC69 :                                   DB    L()
    2292/DC69 :                                   SHIFT
    2292/DC69 :                                   DO    
    2292/DC69 : [2292]                           ENDIF
    2292/DC69 : [2292]                           ENDIF
    2293/DC69 : (MACRO)[796]            	TSTSTR	SYNTAX,'$'
    2293/DC69 : 99                               DB     H(SYNTAX - TSTBITH)
    2293/DC6A : 42                               DB     L(SYNTAX)
    2293/DC6B : 24                               DB     '$'
    2294/DC6C : (MACRO)[797]            	DO	LDVAR
    2294/DC6C : =>NOT BLANK                      IFNB   LDVAR
    2294/DC6C : E8                                DB    H(LDVAR)
    2294/DC6D : 15                                DB    L(LDVAR)
    2294/DC6E :                                   SHIFT
    2294/DC6E :  (MACRO-2)[798]                   DO    
    2294/DC6E : =>BLANK                          IFNB   
    2294/DC6E :                                   DB    H()
    2294/DC6E :                                   DB    L()
    2294/DC6E :                                   SHIFT
    2294/DC6E :                                   DO    
    2294/DC6E : [2294]                           ENDIF
    2294/DC6E : [2294]                           ENDIF
    2295/DC6E : (MACRO)[799]            	DO	FIX
    2295/DC6E : =>NOT BLANK                      IFNB   FIX
    2295/DC6E : EB                                DB    H(FIX)
    2295/DC6F : 2F                                DB    L(FIX)
    2295/DC70 :                                   SHIFT
    2295/DC70 :  (MACRO-2)[800]                   DO    
    2295/DC70 : =>BLANK                          IFNB   
    2295/DC70 :                                   DB    H()
    2295/DC70 :                                   DB    L()
    2295/DC70 :                                   SHIFT
    2295/DC70 :                                   DO    
    2295/DC70 : [2295]                           ENDIF
    2295/DC70 : [2295]                           ENDIF
    2296/DC70 : (MACRO)[801]            	DO	MOVSTR
    2296/DC70 : =>NOT BLANK                      IFNB   MOVSTR
    2296/DC70 : EC                                DB    H(MOVSTR)
    2296/DC71 : E4                                DB    L(MOVSTR)
    2296/DC72 :                                   SHIFT
    2296/DC72 :  (MACRO-2)[802]                   DO    
    2296/DC72 : =>BLANK                          IFNB   
    2296/DC72 :                                   DB    H()
    2296/DC72 :                                   DB    L()
    2296/DC72 :                                   SHIFT
    2296/DC72 :                                   DO    
    2296/DC72 : [2296]                           ENDIF
    2296/DC72 : [2296]                           ENDIF
    2297/DC72 : (MACRO)[803]            RELSTR:	DO	STRPNT
    2297/DC72 : =>NOT BLANK                      IFNB   STRPNT
    2297/DC72 : ED                                DB    H(STRPNT)
    2297/DC73 : 42                                DB    L(STRPNT)
    2297/DC74 :                                   SHIFT
    2297/DC74 :  (MACRO-2)[804]                   DO    
    2297/DC74 : =>BLANK                          IFNB   
    2297/DC74 :                                   DB    H()
    2297/DC74 :                                   DB    L()
    2297/DC74 :                                   SHIFT
    2297/DC74 :                                   DO    
    2297/DC74 : [2297]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 111 - 10/31/2025 04:19:39 PM


    2297/DC74 : [2297]                           ENDIF
    2298/DC74 : (MACRO)[805]            	TSTVAR	RELEXP
    2298/DC74 : BC                               DB     H(RELEXP - CALBITH)
    2298/DC75 : 9A                               DB     L(RELEXP)
    2299/DC76 : (MACRO)[806]            	DO	FNDVAR
    2299/DC76 : =>NOT BLANK                      IFNB   FNDVAR
    2299/DC76 : E2                                DB    H(FNDVAR)
    2299/DC77 : E1                                DB    L(FNDVAR)
    2299/DC78 :                                   SHIFT
    2299/DC78 :  (MACRO-2)[807]                   DO    
    2299/DC78 : =>BLANK                          IFNB   
    2299/DC78 :                                   DB    H()
    2299/DC78 :                                   DB    L()
    2299/DC78 :                                   SHIFT
    2299/DC78 :                                   DO    
    2299/DC78 : [2299]                           ENDIF
    2299/DC78 : [2299]                           ENDIF
    2300/DC78 : (MACRO)[808]            	DO	POPDLR
    2300/DC78 : =>NOT BLANK                      IFNB   POPDLR
    2300/DC78 : FD                                DB    H(POPDLR)
    2300/DC79 : 90                                DB    L(POPDLR)
    2300/DC7A :                                   SHIFT
    2300/DC7A :  (MACRO-2)[809]                   DO    
    2300/DC7A : =>BLANK                          IFNB   
    2300/DC7A :                                   DB    H()
    2300/DC7A :                                   DB    L()
    2300/DC7A :                                   SHIFT
    2300/DC7A :                                   DO    
    2300/DC7A : [2300]                           ENDIF
    2300/DC7A : [2300]                           ENDIF
    2301/DC7A : (MACRO)[810]            	TSTSTR	RELXPR,'$'
    2301/DC7A : 9C                               DB     H(RELXPR - TSTBITH)
    2301/DC7B : 98                               DB     L(RELXPR)
    2301/DC7C : 24                               DB     '$'
    2302/DC7D : (MACRO)[811]            	DO	LDVAR
    2302/DC7D : =>NOT BLANK                      IFNB   LDVAR
    2302/DC7D : E8                                DB    H(LDVAR)
    2302/DC7E : 15                                DB    L(LDVAR)
    2302/DC7F :                                   SHIFT
    2302/DC7F :  (MACRO-2)[812]                   DO    
    2302/DC7F : =>BLANK                          IFNB   
    2302/DC7F :                                   DB    H()
    2302/DC7F :                                   DB    L()
    2302/DC7F :                                   SHIFT
    2302/DC7F :                                   DO    
    2302/DC7F : [2302]                           ENDIF
    2302/DC7F : [2302]                           ENDIF
    2303/DC7F : (MACRO)[813]            	DO	FIX
    2303/DC7F : =>NOT BLANK                      IFNB   FIX
    2303/DC7F : EB                                DB    H(FIX)
    2303/DC80 : 2F                                DB    L(FIX)
    2303/DC81 :                                   SHIFT
    2303/DC81 :  (MACRO-2)[814]                   DO    
    2303/DC81 : =>BLANK                          IFNB   
    2303/DC81 :                                   DB    H()
    2303/DC81 :                                   DB    L()
    2303/DC81 :                                   SHIFT
    2303/DC81 :                                   DO    
    2303/DC81 : [2303]                           ENDIF
    2303/DC81 : [2303]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 112 - 10/31/2025 04:19:39 PM


    2304/DC81 : (MACRO)[815]            	TSTSTR	SYNTAX,'='
    2304/DC81 : 99                               DB     H(SYNTAX - TSTBITH)
    2304/DC82 : 42                               DB     L(SYNTAX)
    2304/DC83 : 3D                               DB     '='
    2305/DC84 : (MACRO)[816]            	TSTSTR	RESTR,'"'
    2305/DC84 : 9C                               DB     H(RESTR - TSTBITH)
    2305/DC85 : 89                               DB     L(RESTR)
    2305/DC86 : 22                               DB     '"'
    2306/DC87 : (MACRO)[817]            	DO	CMPRST
    2306/DC87 : =>NOT BLANK                      IFNB   CMPRST
    2306/DC87 : ED                                DB    H(CMPRST)
    2306/DC88 : 4C                                DB    L(CMPRST)
    2306/DC89 :                                   SHIFT
    2306/DC89 :  (MACRO-2)[818]                   DO    
    2306/DC89 : =>BLANK                          IFNB   
    2306/DC89 :                                   DB    H()
    2306/DC89 :                                   DB    L()
    2306/DC89 :                                   SHIFT
    2306/DC89 :                                   DO    
    2306/DC89 : [2306]                           ENDIF
    2306/DC89 : [2306]                           ENDIF
    2307/DC89 : (MACRO)[819]            RESTR:	TSTVAR	SYNTAX
    2307/DC89 : B9                               DB     H(SYNTAX - CALBITH)
    2307/DC8A : 42                               DB     L(SYNTAX)
    2308/DC8B : (MACRO)[820]            	DO	FNDVAR
    2308/DC8B : =>NOT BLANK                      IFNB   FNDVAR
    2308/DC8B : E2                                DB    H(FNDVAR)
    2308/DC8C : E1                                DB    L(FNDVAR)
    2308/DC8D :                                   SHIFT
    2308/DC8D :  (MACRO-2)[821]                   DO    
    2308/DC8D : =>BLANK                          IFNB   
    2308/DC8D :                                   DB    H()
    2308/DC8D :                                   DB    L()
    2308/DC8D :                                   SHIFT
    2308/DC8D :                                   DO    
    2308/DC8D : [2308]                           ENDIF
    2308/DC8D : [2308]                           ENDIF
    2309/DC8D : (MACRO)[822]            	DO	DEFVAR
    2309/DC8D : =>NOT BLANK                      IFNB   DEFVAR
    2309/DC8D : E5                                DB    H(DEFVAR)
    2309/DC8E : 0E                                DB    L(DEFVAR)
    2309/DC8F :                                   SHIFT
    2309/DC8F :  (MACRO-2)[823]                   DO    
    2309/DC8F : =>BLANK                          IFNB   
    2309/DC8F :                                   DB    H()
    2309/DC8F :                                   DB    L()
    2309/DC8F :                                   SHIFT
    2309/DC8F :                                   DO    
    2309/DC8F : [2309]                           ENDIF
    2309/DC8F : [2309]                           ENDIF
    2310/DC8F : (MACRO)[824]            	TSTSTR	SYNTAX,'$'
    2310/DC8F : 99                               DB     H(SYNTAX - TSTBITH)
    2310/DC90 : 42                               DB     L(SYNTAX)
    2310/DC91 : 24                               DB     '$'
    2311/DC92 : (MACRO)[825]            	DO	LDVAR
    2311/DC92 : =>NOT BLANK                      IFNB   LDVAR
    2311/DC92 : E8                                DB    H(LDVAR)
    2311/DC93 : 15                                DB    L(LDVAR)
    2311/DC94 :                                   SHIFT
    2311/DC94 :  (MACRO-2)[826]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 113 - 10/31/2025 04:19:39 PM


    2311/DC94 : =>BLANK                          IFNB   
    2311/DC94 :                                   DB    H()
    2311/DC94 :                                   DB    L()
    2311/DC94 :                                   SHIFT
    2311/DC94 :                                   DO    
    2311/DC94 : [2311]                           ENDIF
    2311/DC94 : [2311]                           ENDIF
    2312/DC94 : (MACRO)[827]            	DO	FIX
    2312/DC94 : =>NOT BLANK                      IFNB   FIX
    2312/DC94 : EB                                DB    H(FIX)
    2312/DC95 : 2F                                DB    L(FIX)
    2312/DC96 :                                   SHIFT
    2312/DC96 :  (MACRO-2)[828]                   DO    
    2312/DC96 : =>BLANK                          IFNB   
    2312/DC96 :                                   DB    H()
    2312/DC96 :                                   DB    L()
    2312/DC96 :                                   SHIFT
    2312/DC96 :                                   DO    
    2312/DC96 : [2312]                           ENDIF
    2312/DC96 : [2312]                           ENDIF
    2313/DC96 : (MACRO)[829]            	DO	CMPSTR
    2313/DC96 : =>NOT BLANK                      IFNB   CMPSTR
    2313/DC96 : ED                                DB    H(CMPSTR)
    2313/DC97 : 81                                DB    L(CMPSTR)
    2313/DC98 :                                   SHIFT
    2313/DC98 :  (MACRO-2)[830]                   DO    
    2313/DC98 : =>BLANK                          IFNB   
    2313/DC98 :                                   DB    H()
    2313/DC98 :                                   DB    L()
    2313/DC98 :                                   SHIFT
    2313/DC98 :                                   DO    
    2313/DC98 : [2313]                           ENDIF
    2313/DC98 : [2313]                           ENDIF
    2314/DC98 : (MACRO)[831]            RELXPR:	DO	XCHPNT
    2314/DC98 : =>NOT BLANK                      IFNB   XCHPNT
    2314/DC98 : E9                                DB    H(XCHPNT)
    2314/DC99 : 1E                                DB    L(XCHPNT)
    2314/DC9A :                                   SHIFT
    2314/DC9A :  (MACRO-2)[832]                   DO    
    2314/DC9A : =>BLANK                          IFNB   
    2314/DC9A :                                   DB    H()
    2314/DC9A :                                   DB    L()
    2314/DC9A :                                   SHIFT
    2314/DC9A :                                   DO    
    2314/DC9A : [2314]                           ENDIF
    2314/DC9A : [2314]                           ENDIF
    2315/DC9A : (MACRO)[833]            RELEXP:	ILCALL	REXPR
    2315/DC9A : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2315/DC9B : C6                               DB     L(REXPR)
    2316/DC9C : (MACRO)[834]            	TSTSTR	REL1,'='
    2316/DC9C : 9C                               DB     H(REL1 - TSTBITH)
    2316/DC9D : A3                               DB     L(REL1)
    2316/DC9E : 3D                               DB     '='
    2317/DC9F : (MACRO)[835]            	ILCALL	REXPR
    2317/DC9F : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2317/DCA0 : C6                               DB     L(REXPR)
    2318/DCA1 : (MACRO)[836]            	DO	EQU
    2318/DCA1 : =>NOT BLANK                      IFNB   EQU
    2318/DCA1 : E5                                DB    H(EQU)
    2318/DCA2 : DC                                DB    L(EQU)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 114 - 10/31/2025 04:19:39 PM


    2318/DCA3 :                                   SHIFT
    2318/DCA3 :  (MACRO-2)[837]                   DO    
    2318/DCA3 : =>BLANK                          IFNB   
    2318/DCA3 :                                   DB    H()
    2318/DCA3 :                                   DB    L()
    2318/DCA3 :                                   SHIFT
    2318/DCA3 :                                   DO    
    2318/DCA3 : [2318]                           ENDIF
    2318/DCA3 : [2318]                           ENDIF
    2319/DCA3 : (MACRO)[838]            REL1:	TSTSTR	REL2,T_NE		; handle <>
    2319/DCA3 : 9C                               DB     H(REL2 - TSTBITH)
    2319/DCA4 : AA                               DB     L(REL2)
    2319/DCA5 : AB                               DB     T_NE
    2320/DCA6 : (MACRO)[839]            	ILCALL	REXPR
    2320/DCA6 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2320/DCA7 : C6                               DB     L(REXPR)
    2321/DCA8 : (MACRO)[840]            	DO	NEQ
    2321/DCA8 : =>NOT BLANK                      IFNB   NEQ
    2321/DCA8 : E5                                DB    H(NEQ)
    2321/DCA9 : E0                                DB    L(NEQ)
    2321/DCAA :                                   SHIFT
    2321/DCAA :  (MACRO-2)[841]                   DO    
    2321/DCAA : =>BLANK                          IFNB   
    2321/DCAA :                                   DB    H()
    2321/DCAA :                                   DB    L()
    2321/DCAA :                                   SHIFT
    2321/DCAA :                                   DO    
    2321/DCAA : [2321]                           ENDIF
    2321/DCAA : [2321]                           ENDIF
    2322/DCAA : (MACRO)[842]            REL2:	TSTSTR	REL3,'<'		; handle <
    2322/DCAA : 9C                               DB     H(REL3 - TSTBITH)
    2322/DCAB : B1                               DB     L(REL3)
    2322/DCAC : 3C                               DB     '<'
    2323/DCAD : (MACRO)[843]            	ILCALL	REXPR
    2323/DCAD : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2323/DCAE : C6                               DB     L(REXPR)
    2324/DCAF : (MACRO)[844]            	DO	LSS
    2324/DCAF : =>NOT BLANK                      IFNB   LSS
    2324/DCAF : E5                                DB    H(LSS)
    2324/DCB0 : E4                                DB    L(LSS)
    2324/DCB1 :                                   SHIFT
    2324/DCB1 :  (MACRO-2)[845]                   DO    
    2324/DCB1 : =>BLANK                          IFNB   
    2324/DCB1 :                                   DB    H()
    2324/DCB1 :                                   DB    L()
    2324/DCB1 :                                   SHIFT
    2324/DCB1 :                                   DO    
    2324/DCB1 : [2324]                           ENDIF
    2324/DCB1 : [2324]                           ENDIF
    2325/DCB1 : (MACRO)[846]            REL3:	TSTSTR	REL4,T_LE		; handle <=
    2325/DCB1 : 9C                               DB     H(REL4 - TSTBITH)
    2325/DCB2 : B8                               DB     L(REL4)
    2325/DCB3 : A9                               DB     T_LE
    2326/DCB4 : (MACRO)[847]            	ILCALL	REXPR
    2326/DCB4 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2326/DCB5 : C6                               DB     L(REXPR)
    2327/DCB6 : (MACRO)[848]            	DO	LEQ
    2327/DCB6 : =>NOT BLANK                      IFNB   LEQ
    2327/DCB6 : E5                                DB    H(LEQ)
    2327/DCB7 : E8                                DB    L(LEQ)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 115 - 10/31/2025 04:19:39 PM


    2327/DCB8 :                                   SHIFT
    2327/DCB8 :  (MACRO-2)[849]                   DO    
    2327/DCB8 : =>BLANK                          IFNB   
    2327/DCB8 :                                   DB    H()
    2327/DCB8 :                                   DB    L()
    2327/DCB8 :                                   SHIFT
    2327/DCB8 :                                   DO    
    2327/DCB8 : [2327]                           ENDIF
    2327/DCB8 : [2327]                           ENDIF
    2328/DCB8 : (MACRO)[850]            REL4:	TSTSTR	REL5,'>'		; handle >
    2328/DCB8 : 9C                               DB     H(REL5 - TSTBITH)
    2328/DCB9 : BF                               DB     L(REL5)
    2328/DCBA : 3E                               DB     '>'
    2329/DCBB : (MACRO)[851]            	ILCALL	REXPR
    2329/DCBB : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2329/DCBC : C6                               DB     L(REXPR)
    2330/DCBD : (MACRO)[852]            	DO	GTR
    2330/DCBD : =>NOT BLANK                      IFNB   GTR
    2330/DCBD : E5                                DB    H(GTR)
    2330/DCBE : EC                                DB    L(GTR)
    2330/DCBF :                                   SHIFT
    2330/DCBF :  (MACRO-2)[853]                   DO    
    2330/DCBF : =>BLANK                          IFNB   
    2330/DCBF :                                   DB    H()
    2330/DCBF :                                   DB    L()
    2330/DCBF :                                   SHIFT
    2330/DCBF :                                   DO    
    2330/DCBF : [2330]                           ENDIF
    2330/DCBF : [2330]                           ENDIF
    2331/DCBF : (MACRO)[854]            REL5:	TSTSTR	RTRN,T_GE		; handle >=
    2331/DCBF : 9D                               DB     H(RTRN - TSTBITH)
    2331/DCC0 : 78                               DB     L(RTRN)
    2331/DCC1 : AA                               DB     T_GE
    2332/DCC2 : (MACRO)[855]            	ILCALL	REXPR
    2332/DCC2 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2332/DCC3 : C6                               DB     L(REXPR)
    2333/DCC4 : (MACRO)[856]            	DO	GEQ
    2333/DCC4 : =>NOT BLANK                      IFNB   GEQ
    2333/DCC4 : E5                                DB    H(GEQ)
    2333/DCC5 : F0                                DB    L(GEQ)
    2333/DCC6 :                                   SHIFT
    2333/DCC6 :  (MACRO-2)[857]                   DO    
    2333/DCC6 : =>BLANK                          IFNB   
    2333/DCC6 :                                   DB    H()
    2333/DCC6 :                                   DB    L()
    2333/DCC6 :                                   SHIFT
    2333/DCC6 :                                   DO    
    2333/DCC6 : [2333]                           ENDIF
    2333/DCC6 : [2333]                           ENDIF
    2334/DCC6 : (MACRO)[858]            REXPR:	TSTSTR	REX1,'-'		; handle - (subtraction)
    2334/DCC6 : 9C                               DB     H(REX1 - TSTBITH)
    2334/DCC7 : D3                               DB     L(REX1)
    2334/DCC8 : 2D                               DB     '-'
    2335/DCC9 : (MACRO)[859]            	ILCALL	RTERM
    2335/DCC9 : 1D                               DB     H(RTERM - (JMPBITH + TSTBITH))
    2335/DCCA : 10                               DB     L(RTERM)
    2336/DCCB : (MACRO)[860]            	DO	STACK
    2336/DCCB : =>NOT BLANK                      IFNB   STACK
    2336/DCCB : F2                                DB    H(STACK)
    2336/DCCC : 8E                                DB    L(STACK)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 116 - 10/31/2025 04:19:39 PM


    2336/DCCD :                                   SHIFT
    2336/DCCD :  (MACRO-2)[861]                   DO    
    2336/DCCD : =>BLANK                          IFNB   
    2336/DCCD :                                   DB    H()
    2336/DCCD :                                   DB    L()
    2336/DCCD :                                   SHIFT
    2336/DCCD :                                   DO    
    2336/DCCD : [2336]                           ENDIF
    2336/DCCD : [2336]                           ENDIF
    2337/DCCD : (MACRO)[862]            	DO	FNEG
    2337/DCCD : =>NOT BLANK                      IFNB   FNEG
    2337/DCCD : F1                                DB    H(FNEG)
    2337/DCCE : AC                                DB    L(FNEG)
    2337/DCCF :                                   SHIFT
    2337/DCCF :  (MACRO-2)[863]                   DO    
    2337/DCCF : =>BLANK                          IFNB   
    2337/DCCF :                                   DB    H()
    2337/DCCF :                                   DB    L()
    2337/DCCF :                                   SHIFT
    2337/DCCF :                                   DO    
    2337/DCCF : [2337]                           ENDIF
    2337/DCCF : [2337]                           ENDIF
    2338/DCCF : (MACRO)[864]            	DO	STBACK
    2338/DCCF : =>NOT BLANK                      IFNB   STBACK
    2338/DCCF : FF                                DB    H(STBACK)
    2338/DCD0 : 80                                DB    L(STBACK)
    2338/DCD1 :                                   SHIFT
    2338/DCD1 :  (MACRO-2)[865]                   DO    
    2338/DCD1 : =>BLANK                          IFNB   
    2338/DCD1 :                                   DB    H()
    2338/DCD1 :                                   DB    L()
    2338/DCD1 :                                   SHIFT
    2338/DCD1 :                                   DO    
    2338/DCD1 : [2338]                           ENDIF
    2338/DCD1 : [2338]                           ENDIF
    2339/DCD1 : (MACRO)[866]            	GOTO	REX3
    2339/DCD1 : 5C                               DB     H(REX3 - JMPBITH)
    2339/DCD2 : D8                               DB     L(REX3)
    2340/DCD3 : (MACRO)[867]            REX1:	TSTSTR	REX2,'+'
    2340/DCD3 : 9C                               DB     H(REX2 - TSTBITH)
    2340/DCD4 : D6                               DB     L(REX2)
    2340/DCD5 : 2B                               DB     '+'
    2341/DCD6 : (MACRO)[868]            REX2:	ILCALL	RTERM
    2341/DCD6 : 1D                               DB     H(RTERM - (JMPBITH + TSTBITH))
    2341/DCD7 : 10                               DB     L(RTERM)
    2342/DCD8 : (MACRO)[869]            REX3:	TSTSTR	REX4,'-'
    2342/DCD8 : 9C                               DB     H(REX4 - TSTBITH)
    2342/DCD9 : E5                               DB     L(REX4)
    2342/DCDA : 2D                               DB     '-'
    2343/DCDB : (MACRO)[870]            	ILCALL	RTERM
    2343/DCDB : 1D                               DB     H(RTERM - (JMPBITH + TSTBITH))
    2343/DCDC : 10                               DB     L(RTERM)
    2344/DCDD : (MACRO)[871]            	DO	STACK
    2344/DCDD : =>NOT BLANK                      IFNB   STACK
    2344/DCDD : F2                                DB    H(STACK)
    2344/DCDE : 8E                                DB    L(STACK)
    2344/DCDF :                                   SHIFT
    2344/DCDF :  (MACRO-2)[872]                   DO    
    2344/DCDF : =>BLANK                          IFNB   
    2344/DCDF :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 117 - 10/31/2025 04:19:39 PM


    2344/DCDF :                                   DB    L()
    2344/DCDF :                                   SHIFT
    2344/DCDF :                                   DO    
    2344/DCDF : [2344]                           ENDIF
    2344/DCDF : [2344]                           ENDIF
    2345/DCDF : (MACRO)[873]            	DO	FSUB
    2345/DCDF : =>NOT BLANK                      IFNB   FSUB
    2345/DCDF : F1                                DB    H(FSUB)
    2345/DCE0 : 39                                DB    L(FSUB)
    2345/DCE1 :                                   SHIFT
    2345/DCE1 :  (MACRO-2)[874]                   DO    
    2345/DCE1 : =>BLANK                          IFNB   
    2345/DCE1 :                                   DB    H()
    2345/DCE1 :                                   DB    L()
    2345/DCE1 :                                   SHIFT
    2345/DCE1 :                                   DO    
    2345/DCE1 : [2345]                           ENDIF
    2345/DCE1 : [2345]                           ENDIF
    2346/DCE1 : (MACRO)[875]            	DO	STBACK
    2346/DCE1 : =>NOT BLANK                      IFNB   STBACK
    2346/DCE1 : FF                                DB    H(STBACK)
    2346/DCE2 : 80                                DB    L(STBACK)
    2346/DCE3 :                                   SHIFT
    2346/DCE3 :  (MACRO-2)[876]                   DO    
    2346/DCE3 : =>BLANK                          IFNB   
    2346/DCE3 :                                   DB    H()
    2346/DCE3 :                                   DB    L()
    2346/DCE3 :                                   SHIFT
    2346/DCE3 :                                   DO    
    2346/DCE3 : [2346]                           ENDIF
    2346/DCE3 : [2346]                           ENDIF
    2347/DCE3 : (MACRO)[877]            	GOTO	REX3
    2347/DCE3 : 5C                               DB     H(REX3 - JMPBITH)
    2347/DCE4 : D8                               DB     L(REX3)
    2348/DCE5 : (MACRO)[878]            REX4:	TSTSTR	REX5,'+'		; handle + (addition)
    2348/DCE5 : 9C                               DB     H(REX5 - TSTBITH)
    2348/DCE6 : F2                               DB     L(REX5)
    2348/DCE7 : 2B                               DB     '+'
    2349/DCE8 : (MACRO)[879]            	ILCALL	RTERM
    2349/DCE8 : 1D                               DB     H(RTERM - (JMPBITH + TSTBITH))
    2349/DCE9 : 10                               DB     L(RTERM)
    2350/DCEA : (MACRO)[880]            	DO	STACK
    2350/DCEA : =>NOT BLANK                      IFNB   STACK
    2350/DCEA : F2                                DB    H(STACK)
    2350/DCEB : 8E                                DB    L(STACK)
    2350/DCEC :                                   SHIFT
    2350/DCEC :  (MACRO-2)[881]                   DO    
    2350/DCEC : =>BLANK                          IFNB   
    2350/DCEC :                                   DB    H()
    2350/DCEC :                                   DB    L()
    2350/DCEC :                                   SHIFT
    2350/DCEC :                                   DO    
    2350/DCEC : [2350]                           ENDIF
    2350/DCEC : [2350]                           ENDIF
    2351/DCEC : (MACRO)[882]            	DO	FADD
    2351/DCEC : =>NOT BLANK                      IFNB   FADD
    2351/DCEC : F1                                DB    H(FADD)
    2351/DCED : 3C                                DB    L(FADD)
    2351/DCEE :                                   SHIFT
    2351/DCEE :  (MACRO-2)[883]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 118 - 10/31/2025 04:19:39 PM


    2351/DCEE : =>BLANK                          IFNB   
    2351/DCEE :                                   DB    H()
    2351/DCEE :                                   DB    L()
    2351/DCEE :                                   SHIFT
    2351/DCEE :                                   DO    
    2351/DCEE : [2351]                           ENDIF
    2351/DCEE : [2351]                           ENDIF
    2352/DCEE : (MACRO)[884]            	DO	STBACK
    2352/DCEE : =>NOT BLANK                      IFNB   STBACK
    2352/DCEE : FF                                DB    H(STBACK)
    2352/DCEF : 80                                DB    L(STBACK)
    2352/DCF0 :                                   SHIFT
    2352/DCF0 :  (MACRO-2)[885]                   DO    
    2352/DCF0 : =>BLANK                          IFNB   
    2352/DCF0 :                                   DB    H()
    2352/DCF0 :                                   DB    L()
    2352/DCF0 :                                   SHIFT
    2352/DCF0 :                                   DO    
    2352/DCF0 : [2352]                           ENDIF
    2352/DCF0 : [2352]                           ENDIF
    2353/DCF0 : (MACRO)[886]            	GOTO	REX3
    2353/DCF0 : 5C                               DB     H(REX3 - JMPBITH)
    2353/DCF1 : D8                               DB     L(REX3)
    2354/DCF2 : (MACRO)[887]            REX5:	TSTSTR	REX6,T_EXOR		; handle ^ (EXOR)
    2354/DCF2 : 9D                               DB     H(REX6 - TSTBITH)
    2354/DCF3 : 01                               DB     L(REX6)
    2354/DCF4 : A5                               DB     T_EXOR
    2355/DCF5 : (MACRO)[888]            	ILCALL	RTERM
    2355/DCF5 : 1D                               DB     H(RTERM - (JMPBITH + TSTBITH))
    2355/DCF6 : 10                               DB     L(RTERM)
    2356/DCF7 : (MACRO)[889]            	DO	STACK
    2356/DCF7 : =>NOT BLANK                      IFNB   STACK
    2356/DCF7 : F2                                DB    H(STACK)
    2356/DCF8 : 8E                                DB    L(STACK)
    2356/DCF9 :                                   SHIFT
    2356/DCF9 :  (MACRO-2)[890]                   DO    
    2356/DCF9 : =>BLANK                          IFNB   
    2356/DCF9 :                                   DB    H()
    2356/DCF9 :                                   DB    L()
    2356/DCF9 :                                   SHIFT
    2356/DCF9 :                                   DO    
    2356/DCF9 : [2356]                           ENDIF
    2356/DCF9 : [2356]                           ENDIF
    2357/DCF9 : (MACRO)[891]            	DO	ALGEXP
    2357/DCF9 : =>NOT BLANK                      IFNB   ALGEXP
    2357/DCF9 : F2                                DB    H(ALGEXP)
    2357/DCFA : 59                                DB    L(ALGEXP)
    2357/DCFB :                                   SHIFT
    2357/DCFB :  (MACRO-2)[892]                   DO    
    2357/DCFB : =>BLANK                          IFNB   
    2357/DCFB :                                   DB    H()
    2357/DCFB :                                   DB    L()
    2357/DCFB :                                   SHIFT
    2357/DCFB :                                   DO    
    2357/DCFB : [2357]                           ENDIF
    2357/DCFB : [2357]                           ENDIF
    2358/DCFB : (MACRO)[893]            	DO	EXOR
    2358/DCFB : =>NOT BLANK                      IFNB   EXOR
    2358/DCFB : F1                                DB    H(EXOR)
    2358/DCFC : 92                                DB    L(EXOR)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 119 - 10/31/2025 04:19:39 PM


    2358/DCFD :                                   SHIFT
    2358/DCFD :  (MACRO-2)[894]                   DO    
    2358/DCFD : =>BLANK                          IFNB   
    2358/DCFD :                                   DB    H()
    2358/DCFD :                                   DB    L()
    2358/DCFD :                                   SHIFT
    2358/DCFD :                                   DO    
    2358/DCFD : [2358]                           ENDIF
    2358/DCFD : [2358]                           ENDIF
    2359/DCFD : (MACRO)[895]            	DO	STBACK
    2359/DCFD : =>NOT BLANK                      IFNB   STBACK
    2359/DCFD : FF                                DB    H(STBACK)
    2359/DCFE : 80                                DB    L(STBACK)
    2359/DCFF :                                   SHIFT
    2359/DCFF :  (MACRO-2)[896]                   DO    
    2359/DCFF : =>BLANK                          IFNB   
    2359/DCFF :                                   DB    H()
    2359/DCFF :                                   DB    L()
    2359/DCFF :                                   SHIFT
    2359/DCFF :                                   DO    
    2359/DCFF : [2359]                           ENDIF
    2359/DCFF : [2359]                           ENDIF
    2360/DCFF : (MACRO)[897]            	GOTO	REX3
    2360/DCFF : 5C                               DB     H(REX3 - JMPBITH)
    2360/DD00 : D8                               DB     L(REX3)
    2361/DD01 : (MACRO)[898]            REX6:	TSTSTR	RTRN,T_OR		; handle | (OR)
    2361/DD01 : 9D                               DB     H(RTRN - TSTBITH)
    2361/DD02 : 78                               DB     L(RTRN)
    2361/DD03 : A7                               DB     T_OR
    2362/DD04 : (MACRO)[899]            	ILCALL	RTERM
    2362/DD04 : 1D                               DB     H(RTERM - (JMPBITH + TSTBITH))
    2362/DD05 : 10                               DB     L(RTERM)
    2363/DD06 : (MACRO)[900]            	DO	STACK
    2363/DD06 : =>NOT BLANK                      IFNB   STACK
    2363/DD06 : F2                                DB    H(STACK)
    2363/DD07 : 8E                                DB    L(STACK)
    2363/DD08 :                                   SHIFT
    2363/DD08 :  (MACRO-2)[901]                   DO    
    2363/DD08 : =>BLANK                          IFNB   
    2363/DD08 :                                   DB    H()
    2363/DD08 :                                   DB    L()
    2363/DD08 :                                   SHIFT
    2363/DD08 :                                   DO    
    2363/DD08 : [2363]                           ENDIF
    2363/DD08 : [2363]                           ENDIF
    2364/DD08 : (MACRO)[902]            	DO	ALGEXP
    2364/DD08 : =>NOT BLANK                      IFNB   ALGEXP
    2364/DD08 : F2                                DB    H(ALGEXP)
    2364/DD09 : 59                                DB    L(ALGEXP)
    2364/DD0A :                                   SHIFT
    2364/DD0A :  (MACRO-2)[903]                   DO    
    2364/DD0A : =>BLANK                          IFNB   
    2364/DD0A :                                   DB    H()
    2364/DD0A :                                   DB    L()
    2364/DD0A :                                   SHIFT
    2364/DD0A :                                   DO    
    2364/DD0A : [2364]                           ENDIF
    2364/DD0A : [2364]                           ENDIF
    2365/DD0A : (MACRO)[904]            	DO	OR
    2365/DD0A : =>NOT BLANK                      IFNB   OR
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 120 - 10/31/2025 04:19:39 PM


    2365/DD0A : F1                                DB    H(OR)
    2365/DD0B : 6C                                DB    L(OR)
    2365/DD0C :                                   SHIFT
    2365/DD0C :  (MACRO-2)[905]                   DO    
    2365/DD0C : =>BLANK                          IFNB   
    2365/DD0C :                                   DB    H()
    2365/DD0C :                                   DB    L()
    2365/DD0C :                                   SHIFT
    2365/DD0C :                                   DO    
    2365/DD0C : [2365]                           ENDIF
    2365/DD0C : [2365]                           ENDIF
    2366/DD0C : (MACRO)[906]            	DO	STBACK
    2366/DD0C : =>NOT BLANK                      IFNB   STBACK
    2366/DD0C : FF                                DB    H(STBACK)
    2366/DD0D : 80                                DB    L(STBACK)
    2366/DD0E :                                   SHIFT
    2366/DD0E :  (MACRO-2)[907]                   DO    
    2366/DD0E : =>BLANK                          IFNB   
    2366/DD0E :                                   DB    H()
    2366/DD0E :                                   DB    L()
    2366/DD0E :                                   SHIFT
    2366/DD0E :                                   DO    
    2366/DD0E : [2366]                           ENDIF
    2366/DD0E : [2366]                           ENDIF
    2367/DD0E : (MACRO)[908]            	GOTO	REX3
    2367/DD0E : 5C                               DB     H(REX3 - JMPBITH)
    2367/DD0F : D8                               DB     L(REX3)
    2368/DD10 :                         
    2369/DD10 :                         ; Evaluate expression with two terms
    2370/DD10 : (MACRO)[909]            RTERM:	ILCALL	REXPN
    2370/DD10 : 1D                               DB     H(REXPN - (JMPBITH + TSTBITH))
    2370/DD11 : 5B                               DB     L(REXPN)
    2371/DD12 : (MACRO)[910]            RT1:	TSTSTR	RT2,'*'			; handle * (multiplication)
    2371/DD12 : 9D                               DB     H(RT2 - TSTBITH)
    2371/DD13 : 1F                               DB     L(RT2)
    2371/DD14 : 2A                               DB     '*'
    2372/DD15 : (MACRO)[911]            	ILCALL	REXPN
    2372/DD15 : 1D                               DB     H(REXPN - (JMPBITH + TSTBITH))
    2372/DD16 : 5B                               DB     L(REXPN)
    2373/DD17 : (MACRO)[912]            	DO	STACK
    2373/DD17 : =>NOT BLANK                      IFNB   STACK
    2373/DD17 : F2                                DB    H(STACK)
    2373/DD18 : 8E                                DB    L(STACK)
    2373/DD19 :                                   SHIFT
    2373/DD19 :  (MACRO-2)[913]                   DO    
    2373/DD19 : =>BLANK                          IFNB   
    2373/DD19 :                                   DB    H()
    2373/DD19 :                                   DB    L()
    2373/DD19 :                                   SHIFT
    2373/DD19 :                                   DO    
    2373/DD19 : [2373]                           ENDIF
    2373/DD19 : [2373]                           ENDIF
    2374/DD19 : (MACRO)[914]            	DO	FMUL
    2374/DD19 : =>NOT BLANK                      IFNB   FMUL
    2374/DD19 : F0                                DB    H(FMUL)
    2374/DD1A : E3                                DB    L(FMUL)
    2374/DD1B :                                   SHIFT
    2374/DD1B :  (MACRO-2)[915]                   DO    
    2374/DD1B : =>BLANK                          IFNB   
    2374/DD1B :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 121 - 10/31/2025 04:19:39 PM


    2374/DD1B :                                   DB    L()
    2374/DD1B :                                   SHIFT
    2374/DD1B :                                   DO    
    2374/DD1B : [2374]                           ENDIF
    2374/DD1B : [2374]                           ENDIF
    2375/DD1B : (MACRO)[916]            	DO	STBACK
    2375/DD1B : =>NOT BLANK                      IFNB   STBACK
    2375/DD1B : FF                                DB    H(STBACK)
    2375/DD1C : 80                                DB    L(STBACK)
    2375/DD1D :                                   SHIFT
    2375/DD1D :  (MACRO-2)[917]                   DO    
    2375/DD1D : =>BLANK                          IFNB   
    2375/DD1D :                                   DB    H()
    2375/DD1D :                                   DB    L()
    2375/DD1D :                                   SHIFT
    2375/DD1D :                                   DO    
    2375/DD1D : [2375]                           ENDIF
    2375/DD1D : [2375]                           ENDIF
    2376/DD1D : (MACRO)[918]            	GOTO	RT1
    2376/DD1D : 5D                               DB     H(RT1 - JMPBITH)
    2376/DD1E : 12                               DB     L(RT1)
    2377/DD1F : (MACRO)[919]            RT2:	TSTSTR	RT3,'/'			; handle / (division)
    2377/DD1F : 9D                               DB     H(RT3 - TSTBITH)
    2377/DD20 : 2C                               DB     L(RT3)
    2377/DD21 : 2F                               DB     '/'
    2378/DD22 : (MACRO)[920]            	ILCALL	REXPN
    2378/DD22 : 1D                               DB     H(REXPN - (JMPBITH + TSTBITH))
    2378/DD23 : 5B                               DB     L(REXPN)
    2379/DD24 : (MACRO)[921]            	DO	STACK
    2379/DD24 : =>NOT BLANK                      IFNB   STACK
    2379/DD24 : F2                                DB    H(STACK)
    2379/DD25 : 8E                                DB    L(STACK)
    2379/DD26 :                                   SHIFT
    2379/DD26 :  (MACRO-2)[922]                   DO    
    2379/DD26 : =>BLANK                          IFNB   
    2379/DD26 :                                   DB    H()
    2379/DD26 :                                   DB    L()
    2379/DD26 :                                   SHIFT
    2379/DD26 :                                   DO    
    2379/DD26 : [2379]                           ENDIF
    2379/DD26 : [2379]                           ENDIF
    2380/DD26 : (MACRO)[923]            	DO	FDIV
    2380/DD26 : =>NOT BLANK                      IFNB   FDIV
    2380/DD26 : F0                                DB    H(FDIV)
    2380/DD27 : 78                                DB    L(FDIV)
    2380/DD28 :                                   SHIFT
    2380/DD28 :  (MACRO-2)[924]                   DO    
    2380/DD28 : =>BLANK                          IFNB   
    2380/DD28 :                                   DB    H()
    2380/DD28 :                                   DB    L()
    2380/DD28 :                                   SHIFT
    2380/DD28 :                                   DO    
    2380/DD28 : [2380]                           ENDIF
    2380/DD28 : [2380]                           ENDIF
    2381/DD28 : (MACRO)[925]            	DO	STBACK
    2381/DD28 : =>NOT BLANK                      IFNB   STBACK
    2381/DD28 : FF                                DB    H(STBACK)
    2381/DD29 : 80                                DB    L(STBACK)
    2381/DD2A :                                   SHIFT
    2381/DD2A :  (MACRO-2)[926]                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 122 - 10/31/2025 04:19:39 PM


    2381/DD2A : =>BLANK                          IFNB   
    2381/DD2A :                                   DB    H()
    2381/DD2A :                                   DB    L()
    2381/DD2A :                                   SHIFT
    2381/DD2A :                                   DO    
    2381/DD2A : [2381]                           ENDIF
    2381/DD2A : [2381]                           ENDIF
    2382/DD2A : (MACRO)[927]            	GOTO	RT1
    2382/DD2A : 5D                               DB     H(RT1 - JMPBITH)
    2382/DD2B : 12                               DB     L(RT1)
    2383/DD2C : (MACRO)[928]            RT3:	TSTSTR	RT4,T_AND		; handle & (AND)
    2383/DD2C : 9D                               DB     H(RT4 - TSTBITH)
    2383/DD2D : 3B                               DB     L(RT4)
    2383/DD2E : A3                               DB     T_AND
    2384/DD2F : (MACRO)[929]            	ILCALL	REXPN
    2384/DD2F : 1D                               DB     H(REXPN - (JMPBITH + TSTBITH))
    2384/DD30 : 5B                               DB     L(REXPN)
    2385/DD31 : (MACRO)[930]            	DO	STACK
    2385/DD31 : =>NOT BLANK                      IFNB   STACK
    2385/DD31 : F2                                DB    H(STACK)
    2385/DD32 : 8E                                DB    L(STACK)
    2385/DD33 :                                   SHIFT
    2385/DD33 :  (MACRO-2)[931]                   DO    
    2385/DD33 : =>BLANK                          IFNB   
    2385/DD33 :                                   DB    H()
    2385/DD33 :                                   DB    L()
    2385/DD33 :                                   SHIFT
    2385/DD33 :                                   DO    
    2385/DD33 : [2385]                           ENDIF
    2385/DD33 : [2385]                           ENDIF
    2386/DD33 : (MACRO)[932]            	DO	ALGEXP
    2386/DD33 : =>NOT BLANK                      IFNB   ALGEXP
    2386/DD33 : F2                                DB    H(ALGEXP)
    2386/DD34 : 59                                DB    L(ALGEXP)
    2386/DD35 :                                   SHIFT
    2386/DD35 :  (MACRO-2)[933]                   DO    
    2386/DD35 : =>BLANK                          IFNB   
    2386/DD35 :                                   DB    H()
    2386/DD35 :                                   DB    L()
    2386/DD35 :                                   SHIFT
    2386/DD35 :                                   DO    
    2386/DD35 : [2386]                           ENDIF
    2386/DD35 : [2386]                           ENDIF
    2387/DD35 : (MACRO)[934]            	DO	AND
    2387/DD35 : =>NOT BLANK                      IFNB   AND
    2387/DD35 : F1                                DB    H(AND)
    2387/DD36 : 56                                DB    L(AND)
    2387/DD37 :                                   SHIFT
    2387/DD37 :  (MACRO-2)[935]                   DO    
    2387/DD37 : =>BLANK                          IFNB   
    2387/DD37 :                                   DB    H()
    2387/DD37 :                                   DB    L()
    2387/DD37 :                                   SHIFT
    2387/DD37 :                                   DO    
    2387/DD37 : [2387]                           ENDIF
    2387/DD37 : [2387]                           ENDIF
    2388/DD37 : (MACRO)[936]            	DO	STBACK
    2388/DD37 : =>NOT BLANK                      IFNB   STBACK
    2388/DD37 : FF                                DB    H(STBACK)
    2388/DD38 : 80                                DB    L(STBACK)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 123 - 10/31/2025 04:19:39 PM


    2388/DD39 :                                   SHIFT
    2388/DD39 :  (MACRO-2)[937]                   DO    
    2388/DD39 : =>BLANK                          IFNB   
    2388/DD39 :                                   DB    H()
    2388/DD39 :                                   DB    L()
    2388/DD39 :                                   SHIFT
    2388/DD39 :                                   DO    
    2388/DD39 : [2388]                           ENDIF
    2388/DD39 : [2388]                           ENDIF
    2389/DD39 : (MACRO)[938]            	GOTO	RT1
    2389/DD39 : 5D                               DB     H(RT1 - JMPBITH)
    2389/DD3A : 12                               DB     L(RT1)
    2390/DD3B : (MACRO)[939]            RT4:	TSTSTR	RT5,T_DIV		; handle // (DIV)
    2390/DD3B : 9D                               DB     H(RT5 - TSTBITH)
    2390/DD3C : 4A                               DB     L(RT5)
    2390/DD3D : A4                               DB     T_DIV
    2391/DD3E : (MACRO)[940]            	ILCALL	REXPN
    2391/DD3E : 1D                               DB     H(REXPN - (JMPBITH + TSTBITH))
    2391/DD3F : 5B                               DB     L(REXPN)
    2392/DD40 : (MACRO)[941]            	DO	STACK
    2392/DD40 : =>NOT BLANK                      IFNB   STACK
    2392/DD40 : F2                                DB    H(STACK)
    2392/DD41 : 8E                                DB    L(STACK)
    2392/DD42 :                                   SHIFT
    2392/DD42 :  (MACRO-2)[942]                   DO    
    2392/DD42 : =>BLANK                          IFNB   
    2392/DD42 :                                   DB    H()
    2392/DD42 :                                   DB    L()
    2392/DD42 :                                   SHIFT
    2392/DD42 :                                   DO    
    2392/DD42 : [2392]                           ENDIF
    2392/DD42 : [2392]                           ENDIF
    2393/DD42 : (MACRO)[943]            	DO	FDIV
    2393/DD42 : =>NOT BLANK                      IFNB   FDIV
    2393/DD42 : F0                                DB    H(FDIV)
    2393/DD43 : 78                                DB    L(FDIV)
    2393/DD44 :                                   SHIFT
    2393/DD44 :  (MACRO-2)[944]                   DO    
    2393/DD44 : =>BLANK                          IFNB   
    2393/DD44 :                                   DB    H()
    2393/DD44 :                                   DB    L()
    2393/DD44 :                                   SHIFT
    2393/DD44 :                                   DO    
    2393/DD44 : [2393]                           ENDIF
    2393/DD44 : [2393]                           ENDIF
    2394/DD44 : (MACRO)[945]            	DO	INT
    2394/DD44 : =>NOT BLANK                      IFNB   INT
    2394/DD44 : F2                                DB    H(INT)
    2394/DD45 : 02                                DB    L(INT)
    2394/DD46 :                                   SHIFT
    2394/DD46 :  (MACRO-2)[946]                   DO    
    2394/DD46 : =>BLANK                          IFNB   
    2394/DD46 :                                   DB    H()
    2394/DD46 :                                   DB    L()
    2394/DD46 :                                   SHIFT
    2394/DD46 :                                   DO    
    2394/DD46 : [2394]                           ENDIF
    2394/DD46 : [2394]                           ENDIF
    2395/DD46 : (MACRO)[947]            	DO	STBACK
    2395/DD46 : =>NOT BLANK                      IFNB   STBACK
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 124 - 10/31/2025 04:19:39 PM


    2395/DD46 : FF                                DB    H(STBACK)
    2395/DD47 : 80                                DB    L(STBACK)
    2395/DD48 :                                   SHIFT
    2395/DD48 :  (MACRO-2)[948]                   DO    
    2395/DD48 : =>BLANK                          IFNB   
    2395/DD48 :                                   DB    H()
    2395/DD48 :                                   DB    L()
    2395/DD48 :                                   SHIFT
    2395/DD48 :                                   DO    
    2395/DD48 : [2395]                           ENDIF
    2395/DD48 : [2395]                           ENDIF
    2396/DD48 : (MACRO)[949]            	GOTO	RT1
    2396/DD48 : 5D                               DB     H(RT1 - JMPBITH)
    2396/DD49 : 12                               DB     L(RT1)
    2397/DD4A : (MACRO)[950]            RT5:	TSTSTR	RTRN,T_MOD		; handle % (MOD)
    2397/DD4A : 9D                               DB     H(RTRN - TSTBITH)
    2397/DD4B : 78                               DB     L(RTRN)
    2397/DD4C : A6                               DB     T_MOD
    2398/DD4D : (MACRO)[951]            	ILCALL	REXPN
    2398/DD4D : 1D                               DB     H(REXPN - (JMPBITH + TSTBITH))
    2398/DD4E : 5B                               DB     L(REXPN)
    2399/DD4F : (MACRO)[952]            	DO	STACK
    2399/DD4F : =>NOT BLANK                      IFNB   STACK
    2399/DD4F : F2                                DB    H(STACK)
    2399/DD50 : 8E                                DB    L(STACK)
    2399/DD51 :                                   SHIFT
    2399/DD51 :  (MACRO-2)[953]                   DO    
    2399/DD51 : =>BLANK                          IFNB   
    2399/DD51 :                                   DB    H()
    2399/DD51 :                                   DB    L()
    2399/DD51 :                                   SHIFT
    2399/DD51 :                                   DO    
    2399/DD51 : [2399]                           ENDIF
    2399/DD51 : [2399]                           ENDIF
    2400/DD51 : (MACRO)[954]            	DO	FMOD
    2400/DD51 : =>NOT BLANK                      IFNB   FMOD
    2400/DD51 : F6                                DB    H(FMOD)
    2400/DD52 : 8A                                DB    L(FMOD)
    2400/DD53 :                                   SHIFT
    2400/DD53 :  (MACRO-2)[955]                   DO    
    2400/DD53 : =>BLANK                          IFNB   
    2400/DD53 :                                   DB    H()
    2400/DD53 :                                   DB    L()
    2400/DD53 :                                   SHIFT
    2400/DD53 :                                   DO    
    2400/DD53 : [2400]                           ENDIF
    2400/DD53 : [2400]                           ENDIF
    2401/DD53 : (MACRO)[956]            	DO	PSHSWP
    2401/DD53 : =>NOT BLANK                      IFNB   PSHSWP
    2401/DD53 : F7                                DB    H(PSHSWP)
    2401/DD54 : 21                                DB    L(PSHSWP)
    2401/DD55 :                                   SHIFT
    2401/DD55 :  (MACRO-2)[957]                   DO    
    2401/DD55 : =>BLANK                          IFNB   
    2401/DD55 :                                   DB    H()
    2401/DD55 :                                   DB    L()
    2401/DD55 :                                   SHIFT
    2401/DD55 :                                   DO    
    2401/DD55 : [2401]                           ENDIF
    2401/DD55 : [2401]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 125 - 10/31/2025 04:19:39 PM


    2402/DD55 : (MACRO)[958]            	DO	FMUL
    2402/DD55 : =>NOT BLANK                      IFNB   FMUL
    2402/DD55 : F0                                DB    H(FMUL)
    2402/DD56 : E3                                DB    L(FMUL)
    2402/DD57 :                                   SHIFT
    2402/DD57 :  (MACRO-2)[959]                   DO    
    2402/DD57 : =>BLANK                          IFNB   
    2402/DD57 :                                   DB    H()
    2402/DD57 :                                   DB    L()
    2402/DD57 :                                   SHIFT
    2402/DD57 :                                   DO    
    2402/DD57 : [2402]                           ENDIF
    2402/DD57 : [2402]                           ENDIF
    2403/DD57 : (MACRO)[960]            	DO	STBACK
    2403/DD57 : =>NOT BLANK                      IFNB   STBACK
    2403/DD57 : FF                                DB    H(STBACK)
    2403/DD58 : 80                                DB    L(STBACK)
    2403/DD59 :                                   SHIFT
    2403/DD59 :  (MACRO-2)[961]                   DO    
    2403/DD59 : =>BLANK                          IFNB   
    2403/DD59 :                                   DB    H()
    2403/DD59 :                                   DB    L()
    2403/DD59 :                                   SHIFT
    2403/DD59 :                                   DO    
    2403/DD59 : [2403]                           ENDIF
    2403/DD59 : [2403]                           ENDIF
    2404/DD59 : (MACRO)[962]            	GOTO	RT1
    2404/DD59 : 5D                               DB     H(RT1 - JMPBITH)
    2404/DD5A : 12                               DB     L(RT1)
    2405/DD5B :                         
    2406/DD5B : (MACRO)[963]            REXPN:	ILCALL	RFACTR
    2406/DD5B : 1D                               DB     H(RFACTR - (JMPBITH + TSTBITH))
    2406/DD5C : 79                               DB     L(RFACTR)
    2407/DD5D : (MACRO)[964]            REXPN1:	TSTSTR	RTRN,'^'		; handle exponentiation
    2407/DD5D : 9D                               DB     H(RTRN - TSTBITH)
    2407/DD5E : 78                               DB     L(RTRN)
    2407/DD5F : 5E                               DB     '^'
    2408/DD60 : (MACRO)[965]            	ILCALL	RFACTR
    2408/DD60 : 1D                               DB     H(RFACTR - (JMPBITH + TSTBITH))
    2408/DD61 : 79                               DB     L(RFACTR)
    2409/DD62 : (MACRO)[966]            	DO	STACK
    2409/DD62 : =>NOT BLANK                      IFNB   STACK
    2409/DD62 : F2                                DB    H(STACK)
    2409/DD63 : 8E                                DB    L(STACK)
    2409/DD64 :                                   SHIFT
    2409/DD64 :  (MACRO-2)[967]                   DO    
    2409/DD64 : =>BLANK                          IFNB   
    2409/DD64 :                                   DB    H()
    2409/DD64 :                                   DB    L()
    2409/DD64 :                                   SHIFT
    2409/DD64 :                                   DO    
    2409/DD64 : [2409]                           ENDIF
    2409/DD64 : [2409]                           ENDIF
    2410/DD64 : (MACRO)[968]            	DO	SWAP
    2410/DD64 : =>NOT BLANK                      IFNB   SWAP
    2410/DD64 : F0                                DB    H(SWAP)
    2410/DD65 : 35                                DB    L(SWAP)
    2410/DD66 :                                   SHIFT
    2410/DD66 :  (MACRO-2)[969]                   DO    
    2410/DD66 : =>BLANK                          IFNB   
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 126 - 10/31/2025 04:19:39 PM


    2410/DD66 :                                   DB    H()
    2410/DD66 :                                   DB    L()
    2410/DD66 :                                   SHIFT
    2410/DD66 :                                   DO    
    2410/DD66 : [2410]                           ENDIF
    2410/DD66 : [2410]                           ENDIF
    2411/DD66 : (MACRO)[970]            	DO	LOG2
    2411/DD66 : =>NOT BLANK                      IFNB   LOG2
    2411/DD66 : F4                                DB    H(LOG2)
    2411/DD67 : D8                                DB    L(LOG2)
    2411/DD68 :                                   SHIFT
    2411/DD68 :  (MACRO-2)[971]                   DO    
    2411/DD68 : =>BLANK                          IFNB   
    2411/DD68 :                                   DB    H()
    2411/DD68 :                                   DB    L()
    2411/DD68 :                                   SHIFT
    2411/DD68 :                                   DO    
    2411/DD68 : [2411]                           ENDIF
    2411/DD68 : [2411]                           ENDIF
    2412/DD68 : (MACRO)[972]            	DO	FMUL
    2412/DD68 : =>NOT BLANK                      IFNB   FMUL
    2412/DD68 : F0                                DB    H(FMUL)
    2412/DD69 : E3                                DB    L(FMUL)
    2412/DD6A :                                   SHIFT
    2412/DD6A :  (MACRO-2)[973]                   DO    
    2412/DD6A : =>BLANK                          IFNB   
    2412/DD6A :                                   DB    H()
    2412/DD6A :                                   DB    L()
    2412/DD6A :                                   SHIFT
    2412/DD6A :                                   DO    
    2412/DD6A : [2412]                           ENDIF
    2412/DD6A : [2412]                           ENDIF
    2413/DD6A : (MACRO)[974]            	DO	EXP2
    2413/DD6A : =>NOT BLANK                      IFNB   EXP2
    2413/DD6A : F5                                DB    H(EXP2)
    2413/DD6B : 98                                DB    L(EXP2)
    2413/DD6C :                                   SHIFT
    2413/DD6C :  (MACRO-2)[975]                   DO    
    2413/DD6C : =>BLANK                          IFNB   
    2413/DD6C :                                   DB    H()
    2413/DD6C :                                   DB    L()
    2413/DD6C :                                   SHIFT
    2413/DD6C :                                   DO    
    2413/DD6C : [2413]                           ENDIF
    2413/DD6C : [2413]                           ENDIF
    2414/DD6C : (MACRO)[976]            	DO	STBACK
    2414/DD6C : =>NOT BLANK                      IFNB   STBACK
    2414/DD6C : FF                                DB    H(STBACK)
    2414/DD6D : 80                                DB    L(STBACK)
    2414/DD6E :                                   SHIFT
    2414/DD6E :  (MACRO-2)[977]                   DO    
    2414/DD6E : =>BLANK                          IFNB   
    2414/DD6E :                                   DB    H()
    2414/DD6E :                                   DB    L()
    2414/DD6E :                                   SHIFT
    2414/DD6E :                                   DO    
    2414/DD6E : [2414]                           ENDIF
    2414/DD6E : [2414]                           ENDIF
    2415/DD6E : (MACRO)[978]            	GOTO	REXPN1
    2415/DD6E : 5D                               DB     H(REXPN1 - JMPBITH)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 127 - 10/31/2025 04:19:39 PM


    2415/DD6F : 5D                               DB     L(REXPN1)
    2416/DD70 :                         
    2417/DD70 : (MACRO)[979]            SNGL:	TSTSTR	SYNTAX,'('
    2417/DD70 : 99                               DB     H(SYNTAX - TSTBITH)
    2417/DD71 : 42                               DB     L(SYNTAX)
    2417/DD72 : 28                               DB     '('
    2418/DD73 : (MACRO)[980]            	ILCALL	REXPR
    2418/DD73 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2418/DD74 : C6                               DB     L(REXPR)
    2419/DD75 : (MACRO)[981]            	TSTSTR	ENDPAR,')'
    2419/DD75 : 99                               DB     H(ENDPAR - TSTBITH)
    2419/DD76 : 2F                               DB     L(ENDPAR)
    2419/DD77 : 29                               DB     ')'
    2420/DD78 : (MACRO)[982]            RTRN:	ILRTRN
    2420/DD78 : 00                               DB     0
    2421/DD79 :                         
    2422/DD79 :                         ; NOTE:	Handle floating point numbers
    2423/DD79 : (MACRO)[983]            RFACTR:	TSTNUM	RF1			; number before decimal point
    2423/DD79 : DD                               DB     H(RF1)
    2423/DD7A : 99                               DB     L(RF1)
    2424/DD7B : (MACRO)[984]            RNUM:	TSTSTR	RNUM1,'.'		; decimal point
    2424/DD7B : 9D                               DB     H(RNUM1 - TSTBITH)
    2424/DD7C : 88                               DB     L(RNUM1)
    2424/DD7D : 2E                               DB     '.'
    2425/DD7E : (MACRO)[985]            	TSTNUM	RNUM1			; number after decimal point
    2425/DD7E : DD                               DB     H(RNUM1)
    2425/DD7F : 88                               DB     L(RNUM1)
    2426/DD80 : (MACRO)[986]            	DO	STACK
    2426/DD80 : =>NOT BLANK                      IFNB   STACK
    2426/DD80 : F2                                DB    H(STACK)
    2426/DD81 : 8E                                DB    L(STACK)
    2426/DD82 :                                   SHIFT
    2426/DD82 :  (MACRO-2)[987]                   DO    
    2426/DD82 : =>BLANK                          IFNB   
    2426/DD82 :                                   DB    H()
    2426/DD82 :                                   DB    L()
    2426/DD82 :                                   SHIFT
    2426/DD82 :                                   DO    
    2426/DD82 : [2426]                           ENDIF
    2426/DD82 : [2426]                           ENDIF
    2427/DD82 : (MACRO)[988]            	DO	FD10			; transform fractional part into binary..
    2427/DD82 : =>NOT BLANK                      IFNB   FD10
    2427/DD82 : F7                                DB    H(FD10)
    2427/DD83 : 39                                DB    L(FD10)
    2427/DD84 :                                   SHIFT
    2427/DD84 :  (MACRO-2)[989]                   DO    
    2427/DD84 : =>BLANK                          IFNB   
    2427/DD84 :                                   DB    H()
    2427/DD84 :                                   DB    L()
    2427/DD84 :                                   SHIFT
    2427/DD84 :                                   DO    
    2427/DD84 : [2427]                           ENDIF
    2427/DD84 : [2427]                           ENDIF
    2428/DD84 : (MACRO)[990]            	DO	FADD			; ..and add to integer part
    2428/DD84 : =>NOT BLANK                      IFNB   FADD
    2428/DD84 : F1                                DB    H(FADD)
    2428/DD85 : 3C                                DB    L(FADD)
    2428/DD86 :                                   SHIFT
    2428/DD86 :  (MACRO-2)[991]                   DO    
    2428/DD86 : =>BLANK                          IFNB   
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 128 - 10/31/2025 04:19:39 PM


    2428/DD86 :                                   DB    H()
    2428/DD86 :                                   DB    L()
    2428/DD86 :                                   SHIFT
    2428/DD86 :                                   DO    
    2428/DD86 : [2428]                           ENDIF
    2428/DD86 : [2428]                           ENDIF
    2429/DD86 : (MACRO)[992]            	DO	STBACK
    2429/DD86 : =>NOT BLANK                      IFNB   STBACK
    2429/DD86 : FF                                DB    H(STBACK)
    2429/DD87 : 80                                DB    L(STBACK)
    2429/DD88 :                                   SHIFT
    2429/DD88 :  (MACRO-2)[993]                   DO    
    2429/DD88 : =>BLANK                          IFNB   
    2429/DD88 :                                   DB    H()
    2429/DD88 :                                   DB    L()
    2429/DD88 :                                   SHIFT
    2429/DD88 :                                   DO    
    2429/DD88 : [2429]                           ENDIF
    2429/DD88 : [2429]                           ENDIF
    2430/DD88 : (MACRO)[994]            RNUM1:	TSTSTR	RTRN,'E'		; look for an exponent part
    2430/DD88 : 9D                               DB     H(RTRN - TSTBITH)
    2430/DD89 : 78                               DB     L(RTRN)
    2430/DD8A : 45                               DB     'E'
    2431/DD8B : (MACRO)[995]            	TSTSTR	RNUM2,'-'
    2431/DD8B : 9D                               DB     H(RNUM2 - TSTBITH)
    2431/DD8C : 92                               DB     L(RNUM2)
    2431/DD8D : 2D                               DB     '-'
    2432/DD8E : (MACRO)[996]            	DO	NUMTST
    2432/DD8E : =>NOT BLANK                      IFNB   NUMTST
    2432/DD8E : EA                                DB    H(NUMTST)
    2432/DD8F : 8D                                DB    L(NUMTST)
    2432/DD90 :                                   SHIFT
    2432/DD90 :  (MACRO-2)[997]                   DO    
    2432/DD90 : =>BLANK                          IFNB   
    2432/DD90 :                                   DB    H()
    2432/DD90 :                                   DB    L()
    2432/DD90 :                                   SHIFT
    2432/DD90 :                                   DO    
    2432/DD90 : [2432]                           ENDIF
    2432/DD90 : [2432]                           ENDIF
    2433/DD90 : (MACRO)[998]            	DO	FDIV11
    2433/DD90 : =>NOT BLANK                      IFNB   FDIV11
    2433/DD90 : F7                                DB    H(FDIV11)
    2433/DD91 : B8                                DB    L(FDIV11)
    2433/DD92 :                                   SHIFT
    2433/DD92 :  (MACRO-2)[999]                   DO    
    2433/DD92 : =>BLANK                          IFNB   
    2433/DD92 :                                   DB    H()
    2433/DD92 :                                   DB    L()
    2433/DD92 :                                   SHIFT
    2433/DD92 :                                   DO    
    2433/DD92 : [2433]                           ENDIF
    2433/DD92 : [2433]                           ENDIF
    2434/DD92 : (MACRO)[1000]           RNUM2:	TSTSTR	RNUM3,'+'
    2434/DD92 : 9D                               DB     H(RNUM3 - TSTBITH)
    2434/DD93 : 95                               DB     L(RNUM3)
    2434/DD94 : 2B                               DB     '+'
    2435/DD95 : (MACRO)[1001]           RNUM3:	DO	NUMTST
    2435/DD95 : =>NOT BLANK                      IFNB   NUMTST
    2435/DD95 : EA                                DB    H(NUMTST)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 129 - 10/31/2025 04:19:39 PM


    2435/DD96 : 8D                                DB    L(NUMTST)
    2435/DD97 :                                   SHIFT
    2435/DD97 :  (MACRO-2)[1002]                  DO    
    2435/DD97 : =>BLANK                          IFNB   
    2435/DD97 :                                   DB    H()
    2435/DD97 :                                   DB    L()
    2435/DD97 :                                   SHIFT
    2435/DD97 :                                   DO    
    2435/DD97 : [2435]                           ENDIF
    2435/DD97 : [2435]                           ENDIF
    2436/DD97 : (MACRO)[1003]           	DO	FMUL11
    2436/DD97 : =>NOT BLANK                      IFNB   FMUL11
    2436/DD97 : F8                                DB    H(FMUL11)
    2436/DD98 : 45                                DB    L(FMUL11)
    2436/DD99 :                                   SHIFT
    2436/DD99 :  (MACRO-2)[1004]                  DO    
    2436/DD99 : =>BLANK                          IFNB   
    2436/DD99 :                                   DB    H()
    2436/DD99 :                                   DB    L()
    2436/DD99 :                                   SHIFT
    2436/DD99 :                                   DO    
    2436/DD99 : [2436]                           ENDIF
    2436/DD99 : [2436]                           ENDIF
    2437/DD99 : (MACRO)[1005]           RF1:	TSTVAR	RF2
    2437/DD99 : BD                               DB     H(RF2 - CALBITH)
    2437/DD9A : A2                               DB     L(RF2)
    2438/DD9B : (MACRO)[1006]           	DO	FNDVAR
    2438/DD9B : =>NOT BLANK                      IFNB   FNDVAR
    2438/DD9B : E2                                DB    H(FNDVAR)
    2438/DD9C : E1                                DB    L(FNDVAR)
    2438/DD9D :                                   SHIFT
    2438/DD9D :  (MACRO-2)[1007]                  DO    
    2438/DD9D : =>BLANK                          IFNB   
    2438/DD9D :                                   DB    H()
    2438/DD9D :                                   DB    L()
    2438/DD9D :                                   SHIFT
    2438/DD9D :                                   DO    
    2438/DD9D : [2438]                           ENDIF
    2438/DD9D : [2438]                           ENDIF
    2439/DD9D : (MACRO)[1008]           	ILCALL	RINDEX
    2439/DD9D : 1F                               DB     H(RINDEX - (JMPBITH + TSTBITH))
    2439/DD9E : 4F                               DB     L(RINDEX)
    2440/DD9F : (MACRO)[1009]           	DO	LDVAR
    2440/DD9F : =>NOT BLANK                      IFNB   LDVAR
    2440/DD9F : E8                                DB    H(LDVAR)
    2440/DDA0 : 15                                DB    L(LDVAR)
    2440/DDA1 :                                   SHIFT
    2440/DDA1 :  (MACRO-2)[1010]                  DO    
    2440/DDA1 : =>BLANK                          IFNB   
    2440/DDA1 :                                   DB    H()
    2440/DDA1 :                                   DB    L()
    2440/DDA1 :                                   SHIFT
    2440/DDA1 :                                   DO    
    2440/DDA1 : [2440]                           ENDIF
    2440/DDA1 : [2440]                           ENDIF
    2441/DDA1 : (MACRO)[1011]           	ILRTRN
    2441/DDA1 : 00                               DB     0
    2442/DDA2 :                         
    2443/DDA2 : (MACRO)[1012]           RF2:	TSTSTR	RF3,'('
    2443/DDA2 : 9D                               DB     H(RF3 - TSTBITH)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 130 - 10/31/2025 04:19:39 PM


    2443/DDA3 : AB                               DB     L(RF3)
    2443/DDA4 : 28                               DB     '('
    2444/DDA5 : (MACRO)[1013]           	ILCALL	RELSTR
    2444/DDA5 : 1C                               DB     H(RELSTR - (JMPBITH + TSTBITH))
    2444/DDA6 : 72                               DB     L(RELSTR)
    2445/DDA7 : (MACRO)[1014]           	TSTSTR	ENDPAR,')'
    2445/DDA7 : 99                               DB     H(ENDPAR - TSTBITH)
    2445/DDA8 : 2F                               DB     L(ENDPAR)
    2445/DDA9 : 29                               DB     ')'
    2446/DDAA : (MACRO)[1015]           	ILRTRN
    2446/DDAA : 00                               DB     0
    2447/DDAB :                         
    2448/DDAB : (MACRO)[1016]           RF3:	TSTSTR	RF4,T_ABS		; handle ABS(x)
    2448/DDAB : 9D                               DB     H(RF4 - TSTBITH)
    2448/DDAC : B6                               DB     L(RF4)
    2448/DDAD : AC                               DB     T_ABS
    2449/DDAE : (MACRO)[1017]           	ILCALL	SNGL
    2449/DDAE : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2449/DDAF : 70                               DB     L(SNGL)
    2450/DDB0 : (MACRO)[1018]           	DO	STACK
    2450/DDB0 : =>NOT BLANK                      IFNB   STACK
    2450/DDB0 : F2                                DB    H(STACK)
    2450/DDB1 : 8E                                DB    L(STACK)
    2450/DDB2 :                                   SHIFT
    2450/DDB2 :  (MACRO-2)[1019]                  DO    
    2450/DDB2 : =>BLANK                          IFNB   
    2450/DDB2 :                                   DB    H()
    2450/DDB2 :                                   DB    L()
    2450/DDB2 :                                   SHIFT
    2450/DDB2 :                                   DO    
    2450/DDB2 : [2450]                           ENDIF
    2450/DDB2 : [2450]                           ENDIF
    2451/DDB2 : (MACRO)[1020]           	DO	FABS
    2451/DDB2 : =>NOT BLANK                      IFNB   FABS
    2451/DDB2 : F1                                DB    H(FABS)
    2451/DDB3 : A8                                DB    L(FABS)
    2451/DDB4 :                                   SHIFT
    2451/DDB4 :  (MACRO-2)[1021]                  DO    
    2451/DDB4 : =>BLANK                          IFNB   
    2451/DDB4 :                                   DB    H()
    2451/DDB4 :                                   DB    L()
    2451/DDB4 :                                   SHIFT
    2451/DDB4 :                                   DO    
    2451/DDB4 : [2451]                           ENDIF
    2451/DDB4 : [2451]                           ENDIF
    2452/DDB4 : (MACRO)[1022]           	DO	STBCK
    2452/DDB4 : =>NOT BLANK                      IFNB   STBCK
    2452/DDB4 : E6                                DB    H(STBCK)
    2452/DDB5 : 74                                DB    L(STBCK)
    2452/DDB6 :                                   SHIFT
    2452/DDB6 :  (MACRO-2)[1023]                  DO    
    2452/DDB6 : =>BLANK                          IFNB   
    2452/DDB6 :                                   DB    H()
    2452/DDB6 :                                   DB    L()
    2452/DDB6 :                                   SHIFT
    2452/DDB6 :                                   DO    
    2452/DDB6 : [2452]                           ENDIF
    2452/DDB6 : [2452]                           ENDIF
    2453/DDB6 : (MACRO)[1024]           RF4:	TSTSTR	RF5,T_ATN		; handle ATN(x)
    2453/DDB6 : 9D                               DB     H(RF5 - TSTBITH)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 131 - 10/31/2025 04:19:39 PM


    2453/DDB7 : C1                               DB     L(RF5)
    2453/DDB8 : AD                               DB     T_ATN
    2454/DDB9 : (MACRO)[1025]           	ILCALL	SNGL
    2454/DDB9 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2454/DDBA : 70                               DB     L(SNGL)
    2455/DDBB : (MACRO)[1026]           	DO	STACK
    2455/DDBB : =>NOT BLANK                      IFNB   STACK
    2455/DDBB : F2                                DB    H(STACK)
    2455/DDBC : 8E                                DB    L(STACK)
    2455/DDBD :                                   SHIFT
    2455/DDBD :  (MACRO-2)[1027]                  DO    
    2455/DDBD : =>BLANK                          IFNB   
    2455/DDBD :                                   DB    H()
    2455/DDBD :                                   DB    L()
    2455/DDBD :                                   SHIFT
    2455/DDBD :                                   DO    
    2455/DDBD : [2455]                           ENDIF
    2455/DDBD : [2455]                           ENDIF
    2456/DDBD : (MACRO)[1028]           	DO	ATN
    2456/DDBD : =>NOT BLANK                      IFNB   ATN
    2456/DDBD : F8                                DB    H(ATN)
    2456/DDBE : AF                                DB    L(ATN)
    2456/DDBF :                                   SHIFT
    2456/DDBF :  (MACRO-2)[1029]                  DO    
    2456/DDBF : =>BLANK                          IFNB   
    2456/DDBF :                                   DB    H()
    2456/DDBF :                                   DB    L()
    2456/DDBF :                                   SHIFT
    2456/DDBF :                                   DO    
    2456/DDBF : [2456]                           ENDIF
    2456/DDBF : [2456]                           ENDIF
    2457/DDBF : (MACRO)[1030]           	DO	STBCK
    2457/DDBF : =>NOT BLANK                      IFNB   STBCK
    2457/DDBF : E6                                DB    H(STBCK)
    2457/DDC0 : 74                                DB    L(STBCK)
    2457/DDC1 :                                   SHIFT
    2457/DDC1 :  (MACRO-2)[1031]                  DO    
    2457/DDC1 : =>BLANK                          IFNB   
    2457/DDC1 :                                   DB    H()
    2457/DDC1 :                                   DB    L()
    2457/DDC1 :                                   SHIFT
    2457/DDC1 :                                   DO    
    2457/DDC1 : [2457]                           ENDIF
    2457/DDC1 : [2457]                           ENDIF
    2458/DDC1 : (MACRO)[1032]           RF5:	TSTSTR	RF6,T_COS		; handle COS(x)
    2458/DDC1 : 9D                               DB     H(RF6 - TSTBITH)
    2458/DDC2 : D0                               DB     L(RF6)
    2458/DDC3 : AE                               DB     T_COS
    2459/DDC4 : (MACRO)[1033]           	ILCALL	SNGL
    2459/DDC4 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2459/DDC5 : 70                               DB     L(SNGL)
    2460/DDC6 : (MACRO)[1034]           	DO	STACK
    2460/DDC6 : =>NOT BLANK                      IFNB   STACK
    2460/DDC6 : F2                                DB    H(STACK)
    2460/DDC7 : 8E                                DB    L(STACK)
    2460/DDC8 :                                   SHIFT
    2460/DDC8 :  (MACRO-2)[1035]                  DO    
    2460/DDC8 : =>BLANK                          IFNB   
    2460/DDC8 :                                   DB    H()
    2460/DDC8 :                                   DB    L()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 132 - 10/31/2025 04:19:39 PM


    2460/DDC8 :                                   SHIFT
    2460/DDC8 :                                   DO    
    2460/DDC8 : [2460]                           ENDIF
    2460/DDC8 : [2460]                           ENDIF
    2461/DDC8 : (MACRO)[1036]           	DO	PI2
    2461/DDC8 : =>NOT BLANK                      IFNB   PI2
    2461/DDC8 : F9                                DB    H(PI2)
    2461/DDC9 : A0                                DB    L(PI2)
    2461/DDCA :                                   SHIFT
    2461/DDCA :  (MACRO-2)[1037]                  DO    
    2461/DDCA : =>BLANK                          IFNB   
    2461/DDCA :                                   DB    H()
    2461/DDCA :                                   DB    L()
    2461/DDCA :                                   SHIFT
    2461/DDCA :                                   DO    
    2461/DDCA : [2461]                           ENDIF
    2461/DDCA : [2461]                           ENDIF
    2462/DDCA : (MACRO)[1038]           	DO	FADD
    2462/DDCA : =>NOT BLANK                      IFNB   FADD
    2462/DDCA : F1                                DB    H(FADD)
    2462/DDCB : 3C                                DB    L(FADD)
    2462/DDCC :                                   SHIFT
    2462/DDCC :  (MACRO-2)[1039]                  DO    
    2462/DDCC : =>BLANK                          IFNB   
    2462/DDCC :                                   DB    H()
    2462/DDCC :                                   DB    L()
    2462/DDCC :                                   SHIFT
    2462/DDCC :                                   DO    
    2462/DDCC : [2462]                           ENDIF
    2462/DDCC : [2462]                           ENDIF
    2463/DDCC : (MACRO)[1040]           	DO	SIN
    2463/DDCC : =>NOT BLANK                      IFNB   SIN
    2463/DDCC : F9                                DB    H(SIN)
    2463/DDCD : C2                                DB    L(SIN)
    2463/DDCE :                                   SHIFT
    2463/DDCE :  (MACRO-2)[1041]                  DO    
    2463/DDCE : =>BLANK                          IFNB   
    2463/DDCE :                                   DB    H()
    2463/DDCE :                                   DB    L()
    2463/DDCE :                                   SHIFT
    2463/DDCE :                                   DO    
    2463/DDCE : [2463]                           ENDIF
    2463/DDCE : [2463]                           ENDIF
    2464/DDCE : (MACRO)[1042]           	DO	STBCK
    2464/DDCE : =>NOT BLANK                      IFNB   STBCK
    2464/DDCE : E6                                DB    H(STBCK)
    2464/DDCF : 74                                DB    L(STBCK)
    2464/DDD0 :                                   SHIFT
    2464/DDD0 :  (MACRO-2)[1043]                  DO    
    2464/DDD0 : =>BLANK                          IFNB   
    2464/DDD0 :                                   DB    H()
    2464/DDD0 :                                   DB    L()
    2464/DDD0 :                                   SHIFT
    2464/DDD0 :                                   DO    
    2464/DDD0 : [2464]                           ENDIF
    2464/DDD0 : [2464]                           ENDIF
    2465/DDD0 : (MACRO)[1044]           RF6:	TSTSTR	RF7,T_EXP		; handle EXP(x)
    2465/DDD0 : 9D                               DB     H(RF7 - TSTBITH)
    2465/DDD1 : DF                               DB     L(RF7)
    2465/DDD2 : AF                               DB     T_EXP
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 133 - 10/31/2025 04:19:39 PM


    2466/DDD3 : (MACRO)[1045]           	ILCALL	SNGL
    2466/DDD3 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2466/DDD4 : 70                               DB     L(SNGL)
    2467/DDD5 : (MACRO)[1046]           	DO	STACK
    2467/DDD5 : =>NOT BLANK                      IFNB   STACK
    2467/DDD5 : F2                                DB    H(STACK)
    2467/DDD6 : 8E                                DB    L(STACK)
    2467/DDD7 :                                   SHIFT
    2467/DDD7 :  (MACRO-2)[1047]                  DO    
    2467/DDD7 : =>BLANK                          IFNB   
    2467/DDD7 :                                   DB    H()
    2467/DDD7 :                                   DB    L()
    2467/DDD7 :                                   SHIFT
    2467/DDD7 :                                   DO    
    2467/DDD7 : [2467]                           ENDIF
    2467/DDD7 : [2467]                           ENDIF
    2468/DDD7 : (MACRO)[1048]           	DO	LN2
    2468/DDD7 : =>NOT BLANK                      IFNB   LN2
    2468/DDD7 : F4                                DB    H(LN2)
    2468/DDD8 : C6                                DB    L(LN2)
    2468/DDD9 :                                   SHIFT
    2468/DDD9 :  (MACRO-2)[1049]                  DO    
    2468/DDD9 : =>BLANK                          IFNB   
    2468/DDD9 :                                   DB    H()
    2468/DDD9 :                                   DB    L()
    2468/DDD9 :                                   SHIFT
    2468/DDD9 :                                   DO    
    2468/DDD9 : [2468]                           ENDIF
    2468/DDD9 : [2468]                           ENDIF
    2469/DDD9 : (MACRO)[1050]           	DO	FDIV
    2469/DDD9 : =>NOT BLANK                      IFNB   FDIV
    2469/DDD9 : F0                                DB    H(FDIV)
    2469/DDDA : 78                                DB    L(FDIV)
    2469/DDDB :                                   SHIFT
    2469/DDDB :  (MACRO-2)[1051]                  DO    
    2469/DDDB : =>BLANK                          IFNB   
    2469/DDDB :                                   DB    H()
    2469/DDDB :                                   DB    L()
    2469/DDDB :                                   SHIFT
    2469/DDDB :                                   DO    
    2469/DDDB : [2469]                           ENDIF
    2469/DDDB : [2469]                           ENDIF
    2470/DDDB : (MACRO)[1052]           	DO	EXP2
    2470/DDDB : =>NOT BLANK                      IFNB   EXP2
    2470/DDDB : F5                                DB    H(EXP2)
    2470/DDDC : 98                                DB    L(EXP2)
    2470/DDDD :                                   SHIFT
    2470/DDDD :  (MACRO-2)[1053]                  DO    
    2470/DDDD : =>BLANK                          IFNB   
    2470/DDDD :                                   DB    H()
    2470/DDDD :                                   DB    L()
    2470/DDDD :                                   SHIFT
    2470/DDDD :                                   DO    
    2470/DDDD : [2470]                           ENDIF
    2470/DDDD : [2470]                           ENDIF
    2471/DDDD : (MACRO)[1054]           	DO	STBCK
    2471/DDDD : =>NOT BLANK                      IFNB   STBCK
    2471/DDDD : E6                                DB    H(STBCK)
    2471/DDDE : 74                                DB    L(STBCK)
    2471/DDDF :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 134 - 10/31/2025 04:19:39 PM


    2471/DDDF :  (MACRO-2)[1055]                  DO    
    2471/DDDF : =>BLANK                          IFNB   
    2471/DDDF :                                   DB    H()
    2471/DDDF :                                   DB    L()
    2471/DDDF :                                   SHIFT
    2471/DDDF :                                   DO    
    2471/DDDF : [2471]                           ENDIF
    2471/DDDF : [2471]                           ENDIF
    2472/DDDF : (MACRO)[1056]           RF7:	TSTSTR	RF8,T_FN		; handle FN
    2472/DDDF : 9E                               DB     H(RF8 - TSTBITH)
    2472/DDE0 : 2F                               DB     L(RF8)
    2472/DDE1 : B0                               DB     T_FN
    2473/DDE2 : (MACRO)[1057]           	TSTVAR	SYNTAX
    2473/DDE2 : B9                               DB     H(SYNTAX - CALBITH)
    2473/DDE3 : 42                               DB     L(SYNTAX)
    2474/DDE4 : (MACRO)[1058]           	DO	FNDDEF
    2474/DDE4 : =>NOT BLANK                      IFNB   FNDDEF
    2474/DDE4 : FD                                DB    H(FNDDEF)
    2474/DDE5 : F3                                DB    L(FNDDEF)
    2474/DDE6 :                                   SHIFT
    2474/DDE6 :  (MACRO-2)[1059]                  DO    
    2474/DDE6 : =>BLANK                          IFNB   
    2474/DDE6 :                                   DB    H()
    2474/DDE6 :                                   DB    L()
    2474/DDE6 :                                   SHIFT
    2474/DDE6 :                                   DO    
    2474/DDE6 : [2474]                           ENDIF
    2474/DDE6 : [2474]                           ENDIF
    2475/DDE6 : (MACRO)[1060]           	TSTSTR	FN6,'('
    2475/DDE6 : 9E                               DB     H(FN6 - TSTBITH)
    2475/DDE7 : 24                               DB     L(FN6)
    2475/DDE8 : 28                               DB     '('
    2476/DDE9 : (MACRO)[1061]           	DO	XCHPNT
    2476/DDE9 : =>NOT BLANK                      IFNB   XCHPNT
    2476/DDE9 : E9                                DB    H(XCHPNT)
    2476/DDEA : 1E                                DB    L(XCHPNT)
    2476/DDEB :                                   SHIFT
    2476/DDEB :  (MACRO-2)[1062]                  DO    
    2476/DDEB : =>BLANK                          IFNB   
    2476/DDEB :                                   DB    H()
    2476/DDEB :                                   DB    L()
    2476/DDEB :                                   SHIFT
    2476/DDEB :                                   DO    
    2476/DDEB : [2476]                           ENDIF
    2476/DDEB : [2476]                           ENDIF
    2477/DDEB : (MACRO)[1063]           	TSTSTR	SYNTAX,'('
    2477/DDEB : 99                               DB     H(SYNTAX - TSTBITH)
    2477/DDEC : 42                               DB     L(SYNTAX)
    2477/DDED : 28                               DB     '('
    2478/DDEE : (MACRO)[1064]           FN1:	DO	XCHPNT
    2478/DDEE : =>NOT BLANK                      IFNB   XCHPNT
    2478/DDEE : E9                                DB    H(XCHPNT)
    2478/DDEF : 1E                                DB    L(XCHPNT)
    2478/DDF0 :                                   SHIFT
    2478/DDF0 :  (MACRO-2)[1065]                  DO    
    2478/DDF0 : =>BLANK                          IFNB   
    2478/DDF0 :                                   DB    H()
    2478/DDF0 :                                   DB    L()
    2478/DDF0 :                                   SHIFT
    2478/DDF0 :                                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 135 - 10/31/2025 04:19:39 PM


    2478/DDF0 : [2478]                           ENDIF
    2478/DDF0 : [2478]                           ENDIF
    2479/DDF0 : (MACRO)[1066]           	TSTVAR	FN7
    2479/DDF0 : BE                               DB     H(FN7 - CALBITH)
    2479/DDF1 : 2D                               DB     L(FN7)
    2480/DDF2 : (MACRO)[1067]           	DO	FNDVAR
    2480/DDF2 : =>NOT BLANK                      IFNB   FNDVAR
    2480/DDF2 : E2                                DB    H(FNDVAR)
    2480/DDF3 : E1                                DB    L(FNDVAR)
    2480/DDF4 :                                   SHIFT
    2480/DDF4 :  (MACRO-2)[1068]                  DO    
    2480/DDF4 : =>BLANK                          IFNB   
    2480/DDF4 :                                   DB    H()
    2480/DDF4 :                                   DB    L()
    2480/DDF4 :                                   SHIFT
    2480/DDF4 :                                   DO    
    2480/DDF4 : [2480]                           ENDIF
    2480/DDF4 : [2480]                           ENDIF
    2481/DDF4 : (MACRO)[1069]           	DO	DEFVAR
    2481/DDF4 : =>NOT BLANK                      IFNB   DEFVAR
    2481/DDF4 : E5                                DB    H(DEFVAR)
    2481/DDF5 : 0E                                DB    L(DEFVAR)
    2481/DDF6 :                                   SHIFT
    2481/DDF6 :  (MACRO-2)[1070]                  DO    
    2481/DDF6 : =>BLANK                          IFNB   
    2481/DDF6 :                                   DB    H()
    2481/DDF6 :                                   DB    L()
    2481/DDF6 :                                   SHIFT
    2481/DDF6 :                                   DO    
    2481/DDF6 : [2481]                           ENDIF
    2481/DDF6 : [2481]                           ENDIF
    2482/DDF6 : (MACRO)[1071]           	TSTSTR	FN4,'('
    2482/DDF6 : 9E                               DB     H(FN4 - TSTBITH)
    2482/DDF7 : 0D                               DB     L(FN4)
    2482/DDF8 : 28                               DB     '('
    2483/DDF9 : (MACRO)[1072]           	ILCALL	INDEX
    2483/DDF9 : 1F                               DB     H(INDEX - (JMPBITH + TSTBITH))
    2483/DDFA : 51                               DB     L(INDEX)
    2484/DDFB : (MACRO)[1073]           FN2:	DO	XCHPNT
    2484/DDFB : =>NOT BLANK                      IFNB   XCHPNT
    2484/DDFB : E9                                DB    H(XCHPNT)
    2484/DDFC : 1E                                DB    L(XCHPNT)
    2484/DDFD :                                   SHIFT
    2484/DDFD :  (MACRO-2)[1074]                  DO    
    2484/DDFD : =>BLANK                          IFNB   
    2484/DDFD :                                   DB    H()
    2484/DDFD :                                   DB    L()
    2484/DDFD :                                   SHIFT
    2484/DDFD :                                   DO    
    2484/DDFD : [2484]                           ENDIF
    2484/DDFD : [2484]                           ENDIF
    2485/DDFD : (MACRO)[1075]           	ILCALL	REXPR
    2485/DDFD : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2485/DDFE : C6                               DB     L(REXPR)
    2486/DDFF : (MACRO)[1076]           	DO	STVAR
    2486/DDFF : =>NOT BLANK                      IFNB   STVAR
    2486/DDFF : E7                                DB    H(STVAR)
    2486/DE00 : 8A                                DB    L(STVAR)
    2486/DE01 :                                   SHIFT
    2486/DE01 :  (MACRO-2)[1077]                  DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 136 - 10/31/2025 04:19:39 PM


    2486/DE01 : =>BLANK                          IFNB   
    2486/DE01 :                                   DB    H()
    2486/DE01 :                                   DB    L()
    2486/DE01 :                                   SHIFT
    2486/DE01 :                                   DO    
    2486/DE01 : [2486]                           ENDIF
    2486/DE01 : [2486]                           ENDIF
    2487/DE01 : (MACRO)[1078]           FN3:	DO	XCHPNT
    2487/DE01 : =>NOT BLANK                      IFNB   XCHPNT
    2487/DE01 : E9                                DB    H(XCHPNT)
    2487/DE02 : 1E                                DB    L(XCHPNT)
    2487/DE03 :                                   SHIFT
    2487/DE03 :  (MACRO-2)[1079]                  DO    
    2487/DE03 : =>BLANK                          IFNB   
    2487/DE03 :                                   DB    H()
    2487/DE03 :                                   DB    L()
    2487/DE03 :                                   SHIFT
    2487/DE03 :                                   DO    
    2487/DE03 : [2487]                           ENDIF
    2487/DE03 : [2487]                           ENDIF
    2488/DE03 : (MACRO)[1080]           	TSTSTR	FN5,','
    2488/DE03 : 9E                               DB     H(FN5 - TSTBITH)
    2488/DE04 : 1A                               DB     L(FN5)
    2488/DE05 : 2C                               DB     ','
    2489/DE06 : (MACRO)[1081]           	DO	XCHPNT
    2489/DE06 : =>NOT BLANK                      IFNB   XCHPNT
    2489/DE06 : E9                                DB    H(XCHPNT)
    2489/DE07 : 1E                                DB    L(XCHPNT)
    2489/DE08 :                                   SHIFT
    2489/DE08 :  (MACRO-2)[1082]                  DO    
    2489/DE08 : =>BLANK                          IFNB   
    2489/DE08 :                                   DB    H()
    2489/DE08 :                                   DB    L()
    2489/DE08 :                                   SHIFT
    2489/DE08 :                                   DO    
    2489/DE08 : [2489]                           ENDIF
    2489/DE08 : [2489]                           ENDIF
    2490/DE08 : (MACRO)[1083]           	TSTSTR	SYNTAX,','
    2490/DE08 : 99                               DB     H(SYNTAX - TSTBITH)
    2490/DE09 : 42                               DB     L(SYNTAX)
    2490/DE0A : 2C                               DB     ','
    2491/DE0B : (MACRO)[1084]           	GOTO	FN1
    2491/DE0B : 5D                               DB     H(FN1 - JMPBITH)
    2491/DE0C : EE                               DB     L(FN1)
    2492/DE0D : (MACRO)[1085]           FN4:	TSTSTR	FN2,'$'
    2492/DE0D : 9D                               DB     H(FN2 - TSTBITH)
    2492/DE0E : FB                               DB     L(FN2)
    2492/DE0F : 24                               DB     '$'
    2493/DE10 : (MACRO)[1086]           	DO	LDVAR
    2493/DE10 : =>NOT BLANK                      IFNB   LDVAR
    2493/DE10 : E8                                DB    H(LDVAR)
    2493/DE11 : 15                                DB    L(LDVAR)
    2493/DE12 :                                   SHIFT
    2493/DE12 :  (MACRO-2)[1087]                  DO    
    2493/DE12 : =>BLANK                          IFNB   
    2493/DE12 :                                   DB    H()
    2493/DE12 :                                   DB    L()
    2493/DE12 :                                   SHIFT
    2493/DE12 :                                   DO    
    2493/DE12 : [2493]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 137 - 10/31/2025 04:19:39 PM


    2493/DE12 : [2493]                           ENDIF
    2494/DE12 : (MACRO)[1088]           	DO	FIX
    2494/DE12 : =>NOT BLANK                      IFNB   FIX
    2494/DE12 : EB                                DB    H(FIX)
    2494/DE13 : 2F                                DB    L(FIX)
    2494/DE14 :                                   SHIFT
    2494/DE14 :  (MACRO-2)[1089]                  DO    
    2494/DE14 : =>BLANK                          IFNB   
    2494/DE14 :                                   DB    H()
    2494/DE14 :                                   DB    L()
    2494/DE14 :                                   SHIFT
    2494/DE14 :                                   DO    
    2494/DE14 : [2494]                           ENDIF
    2494/DE14 : [2494]                           ENDIF
    2495/DE14 : (MACRO)[1090]           	DO	XCHPNT
    2495/DE14 : =>NOT BLANK                      IFNB   XCHPNT
    2495/DE14 : E9                                DB    H(XCHPNT)
    2495/DE15 : 1E                                DB    L(XCHPNT)
    2495/DE16 :                                   SHIFT
    2495/DE16 :  (MACRO-2)[1091]                  DO    
    2495/DE16 : =>BLANK                          IFNB   
    2495/DE16 :                                   DB    H()
    2495/DE16 :                                   DB    L()
    2495/DE16 :                                   SHIFT
    2495/DE16 :                                   DO    
    2495/DE16 : [2495]                           ENDIF
    2495/DE16 : [2495]                           ENDIF
    2496/DE16 : (MACRO)[1092]           	ILCALL	STREXP
    2496/DE16 : 1B                               DB     H(STREXP - (JMPBITH + TSTBITH))
    2496/DE17 : 92                               DB     L(STREXP)
    2497/DE18 : (MACRO)[1093]           	GOTO	FN3
    2497/DE18 : 5E                               DB     H(FN3 - JMPBITH)
    2497/DE19 : 01                               DB     L(FN3)
    2498/DE1A : (MACRO)[1094]           FN5:	DO	XCHPNT
    2498/DE1A : =>NOT BLANK                      IFNB   XCHPNT
    2498/DE1A : E9                                DB    H(XCHPNT)
    2498/DE1B : 1E                                DB    L(XCHPNT)
    2498/DE1C :                                   SHIFT
    2498/DE1C :  (MACRO-2)[1095]                  DO    
    2498/DE1C : =>BLANK                          IFNB   
    2498/DE1C :                                   DB    H()
    2498/DE1C :                                   DB    L()
    2498/DE1C :                                   SHIFT
    2498/DE1C :                                   DO    
    2498/DE1C : [2498]                           ENDIF
    2498/DE1C : [2498]                           ENDIF
    2499/DE1C : (MACRO)[1096]           	TSTSTR	ENDPAR,')'
    2499/DE1C : 99                               DB     H(ENDPAR - TSTBITH)
    2499/DE1D : 2F                               DB     L(ENDPAR)
    2499/DE1E : 29                               DB     ')'
    2500/DE1F : (MACRO)[1097]           	DO	XCHPNT
    2500/DE1F : =>NOT BLANK                      IFNB   XCHPNT
    2500/DE1F : E9                                DB    H(XCHPNT)
    2500/DE20 : 1E                                DB    L(XCHPNT)
    2500/DE21 :                                   SHIFT
    2500/DE21 :  (MACRO-2)[1098]                  DO    
    2500/DE21 : =>BLANK                          IFNB   
    2500/DE21 :                                   DB    H()
    2500/DE21 :                                   DB    L()
    2500/DE21 :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 138 - 10/31/2025 04:19:39 PM


    2500/DE21 :                                   DO    
    2500/DE21 : [2500]                           ENDIF
    2500/DE21 : [2500]                           ENDIF
    2501/DE21 : (MACRO)[1099]           	TSTSTR	FN7,')'
    2501/DE21 : 9E                               DB     H(FN7 - TSTBITH)
    2501/DE22 : 2D                               DB     L(FN7)
    2501/DE23 : 29                               DB     ')'
    2502/DE24 : (MACRO)[1100]           FN6:	TSTSTR	FN7,'='
    2502/DE24 : 9E                               DB     H(FN7 - TSTBITH)
    2502/DE25 : 2D                               DB     L(FN7)
    2502/DE26 : 3D                               DB     '='
    2503/DE27 : (MACRO)[1101]           	DO	FNT
    2503/DE27 : =>NOT BLANK                      IFNB   FNT
    2503/DE27 : FE                                DB    H(FNT)
    2503/DE28 : 5D                                DB    L(FNT)
    2503/DE29 :                                   SHIFT
    2503/DE29 :  (MACRO-2)[1102]                  DO    
    2503/DE29 : =>BLANK                          IFNB   
    2503/DE29 :                                   DB    H()
    2503/DE29 :                                   DB    L()
    2503/DE29 :                                   SHIFT
    2503/DE29 :                                   DO    
    2503/DE29 : [2503]                           ENDIF
    2503/DE29 : [2503]                           ENDIF
    2504/DE29 : (MACRO)[1103]           	ILCALL	REXPR
    2504/DE29 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2504/DE2A : C6                               DB     L(REXPR)
    2505/DE2B : (MACRO)[1104]           	DO	FNDNE
    2505/DE2B : =>NOT BLANK                      IFNB   FNDNE
    2505/DE2B : FE                                DB    H(FNDNE)
    2505/DE2C : 6F                                DB    L(FNDNE)
    2505/DE2D :                                   SHIFT
    2505/DE2D :  (MACRO-2)[1105]                  DO    
    2505/DE2D : =>BLANK                          IFNB   
    2505/DE2D :                                   DB    H()
    2505/DE2D :                                   DB    L()
    2505/DE2D :                                   SHIFT
    2505/DE2D :                                   DO    
    2505/DE2D : [2505]                           ENDIF
    2505/DE2D : [2505]                           ENDIF
    2506/DE2D : (MACRO)[1106]           FN7:	DO	FNERR
    2506/DE2D : =>NOT BLANK                      IFNB   FNERR
    2506/DE2D : FE                                DB    H(FNERR)
    2506/DE2E : 35                                DB    L(FNERR)
    2506/DE2F :                                   SHIFT
    2506/DE2F :  (MACRO-2)[1107]                  DO    
    2506/DE2F : =>BLANK                          IFNB   
    2506/DE2F :                                   DB    H()
    2506/DE2F :                                   DB    L()
    2506/DE2F :                                   SHIFT
    2506/DE2F :                                   DO    
    2506/DE2F : [2506]                           ENDIF
    2506/DE2F : [2506]                           ENDIF
    2507/DE2F : (MACRO)[1108]           RF8:	TSTSTR	RF9,T_INT		; handle INT(x)
    2507/DE2F : 9E                               DB     H(RF9 - TSTBITH)
    2507/DE30 : 3A                               DB     L(RF9)
    2507/DE31 : B1                               DB     T_INT
    2508/DE32 : (MACRO)[1109]           	ILCALL	SNGL
    2508/DE32 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2508/DE33 : 70                               DB     L(SNGL)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 139 - 10/31/2025 04:19:39 PM


    2509/DE34 : (MACRO)[1110]           	DO	STACK
    2509/DE34 : =>NOT BLANK                      IFNB   STACK
    2509/DE34 : F2                                DB    H(STACK)
    2509/DE35 : 8E                                DB    L(STACK)
    2509/DE36 :                                   SHIFT
    2509/DE36 :  (MACRO-2)[1111]                  DO    
    2509/DE36 : =>BLANK                          IFNB   
    2509/DE36 :                                   DB    H()
    2509/DE36 :                                   DB    L()
    2509/DE36 :                                   SHIFT
    2509/DE36 :                                   DO    
    2509/DE36 : [2509]                           ENDIF
    2509/DE36 : [2509]                           ENDIF
    2510/DE36 : (MACRO)[1112]           	DO	INT
    2510/DE36 : =>NOT BLANK                      IFNB   INT
    2510/DE36 : F2                                DB    H(INT)
    2510/DE37 : 02                                DB    L(INT)
    2510/DE38 :                                   SHIFT
    2510/DE38 :  (MACRO-2)[1113]                  DO    
    2510/DE38 : =>BLANK                          IFNB   
    2510/DE38 :                                   DB    H()
    2510/DE38 :                                   DB    L()
    2510/DE38 :                                   SHIFT
    2510/DE38 :                                   DO    
    2510/DE38 : [2510]                           ENDIF
    2510/DE38 : [2510]                           ENDIF
    2511/DE38 : (MACRO)[1114]           	DO	STBCK
    2511/DE38 : =>NOT BLANK                      IFNB   STBCK
    2511/DE38 : E6                                DB    H(STBCK)
    2511/DE39 : 74                                DB    L(STBCK)
    2511/DE3A :                                   SHIFT
    2511/DE3A :  (MACRO-2)[1115]                  DO    
    2511/DE3A : =>BLANK                          IFNB   
    2511/DE3A :                                   DB    H()
    2511/DE3A :                                   DB    L()
    2511/DE3A :                                   SHIFT
    2511/DE3A :                                   DO    
    2511/DE3A : [2511]                           ENDIF
    2511/DE3A : [2511]                           ENDIF
    2512/DE3A : (MACRO)[1116]           RF9:	TSTSTR	RF10,T_LB		; handle LB(x)
    2512/DE3A : 9E                               DB     H(RF10 - TSTBITH)
    2512/DE3B : 45                               DB     L(RF10)
    2512/DE3C : B2                               DB     T_LB
    2513/DE3D : (MACRO)[1117]           	ILCALL	SNGL
    2513/DE3D : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2513/DE3E : 70                               DB     L(SNGL)
    2514/DE3F : (MACRO)[1118]           	DO	STACK
    2514/DE3F : =>NOT BLANK                      IFNB   STACK
    2514/DE3F : F2                                DB    H(STACK)
    2514/DE40 : 8E                                DB    L(STACK)
    2514/DE41 :                                   SHIFT
    2514/DE41 :  (MACRO-2)[1119]                  DO    
    2514/DE41 : =>BLANK                          IFNB   
    2514/DE41 :                                   DB    H()
    2514/DE41 :                                   DB    L()
    2514/DE41 :                                   SHIFT
    2514/DE41 :                                   DO    
    2514/DE41 : [2514]                           ENDIF
    2514/DE41 : [2514]                           ENDIF
    2515/DE41 : (MACRO)[1120]           	DO	LOG2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 140 - 10/31/2025 04:19:39 PM


    2515/DE41 : =>NOT BLANK                      IFNB   LOG2
    2515/DE41 : F4                                DB    H(LOG2)
    2515/DE42 : D8                                DB    L(LOG2)
    2515/DE43 :                                   SHIFT
    2515/DE43 :  (MACRO-2)[1121]                  DO    
    2515/DE43 : =>BLANK                          IFNB   
    2515/DE43 :                                   DB    H()
    2515/DE43 :                                   DB    L()
    2515/DE43 :                                   SHIFT
    2515/DE43 :                                   DO    
    2515/DE43 : [2515]                           ENDIF
    2515/DE43 : [2515]                           ENDIF
    2516/DE43 : (MACRO)[1122]           	DO	STBCK
    2516/DE43 : =>NOT BLANK                      IFNB   STBCK
    2516/DE43 : E6                                DB    H(STBCK)
    2516/DE44 : 74                                DB    L(STBCK)
    2516/DE45 :                                   SHIFT
    2516/DE45 :  (MACRO-2)[1123]                  DO    
    2516/DE45 : =>BLANK                          IFNB   
    2516/DE45 :                                   DB    H()
    2516/DE45 :                                   DB    L()
    2516/DE45 :                                   SHIFT
    2516/DE45 :                                   DO    
    2516/DE45 : [2516]                           ENDIF
    2516/DE45 : [2516]                           ENDIF
    2517/DE45 : (MACRO)[1124]           RF10:	TSTSTR	RF11,T_LG		; handle LG(x)
    2517/DE45 : 9E                               DB     H(RF11 - TSTBITH)
    2517/DE46 : 54                               DB     L(RF11)
    2517/DE47 : B3                               DB     T_LG
    2518/DE48 : (MACRO)[1125]           	ILCALL	SNGL
    2518/DE48 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2518/DE49 : 70                               DB     L(SNGL)
    2519/DE4A : (MACRO)[1126]           	DO	STACK
    2519/DE4A : =>NOT BLANK                      IFNB   STACK
    2519/DE4A : F2                                DB    H(STACK)
    2519/DE4B : 8E                                DB    L(STACK)
    2519/DE4C :                                   SHIFT
    2519/DE4C :  (MACRO-2)[1127]                  DO    
    2519/DE4C : =>BLANK                          IFNB   
    2519/DE4C :                                   DB    H()
    2519/DE4C :                                   DB    L()
    2519/DE4C :                                   SHIFT
    2519/DE4C :                                   DO    
    2519/DE4C : [2519]                           ENDIF
    2519/DE4C : [2519]                           ENDIF
    2520/DE4C : (MACRO)[1128]           	DO	LOG2
    2520/DE4C : =>NOT BLANK                      IFNB   LOG2
    2520/DE4C : F4                                DB    H(LOG2)
    2520/DE4D : D8                                DB    L(LOG2)
    2520/DE4E :                                   SHIFT
    2520/DE4E :  (MACRO-2)[1129]                  DO    
    2520/DE4E : =>BLANK                          IFNB   
    2520/DE4E :                                   DB    H()
    2520/DE4E :                                   DB    L()
    2520/DE4E :                                   SHIFT
    2520/DE4E :                                   DO    
    2520/DE4E : [2520]                           ENDIF
    2520/DE4E : [2520]                           ENDIF
    2521/DE4E : (MACRO)[1130]           	DO	LG2
    2521/DE4E : =>NOT BLANK                      IFNB   LG2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 141 - 10/31/2025 04:19:39 PM


    2521/DE4E : F4                                DB    H(LG2)
    2521/DE4F : B6                                DB    L(LG2)
    2521/DE50 :                                   SHIFT
    2521/DE50 :  (MACRO-2)[1131]                  DO    
    2521/DE50 : =>BLANK                          IFNB   
    2521/DE50 :                                   DB    H()
    2521/DE50 :                                   DB    L()
    2521/DE50 :                                   SHIFT
    2521/DE50 :                                   DO    
    2521/DE50 : [2521]                           ENDIF
    2521/DE50 : [2521]                           ENDIF
    2522/DE50 : (MACRO)[1132]           	DO	FMUL
    2522/DE50 : =>NOT BLANK                      IFNB   FMUL
    2522/DE50 : F0                                DB    H(FMUL)
    2522/DE51 : E3                                DB    L(FMUL)
    2522/DE52 :                                   SHIFT
    2522/DE52 :  (MACRO-2)[1133]                  DO    
    2522/DE52 : =>BLANK                          IFNB   
    2522/DE52 :                                   DB    H()
    2522/DE52 :                                   DB    L()
    2522/DE52 :                                   SHIFT
    2522/DE52 :                                   DO    
    2522/DE52 : [2522]                           ENDIF
    2522/DE52 : [2522]                           ENDIF
    2523/DE52 : (MACRO)[1134]           	DO	STBCK
    2523/DE52 : =>NOT BLANK                      IFNB   STBCK
    2523/DE52 : E6                                DB    H(STBCK)
    2523/DE53 : 74                                DB    L(STBCK)
    2523/DE54 :                                   SHIFT
    2523/DE54 :  (MACRO-2)[1135]                  DO    
    2523/DE54 : =>BLANK                          IFNB   
    2523/DE54 :                                   DB    H()
    2523/DE54 :                                   DB    L()
    2523/DE54 :                                   SHIFT
    2523/DE54 :                                   DO    
    2523/DE54 : [2523]                           ENDIF
    2523/DE54 : [2523]                           ENDIF
    2524/DE54 : (MACRO)[1136]           RF11:	TSTSTR	RF12,T_LN		; handle LN(x)
    2524/DE54 : 9E                               DB     H(RF12 - TSTBITH)
    2524/DE55 : 63                               DB     L(RF12)
    2524/DE56 : B4                               DB     T_LN
    2525/DE57 : (MACRO)[1137]           	ILCALL	SNGL
    2525/DE57 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2525/DE58 : 70                               DB     L(SNGL)
    2526/DE59 : (MACRO)[1138]           	DO	STACK
    2526/DE59 : =>NOT BLANK                      IFNB   STACK
    2526/DE59 : F2                                DB    H(STACK)
    2526/DE5A : 8E                                DB    L(STACK)
    2526/DE5B :                                   SHIFT
    2526/DE5B :  (MACRO-2)[1139]                  DO    
    2526/DE5B : =>BLANK                          IFNB   
    2526/DE5B :                                   DB    H()
    2526/DE5B :                                   DB    L()
    2526/DE5B :                                   SHIFT
    2526/DE5B :                                   DO    
    2526/DE5B : [2526]                           ENDIF
    2526/DE5B : [2526]                           ENDIF
    2527/DE5B : (MACRO)[1140]           	DO	LOG2
    2527/DE5B : =>NOT BLANK                      IFNB   LOG2
    2527/DE5B : F4                                DB    H(LOG2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 142 - 10/31/2025 04:19:39 PM


    2527/DE5C : D8                                DB    L(LOG2)
    2527/DE5D :                                   SHIFT
    2527/DE5D :  (MACRO-2)[1141]                  DO    
    2527/DE5D : =>BLANK                          IFNB   
    2527/DE5D :                                   DB    H()
    2527/DE5D :                                   DB    L()
    2527/DE5D :                                   SHIFT
    2527/DE5D :                                   DO    
    2527/DE5D : [2527]                           ENDIF
    2527/DE5D : [2527]                           ENDIF
    2528/DE5D : (MACRO)[1142]           	DO	LN2
    2528/DE5D : =>NOT BLANK                      IFNB   LN2
    2528/DE5D : F4                                DB    H(LN2)
    2528/DE5E : C6                                DB    L(LN2)
    2528/DE5F :                                   SHIFT
    2528/DE5F :  (MACRO-2)[1143]                  DO    
    2528/DE5F : =>BLANK                          IFNB   
    2528/DE5F :                                   DB    H()
    2528/DE5F :                                   DB    L()
    2528/DE5F :                                   SHIFT
    2528/DE5F :                                   DO    
    2528/DE5F : [2528]                           ENDIF
    2528/DE5F : [2528]                           ENDIF
    2529/DE5F : (MACRO)[1144]           	DO	FMUL
    2529/DE5F : =>NOT BLANK                      IFNB   FMUL
    2529/DE5F : F0                                DB    H(FMUL)
    2529/DE60 : E3                                DB    L(FMUL)
    2529/DE61 :                                   SHIFT
    2529/DE61 :  (MACRO-2)[1145]                  DO    
    2529/DE61 : =>BLANK                          IFNB   
    2529/DE61 :                                   DB    H()
    2529/DE61 :                                   DB    L()
    2529/DE61 :                                   SHIFT
    2529/DE61 :                                   DO    
    2529/DE61 : [2529]                           ENDIF
    2529/DE61 : [2529]                           ENDIF
    2530/DE61 : (MACRO)[1146]           	DO	STBCK
    2530/DE61 : =>NOT BLANK                      IFNB   STBCK
    2530/DE61 : E6                                DB    H(STBCK)
    2530/DE62 : 74                                DB    L(STBCK)
    2530/DE63 :                                   SHIFT
    2530/DE63 :  (MACRO-2)[1147]                  DO    
    2530/DE63 : =>BLANK                          IFNB   
    2530/DE63 :                                   DB    H()
    2530/DE63 :                                   DB    L()
    2530/DE63 :                                   SHIFT
    2530/DE63 :                                   DO    
    2530/DE63 : [2530]                           ENDIF
    2530/DE63 : [2530]                           ENDIF
    2531/DE63 : (MACRO)[1148]           RF12:	TSTSTR	RF13,T_NOT		; handle ! (not)
    2531/DE63 : 9E                               DB     H(RF13 - TSTBITH)
    2531/DE64 : 6E                               DB     L(RF13)
    2531/DE65 : B5                               DB     T_NOT
    2532/DE66 : (MACRO)[1149]           	ILCALL	RFACTR
    2532/DE66 : 1D                               DB     H(RFACTR - (JMPBITH + TSTBITH))
    2532/DE67 : 79                               DB     L(RFACTR)
    2533/DE68 : (MACRO)[1150]           	DO	STACK
    2533/DE68 : =>NOT BLANK                      IFNB   STACK
    2533/DE68 : F2                                DB    H(STACK)
    2533/DE69 : 8E                                DB    L(STACK)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 143 - 10/31/2025 04:19:39 PM


    2533/DE6A :                                   SHIFT
    2533/DE6A :  (MACRO-2)[1151]                  DO    
    2533/DE6A : =>BLANK                          IFNB   
    2533/DE6A :                                   DB    H()
    2533/DE6A :                                   DB    L()
    2533/DE6A :                                   SHIFT
    2533/DE6A :                                   DO    
    2533/DE6A : [2533]                           ENDIF
    2533/DE6A : [2533]                           ENDIF
    2534/DE6A : (MACRO)[1152]           	DO	NOT
    2534/DE6A : =>NOT BLANK                      IFNB   NOT
    2534/DE6A : F1                                DB    H(NOT)
    2534/DE6B : 82                                DB    L(NOT)
    2534/DE6C :                                   SHIFT
    2534/DE6C :  (MACRO-2)[1153]                  DO    
    2534/DE6C : =>BLANK                          IFNB   
    2534/DE6C :                                   DB    H()
    2534/DE6C :                                   DB    L()
    2534/DE6C :                                   SHIFT
    2534/DE6C :                                   DO    
    2534/DE6C : [2534]                           ENDIF
    2534/DE6C : [2534]                           ENDIF
    2535/DE6C : (MACRO)[1154]           	DO	STBCK
    2535/DE6C : =>NOT BLANK                      IFNB   STBCK
    2535/DE6C : E6                                DB    H(STBCK)
    2535/DE6D : 74                                DB    L(STBCK)
    2535/DE6E :                                   SHIFT
    2535/DE6E :  (MACRO-2)[1155]                  DO    
    2535/DE6E : =>BLANK                          IFNB   
    2535/DE6E :                                   DB    H()
    2535/DE6E :                                   DB    L()
    2535/DE6E :                                   SHIFT
    2535/DE6E :                                   DO    
    2535/DE6E : [2535]                           ENDIF
    2535/DE6E : [2535]                           ENDIF
    2536/DE6E : (MACRO)[1156]           RF13:	TSTSTR	RF14,T_PI
    2536/DE6E : 9E                               DB     H(RF14 - TSTBITH)
    2536/DE6F : 73                               DB     L(RF14)
    2536/DE70 : B6                               DB     T_PI
    2537/DE71 : (MACRO)[1157]           	DO	PI
    2537/DE71 : =>NOT BLANK                      IFNB   PI
    2537/DE71 : FA                                DB    H(PI)
    2537/DE72 : A0                                DB    L(PI)
    2537/DE73 :                                   SHIFT
    2537/DE73 :  (MACRO-2)[1158]                  DO    
    2537/DE73 : =>BLANK                          IFNB   
    2537/DE73 :                                   DB    H()
    2537/DE73 :                                   DB    L()
    2537/DE73 :                                   SHIFT
    2537/DE73 :                                   DO    
    2537/DE73 : [2537]                           ENDIF
    2537/DE73 : [2537]                           ENDIF
    2538/DE73 : (MACRO)[1159]           RF14:	TSTSTR	RF15,T_RND		; handle RND(x)
    2538/DE73 : 9E                               DB     H(RF15 - TSTBITH)
    2538/DE74 : 7E                               DB     L(RF15)
    2538/DE75 : B7                               DB     T_RND
    2539/DE76 : (MACRO)[1160]           	DO	STACK
    2539/DE76 : =>NOT BLANK                      IFNB   STACK
    2539/DE76 : F2                                DB    H(STACK)
    2539/DE77 : 8E                                DB    L(STACK)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 144 - 10/31/2025 04:19:39 PM


    2539/DE78 :                                   SHIFT
    2539/DE78 :  (MACRO-2)[1161]                  DO    
    2539/DE78 : =>BLANK                          IFNB   
    2539/DE78 :                                   DB    H()
    2539/DE78 :                                   DB    L()
    2539/DE78 :                                   SHIFT
    2539/DE78 :                                   DO    
    2539/DE78 : [2539]                           ENDIF
    2539/DE78 : [2539]                           ENDIF
    2540/DE78 : (MACRO)[1162]           	DO	RND
    2540/DE78 : =>NOT BLANK                      IFNB   RND
    2540/DE78 : FA                                DB    H(RND)
    2540/DE79 : CC                                DB    L(RND)
    2540/DE7A :                                   SHIFT
    2540/DE7A :  (MACRO-2)[1163]                  DO    
    2540/DE7A : =>BLANK                          IFNB   
    2540/DE7A :                                   DB    H()
    2540/DE7A :                                   DB    L()
    2540/DE7A :                                   SHIFT
    2540/DE7A :                                   DO    
    2540/DE7A : [2540]                           ENDIF
    2540/DE7A : [2540]                           ENDIF
    2541/DE7A : (MACRO)[1164]           	DO	NORM
    2541/DE7A : =>NOT BLANK                      IFNB   NORM
    2541/DE7A : F1                                DB    H(NORM)
    2541/DE7B : C4                                DB    L(NORM)
    2541/DE7C :                                   SHIFT
    2541/DE7C :  (MACRO-2)[1165]                  DO    
    2541/DE7C : =>BLANK                          IFNB   
    2541/DE7C :                                   DB    H()
    2541/DE7C :                                   DB    L()
    2541/DE7C :                                   SHIFT
    2541/DE7C :                                   DO    
    2541/DE7C : [2541]                           ENDIF
    2541/DE7C : [2541]                           ENDIF
    2542/DE7C : (MACRO)[1166]           	DO	STBCK
    2542/DE7C : =>NOT BLANK                      IFNB   STBCK
    2542/DE7C : E6                                DB    H(STBCK)
    2542/DE7D : 74                                DB    L(STBCK)
    2542/DE7E :                                   SHIFT
    2542/DE7E :  (MACRO-2)[1167]                  DO    
    2542/DE7E : =>BLANK                          IFNB   
    2542/DE7E :                                   DB    H()
    2542/DE7E :                                   DB    L()
    2542/DE7E :                                   SHIFT
    2542/DE7E :                                   DO    
    2542/DE7E : [2542]                           ENDIF
    2542/DE7E : [2542]                           ENDIF
    2543/DE7E : (MACRO)[1168]           RF15:	TSTSTR	RF16,T_SGN		; handle SGN(x)
    2543/DE7E : 9E                               DB     H(RF16 - TSTBITH)
    2543/DE7F : 85                               DB     L(RF16)
    2543/DE80 : B8                               DB     T_SGN
    2544/DE81 : (MACRO)[1169]           	ILCALL	SNGL
    2544/DE81 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2544/DE82 : 70                               DB     L(SNGL)
    2545/DE83 : (MACRO)[1170]           	DO	SGN
    2545/DE83 : =>NOT BLANK                      IFNB   SGN
    2545/DE83 : FB                                DB    H(SGN)
    2545/DE84 : 20                                DB    L(SGN)
    2545/DE85 :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 145 - 10/31/2025 04:19:39 PM


    2545/DE85 :  (MACRO-2)[1171]                  DO    
    2545/DE85 : =>BLANK                          IFNB   
    2545/DE85 :                                   DB    H()
    2545/DE85 :                                   DB    L()
    2545/DE85 :                                   SHIFT
    2545/DE85 :                                   DO    
    2545/DE85 : [2545]                           ENDIF
    2545/DE85 : [2545]                           ENDIF
    2546/DE85 : (MACRO)[1172]           RF16:	TSTSTR	RF17,T_SIN		; handle SIN(x)
    2546/DE85 : 9E                               DB     H(RF17 - TSTBITH)
    2546/DE86 : 90                               DB     L(RF17)
    2546/DE87 : B9                               DB     T_SIN
    2547/DE88 : (MACRO)[1173]           	ILCALL	SNGL
    2547/DE88 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2547/DE89 : 70                               DB     L(SNGL)
    2548/DE8A : (MACRO)[1174]           	DO	STACK
    2548/DE8A : =>NOT BLANK                      IFNB   STACK
    2548/DE8A : F2                                DB    H(STACK)
    2548/DE8B : 8E                                DB    L(STACK)
    2548/DE8C :                                   SHIFT
    2548/DE8C :  (MACRO-2)[1175]                  DO    
    2548/DE8C : =>BLANK                          IFNB   
    2548/DE8C :                                   DB    H()
    2548/DE8C :                                   DB    L()
    2548/DE8C :                                   SHIFT
    2548/DE8C :                                   DO    
    2548/DE8C : [2548]                           ENDIF
    2548/DE8C : [2548]                           ENDIF
    2549/DE8C : (MACRO)[1176]           	DO	SIN
    2549/DE8C : =>NOT BLANK                      IFNB   SIN
    2549/DE8C : F9                                DB    H(SIN)
    2549/DE8D : C2                                DB    L(SIN)
    2549/DE8E :                                   SHIFT
    2549/DE8E :  (MACRO-2)[1177]                  DO    
    2549/DE8E : =>BLANK                          IFNB   
    2549/DE8E :                                   DB    H()
    2549/DE8E :                                   DB    L()
    2549/DE8E :                                   SHIFT
    2549/DE8E :                                   DO    
    2549/DE8E : [2549]                           ENDIF
    2549/DE8E : [2549]                           ENDIF
    2550/DE8E : (MACRO)[1178]           	DO	STBCK
    2550/DE8E : =>NOT BLANK                      IFNB   STBCK
    2550/DE8E : E6                                DB    H(STBCK)
    2550/DE8F : 74                                DB    L(STBCK)
    2550/DE90 :                                   SHIFT
    2550/DE90 :  (MACRO-2)[1179]                  DO    
    2550/DE90 : =>BLANK                          IFNB   
    2550/DE90 :                                   DB    H()
    2550/DE90 :                                   DB    L()
    2550/DE90 :                                   SHIFT
    2550/DE90 :                                   DO    
    2550/DE90 : [2550]                           ENDIF
    2550/DE90 : [2550]                           ENDIF
    2551/DE90 : (MACRO)[1180]           RF17:	TSTSTR	RF18,T_SQR		; handle SQR(x)
    2551/DE90 : 9E                               DB     H(RF18 - TSTBITH)
    2551/DE91 : 9B                               DB     L(RF18)
    2551/DE92 : BA                               DB     T_SQR
    2552/DE93 : (MACRO)[1181]           	ILCALL	SNGL
    2552/DE93 : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 146 - 10/31/2025 04:19:39 PM


    2552/DE94 : 70                               DB     L(SNGL)
    2553/DE95 : (MACRO)[1182]           	DO	STACK
    2553/DE95 : =>NOT BLANK                      IFNB   STACK
    2553/DE95 : F2                                DB    H(STACK)
    2553/DE96 : 8E                                DB    L(STACK)
    2553/DE97 :                                   SHIFT
    2553/DE97 :  (MACRO-2)[1183]                  DO    
    2553/DE97 : =>BLANK                          IFNB   
    2553/DE97 :                                   DB    H()
    2553/DE97 :                                   DB    L()
    2553/DE97 :                                   SHIFT
    2553/DE97 :                                   DO    
    2553/DE97 : [2553]                           ENDIF
    2553/DE97 : [2553]                           ENDIF
    2554/DE97 : (MACRO)[1184]           	DO	SQRT
    2554/DE97 : =>NOT BLANK                      IFNB   SQRT
    2554/DE97 : FB                                DB    H(SQRT)
    2554/DE98 : 43                                DB    L(SQRT)
    2554/DE99 :                                   SHIFT
    2554/DE99 :  (MACRO-2)[1185]                  DO    
    2554/DE99 : =>BLANK                          IFNB   
    2554/DE99 :                                   DB    H()
    2554/DE99 :                                   DB    L()
    2554/DE99 :                                   SHIFT
    2554/DE99 :                                   DO    
    2554/DE99 : [2554]                           ENDIF
    2554/DE99 : [2554]                           ENDIF
    2555/DE99 : (MACRO)[1186]           	DO	STBCK
    2555/DE99 : =>NOT BLANK                      IFNB   STBCK
    2555/DE99 : E6                                DB    H(STBCK)
    2555/DE9A : 74                                DB    L(STBCK)
    2555/DE9B :                                   SHIFT
    2555/DE9B :  (MACRO-2)[1187]                  DO    
    2555/DE9B : =>BLANK                          IFNB   
    2555/DE9B :                                   DB    H()
    2555/DE9B :                                   DB    L()
    2555/DE9B :                                   SHIFT
    2555/DE9B :                                   DO    
    2555/DE9B : [2555]                           ENDIF
    2555/DE9B : [2555]                           ENDIF
    2556/DE9B : (MACRO)[1188]           RF18:	TSTSTR	RF19,T_TAN		; handle TAN(x)
    2556/DE9B : 9E                               DB     H(RF19 - TSTBITH)
    2556/DE9C : B0                               DB     L(RF19)
    2556/DE9D : BB                               DB     T_TAN
    2557/DE9E : (MACRO)[1189]           	ILCALL	SNGL
    2557/DE9E : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2557/DE9F : 70                               DB     L(SNGL)
    2558/DEA0 : (MACRO)[1190]           	DO	STACK
    2558/DEA0 : =>NOT BLANK                      IFNB   STACK
    2558/DEA0 : F2                                DB    H(STACK)
    2558/DEA1 : 8E                                DB    L(STACK)
    2558/DEA2 :                                   SHIFT
    2558/DEA2 :  (MACRO-2)[1191]                  DO    
    2558/DEA2 : =>BLANK                          IFNB   
    2558/DEA2 :                                   DB    H()
    2558/DEA2 :                                   DB    L()
    2558/DEA2 :                                   SHIFT
    2558/DEA2 :                                   DO    
    2558/DEA2 : [2558]                           ENDIF
    2558/DEA2 : [2558]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 147 - 10/31/2025 04:19:39 PM


    2559/DEA2 : (MACRO)[1192]           	DO	TAN
    2559/DEA2 : =>NOT BLANK                      IFNB   TAN
    2559/DEA2 : F9                                DB    H(TAN)
    2559/DEA3 : B2                                DB    L(TAN)
    2559/DEA4 :                                   SHIFT
    2559/DEA4 :  (MACRO-2)[1193]                  DO    
    2559/DEA4 : =>BLANK                          IFNB   
    2559/DEA4 :                                   DB    H()
    2559/DEA4 :                                   DB    L()
    2559/DEA4 :                                   SHIFT
    2559/DEA4 :                                   DO    
    2559/DEA4 : [2559]                           ENDIF
    2559/DEA4 : [2559]                           ENDIF
    2560/DEA4 : (MACRO)[1194]           	DO	SWAP
    2560/DEA4 : =>NOT BLANK                      IFNB   SWAP
    2560/DEA4 : F0                                DB    H(SWAP)
    2560/DEA5 : 35                                DB    L(SWAP)
    2560/DEA6 :                                   SHIFT
    2560/DEA6 :  (MACRO-2)[1195]                  DO    
    2560/DEA6 : =>BLANK                          IFNB   
    2560/DEA6 :                                   DB    H()
    2560/DEA6 :                                   DB    L()
    2560/DEA6 :                                   SHIFT
    2560/DEA6 :                                   DO    
    2560/DEA6 : [2560]                           ENDIF
    2560/DEA6 : [2560]                           ENDIF
    2561/DEA6 : (MACRO)[1196]           	DO	PI2
    2561/DEA6 : =>NOT BLANK                      IFNB   PI2
    2561/DEA6 : F9                                DB    H(PI2)
    2561/DEA7 : A0                                DB    L(PI2)
    2561/DEA8 :                                   SHIFT
    2561/DEA8 :  (MACRO-2)[1197]                  DO    
    2561/DEA8 : =>BLANK                          IFNB   
    2561/DEA8 :                                   DB    H()
    2561/DEA8 :                                   DB    L()
    2561/DEA8 :                                   SHIFT
    2561/DEA8 :                                   DO    
    2561/DEA8 : [2561]                           ENDIF
    2561/DEA8 : [2561]                           ENDIF
    2562/DEA8 : (MACRO)[1198]           	DO	FADD
    2562/DEA8 : =>NOT BLANK                      IFNB   FADD
    2562/DEA8 : F1                                DB    H(FADD)
    2562/DEA9 : 3C                                DB    L(FADD)
    2562/DEAA :                                   SHIFT
    2562/DEAA :  (MACRO-2)[1199]                  DO    
    2562/DEAA : =>BLANK                          IFNB   
    2562/DEAA :                                   DB    H()
    2562/DEAA :                                   DB    L()
    2562/DEAA :                                   SHIFT
    2562/DEAA :                                   DO    
    2562/DEAA : [2562]                           ENDIF
    2562/DEAA : [2562]                           ENDIF
    2563/DEAA : (MACRO)[1200]           	DO	SIN
    2563/DEAA : =>NOT BLANK                      IFNB   SIN
    2563/DEAA : F9                                DB    H(SIN)
    2563/DEAB : C2                                DB    L(SIN)
    2563/DEAC :                                   SHIFT
    2563/DEAC :  (MACRO-2)[1201]                  DO    
    2563/DEAC : =>BLANK                          IFNB   
    2563/DEAC :                                   DB    H()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 148 - 10/31/2025 04:19:39 PM


    2563/DEAC :                                   DB    L()
    2563/DEAC :                                   SHIFT
    2563/DEAC :                                   DO    
    2563/DEAC : [2563]                           ENDIF
    2563/DEAC : [2563]                           ENDIF
    2564/DEAC : (MACRO)[1202]           	DO	FDIV
    2564/DEAC : =>NOT BLANK                      IFNB   FDIV
    2564/DEAC : F0                                DB    H(FDIV)
    2564/DEAD : 78                                DB    L(FDIV)
    2564/DEAE :                                   SHIFT
    2564/DEAE :  (MACRO-2)[1203]                  DO    
    2564/DEAE : =>BLANK                          IFNB   
    2564/DEAE :                                   DB    H()
    2564/DEAE :                                   DB    L()
    2564/DEAE :                                   SHIFT
    2564/DEAE :                                   DO    
    2564/DEAE : [2564]                           ENDIF
    2564/DEAE : [2564]                           ENDIF
    2565/DEAE : (MACRO)[1204]           	DO	STBCK
    2565/DEAE : =>NOT BLANK                      IFNB   STBCK
    2565/DEAE : E6                                DB    H(STBCK)
    2565/DEAF : 74                                DB    L(STBCK)
    2565/DEB0 :                                   SHIFT
    2565/DEB0 :  (MACRO-2)[1205]                  DO    
    2565/DEB0 : =>BLANK                          IFNB   
    2565/DEB0 :                                   DB    H()
    2565/DEB0 :                                   DB    L()
    2565/DEB0 :                                   SHIFT
    2565/DEB0 :                                   DO    
    2565/DEB0 : [2565]                           ENDIF
    2565/DEB0 : [2565]                           ENDIF
    2566/DEB0 : (MACRO)[1206]           RF19:	TSTSTR	RF21,T_VAL		; handle VAL(x$)
    2566/DEB0 : 9E                               DB     H(RF21 - TSTBITH)
    2566/DEB1 : D5                               DB     L(RF21)
    2566/DEB2 : BC                               DB     T_VAL
    2567/DEB3 : (MACRO)[1207]           	TSTSTR	SYNTAX,'('
    2567/DEB3 : 99                               DB     H(SYNTAX - TSTBITH)
    2567/DEB4 : 42                               DB     L(SYNTAX)
    2567/DEB5 : 28                               DB     '('
    2568/DEB6 : (MACRO)[1208]           	TSTVAR	SYNTAX
    2568/DEB6 : B9                               DB     H(SYNTAX - CALBITH)
    2568/DEB7 : 42                               DB     L(SYNTAX)
    2569/DEB8 : (MACRO)[1209]           	DO	FNDVAR
    2569/DEB8 : =>NOT BLANK                      IFNB   FNDVAR
    2569/DEB8 : E2                                DB    H(FNDVAR)
    2569/DEB9 : E1                                DB    L(FNDVAR)
    2569/DEBA :                                   SHIFT
    2569/DEBA :  (MACRO-2)[1210]                  DO    
    2569/DEBA : =>BLANK                          IFNB   
    2569/DEBA :                                   DB    H()
    2569/DEBA :                                   DB    L()
    2569/DEBA :                                   SHIFT
    2569/DEBA :                                   DO    
    2569/DEBA : [2569]                           ENDIF
    2569/DEBA : [2569]                           ENDIF
    2570/DEBA : (MACRO)[1211]           	DO	CKDLLR
    2570/DEBA : =>NOT BLANK                      IFNB   CKDLLR
    2570/DEBA : EE                                DB    H(CKDLLR)
    2570/DEBB : 7F                                DB    L(CKDLLR)
    2570/DEBC :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 149 - 10/31/2025 04:19:39 PM


    2570/DEBC :  (MACRO-2)[1212]                  DO    
    2570/DEBC : =>BLANK                          IFNB   
    2570/DEBC :                                   DB    H()
    2570/DEBC :                                   DB    L()
    2570/DEBC :                                   SHIFT
    2570/DEBC :                                   DO    
    2570/DEBC : [2570]                           ENDIF
    2570/DEBC : [2570]                           ENDIF
    2571/DEBC : (MACRO)[1213]           	DO	LDVAR
    2571/DEBC : =>NOT BLANK                      IFNB   LDVAR
    2571/DEBC : E8                                DB    H(LDVAR)
    2571/DEBD : 15                                DB    L(LDVAR)
    2571/DEBE :                                   SHIFT
    2571/DEBE :  (MACRO-2)[1214]                  DO    
    2571/DEBE : =>BLANK                          IFNB   
    2571/DEBE :                                   DB    H()
    2571/DEBE :                                   DB    L()
    2571/DEBE :                                   SHIFT
    2571/DEBE :                                   DO    
    2571/DEBE : [2571]                           ENDIF
    2571/DEBE : [2571]                           ENDIF
    2572/DEBE : (MACRO)[1215]           	DO	FIX
    2572/DEBE : =>NOT BLANK                      IFNB   FIX
    2572/DEBE : EB                                DB    H(FIX)
    2572/DEBF : 2F                                DB    L(FIX)
    2572/DEC0 :                                   SHIFT
    2572/DEC0 :  (MACRO-2)[1216]                  DO    
    2572/DEC0 : =>BLANK                          IFNB   
    2572/DEC0 :                                   DB    H()
    2572/DEC0 :                                   DB    L()
    2572/DEC0 :                                   SHIFT
    2572/DEC0 :                                   DO    
    2572/DEC0 : [2572]                           ENDIF
    2572/DEC0 : [2572]                           ENDIF
    2573/DEC0 : (MACRO)[1217]           	DO	VALSTR
    2573/DEC0 : =>NOT BLANK                      IFNB   VALSTR
    2573/DEC0 : FB                                DB    H(VALSTR)
    2573/DEC1 : BB                                DB    L(VALSTR)
    2573/DEC2 :                                   SHIFT
    2573/DEC2 :  (MACRO-2)[1218]                  DO    
    2573/DEC2 : =>BLANK                          IFNB   
    2573/DEC2 :                                   DB    H()
    2573/DEC2 :                                   DB    L()
    2573/DEC2 :                                   SHIFT
    2573/DEC2 :                                   DO    
    2573/DEC2 : [2573]                           ENDIF
    2573/DEC2 : [2573]                           ENDIF
    2574/DEC2 : (MACRO)[1219]           	TSTSTR	RF20,'-'
    2574/DEC2 : 9E                               DB     H(RF20 - TSTBITH)
    2574/DEC3 : CE                               DB     L(RF20)
    2574/DEC4 : 2D                               DB     '-'
    2575/DEC5 : (MACRO)[1220]           	TSTNUM	SYNTAX
    2575/DEC5 : D9                               DB     H(SYNTAX)
    2575/DEC6 : 42                               DB     L(SYNTAX)
    2576/DEC7 : (MACRO)[1221]           	ILCALL	RNUM
    2576/DEC7 : 1D                               DB     H(RNUM - (JMPBITH + TSTBITH))
    2576/DEC8 : 7B                               DB     L(RNUM)
    2577/DEC9 : (MACRO)[1222]           	ILCALL	NEG
    2577/DEC9 : 1A                               DB     H(NEG - (JMPBITH + TSTBITH))
    2577/DECA : E7                               DB     L(NEG)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 150 - 10/31/2025 04:19:39 PM


    2578/DECB : (MACRO)[1223]           	DO	XCHPNT
    2578/DECB : =>NOT BLANK                      IFNB   XCHPNT
    2578/DECB : E9                                DB    H(XCHPNT)
    2578/DECC : 1E                                DB    L(XCHPNT)
    2578/DECD :                                   SHIFT
    2578/DECD :  (MACRO-2)[1224]                  DO    
    2578/DECD : =>BLANK                          IFNB   
    2578/DECD :                                   DB    H()
    2578/DECD :                                   DB    L()
    2578/DECD :                                   SHIFT
    2578/DECD :                                   DO    
    2578/DECD : [2578]                           ENDIF
    2578/DECD : [2578]                           ENDIF
    2579/DECD : (MACRO)[1225]           	ILRTRN
    2579/DECD : 00                               DB     0
    2580/DECE : (MACRO)[1226]           RF20:	TSTNUM	SYNTAX
    2580/DECE : D9                               DB     H(SYNTAX)
    2580/DECF : 42                               DB     L(SYNTAX)
    2581/DED0 : (MACRO)[1227]           	ILCALL	RNUM
    2581/DED0 : 1D                               DB     H(RNUM - (JMPBITH + TSTBITH))
    2581/DED1 : 7B                               DB     L(RNUM)
    2582/DED2 : (MACRO)[1228]           	DO	XCHPNT
    2582/DED2 : =>NOT BLANK                      IFNB   XCHPNT
    2582/DED2 : E9                                DB    H(XCHPNT)
    2582/DED3 : 1E                                DB    L(XCHPNT)
    2582/DED4 :                                   SHIFT
    2582/DED4 :  (MACRO-2)[1229]                  DO    
    2582/DED4 : =>BLANK                          IFNB   
    2582/DED4 :                                   DB    H()
    2582/DED4 :                                   DB    L()
    2582/DED4 :                                   SHIFT
    2582/DED4 :                                   DO    
    2582/DED4 : [2582]                           ENDIF
    2582/DED4 : [2582]                           ENDIF
    2583/DED4 : (MACRO)[1230]           	ILRTRN
    2583/DED4 : 00                               DB     0
    2584/DED5 :                         
    2585/DED5 : (MACRO)[1231]           RF21:	ILCALL	FACTOR
    2585/DED5 : 1E                               DB     H(FACTOR - (JMPBITH + TSTBITH))
    2585/DED6 : D9                               DB     L(FACTOR)
    2586/DED7 : (MACRO)[1232]           	DO	FLOAT2
    2586/DED7 : =>NOT BLANK                      IFNB   FLOAT2
    2586/DED7 : FB                                DB    H(FLOAT2)
    2586/DED8 : D2                                DB    L(FLOAT2)
    2586/DED9 :                                   SHIFT
    2586/DED9 :  (MACRO-2)[1233]                  DO    
    2586/DED9 : =>BLANK                          IFNB   
    2586/DED9 :                                   DB    H()
    2586/DED9 :                                   DB    L()
    2586/DED9 :                                   SHIFT
    2586/DED9 :                                   DO    
    2586/DED9 : [2586]                           ENDIF
    2586/DED9 : [2586]                           ENDIF
    2587/DED9 : (MACRO)[1234]           FACTOR:	TSTSTR	FCTR1,'#'
    2587/DED9 : 9E                               DB     H(FCTR1 - TSTBITH)
    2587/DEDA : DE                               DB     L(FCTR1)
    2587/DEDB : 23                               DB     '#'
    2588/DEDC : (MACRO)[1235]           	DO	HEX
    2588/DEDC : =>NOT BLANK                      IFNB   HEX
    2588/DEDC : EE                                DB    H(HEX)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 151 - 10/31/2025 04:19:39 PM


    2588/DEDD : FA                                DB    L(HEX)
    2588/DEDE :                                   SHIFT
    2588/DEDE :  (MACRO-2)[1236]                  DO    
    2588/DEDE : =>BLANK                          IFNB   
    2588/DEDE :                                   DB    H()
    2588/DEDE :                                   DB    L()
    2588/DEDE :                                   SHIFT
    2588/DEDE :                                   DO    
    2588/DEDE : [2588]                           ENDIF
    2588/DEDE : [2588]                           ENDIF
    2589/DEDE : (MACRO)[1237]           FCTR1:	TSTSTR	FCTR3,T_ASC		; handle ASC(str)..
    2589/DEDE : 9E                               DB     H(FCTR3 - TSTBITH)
    2589/DEDF : F5                               DB     L(FCTR3)
    2589/DEE0 : BD                               DB     T_ASC
    2590/DEE1 : (MACRO)[1238]           	TSTSTR	SYNTAX,'('
    2590/DEE1 : 99                               DB     H(SYNTAX - TSTBITH)
    2590/DEE2 : 42                               DB     L(SYNTAX)
    2590/DEE3 : 28                               DB     '('
    2591/DEE4 : (MACRO)[1239]           	TSTSTR	FCTR2,'"'
    2591/DEE4 : 9E                               DB     H(FCTR2 - TSTBITH)
    2591/DEE5 : E9                               DB     L(FCTR2)
    2591/DEE6 : 22                               DB     '"'
    2592/DEE7 : (MACRO)[1240]           	DO	ASC			; ..for quoted string
    2592/DEE7 : =>NOT BLANK                      IFNB   ASC
    2592/DEE7 : EE                                DB    H(ASC)
    2592/DEE8 : 04                                DB    L(ASC)
    2592/DEE9 :                                   SHIFT
    2592/DEE9 :  (MACRO-2)[1241]                  DO    
    2592/DEE9 : =>BLANK                          IFNB   
    2592/DEE9 :                                   DB    H()
    2592/DEE9 :                                   DB    L()
    2592/DEE9 :                                   SHIFT
    2592/DEE9 :                                   DO    
    2592/DEE9 : [2592]                           ENDIF
    2592/DEE9 : [2592]                           ENDIF
    2593/DEE9 : (MACRO)[1242]           FCTR2:	TSTVAR	SYNTAX
    2593/DEE9 : B9                               DB     H(SYNTAX - CALBITH)
    2593/DEEA : 42                               DB     L(SYNTAX)
    2594/DEEB : (MACRO)[1243]           	DO	FNDVAR
    2594/DEEB : =>NOT BLANK                      IFNB   FNDVAR
    2594/DEEB : E2                                DB    H(FNDVAR)
    2594/DEEC : E1                                DB    L(FNDVAR)
    2594/DEED :                                   SHIFT
    2594/DEED :  (MACRO-2)[1244]                  DO    
    2594/DEED : =>BLANK                          IFNB   
    2594/DEED :                                   DB    H()
    2594/DEED :                                   DB    L()
    2594/DEED :                                   SHIFT
    2594/DEED :                                   DO    
    2594/DEED : [2594]                           ENDIF
    2594/DEED : [2594]                           ENDIF
    2595/DEED : (MACRO)[1245]           	DO	CKDLLR
    2595/DEED : =>NOT BLANK                      IFNB   CKDLLR
    2595/DEED : EE                                DB    H(CKDLLR)
    2595/DEEE : 7F                                DB    L(CKDLLR)
    2595/DEEF :                                   SHIFT
    2595/DEEF :  (MACRO-2)[1246]                  DO    
    2595/DEEF : =>BLANK                          IFNB   
    2595/DEEF :                                   DB    H()
    2595/DEEF :                                   DB    L()
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 152 - 10/31/2025 04:19:39 PM


    2595/DEEF :                                   SHIFT
    2595/DEEF :                                   DO    
    2595/DEEF : [2595]                           ENDIF
    2595/DEEF : [2595]                           ENDIF
    2596/DEEF : (MACRO)[1247]           	DO	LDVAR
    2596/DEEF : =>NOT BLANK                      IFNB   LDVAR
    2596/DEEF : E8                                DB    H(LDVAR)
    2596/DEF0 : 15                                DB    L(LDVAR)
    2596/DEF1 :                                   SHIFT
    2596/DEF1 :  (MACRO-2)[1248]                  DO    
    2596/DEF1 : =>BLANK                          IFNB   
    2596/DEF1 :                                   DB    H()
    2596/DEF1 :                                   DB    L()
    2596/DEF1 :                                   SHIFT
    2596/DEF1 :                                   DO    
    2596/DEF1 : [2596]                           ENDIF
    2596/DEF1 : [2596]                           ENDIF
    2597/DEF1 : (MACRO)[1249]           	DO	FIX
    2597/DEF1 : =>NOT BLANK                      IFNB   FIX
    2597/DEF1 : EB                                DB    H(FIX)
    2597/DEF2 : 2F                                DB    L(FIX)
    2597/DEF3 :                                   SHIFT
    2597/DEF3 :  (MACRO-2)[1250]                  DO    
    2597/DEF3 : =>BLANK                          IFNB   
    2597/DEF3 :                                   DB    H()
    2597/DEF3 :                                   DB    L()
    2597/DEF3 :                                   SHIFT
    2597/DEF3 :                                   DO    
    2597/DEF3 : [2597]                           ENDIF
    2597/DEF3 : [2597]                           ENDIF
    2598/DEF3 : (MACRO)[1251]           	DO	ASTRNG			; ..for string variable
    2598/DEF3 : =>NOT BLANK                      IFNB   ASTRNG
    2598/DEF3 : EE                                DB    H(ASTRNG)
    2598/DEF4 : 1F                                DB    L(ASTRNG)
    2598/DEF5 :                                   SHIFT
    2598/DEF5 :  (MACRO-2)[1252]                  DO    
    2598/DEF5 : =>BLANK                          IFNB   
    2598/DEF5 :                                   DB    H()
    2598/DEF5 :                                   DB    L()
    2598/DEF5 :                                   SHIFT
    2598/DEF5 :                                   DO    
    2598/DEF5 : [2598]                           ENDIF
    2598/DEF5 : [2598]                           ENDIF
    2599/DEF5 : (MACRO)[1253]           FCTR3:	TSTSTR	FCTR4,T_FREE		; handle FREE
    2599/DEF5 : 9E                               DB     H(FCTR4 - TSTBITH)
    2599/DEF6 : FC                               DB     L(FCTR4)
    2599/DEF7 : BE                               DB     T_FREE
    2600/DEF8 : (MACRO)[1254]           	DO	TOP
    2600/DEF8 : =>NOT BLANK                      IFNB   TOP
    2600/DEF8 : EE                                DB    H(TOP)
    2600/DEF9 : A3                                DB    L(TOP)
    2600/DEFA :                                   SHIFT
    2600/DEFA :  (MACRO-2)[1255]                  DO    
    2600/DEFA : =>BLANK                          IFNB   
    2600/DEFA :                                   DB    H()
    2600/DEFA :                                   DB    L()
    2600/DEFA :                                   SHIFT
    2600/DEFA :                                   DO    
    2600/DEFA : [2600]                           ENDIF
    2600/DEFA : [2600]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 153 - 10/31/2025 04:19:39 PM


    2601/DEFA : (MACRO)[1256]           	DO	FREE
    2601/DEFA : =>NOT BLANK                      IFNB   FREE
    2601/DEFA : EE                                DB    H(FREE)
    2601/DEFB : D7                                DB    L(FREE)
    2601/DEFC :                                   SHIFT
    2601/DEFC :  (MACRO-2)[1257]                  DO    
    2601/DEFC : =>BLANK                          IFNB   
    2601/DEFC :                                   DB    H()
    2601/DEFC :                                   DB    L()
    2601/DEFC :                                   SHIFT
    2601/DEFC :                                   DO    
    2601/DEFC : [2601]                           ENDIF
    2601/DEFC : [2601]                           ENDIF
    2602/DEFC : (MACRO)[1258]           FCTR4:	TSTSTR	FCTR6,T_LEN		; handle LEN(x)..
    2602/DEFC : 9F                               DB     H(FCTR6 - TSTBITH)
    2602/DEFD : 13                               DB     L(FCTR6)
    2602/DEFE : BF                               DB     T_LEN
    2603/DEFF : (MACRO)[1259]           	TSTSTR	SYNTAX,'('
    2603/DEFF : 99                               DB     H(SYNTAX - TSTBITH)
    2603/DF00 : 42                               DB     L(SYNTAX)
    2603/DF01 : 28                               DB     '('
    2604/DF02 : (MACRO)[1260]           	TSTSTR	FCTR5,'"'
    2604/DF02 : 9F                               DB     H(FCTR5 - TSTBITH)
    2604/DF03 : 07                               DB     L(FCTR5)
    2604/DF04 : 22                               DB     '"'
    2605/DF05 : (MACRO)[1261]           	DO	LEN			; ..for quoted string
    2605/DF05 : =>NOT BLANK                      IFNB   LEN
    2605/DF05 : EE                                DB    H(LEN)
    2605/DF06 : 57                                DB    L(LEN)
    2605/DF07 :                                   SHIFT
    2605/DF07 :  (MACRO-2)[1262]                  DO    
    2605/DF07 : =>BLANK                          IFNB   
    2605/DF07 :                                   DB    H()
    2605/DF07 :                                   DB    L()
    2605/DF07 :                                   SHIFT
    2605/DF07 :                                   DO    
    2605/DF07 : [2605]                           ENDIF
    2605/DF07 : [2605]                           ENDIF
    2606/DF07 : (MACRO)[1263]           FCTR5:	TSTVAR	SYNTAX
    2606/DF07 : B9                               DB     H(SYNTAX - CALBITH)
    2606/DF08 : 42                               DB     L(SYNTAX)
    2607/DF09 : (MACRO)[1264]           	DO	FNDVAR
    2607/DF09 : =>NOT BLANK                      IFNB   FNDVAR
    2607/DF09 : E2                                DB    H(FNDVAR)
    2607/DF0A : E1                                DB    L(FNDVAR)
    2607/DF0B :                                   SHIFT
    2607/DF0B :  (MACRO-2)[1265]                  DO    
    2607/DF0B : =>BLANK                          IFNB   
    2607/DF0B :                                   DB    H()
    2607/DF0B :                                   DB    L()
    2607/DF0B :                                   SHIFT
    2607/DF0B :                                   DO    
    2607/DF0B : [2607]                           ENDIF
    2607/DF0B : [2607]                           ENDIF
    2608/DF0B : (MACRO)[1266]           	DO	CKDLLR
    2608/DF0B : =>NOT BLANK                      IFNB   CKDLLR
    2608/DF0B : EE                                DB    H(CKDLLR)
    2608/DF0C : 7F                                DB    L(CKDLLR)
    2608/DF0D :                                   SHIFT
    2608/DF0D :  (MACRO-2)[1267]                  DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 154 - 10/31/2025 04:19:39 PM


    2608/DF0D : =>BLANK                          IFNB   
    2608/DF0D :                                   DB    H()
    2608/DF0D :                                   DB    L()
    2608/DF0D :                                   SHIFT
    2608/DF0D :                                   DO    
    2608/DF0D : [2608]                           ENDIF
    2608/DF0D : [2608]                           ENDIF
    2609/DF0D : (MACRO)[1268]           	DO	LDVAR
    2609/DF0D : =>NOT BLANK                      IFNB   LDVAR
    2609/DF0D : E8                                DB    H(LDVAR)
    2609/DF0E : 15                                DB    L(LDVAR)
    2609/DF0F :                                   SHIFT
    2609/DF0F :  (MACRO-2)[1269]                  DO    
    2609/DF0F : =>BLANK                          IFNB   
    2609/DF0F :                                   DB    H()
    2609/DF0F :                                   DB    L()
    2609/DF0F :                                   SHIFT
    2609/DF0F :                                   DO    
    2609/DF0F : [2609]                           ENDIF
    2609/DF0F : [2609]                           ENDIF
    2610/DF0F : (MACRO)[1270]           	DO	FIX
    2610/DF0F : =>NOT BLANK                      IFNB   FIX
    2610/DF0F : EB                                DB    H(FIX)
    2610/DF10 : 2F                                DB    L(FIX)
    2610/DF11 :                                   SHIFT
    2610/DF11 :  (MACRO-2)[1271]                  DO    
    2610/DF11 : =>BLANK                          IFNB   
    2610/DF11 :                                   DB    H()
    2610/DF11 :                                   DB    L()
    2610/DF11 :                                   SHIFT
    2610/DF11 :                                   DO    
    2610/DF11 : [2610]                           ENDIF
    2610/DF11 : [2610]                           ENDIF
    2611/DF11 : (MACRO)[1272]           	DO	LSTRNG			; ..for string variable
    2611/DF11 : =>NOT BLANK                      IFNB   LSTRNG
    2611/DF11 : EE                                DB    H(LSTRNG)
    2611/DF12 : 39                                DB    L(LSTRNG)
    2611/DF13 :                                   SHIFT
    2611/DF13 :  (MACRO-2)[1273]                  DO    
    2611/DF13 : =>BLANK                          IFNB   
    2611/DF13 :                                   DB    H()
    2611/DF13 :                                   DB    L()
    2611/DF13 :                                   SHIFT
    2611/DF13 :                                   DO    
    2611/DF13 : [2611]                           ENDIF
    2611/DF13 : [2611]                           ENDIF
    2612/DF13 : (MACRO)[1274]           FCTR6:	TSTSTR	FCTR7,T_PAGE		; handle PAGE
    2612/DF13 : 9F                               DB     H(FCTR7 - TSTBITH)
    2612/DF14 : 18                               DB     L(FCTR7)
    2612/DF15 : 98                               DB     T_PAGE
    2613/DF16 : (MACRO)[1275]           	DO	PGE
    2613/DF16 : =>NOT BLANK                      IFNB   PGE
    2613/DF16 : FD                                DB    H(PGE)
    2613/DF17 : E0                                DB    L(PGE)
    2613/DF18 :                                   SHIFT
    2613/DF18 :  (MACRO-2)[1276]                  DO    
    2613/DF18 : =>BLANK                          IFNB   
    2613/DF18 :                                   DB    H()
    2613/DF18 :                                   DB    L()
    2613/DF18 :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 155 - 10/31/2025 04:19:39 PM


    2613/DF18 :                                   DO    
    2613/DF18 : [2613]                           ENDIF
    2613/DF18 : [2613]                           ENDIF
    2614/DF18 : (MACRO)[1277]           FCTR7:	TSTSTR	FCTR8,T_PEEK		; handle PEEK(x)
    2614/DF18 : 9F                               DB     H(FCTR8 - TSTBITH)
    2614/DF19 : 21                               DB     L(FCTR8)
    2614/DF1A : A8                               DB     T_PEEK
    2615/DF1B : (MACRO)[1278]           	ILCALL	SNGL
    2615/DF1B : 1D                               DB     H(SNGL - (JMPBITH + TSTBITH))
    2615/DF1C : 70                               DB     L(SNGL)
    2616/DF1D : (MACRO)[1279]           	DO	FIX
    2616/DF1D : =>NOT BLANK                      IFNB   FIX
    2616/DF1D : EB                                DB    H(FIX)
    2616/DF1E : 2F                                DB    L(FIX)
    2616/DF1F :                                   SHIFT
    2616/DF1F :  (MACRO-2)[1280]                  DO    
    2616/DF1F : =>BLANK                          IFNB   
    2616/DF1F :                                   DB    H()
    2616/DF1F :                                   DB    L()
    2616/DF1F :                                   SHIFT
    2616/DF1F :                                   DO    
    2616/DF1F : [2616]                           ENDIF
    2616/DF1F : [2616]                           ENDIF
    2617/DF1F : (MACRO)[1281]           	DO	GETBYT
    2617/DF1F : =>NOT BLANK                      IFNB   GETBYT
    2617/DF1F : ED                                DB    H(GETBYT)
    2617/DF20 : E8                                DB    L(GETBYT)
    2617/DF21 :                                   SHIFT
    2617/DF21 :  (MACRO-2)[1282]                  DO    
    2617/DF21 : =>BLANK                          IFNB   
    2617/DF21 :                                   DB    H()
    2617/DF21 :                                   DB    L()
    2617/DF21 :                                   SHIFT
    2617/DF21 :                                   DO    
    2617/DF21 : [2617]                           ENDIF
    2617/DF21 : [2617]                           ENDIF
    2618/DF21 :                         ; FIXME: Keyword POS is not implemented,
    2619/DF21 :                         ;	the whole block until FCTR10 is not functional.
    2620/DF21 : (MACRO)[1283]           FCTR8:	TSTSTR	FCTR10,T_POS		; handle POS(x$)
    2620/DF21 : 9F                               DB     H(FCTR10 - TSTBITH)
    2620/DF22 : 44                               DB     L(FCTR10)
    2620/DF23 : C0                               DB     T_POS
    2621/DF24 : (MACRO)[1284]           	TSTSTR	SYNTAX,'('
    2621/DF24 : 99                               DB     H(SYNTAX - TSTBITH)
    2621/DF25 : 42                               DB     L(SYNTAX)
    2621/DF26 : 28                               DB     '('
    2622/DF27 : (MACRO)[1285]           	TSTSTR	FCTR9,'"'
    2622/DF27 : 9F                               DB     H(FCTR9 - TSTBITH)
    2622/DF28 : 38                               DB     L(FCTR9)
    2622/DF29 : 22                               DB     '"'
    2623/DF2A : (MACRO)[1286]           	GOTO	SYNTAX
    2623/DF2A : 59                               DB     H(SYNTAX - JMPBITH)
    2623/DF2B : 42                               DB     L(SYNTAX)
    2624/DF2C : (MACRO)[1287]           	TSTVAR	SYNTAX
    2624/DF2C : B9                               DB     H(SYNTAX - CALBITH)
    2624/DF2D : 42                               DB     L(SYNTAX)
    2625/DF2E : (MACRO)[1288]           	DO	FNDVAR
    2625/DF2E : =>NOT BLANK                      IFNB   FNDVAR
    2625/DF2E : E2                                DB    H(FNDVAR)
    2625/DF2F : E1                                DB    L(FNDVAR)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 156 - 10/31/2025 04:19:39 PM


    2625/DF30 :                                   SHIFT
    2625/DF30 :  (MACRO-2)[1289]                  DO    
    2625/DF30 : =>BLANK                          IFNB   
    2625/DF30 :                                   DB    H()
    2625/DF30 :                                   DB    L()
    2625/DF30 :                                   SHIFT
    2625/DF30 :                                   DO    
    2625/DF30 : [2625]                           ENDIF
    2625/DF30 : [2625]                           ENDIF
    2626/DF30 : (MACRO)[1290]           	DO	CKDLLR
    2626/DF30 : =>NOT BLANK                      IFNB   CKDLLR
    2626/DF30 : EE                                DB    H(CKDLLR)
    2626/DF31 : 7F                                DB    L(CKDLLR)
    2626/DF32 :                                   SHIFT
    2626/DF32 :  (MACRO-2)[1291]                  DO    
    2626/DF32 : =>BLANK                          IFNB   
    2626/DF32 :                                   DB    H()
    2626/DF32 :                                   DB    L()
    2626/DF32 :                                   SHIFT
    2626/DF32 :                                   DO    
    2626/DF32 : [2626]                           ENDIF
    2626/DF32 : [2626]                           ENDIF
    2627/DF32 : (MACRO)[1292]           	DO	LDVAR
    2627/DF32 : =>NOT BLANK                      IFNB   LDVAR
    2627/DF32 : E8                                DB    H(LDVAR)
    2627/DF33 : 15                                DB    L(LDVAR)
    2627/DF34 :                                   SHIFT
    2627/DF34 :  (MACRO-2)[1293]                  DO    
    2627/DF34 : =>BLANK                          IFNB   
    2627/DF34 :                                   DB    H()
    2627/DF34 :                                   DB    L()
    2627/DF34 :                                   SHIFT
    2627/DF34 :                                   DO    
    2627/DF34 : [2627]                           ENDIF
    2627/DF34 : [2627]                           ENDIF
    2628/DF34 : (MACRO)[1294]           	DO	FIX
    2628/DF34 : =>NOT BLANK                      IFNB   FIX
    2628/DF34 : EB                                DB    H(FIX)
    2628/DF35 : 2F                                DB    L(FIX)
    2628/DF36 :                                   SHIFT
    2628/DF36 :  (MACRO-2)[1295]                  DO    
    2628/DF36 : =>BLANK                          IFNB   
    2628/DF36 :                                   DB    H()
    2628/DF36 :                                   DB    L()
    2628/DF36 :                                   SHIFT
    2628/DF36 :                                   DO    
    2628/DF36 : [2628]                           ENDIF
    2628/DF36 : [2628]                           ENDIF
    2629/DF36 : (MACRO)[1296]           	GOTO	SYNTAX
    2629/DF36 : 59                               DB     H(SYNTAX - JMPBITH)
    2629/DF37 : 42                               DB     L(SYNTAX)
    2630/DF38 : (MACRO)[1297]           FCTR9:	TSTVAR	SYNTAX
    2630/DF38 : B9                               DB     H(SYNTAX - CALBITH)
    2630/DF39 : 42                               DB     L(SYNTAX)
    2631/DF3A : (MACRO)[1298]           	DO	FNDVAR
    2631/DF3A : =>NOT BLANK                      IFNB   FNDVAR
    2631/DF3A : E2                                DB    H(FNDVAR)
    2631/DF3B : E1                                DB    L(FNDVAR)
    2631/DF3C :                                   SHIFT
    2631/DF3C :  (MACRO-2)[1299]                  DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 157 - 10/31/2025 04:19:39 PM


    2631/DF3C : =>BLANK                          IFNB   
    2631/DF3C :                                   DB    H()
    2631/DF3C :                                   DB    L()
    2631/DF3C :                                   SHIFT
    2631/DF3C :                                   DO    
    2631/DF3C : [2631]                           ENDIF
    2631/DF3C : [2631]                           ENDIF
    2632/DF3C : (MACRO)[1300]           	DO	CKDLLR
    2632/DF3C : =>NOT BLANK                      IFNB   CKDLLR
    2632/DF3C : EE                                DB    H(CKDLLR)
    2632/DF3D : 7F                                DB    L(CKDLLR)
    2632/DF3E :                                   SHIFT
    2632/DF3E :  (MACRO-2)[1301]                  DO    
    2632/DF3E : =>BLANK                          IFNB   
    2632/DF3E :                                   DB    H()
    2632/DF3E :                                   DB    L()
    2632/DF3E :                                   SHIFT
    2632/DF3E :                                   DO    
    2632/DF3E : [2632]                           ENDIF
    2632/DF3E : [2632]                           ENDIF
    2633/DF3E : (MACRO)[1302]           	DO	LDVAR
    2633/DF3E : =>NOT BLANK                      IFNB   LDVAR
    2633/DF3E : E8                                DB    H(LDVAR)
    2633/DF3F : 15                                DB    L(LDVAR)
    2633/DF40 :                                   SHIFT
    2633/DF40 :  (MACRO-2)[1303]                  DO    
    2633/DF40 : =>BLANK                          IFNB   
    2633/DF40 :                                   DB    H()
    2633/DF40 :                                   DB    L()
    2633/DF40 :                                   SHIFT
    2633/DF40 :                                   DO    
    2633/DF40 : [2633]                           ENDIF
    2633/DF40 : [2633]                           ENDIF
    2634/DF40 : (MACRO)[1304]           	DO	FIX
    2634/DF40 : =>NOT BLANK                      IFNB   FIX
    2634/DF40 : EB                                DB    H(FIX)
    2634/DF41 : 2F                                DB    L(FIX)
    2634/DF42 :                                   SHIFT
    2634/DF42 :  (MACRO-2)[1305]                  DO    
    2634/DF42 : =>BLANK                          IFNB   
    2634/DF42 :                                   DB    H()
    2634/DF42 :                                   DB    L()
    2634/DF42 :                                   SHIFT
    2634/DF42 :                                   DO    
    2634/DF42 : [2634]                           ENDIF
    2634/DF42 : [2634]                           ENDIF
    2635/DF42 : (MACRO)[1306]           	GOTO	SYNTAX
    2635/DF42 : 59                               DB     H(SYNTAX - JMPBITH)
    2635/DF43 : 42                               DB     L(SYNTAX)
    2636/DF44 :                         ; FIXME: Is there really a way to these statements?
    2637/DF44 :                         ;;FIXME: I dont think so, since previous is a hard GOTO.
    2638/DF44 : =>FALSE                 	IF 0
    2639/DF44 :                         	 TSTVAR	SYNTAX
    2640/DF44 :                         	 DO	FNDVAR
    2641/DF44 :                         	 DO	CKDLLR
    2642/DF44 :                         	 DO	LDVAR
    2643/DF44 :                         	 DO	FIX
    2644/DF44 :                         	 GOTO	SYNTAX
    2645/DF44 : [2638]                  	ENDIF
    2646/DF44 : (MACRO)[1307]           FCTR10:	TSTSTR	FCTR11,T_STAT		; handle STAT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 158 - 10/31/2025 04:19:39 PM


    2646/DF44 : 9F                               DB     H(FCTR11 - TSTBITH)
    2646/DF45 : 49                               DB     L(FCTR11)
    2646/DF46 : A0                               DB     T_STAT
    2647/DF47 : (MACRO)[1308]           	DO	STATUS
    2647/DF47 : =>NOT BLANK                      IFNB   STATUS
    2647/DF47 : FD                                DB    H(STATUS)
    2647/DF48 : DD                                DB    L(STATUS)
    2647/DF49 :                                   SHIFT
    2647/DF49 :  (MACRO-2)[1309]                  DO    
    2647/DF49 : =>BLANK                          IFNB   
    2647/DF49 :                                   DB    H()
    2647/DF49 :                                   DB    L()
    2647/DF49 :                                   SHIFT
    2647/DF49 :                                   DO    
    2647/DF49 : [2647]                           ENDIF
    2647/DF49 : [2647]                           ENDIF
    2648/DF49 : (MACRO)[1310]           FCTR11:	TSTSTR	SYNTAX,T_TOP		; handle TOP
    2648/DF49 : 99                               DB     H(SYNTAX - TSTBITH)
    2648/DF4A : 42                               DB     L(SYNTAX)
    2648/DF4B : C1                               DB     T_TOP
    2649/DF4C : (MACRO)[1311]           	DO	TOP
    2649/DF4C : =>NOT BLANK                      IFNB   TOP
    2649/DF4C : EE                                DB    H(TOP)
    2649/DF4D : A3                                DB    L(TOP)
    2649/DF4E :                                   SHIFT
    2649/DF4E :  (MACRO-2)[1312]                  DO    
    2649/DF4E : =>BLANK                          IFNB   
    2649/DF4E :                                   DB    H()
    2649/DF4E :                                   DB    L()
    2649/DF4E :                                   SHIFT
    2649/DF4E :                                   DO    
    2649/DF4E : [2649]                           ENDIF
    2649/DF4E : [2649]                           ENDIF
    2650/DF4E : (MACRO)[1313]           	ILRTRN
    2650/DF4E : 00                               DB     0
    2651/DF4F :                         
    2652/DF4F : (MACRO)[1314]           RINDEX:	DO	CKPT
    2652/DF4F : =>NOT BLANK                      IFNB   CKPT
    2652/DF4F : FC                                DB    H(CKPT)
    2652/DF50 : FE                                DB    L(CKPT)
    2652/DF51 :                                   SHIFT
    2652/DF51 :  (MACRO-2)[1315]                  DO    
    2652/DF51 : =>BLANK                          IFNB   
    2652/DF51 :                                   DB    H()
    2652/DF51 :                                   DB    L()
    2652/DF51 :                                   SHIFT
    2652/DF51 :                                   DO    
    2652/DF51 : [2652]                           ENDIF
    2652/DF51 : [2652]                           ENDIF
    2653/DF51 : (MACRO)[1316]           INDEX:	DO	LADVAR
    2653/DF51 : =>NOT BLANK                      IFNB   LADVAR
    2653/DF51 : FD                                DB    H(LADVAR)
    2653/DF52 : 0E                                DB    L(LADVAR)
    2653/DF53 :                                   SHIFT
    2653/DF53 :  (MACRO-2)[1317]                  DO    
    2653/DF53 : =>BLANK                          IFNB   
    2653/DF53 :                                   DB    H()
    2653/DF53 :                                   DB    L()
    2653/DF53 :                                   SHIFT
    2653/DF53 :                                   DO    
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 159 - 10/31/2025 04:19:39 PM


    2653/DF53 : [2653]                           ENDIF
    2653/DF53 : [2653]                           ENDIF
    2654/DF53 : (MACRO)[1318]           	ILCALL	REXPR
    2654/DF53 : 1C                               DB     H(REXPR - (JMPBITH + TSTBITH))
    2654/DF54 : C6                               DB     L(REXPR)
    2655/DF55 : (MACRO)[1319]           	DO	FIX
    2655/DF55 : =>NOT BLANK                      IFNB   FIX
    2655/DF55 : EB                                DB    H(FIX)
    2655/DF56 : 2F                                DB    L(FIX)
    2655/DF57 :                                   SHIFT
    2655/DF57 :  (MACRO-2)[1320]                  DO    
    2655/DF57 : =>BLANK                          IFNB   
    2655/DF57 :                                   DB    H()
    2655/DF57 :                                   DB    L()
    2655/DF57 :                                   SHIFT
    2655/DF57 :                                   DO    
    2655/DF57 : [2655]                           ENDIF
    2655/DF57 : [2655]                           ENDIF
    2656/DF57 : (MACRO)[1321]           	DO	DMNSN
    2656/DF57 : =>NOT BLANK                      IFNB   DMNSN
    2656/DF57 : FD                                DB    H(DMNSN)
    2656/DF58 : 38                                DB    L(DMNSN)
    2656/DF59 :                                   SHIFT
    2656/DF59 :  (MACRO-2)[1322]                  DO    
    2656/DF59 : =>BLANK                          IFNB   
    2656/DF59 :                                   DB    H()
    2656/DF59 :                                   DB    L()
    2656/DF59 :                                   SHIFT
    2656/DF59 :                                   DO    
    2656/DF59 : [2656]                           ENDIF
    2656/DF59 : [2656]                           ENDIF
    2657/DF59 :                         
    2658/DF59 : =>TRUE                  	IF USE_CASS
    2659/DF59 :                         ;*******************************
    2660/DF59 :                         ;*  WRITE PROGRAM TO CASSETTE  *
    2661/DF59 :                         ;*******************************
    2662/DF59 :                         ;
    2663/DF59 : (MACRO)[1323]           CSAVE:	DO	BOT			; determine start of program
    2663/DF59 : =>NOT BLANK                      IFNB   BOT
    2663/DF59 : FF                                DB    H(BOT)
    2663/DF5A : BD                                DB    L(BOT)
    2663/DF5B :                                   SHIFT
    2663/DF5B :  (MACRO-2)[1324]                  DO    
    2663/DF5B : =>BLANK                          IFNB   
    2663/DF5B :                                   DB    H()
    2663/DF5B :                                   DB    L()
    2663/DF5B :                                   SHIFT
    2663/DF5B :                                   DO    
    2663/DF5B : [2663]                           ENDIF
    2663/DF5B : [2663]                           ENDIF
    2664/DF5B : (MACRO)[1325]           	DO	TOP			; determine top of program
    2664/DF5B : =>NOT BLANK                      IFNB   TOP
    2664/DF5B : EE                                DB    H(TOP)
    2664/DF5C : A3                                DB    L(TOP)
    2664/DF5D :                                   SHIFT
    2664/DF5D :  (MACRO-2)[1326]                  DO    
    2664/DF5D : =>BLANK                          IFNB   
    2664/DF5D :                                   DB    H()
    2664/DF5D :                                   DB    L()
    2664/DF5D :                                   SHIFT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 160 - 10/31/2025 04:19:39 PM


    2664/DF5D :                                   DO    
    2664/DF5D : [2664]                           ENDIF
    2664/DF5D : [2664]                           ENDIF
    2665/DF5D : (MACRO)[1327]           	DO	CSAVE2			; do the actual saving
    2665/DF5D : =>NOT BLANK                      IFNB   CSAVE2
    2665/DF5D : FF                                DB    H(CSAVE2)
    2665/DF5E : 8A                                DB    L(CSAVE2)
    2665/DF5F :                                   SHIFT
    2665/DF5F :  (MACRO-2)[1328]                  DO    
    2665/DF5F : =>BLANK                          IFNB   
    2665/DF5F :                                   DB    H()
    2665/DF5F :                                   DB    L()
    2665/DF5F :                                   SHIFT
    2665/DF5F :                                   DO    
    2665/DF5F : [2665]                           ENDIF
    2665/DF5F : [2665]                           ENDIF
    2666/DF5F : (MACRO)[1329]           	DO	CFINI			; finish up
    2666/DF5F : =>NOT BLANK                      IFNB   CFINI
    2666/DF5F : FF                                DB    H(CFINI)
    2666/DF60 : D4                                DB    L(CFINI)
    2666/DF61 :                                   SHIFT
    2666/DF61 :  (MACRO-2)[1330]                  DO    
    2666/DF61 : =>BLANK                          IFNB   
    2666/DF61 :                                   DB    H()
    2666/DF61 :                                   DB    L()
    2666/DF61 :                                   SHIFT
    2666/DF61 :                                   DO    
    2666/DF61 : [2666]                           ENDIF
    2666/DF61 : [2666]                           ENDIF
    2667/DF61 :                         
    2668/DF61 :                         
    2669/DF61 :                         ;********************************
    2670/DF61 :                         ;*  LOAD PROGRAM FROM CASSETTE  *
    2671/DF61 :                         ;********************************
    2672/DF61 :                         ;
    2673/DF61 : (MACRO)[1331]           CLOAD:	DO	CLOAD2			; do the actual loading
    2673/DF61 : =>NOT BLANK                      IFNB   CLOAD2
    2673/DF61 : FF                                DB    H(CLOAD2)
    2673/DF62 : 99                                DB    L(CLOAD2)
    2673/DF63 :                                   SHIFT
    2673/DF63 :  (MACRO-2)[1332]                  DO    
    2673/DF63 : =>BLANK                          IFNB   
    2673/DF63 :                                   DB    H()
    2673/DF63 :                                   DB    L()
    2673/DF63 :                                   SHIFT
    2673/DF63 :                                   DO    
    2673/DF63 : [2673]                           ENDIF
    2673/DF63 : [2673]                           ENDIF
    2674/DF63 : (MACRO)[1333]           	DO	CFINI			; finish up
    2674/DF63 : =>NOT BLANK                      IFNB   CFINI
    2674/DF63 : FF                                DB    H(CFINI)
    2674/DF64 : D4                                DB    L(CFINI)
    2674/DF65 :                                   SHIFT
    2674/DF65 :  (MACRO-2)[1334]                  DO    
    2674/DF65 : =>BLANK                          IFNB   
    2674/DF65 :                                   DB    H()
    2674/DF65 :                                   DB    L()
    2674/DF65 :                                   SHIFT
    2674/DF65 :                                   DO    
    2674/DF65 : [2674]                           ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 161 - 10/31/2025 04:19:39 PM


    2674/DF65 : [2674]                           ENDIF
    2675/DF65 : [2658]                  	ENDIF
    2676/DF65 :                         
    2677/DF65 :                         
    2678/DF65 :                         ;*************************************
    2679/DF65 :                         ;*  PAGE BREAK - SECOND BLOCK OF 4K  *
    2680/DF65 :                         ;*************************************
    2681/DF65 :                         ;
    2682/E000 :                         	ORG	BASE+0x1000
    2683/E000 : 08                      	NOP				; needed so Supervisor can do -1 here
    2684/E001 :                         
    2685/E001 :                         ; Read line from input and store in program storage.
    2686/E001 : C2 7F                   GETLIN:	LD	BASMODE(P2)		; load command/run flag
    2687/E003 : =>DEFINED               	IFDEF	SCALLS
    2688/E003 : (MACRO)[1335]           	 SYSCALL	2
    2688/E003 : 3F                               XPPC   P3
    2688/E004 : 02                               DB     2
    2689/E005 : =>FALSE                 	ELSE
    2690/E005 :                         	 CALL	PUTASC
    2691/E005 : [2687]                  	ENDIF
    2692/E005 : 94 04                   	JP	GETLN1
    2693/E007 : C4 20                   	LDI	' '			; load space character
    2694/E009 : =>DEFINED               	IFDEF	SCALLS
    2695/E009 : (MACRO)[1336]           	 SYSCALL	2
    2695/E009 : 3F                               XPPC   P3
    2695/E00A : 02                               DB     2
    2696/E00B : =>FALSE                 	ELSE
    2697/E00B :                         	 CALL	PUTASC
    2698/E00B : [2694]                  	ENDIF
    2699/E00B : C4 B6                   GETLN1:	LDI	L(STKIBUF)		; set P1.L to start of input buffer
    2700/E00D : 31                      	XPAL	P1
    2701/E00E : CA F1                   	ST	-15(P2)			; save prev P1.L
    2702/E010 : C3 A2                   	LD	STKPHI(P3)
    2703/E012 : DC 03                   	ORI	H(STKIBUF)		; offset for STKBASE.H
    2704/E014 : 35                      	XPAH	P1			; set P1.H to start of input buffer
    2705/E015 : CA F0                   	ST	-16(P2)			; save prev P1.H
    2706/E017 : C2 00                   	LD	(P2)			; load max. input buffer length
    2707/E019 : CA E7                   	ST	CHRNUM(P2)		; store as character counter
    2708/E01B : 01                      	XAE
    2709/E01C : C4 0D                   	LDI	_CR			; load <cr>
> > > NIBLFP.asm(2710):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2710/E01E : C9 80                   	ST	EREG(P1)		; store as last char in input buffer
    2711/E020 : BA E7                   	DLD	CHRNUM(P2)
    2712/E022 : 01                      GETLN2:	XAE				; put counter in E and use as index
    2713/E023 : C4 FF                   	LDI	0xFF			; load as empty-marker (nothing here)
> > > NIBLFP.asm(2714):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2714/E025 : C9 80                   	ST	EREG(P1)		; fill input buffer with empty-marker
    2715/E027 : BA E7                   	DLD	CHRNUM(P2)		; decrease char counter
    2716/E029 : 9C F7                   	JNZ	GETLN2
    2717/E02B :                         ; NOTE: Read character goes into AC and E
    2718/E02B :                         INPT:
    2719/E02B : =>DEFINED               	IFDEF	SCALLS
    2720/E02B : (MACRO)[1337]           	 SYSCALL	1
    2720/E02B : 3F                               XPPC   P3
    2720/E02C : 01                               DB     1
    2721/E02D : =>FALSE                 	ELSE
    2722/E02D :                         	 CALL	GETASC
    2723/E02D : [2719]                  	ENDIF
    2724/E02D : C2 E7                   	LD	CHRNUM(P2)		; load line counter
    2725/E02F : 01                      	XAE				; into E
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 162 - 10/31/2025 04:19:39 PM


    2726/E030 : C9 FF                   	ST	-1(P1)			; temporary store char before line buffer
    2727/E032 : D4 60                   	ANI	0x60			; test for control character
    2728/E034 : 98 0E                   	JZ	CTRLS			; go, handle control chars
    2729/E036 : C1 FF                   INCR:	LD	-1(P1)			; load character from temp
> > > NIBLFP.asm(2730):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2730/E038 : C9 80                   	ST	EREG(P1)		; and store in input buffer
    2731/E03A : =>DEFINED               OUTCH:	IFDEF	SCALLS
    2732/E03A : (MACRO)[1338]           	 SYSCALL	2
    2732/E03A : 3F                               XPPC   P3
    2732/E03B : 02                               DB     2
    2733/E03C : =>FALSE                 	ELSE
    2734/E03C :                         	 CALL	PUTASC
    2735/E03C : [2731]                  	ENDIF
    2736/E03C : AA E7                   	ILD	CHRNUM(P2)
    2737/E03E : E2 00                   	XOR	(P2)			; max chars (72) reached ?
    2738/E040 : 9B 30                   	JZ	SV_LINE(P3)		; return and print newline
    2739/E042 : 90 E7                   	JMP	INPT
    2740/E044 :                         ; NOTE:	The following handles two control characters, the rest is handled externally.
    2741/E044 :                         ;	Control/M = <cr>	Carriage Return / Enter
    2742/E044 :                         ;	Control/R = <dc2>	Move cursor one to the ^Right
    2743/E044 : C1 FF                   CTRLS:	LD	-1(P1)			; actual cursor is in E
    2744/E046 : E4 0D                   	XRI	_CR			; is it <cr> ?
    2745/E048 : 98 09                   	JZ	CTRL1
    2746/E04A : E4 1F                   	XRI	_CR ! _CTLR		; we XOR'ed above, is it <control-r> ?
    2747/E04C : 98 0B                   	JZ	CTRL4
    2748/E04E : (MACRO)[1339]           	CALL	HCTRLS			; go handle some more controls
    2748/E04E : 3F                               XPPC   P3
    2748/E04F : E0                               DB     H(HCTRLS)
    2748/E050 : 63                               DB     L(HCTRLS)
    2749/E051 : 90 D8                   	JMP	INPT
    2750/E053 :                         ; NOTE:	Carriage Return / Enter
    2751/E053 : C4 0D                   CTRL1:	LDI	_CR			; finish line with <cr>
> > > NIBLFP.asm(2752):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2752/E055 : C9 80                   	ST	EREG(P1)		; store <cr> E indexed behind last character
    2753/E057 : 93 30                   	JMP	SV_LINE(P3)		; return and print newline
    2754/E059 :                         ; Move cursor one to ^Right.
> > > NIBLFP.asm(2755):11: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2755/E059 : C1 80                   CTRL4:	LD	EREG(P1)		; load char under cursor
    2756/E05B : E4 FF                   	XRI	0xFF			; is here an empty-marker ?
    2757/E05D : 98 CC                   	JZ	INPT			; yes, do not move cursor
> > > NIBLFP.asm(2758):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2758/E05F : C1 80                   	LD	EREG(P1)		; load next charactor right
    2759/E061 : 90 D7                   	JMP	OUTCH
    2760/E063 :                         
    2761/E063 :                         ;*************************************
    2762/E063 :                         ;*      CALLS FROM GETLIN ROUTINE    *
    2763/E063 :                         ;* (HANDLING OF CONTROL CHARACTERS)  *
    2764/E063 :                         ;*************************************
    2765/E063 :                         ;
    2766/E063 :                         ; NOTE:	The following handles some control characters, all others are ignored.
    2767/E063 :                         ;	Control/H = <bs>	delete char and move cursor one to left
    2768/E063 :                         ; ???	Control/I = <ht>	cursor pos one to right
    2769/E063 :                         ;	Control/K = <vt>	^Kill, rubout char at cursor pos
    2770/E063 :                         ;	Control/L = <ff>	cursor pos one to the ^Left
    2771/E063 :                         ;	Control/O = <si>	m^Ove right and insert char at cursor pos
    2772/E063 :                         ;	Control/R = <dc2>	cursor pos one to the ^Right
    2773/E063 :                         ;	Control/X = <can>	e^Xit, cancel input and start anew
    2774/E063 : C2 E7                   HCTRLS:	LD	CHRNUM(P2)
    2775/E065 : 01                      	XAE				; store actual cursor pos in E
    2776/E066 : C1 FF                   	LD	-1(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 163 - 10/31/2025 04:19:39 PM


    2777/E068 : E4 08                   	XRI	_BS			; is it <backspace> ?
    2778/E06A : 98 12                   	JZ	CTRL2
    2779/E06C : E4 04                   	XRI	_BS ! _CTLL		; we XOR'ed above, is it <ctrl-L> ?
    2780/E06E : 98 22                   	JZ	CTRL3
    2781/E070 : E4 07                   	XRI	_CTLL ! _CTLK		; we XOR'ed above, is it <ctrl-K> ?
    2782/E072 : 98 25                   	JZ	CTRL5
    2783/E074 : E4 04                   	XRI	_CTLK ! _CTLO		; we XOR'ed above, is it <ctrl-O> ?
    2784/E076 : 98 44                   	JZ	CTRL6
    2785/E078 : E4 17                   	XRI	_CTLO ! _CTLX		; we XOR'ed above, is it <ctrl-X> ?
    2786/E07A : 98 77                   	JZ	CTRL7
    2787/E07C : (MACRO)[1340]           	RTRN				; ignore other control chars and return
    2787/E07C : 3F                               XPPC   P3
    2787/E07D : 00                               DB     0
    2788/E07E :                         
    2789/E07E :                         ; ^H Delete char and move cursor one to the left.
    2790/E07E : 40                      CTRL2:	LDE
    2791/E07F : 9B 38                   	JZ	SV_RTRN(P3)		; do nothing, is begin of buffer
    2792/E081 : BA E7                   	DLD	CHRNUM(P2)
    2793/E083 : 01                      	XAE
    2794/E084 : C4 FF                   	LDI	0xFF
> > > NIBLFP.asm(2795):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2795/E086 : C9 80                   	ST	EREG(P1)		; store empty-marker
    2796/E088 : C4 08                   	LDI	_BS
    2797/E08A : =>DEFINED               	IFDEF	SCALLS
    2798/E08A : (MACRO)[1341]           	 SYSCALL	2
    2798/E08A : 3F                               XPPC   P3
    2798/E08B : 02                               DB     2
    2799/E08C : =>FALSE                 	ELSE
    2800/E08C :                         	 CALL	PUTASC
    2801/E08C : [2797]                  	ENDIF
    2802/E08C : C4 20                   	LDI	' '
    2803/E08E : =>DEFINED               	IFDEF	SCALLS
    2804/E08E : (MACRO)[1342]           	 SYSCALL	2
    2804/E08E : 3F                               XPPC   P3
    2804/E08F : 02                               DB     2
    2805/E090 : =>FALSE                 	ELSE
    2806/E090 :                         	 CALL	PUTASC
    2807/E090 : [2803]                  	ENDIF
    2808/E090 : 90 24                   	JMP	BACK
    2809/E092 :                         
    2810/E092 :                         ; ^L Move cursor one to left.
    2811/E092 : 40                      CTRL3:	LDE
    2812/E093 : 9B 38                   	JZ	SV_RTRN(P3)		; do nothing, is begin of buffer
    2813/E095 : BA E7                   	DLD	CHRNUM(P2)
    2814/E097 : 90 1D                   	JMP	BACK
    2815/E099 :                         
    2816/E099 :                         ; ^K Rubout character under cursor.
> > > NIBLFP.asm(2817):12: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2817/E099 : C5 80                   CTRL5:	LD	@EREG(P1)		; set pointer P1 to current char
    2818/E09B : C1 01                   SHFTL:	LD	1(P1)			; get next char
    2819/E09D : E4 FF                   	XRI	0xFF			; is here an empty-marker ?
    2820/E09F : 98 0A                   	JZ	RUBEND
    2821/E0A1 : C1 01                   	LD	1(P1)
    2822/E0A3 : CD 01                   	ST	@1(P1)			; store char one position left and incr
    2823/E0A5 : =>DEFINED               	IFDEF	SCALLS
    2824/E0A5 : (MACRO)[1343]           	 SYSCALL	2
    2824/E0A5 : 3F                               XPPC   P3
    2824/E0A6 : 02                               DB     2
    2825/E0A7 : =>FALSE                 	ELSE
    2826/E0A7 :                         	 CALL	PUTASC
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 164 - 10/31/2025 04:19:39 PM


    2827/E0A7 : [2823]                  	ENDIF
    2828/E0A7 : AA E7                   	ILD	CHRNUM(P2)
    2829/E0A9 : 90 F0                   	JMP	SHFTL
    2830/E0AB : C4 FF                   RUBEND:	LDI	0xFF			; set new empty-marker
    2831/E0AD : C9 00                   	ST	(P1)
    2832/E0AF : C4 B6                   	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
    2833/E0B1 : 31                      	XPAL	P1
    2834/E0B2 : C4 20                   	LDI	' '
    2835/E0B4 : =>DEFINED               	IFDEF	SCALLS
    2836/E0B4 : (MACRO)[1344]           	 SYSCALL	2
    2836/E0B4 : 3F                               XPPC   P3
    2836/E0B5 : 02                               DB     2
    2837/E0B6 : =>FALSE                 	ELSE
    2838/E0B6 :                         	 CALL	PUTASC
    2839/E0B6 : [2835]                  	ENDIF
    2840/E0B6 : C4 08                   BACK:	LDI	_BS
    2841/E0B8 : =>DEFINED               	IFDEF	SCALLS
    2842/E0B8 : (MACRO)[1345]           	 SYSCALL	2
    2842/E0B8 : 3F                               XPPC   P3
    2842/E0B9 : 02                               DB     2
    2843/E0BA : =>FALSE                 	ELSE
    2844/E0BA :                         	 CALL	PUTASC
    2845/E0BA : [2841]                  	ENDIF
    2846/E0BA : (MACRO)[1346]           	RTRN
    2846/E0BA : 3F                               XPPC   P3
    2846/E0BB : 00                               DB     0
    2847/E0BC :                         
    2848/E0BC :                         ; ^O Insert character under cursor.
    2849/E0BC : C2 00                   CTRL6:	LD	(P2)			; load input buffer length (max. chars)
    2850/E0BE : 01                      	XAE
> > > NIBLFP.asm(2851):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2851/E0BF : C5 80                   	LD	@EREG(P1)		; set pointer P1 to end of input buffer
    2852/E0C1 : C5 FF                   	LD	@-1(P1)			; ultimate position in buffer
    2853/E0C3 : E4 FF                   	XRI	0xFF			; is here an empty-marker ?
    2854/E0C5 : 9C 27                   	JNZ	NOMSPC			; no more space for insertion
    2855/E0C7 : 03                      	SCL
    2856/E0C8 : 40                      	LDE				; max. number
    2857/E0C9 : FA E7                   	CAD	CHRNUM(P2)		; subtract actual number
    2858/E0CB : CA EA                   	ST	-22(P2)			; store as temporary counter
    2859/E0CD : C5 FF                   SHFTR:	LD	@-1(P1)			; decrease and get character
    2860/E0CF : C9 01                   	ST	1(P1)			; store one position right
    2861/E0D1 : BA EA                   	DLD	-22(P2)
    2862/E0D3 : 9C F8                   	JNZ	SHFTR
    2863/E0D5 : C4 B6                   	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
    2864/E0D7 : 31                      	XPAL	P1
    2865/E0D8 : C2 E7                   	LD	CHRNUM(P2)
    2866/E0DA : 01                      	XAE
    2867/E0DB : C4 20                   	LDI	' '
> > > NIBLFP.asm(2868):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2868/E0DD : C9 80                   	ST	EREG(P1)
    2869/E0DF : =>DEFINED               BUFOUT:	IFDEF	SCALLS
    2870/E0DF : (MACRO)[1347]           	 SYSCALL	2
    2870/E0DF : 3F                               XPPC   P3
    2870/E0E0 : 02                               DB     2
    2871/E0E1 : =>FALSE                 	ELSE
    2872/E0E1 :                         	 CALL	PUTASC
    2873/E0E1 : [2869]                  	ENDIF
    2874/E0E1 : AA E7                   	ILD	CHRNUM(P2)
    2875/E0E3 : 01                      	XAE
> > > NIBLFP.asm(2876):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 165 - 10/31/2025 04:19:39 PM


    2876/E0E4 : C1 80                   	LD	EREG(P1)
    2877/E0E6 : E4 0D                   	XRI	_CR			; line terminator reached ?
    2878/E0E8 : 9B 30                   	JZ	SV_LINE(P3)		; return and print newline
    2879/E0EA : E4 0D                   	XRI	_CR			; we XOR'ed above
    2880/E0EC : 94 F1                   	JP	BUFOUT
    2881/E0EE : C4 B6                   NOMSPC:	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
    2882/E0F0 : 31                      	XPAL	P1
    2883/E0F1 : (MACRO)[1348]           	RTRN
    2883/E0F1 : 3F                               XPPC   P3
    2883/E0F2 : 00                               DB     0
    2884/E0F3 :                         
    2885/E0F3 :                         ; ^X Cancel input and start new input.
    2886/E0F3 : C4 B6                   CTRL7:	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
    2887/E0F5 : 31                      	XPAL	P1
    2888/E0F6 : C4 5C                   	LDI	'\\'
    2889/E0F8 : =>DEFINED               	IFDEF	SCALLS
    2890/E0F8 : (MACRO)[1349]           	 SYSCALL	2
    2890/E0F8 : 3F                               XPPC   P3
    2890/E0F9 : 02                               DB     2
    2891/E0FA : =>FALSE                 	ELSE
    2892/E0FA :                         	 CALL	PUTASC
    2893/E0FA : [2889]                  	ENDIF
    2894/E0FA : C4 00                   	LDI	(M_BRK-M_BASE)		; 'BREAK'
    2895/E0FC : 93 B4                   	JMP	SV_MSGOUT(P3)
    2896/E0FE :                         
    2897/E0FE :                         ; Print new line as standalone routine.
    2898/E0FE : C4 0D                   LINE:	LDI	_CR
    2899/E100 : =>DEFINED               	IFDEF	SCALLS
    2900/E100 : (MACRO)[1350]           	 SYSCALL	2
    2900/E100 : 3F                               XPPC   P3
    2900/E101 : 02                               DB     2
    2901/E102 : =>FALSE                 	ELSE
    2902/E102 :                         	 CALL	PUTASC
    2903/E102 : [2899]                  	ENDIF
    2904/E102 : C4 0A                   	LDI	_LF
    2905/E104 : =>DEFINED               	IFDEF	SCALLS
    2906/E104 : (MACRO)[1351]           	 SYSCALL	2
    2906/E104 : 3F                               XPPC   P3
    2906/E105 : 02                               DB     2
    2907/E106 : =>FALSE                 	ELSE
    2908/E106 :                         	 CALL	PUTASC
    2909/E106 : [2905]                  	ENDIF
    2910/E106 : 93 38                   	JMP	SV_RTRN(P3)
    2911/E108 :                         
    2912/E108 :                         ; Scan input buffer for BASIC keywords, convert to one-byte tokens and store.
    2913/E108 : 03                      SCAN:	SCL
    2914/E109 : C5 01                   	LD	@1(P1)			; get byte from input and increase
    2915/E10B : FC 5B                   	CAI	'Z'+1
    2916/E10D : 94 1B                   	JP	SCANR			; no beginning letter ?
    2917/E10F : F4 1A                   	ADI	26			; 'Z'-'A'+1
    2918/E111 : 94 02                   	JP	SSCAN			; yes, found letter
    2919/E113 : 90 15                   	JMP	SCANR
    2920/E115 :                         	; NOTE:	A variable has at least a beginning letter, followed by
    2921/E115 :                         	;	letters and/or digits. All other characters terminate
    2922/E115 :                         	;	evaluating a variable.
    2923/E115 : 03                      SSCAN:	SCL
    2924/E116 : C5 01                   	LD	@1(P1)			; get byte from input and increase
    2925/E118 : FC 5B                   	CAI	'Z'+1			; does another letter follow ?
    2926/E11A : 94 0C                   	JP	SSCAN1
    2927/E11C : F4 1A                   	ADI	26			; 'Z'-'A'+1
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 166 - 10/31/2025 04:19:39 PM


    2928/E11E : 94 F5                   	JP	SSCAN			; yes, found letter
    2929/E120 : F4 07                   	ADI	7			; 'A'-'9'-1
    2930/E122 : 94 04                   	JP	SSCAN1			; no digit
    2931/E124 : F4 0A                   	ADI	10			; '9'-'0'+1
    2932/E126 : 94 ED                   	JP	SSCAN			; is digit
    2933/E128 : C5 FF                   SSCAN1:	LD	@-1(P1)			; decr and load previous input byte
    2934/E12A : C5 01                   SCANR:	LD	@1(P1)			; get byte from input and increase
    2935/E12C : E4 20                   	XRI	' '			; is it <space> ?
    2936/E12E : 98 FA                   	JZ	SCANR			; yes, just eat it
    2937/E130 : C1 FF                   	LD	-1(P1)			; load last byte again
    2938/E132 : E4 3A                   	XRI	':'			; is it <colon> ?
    2939/E134 : 98 21                   	JZ	SCAN3			; go, next statement on line
    2940/E136 : E4 37                   	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
    2941/E138 : 98 10                   	JZ	SCAND			; go, return (end of line)
    2942/E13A : E4 2F                   	XRI	_CR ! '"'		; we XOR'ed above, is it beginning <quote> ?
    2943/E13C : 9C 17                   	JNZ	SCAN2			; no string literal
    2944/E13E : C5 01                   SCAN1:	LD	@1(P1)			; get byte from input and increase
    2945/E140 : E4 22                   	XRI	'"'			; look for terminating <quote>
    2946/E142 : 98 E6                   	JZ	SCANR			; there is one, start new scanning
    2947/E144 : E4 2F                   	XRI	'"' ! _CR		; we XOR'ed above, is it <cr> ?
    2948/E146 : 9C F6                   	JNZ	SCAN1			; no, loop for terminating <quote>
    2949/E148 : 90 69                   	JMP	SCNRR			; no terminating <quote>, send error
    2950/E14A : C4 80                   SCAND:	LDI	L(SPRVSR)		; restore P3 to Supervisor
    2951/E14C : 33                      	XPAL	P3
    2952/E14D : C2 9C                   	LD	-100(P2)
    2953/E14F : 37                      	XPAH	P3
    2954/E150 : C4 B6                   	LDI	L(STKIBUF)		; load start of input buffer
    2955/E152 : 31                      	XPAL	P1			; put into P1.L
    2956/E153 : 93 D6                   	JMP	SV_SPLOAD(P3)
    2957/E155 : C5 FF                   SCAN2:	LD	@-1(P1)			; decr input buffer back and load byte
    2958/E157 : (MACRO)[1352]           SCAN3:	LDPI	P3,TOKENS		; load P3 with token table
    2958/E157 : C4 3D                            LDI    L(TOKENS)
    2958/E159 : 33                               XPAL   P3
    2958/E15A : C4 D7                            LDI    H(TOKENS)
    2958/E15C : 37                               XPAH   P3
    2959/E15D : C7 01                   SCAN4:	LD	@1(P3)			; get token from table, incr P3
    2960/E15F : 98 A7                   	JZ	SCAN			; end of table
    2961/E161 : CA E8                   	ST	-24(P2)			; store token value
    2962/E163 : C4 FF                   	LDI	0xFF			; initialize index
    2963/E165 : CA E7                   	ST	CHRNUM(P2)		; set index to -1 for beginning with 0
    2964/E167 : AA E7                   SCAN5:	ILD	CHRNUM(P2)		; increase index
    2965/E169 : 01                      	XAE				; load index into E
> > > NIBLFP.asm(2966):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2966/E16A : C1 80                   	LD	EREG(P1)		; get next byte from input buffer
    2967/E16C : E7 01                   	XOR	@1(P3)			; compare with char from table and incr
    2968/E16E : 98 F7                   	JZ	SCAN5			; same, continue comparing
    2969/E170 : E4 80                   	XRI	0x80			; high bit set, end of word
    2970/E172 : 98 08                   	JZ	SCAN7			; yes, words are same
    2971/E174 : 94 E7                   	JP	SCAN4			; not same, try next token
    2972/E176 : C7 01                   SCAN6:	LD	@1(P3)			; end of word, skip table word
    2973/E178 : 94 FC                   	JP	SCAN6
    2974/E17A : 90 E1                   	JMP	SCAN4			; and try next token
    2975/E17C : C2 E8                   SCAN7:	LD	-24(P2)			; we have a token, load it
    2976/E17E : CD 01                   	ST	@1(P1)			; store into program line and increase
    2977/E180 : 31                      	XPAL	P1			; position of found token..
    2978/E181 : CA E8                   	ST	-24(P2)			; ..is now stored in -24
    2979/E183 : 31                      	XPAL	P1			; put again into P1.L
> > > NIBLFP.asm(2980):11: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    2980/E184 : C1 80                   SCAN8:	LD	EREG(P1)		; load current byte from word
    2981/E186 : CD 01                   	ST	@1(P1)			; store into program and increase
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 167 - 10/31/2025 04:19:39 PM


    2982/E188 : E4 0D                   	XRI	_CR			; is it a <cr> ?
    2983/E18A : 9C F8                   	JNZ	SCAN8			; no, continue copying
    2984/E18C : C2 E8                   	LD	-24(P2)			; yes, restore location from -24
    2985/E18E : 31                      	XPAL	P1
    2986/E18F : C1 FF                   	LD	-1(P1)			; load previous byte from input
    2987/E191 : E4 8A                   	XRI	T_DATA			; is it T_DATA ?
    2988/E193 : 98 06                   	JZ	SSKP1			; yes, skip stmt (but check strings)
    2989/E195 : E4 17                   	XRI	T_DATA ! T_REM		; we XOR'ed above, is it T_REM ?
    2990/E197 : 98 B1                   	JZ	SCAND			; found REM, leave scan routine
    2991/E199 : 90 8F                   	JMP	SCANR			; no DATA, no REM continue scanning
    2992/E19B :                         	; NOTE: Skip characters in line until end of statement
    2993/E19B : C5 01                   SSKP1:	LD	@1(P1)			; get byte from input and increase
    2994/E19D : E4 3A                   	XRI	':'			; is it <colon> ?
    2995/E19F : 98 B6                   	JZ	SCAN3			; go, look anew for token
    2996/E1A1 : E4 37                    	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
    2997/E1A3 : 98 A5                   	JZ	SCAND			; go, leave scan routine
    2998/E1A5 : E4 2F                   	XRI	_CR ! '"'		; we XOR'ed above, is it <quote> ?
    2999/E1A7 : 9C F2                   	JNZ	SSKP1			; no, skip character
    3000/E1A9 : C5 01                   SSKP2:	LD	@1(P1)			; get byte from input and increase
    3001/E1AB : E4 22                   	XRI	'"'			; is it <quote> ?
    3002/E1AD : 98 EC                   	JZ	SSKP1
    3003/E1AF : E4 2F                   	XRI	'"' ! _CR		; we XOR'ed above, is it <cr> ?
    3004/E1B1 : 9C F6                   	JNZ	SSKP2
    3005/E1B3 : C4 80                   SCNRR:	LDI	L(SPRVSR)		; restore P3 to supervisor..
    3006/E1B5 : 33                      	XPAL	P3
    3007/E1B6 : C2 9C                   	LD	-100(P2)
    3008/E1B8 : 37                      	XPAH	P3			; ..and perform error message
    3009/E1B9 : C4 B0                   	LDI	(M_ENDQ-M_BASE)		; 'ENDQUOTE ERROR'
    3010/E1BB : 93 B4                   	JMP	SV_MSGOUT(P3)
    3011/E1BD :                         
    3012/E1BD :                         ; Free four bytes on arithmetics stack.
    3013/E1BD :                         ; Put two bytes into STACK -17, -18.
    3014/E1BD : 02                      POPAE:	CCL
    3015/E1BE : C2 FD                   	LD	AEXOFF(P2)		; adjust AEXSTK by four up
    3016/E1C0 : F4 04                   	ADI	4
    3017/E1C2 : CA FD                   	ST	AEXOFF(P2)
    3018/E1C4 : 32                      	XPAL	P2			; pointer P2 holds corrected AEXSTK
    3019/E1C5 : C4 00                   	LDI	0
    3020/E1C7 : 01                      POP1:	XAE
    3021/E1C8 : 03                      POP2:	SCL
    3022/E1C9 : AA FC                   	ILD	-4(P2)
    3023/E1CB : 9B 6B                   	JZ	SV_VALERR(P3)
    3024/E1CD : 94 24                   	JP	POP4
    3025/E1CF : FC 8F                   	CAI	0x8F
    3026/E1D1 : 98 13                   	JZ	POP3
    3027/E1D3 : C2 FD                   	LD	-3(P2)
    3028/E1D5 : F2 FD                   	ADD	-3(P2)
    3029/E1D7 : C2 FD                   	LD	-3(P2)
    3030/E1D9 : 1F                      	RRL
    3031/E1DA : CA FD                   	ST	-3(P2)
    3032/E1DC : C2 FE                   	LD	-2(P2)
    3033/E1DE : 1F                      	RRL
    3034/E1DF : CA FE                   	ST	-2(P2)
    3035/E1E1 : 06                      	CSA
    3036/E1E2 : 94 E4                   	JP	POP2
    3037/E1E4 : 90 E1                   	JMP	POP1
    3038/E1E6 : 40                      POP3:	LDE
    3039/E1E7 : D2 FD                   	AND	-3(P2)
    3040/E1E9 : 94 0E                   	JP	POP5
    3041/E1EB : AA FE                   	ILD	-2(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 168 - 10/31/2025 04:19:39 PM


    3042/E1ED : 9C 0A                   	JNZ	POP5
    3043/E1EF : AA FD                   	ILD	-3(P2)
    3044/E1F1 : 90 06                   	JMP	POP5
    3045/E1F3 : C4 00                   POP4:	LDI	0
    3046/E1F5 : CA FE                   	ST	-2(P2)
    3047/E1F7 : CA FD                   	ST	-3(P2)
    3048/E1F9 : C2 FE                   POP5:	LD	-2(P2)
    3049/E1FB : 01                      	XAE
    3050/E1FC : C2 FD                   	LD	AEXOFF(P2)
    3051/E1FE : 32                      	XPAL	P2
    3052/E1FF : C4 80                   	LDI	STKMID
    3053/E201 : 32                      	XPAL	P2
    3054/E202 : CA EE                   	ST	-18(P2)
    3055/E204 : 01                      	XAE
    3056/E205 : CA EF                   	ST	-17(P2)
    3057/E207 : 93 D6                   	JMP	SV_SPLOAD(P3)
    3058/E209 :                         
    3059/E209 :                         ; Insert a program line into BASIC program storage on actual page,
    3060/E209 :                         ; three cases are distinguished, move up, move down lines, add line.
    3061/E209 : C2 EF                   INSRT:	LD	-17(P2)
    3062/E20B : CA F8                   	ST	NUMLO(P2)
    3063/E20D : C2 EE                   	LD	-18(P2)
    3064/E20F : CA F7                   	ST	NUMHI(P2)
    3065/E211 : C2 F1                   	LD	-15(P2)
    3066/E213 : 33                      	XPAL	P3
    3067/E214 : C2 F0                   	LD	-16(P2)
    3068/E216 : 37                      	XPAH	P3
    3069/E217 : C4 03                   	LDI	3
    3070/E219 : CA E7                   	ST	CHRNUM(P2)
    3071/E21B : AA E7                   INS1:	ILD	CHRNUM(P2)
    3072/E21D : C7 01                   	LD	@1(P3)
    3073/E21F : E4 0D                   	XRI	_CR
    3074/E221 : 9C F8                   	JNZ	INS1
    3075/E223 : C2 E7                   	LD	CHRNUM(P2)
    3076/E225 : E4 04                   	XRI	4
    3077/E227 : 9C 02                   	JNZ	INS2
    3078/E229 : CA E7                   	ST	CHRNUM(P2)
    3079/E22B : C2 E7                   INS2:	LD	CHRNUM(P2)
    3080/E22D : 01                      	XAE
    3081/E22E : 9C 14                   	JNZ	MOVE
    3082/E230 : C5 03                   	LD	@3(P1)
    3083/E232 : 40                      	LDE
    3084/E233 : 02                      	CCL
    3085/E234 : F4 FC                   	ADI	0xFC
    3086/E236 : 01                      	XAE
    3087/E237 : C5 01                   INS3:	LD	@1(P1)			; get byte from program and increase
    3088/E239 : E4 0D                   	XRI	_CR
    3089/E23B : 98 07                   	JZ	MOVE
    3090/E23D : 40                      	LDE
    3091/E23E : 02                      	CCL
    3092/E23F : F4 FF                   	ADI	0xFF
    3093/E241 : 01                      	XAE
    3094/E242 : 90 F3                   	JMP	INS3
    3095/E244 : 40                      MOVE:	LDE
    3096/E245 : DA E7                   	OR	CHRNUM(P2)
    3097/E247 : 98 69                   	JZ	ADD1
    3098/E249 : 40                      	LDE
    3099/E24A : 98 64                   	JZ	ADD
    3100/E24C : 94 16                   	JP	UP
    3101/E24E : C1 00                   DOWN:	LD	(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 169 - 10/31/2025 04:19:39 PM


> > > NIBLFP.asm(3102):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3102/E250 : C9 80                   	ST	EREG(P1)
    3103/E252 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    3104/E254 : E4 FF                   	XRI	0xFF
    3105/E256 : 9C F6                   	JNZ	DOWN
    3106/E258 : C1 00                   	LD	(P1)
    3107/E25A : E4 FF                   	XRI	0xFF
    3108/E25C : 9C F0                   	JNZ	DOWN
    3109/E25E : E4 FF                   	XRI	0xFF
> > > NIBLFP.asm(3110):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3110/E260 : C9 80                   	ST	EREG(P1)
    3111/E262 : 90 4C                   	JMP	ADD
    3112/E264 : C1 FE                   UP:	LD	-2(P1)
    3113/E266 : CA EA                   	ST	-22(P2)
    3114/E268 : C4 FF                   	LDI	0xFF
    3115/E26A : C9 FE                   	ST	-2(P1)
    3116/E26C : C4 55                   	LDI	0x55
    3117/E26E : C9 FF                   	ST	-1(P1)
    3118/E270 : C5 01                   UP1:	LD	@1(P1)			; get byte from program and increase
    3119/E272 : E4 FF                   	XRI	0xFF			; is it first terminating X'FF of program area ?
    3120/E274 : 9C FA                   	JNZ	UP1			; no, continue
    3121/E276 : C1 00                   	LD	(P1)			; get actual byte
    3122/E278 : E4 FF                   	XRI	0xFF			; is it second terminating X'FF of program area ?
    3123/E27A : 9C F4                   	JNZ	UP1			; no, continue
    3124/E27C : 35                      	XPAH	P1			; yes, we are done
    3125/E27D : CA EE                   	ST	-18(P2)
    3126/E27F : 35                      	XPAH	P1
    3127/E280 : 31                      	XPAL	P1
    3128/E281 : CA EF                   	ST	-17(P2)
    3129/E283 : 31                      	XPAL	P1
    3130/E284 : 02                      	CCL
    3131/E285 : C2 EF                   	LD	-17(P2)
    3132/E287 : 70                      	ADE
    3133/E288 : C4 00                   	LDI	0
    3134/E28A : F2 EE                   	ADD	-18(P2)
    3135/E28C : E2 EE                   	XOR	-18(P2)
    3136/E28E : D4 F0                   	ANI	0xF0
    3137/E290 : 98 03                   	JZ	UP2
    3138/E292 : C4 00                   	LDI	0
    3139/E294 : 01                      	XAE
    3140/E295 : C1 00                   UP2:	LD	(P1)
> > > NIBLFP.asm(3141):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3141/E297 : C9 80                   	ST	EREG(P1)
    3142/E299 : C5 FF                   	LD	@-1(P1)
    3143/E29B : E4 FF                   	XRI	0xFF
    3144/E29D : 9C F6                   	JNZ	UP2
    3145/E29F : C1 01                   	LD	1(P1)
    3146/E2A1 : E4 55                   	XRI	0x55
    3147/E2A3 : 9C F0                   	JNZ	UP2
    3148/E2A5 : C2 EA                   	LD	-22(P2)
    3149/E2A7 : C9 00                   	ST	(P1)
    3150/E2A9 : C4 0D                   	LDI	_CR
    3151/E2AB : C9 01                   	ST	1(P1)
    3152/E2AD : 40                      	LDE
    3153/E2AE : 98 25                   	JZ	ADD4
    3154/E2B0 : C2 E7                   ADD:	LD	CHRNUM(P2)
    3155/E2B2 : 98 20                   ADD1:	JZ	ADD3
    3156/E2B4 : C2 F1                   	LD	-15(P2)
    3157/E2B6 : 31                      	XPAL	P1
    3158/E2B7 : C2 F0                   	LD	-16(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 170 - 10/31/2025 04:19:39 PM


    3159/E2B9 : 35                      	XPAH	P1
    3160/E2BA : C2 F3                   	LD	-13(P2)
    3161/E2BC : 33                      	XPAL	P3
    3162/E2BD : C2 F2                   	LD	-14(P2)
    3163/E2BF : 37                      	XPAH	P3
    3164/E2C0 : C2 F7                   	LD	NUMHI(P2)
    3165/E2C2 : CF 01                   	ST	@1(P3)
    3166/E2C4 : C2 F8                   	LD	NUMLO(P2)
    3167/E2C6 : CF 01                   	ST	@1(P3)
    3168/E2C8 : C2 E7                   	LD	CHRNUM(P2)
    3169/E2CA : CF 01                   	ST	@1(P3)
    3170/E2CC : C5 01                   ADD2:	LD	@1(P1)			; get byte from program and increase
    3171/E2CE : CF 01                   	ST	@1(P3)			; store in new location
    3172/E2D0 : E4 0D                   	XRI	_CR			; is it terminating <cr> ?
    3173/E2D2 : 9C F8                   	JNZ	ADD2			; no, continue
    3174/E2D4 : 37                      ADD3:	XPAH	P3
    3175/E2D5 : C4 80                   ADD4:	LDI	L(SPRVSR)		; restore P3 to Supervisor
    3176/E2D7 : 33                      	XPAL	P3
    3177/E2D8 : C2 9C                   	LD	-100(P2)
    3178/E2DA : 37                      	XPAH	P3
    3179/E2DB : 9B D6                   	JZ	SV_SPLOAD(P3)
    3180/E2DD : C4 84                   	LDI	(M_AREA-M_BASE)		; 'AREA ERROR' (program area too small)
    3181/E2DF : 93 B4                   	JMP	SV_MSGOUT(P3)
    3182/E2E1 :                         
    3183/E2E1 :                         ; Find a variable in storage.
    3184/E2E1 :                         ; NOTE:	Storage for variables begins at STKBASE+0x0100 and ends at STKBASE+0x03B4
    3185/E2E1 : C3 A2                   FNDVAR:	LD	STKPHI(P3)		; get stack address.H
    3186/E2E3 : DC 01                   	ORI	H(VARSBUF)		; start of variables storage high
    3187/E2E5 : 37                      	XPAH	P3
    3188/E2E6 : C4 00                   	LDI	0
    3189/E2E8 : 33                      	XPAL	P3			; P3 holds begin of variables storage
    3190/E2E9 : C7 01                   FNDV0:	LD	@1(P3)			; load byte of variable storage and incr
    3191/E2EB : 98 4E                   	JZ	FNDV9			; zero means end of variable storage
    3192/E2ED : 94 07                   	JP	FNDV1
    3193/E2EF : 60                      	XRE
    3194/E2F0 : 98 48                   	JZ	FNDV8
    3195/E2F2 : C7 04                   	LD	@4(P3)
    3196/E2F4 : 90 F3                   	JMP	FNDV0
    3197/E2F6 : 60                      FNDV1:	XRE
    3198/E2F7 : 9C 24                   	JNZ	FNDV5
    3199/E2F9 : 31                      	XPAL	P1
    3200/E2FA : CA E8                   	ST	-24(P2)
    3201/E2FC : 31                      	XPAL	P1
    3202/E2FD : 35                      	XPAH	P1
    3203/E2FE : CA E7                   	ST	CHRNUM(P2)
    3204/E300 : 35                      	XPAH	P1
    3205/E301 : C7 01                   FNDV2:	LD	@1(P3)
    3206/E303 : E5 01                   	XOR	@1(P1)
    3207/E305 : 98 FA                   	JZ	FNDV2
    3208/E307 : 94 0E                   	JP	FNDV4
    3209/E309 : E4 80                   	XRI	0x80
    3210/E30B : 98 18                   	JZ	FNDV6
    3211/E30D : C2 E8                   FNDV3:	LD	-24(P2)
    3212/E30F : 31                      	XPAL	P1
    3213/E310 : C2 E7                   	LD	CHRNUM(P2)
    3214/E312 : 35                      	XPAH	P1
    3215/E313 : C7 04                   	LD	@4(P3)
    3216/E315 : 90 D2                   	JMP	FNDV0
    3217/E317 : C2 E8                   FNDV4:	LD	-24(P2)
    3218/E319 : 31                      	XPAL	P1
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 171 - 10/31/2025 04:19:39 PM


    3219/E31A : C2 E7                   	LD	CHRNUM(P2)
    3220/E31C : 35                      	XPAH	P1
    3221/E31D : C7 01                   FNDV5:	LD	@1(P3)
    3222/E31F : 94 FC                   	JP	FNDV5
    3223/E321 : C7 04                   	LD	@4(P3)
    3224/E323 : 90 C4                   	JMP	FNDV0
    3225/E325 : 03                      FNDV6:	SCL
    3226/E326 : C1 00                   	LD	(P1)			; load current storage byte
    3227/E328 : FC 5B                   	CAI	'Z'+1
    3228/E32A : 94 0C                   	JP	FNDV7			; no beginning letter
    3229/E32C : F4 1A                   	ADI	26			; 'Z'-'A'+1
    3230/E32E : 94 DD                   	JP	FNDV3			; found letter
    3231/E330 : F4 07                   	ADI	7			; 'A'-'9'-1
    3232/E332 : 94 04                   	JP	FNDV7			; no digit
    3233/E334 : F4 0A                   	ADI	10			; '9'-'0'+1
    3234/E336 : 94 D5                   	JP	FNDV3			; is digit
    3235/E338 : C4 00                   FNDV7:	LDI	0			; zero means no variable found
    3236/E33A : 01                      FNDV8:	XAE
    3237/E33B : C7 FF                   FNDV9:	LD	@-1(P3)
    3238/E33D : C2 FD                   	LD	AEXOFF(P2)		; load last offset AEXSTK
    3239/E33F : 32                      	XPAL	P2
    3240/E340 : 33                      	XPAL	P3
    3241/E341 : CE FF                   	ST	@-1(P2)			; store P3.L on AEXSTK
    3242/E343 : 37                      	XPAH	P3
    3243/E344 : CE FF                   	ST	@-1(P2)			; store P3.H on AEXSTK
    3244/E346 : C4 80                   	LDI	STKMID			; reset P2 stack (also L(SPRVSR) !)
    3245/E348 : 32                      	XPAL	P2
    3246/E349 : CA FD                   	ST	AEXOFF(P2)		; store offset to AEXSTK
    3247/E34B : C2 9C                   	LD	-100(P2)		; see above, loads SPRVSR high
    3248/E34D : 37                      	XPAH	P3
    3249/E34E : 93 D6                   	JMP	SV_SPLOAD(P3)
    3250/E350 :                         
    3251/E350 : C2 FC                   SAV:	LD	SBROFF(P2)
    3252/E352 : E4 E0                   	XRI	DOSTAK			; is it top of DO/UNTIL stack ?
    3253/E354 : 9B 25                   	JZ	SV_RTNEST(P3)		; yes, no loop
    3254/E356 : C2 7F                   	LD	BASMODE(P2)		; load program/run flag
    3255/E358 : E4 BF                   	XRI	(INCMD + _QMARK)	; are we running?
    3256/E35A : 98 02                   	JZ	SAV1			; yes
    3257/E35C : C4 80                   	LDI	0x80
    3258/E35E : 01                      SAV1:	XAE
    3259/E35F : C2 FC                   	LD	SBROFF(P2)
    3260/E361 : 32                      	XPAL	P2
    3261/E362 : 31                      	XPAL	P1
    3262/E363 : CE FF                   	ST	@-1(P2)
    3263/E365 : 31                      	XPAL	P1
    3264/E366 : 35                      	XPAH	P1
    3265/E367 : 58                      	ORE
    3266/E368 : CE FF                   	ST	@-1(P2)
    3267/E36A : 60                      	XRE
    3268/E36B : 35                      	XPAH	P1
    3269/E36C : 32                      	XPAL	P2
    3270/E36D : CA FC                   	ST	SBROFF(P2)
    3271/E36F : 93 D6                   	JMP	SV_SPLOAD(P3)
    3272/E371 :                         
    3273/E371 : C5 01                   DONE:	LD	@1(P1)			; get byte from program and increase
    3274/E373 : E4 20                   	XRI	' '			; is it <space> ?
    3275/E375 : 98 FA                   	JZ	DONE			; yes, just eat it
    3276/E377 : E4 2D                   	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
    3277/E379 : 9B D6                   	JZ	SV_SPLOAD(P3)
    3278/E37B : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 172 - 10/31/2025 04:19:39 PM


    3279/E37D : 9B D6                   	JZ	SV_SPLOAD(P3)
    3280/E37F : C4 94                   	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
    3281/E381 : 93 B4                   	JMP	SV_MSGOUT(P3)
    3282/E383 :                         
    3283/E383 :                         ;**************************************
    3284/E383 :                         ;*	EXIT FROM BASIC ROUTINE       *
    3285/E383 :                         ;**************************************
    3286/E383 :                         ;
    3287/E383 :                         ; Return to KBPLUS or something else, address is stored on STACK.
    3288/E383 :                         ;
    3289/E383 : C2 77                   BYE:	LD	119(P2)			; load high byte of return address
    3290/E385 : 37                      	XPAH	P3
    3291/E386 : C2 78                   	LD	120(P2)			; load low byte of return address
    3292/E388 : 33                      	XPAL	P3
    3293/E389 : 3F                      	XPPC	P3			; jump to return address
    3294/E38A :                         
    3295/E38A :                         ; Ignore rest of statement, go to next if there is one.
    3296/E38A : C5 01                   IGNRE:	LD	@1(P1)			; get byte from program and increase
    3297/E38C : E4 0D                   	XRI	_CR			; is it <cr> ?
    3298/E38E : 98 7E                   	JZ	NXT
    3299/E390 : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
    3300/E392 : 98 7A                   	JZ	NXT
    3301/E394 : 90 F4                   	JMP	IGNRE
    3302/E396 :                         
    3303/E396 : 98 04                   XFER:	JZ	XFER1
    3304/E398 : C4 C2                   	LDI	(M_NOGO-M_BASE)		; 'NOGO ERROR'
    3305/E39A : 93 B4                   	JMP	SV_MSGOUT(P3)
    3306/E39C : C4 BF                   XFER1:	LDI	(INCMD + _QMARK)	; set "PROGRAM RUNNING"
    3307/E39E : CA 7F                   	ST	BASMODE(P2)		; store program/run flag
    3308/E3A0 : 90 70                   	JMP	NXT1
    3309/E3A2 :                         
    3310/E3A2 : C5 01                   THEN:	LD	@1(P1)			; get byte from program and increase
    3311/E3A4 : E4 20                   	XRI	' '			; is it <space> ?
    3312/E3A6 : 98 FA                   	JZ	THEN			; yes, just eat it
    3313/E3A8 : E4 E3                   	XRI	T_THEN ! ' '		; we XOR'ed above, is it THEN ?
    3314/E3AA : 9B D6                   	JZ	SV_SPLOAD(P3)
    3315/E3AC : C5 FF                   	LD	@-1(P1)
    3316/E3AE : 90 7F                   	JMP	NEXT
    3317/E3B0 : C2 EF                   MOVESR:	LD	-17(P2)
    3318/E3B2 : 07                      	CAS
    3319/E3B3 : C5 01                   DNE:	LD	@1(P1)			; get byte from program and increase
    3320/E3B5 : E4 20                   	XRI	' '			; is it <space> ?
    3321/E3B7 : 98 FA                   	JZ	DNE			; yes, just eat it
    3322/E3B9 : E4 2D                   	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
    3323/E3BB : 98 51                   	JZ	NXT
    3324/E3BD : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
    3325/E3BF : 98 4D                   	JZ	NXT
    3326/E3C1 : C4 94                   	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
    3327/E3C3 : 93 B4                   	JMP	SV_MSGOUT(P3)
    3328/E3C5 : C2 FD                   CMPRE:	LD	AEXOFF(P2)
    3329/E3C7 : 32                      	XPAL	P2
    3330/E3C8 : 01                      	XAE
    3331/E3C9 : C2 01                   	LD	1(P2)
    3332/E3CB : DE 04                   	OR	@4(P2)
    3333/E3CD : 01                      	XAE
    3334/E3CE : 32                      	XPAL	P2
    3335/E3CF : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    3336/E3D1 : 40                      	LDE
    3337/E3D2 : 9C CE                   	JNZ	THEN
    3338/E3D4 : C5 01                   ELS:	LD	@1(P1)			; get byte from program and increase
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 173 - 10/31/2025 04:19:39 PM


    3339/E3D6 : E4 0D                   	XRI	_CR			; is it <CR> ?
    3340/E3D8 : 98 34                   	JZ	NXT			; yes, end of line!
    3341/E3DA : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
    3342/E3DC : 98 0C                   	JZ	ELS2
    3343/E3DE : E4 18                   	XRI	':' ! '"'		; we XOR'ed above, is it <quote> ?
    3344/E3E0 : 9C F2                   	JNZ	ELS
    3345/E3E2 : C5 01                   ELS1:	LD	@1(P1)			; get byte from program and increase
    3346/E3E4 : E4 22                   	XRI	'"'			; is it <quote> ?
    3347/E3E6 : 9C FA                   	JNZ	ELS1			; nope, keep scanning
    3348/E3E8 : 90 EA                   	JMP	ELS
    3349/E3EA : C5 01                   ELS2:	LD	@1(P1)			; get byte from program and increase
    3350/E3EC : E4 20                   	XRI	' '			; is it <space> ?
    3351/E3EE : 98 FA                   	JZ	ELS2			; yes, just eat it
    3352/E3F0 : E4 AE                   	XRI	T_ELSE ! ' '		; we XOR'ed above
    3353/E3F2 : 98 3B                   	JZ	NEXT
    3354/E3F4 : C5 FF                   	LD	@-1(P1)
    3355/E3F6 : 90 DC                   	JMP	ELS
    3356/E3F8 : C2 7E                   SNTX:	LD	ERRNUML(P2)		; load number low
    3357/E3FA : CA F8                   	ST	NUMLO(P2)		; and store for PRNUM
    3358/E3FC : C2 7D                   	LD	ERRNUMH(P2)		; load number high
    3359/E3FE : CA F7                   	ST	NUMHI(P2)		; and store for PRNUM
    3360/E400 : C4 D7                   SYNTX:	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
    3361/E402 : 93 B4                   	JMP	SV_MSGOUT(P3)
    3362/E404 : C4 AC                   ENDPR:	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
    3363/E406 : 93 B4                   	JMP	SV_MSGOUT(P3)
    3364/E408 : C5 01                   IGNORE:	LD	@1(P1)			; get byte from program and increase
    3365/E40A : E4 0D                   	XRI	_CR			; is it a <cr> ?
    3366/E40C : 9C FA                   	JNZ	IGNORE			; no, keep reading
    3367/E40E : C2 7F                   NXT:	LD	BASMODE(P2)		; load program / run flag
    3368/E410 : 94 06                   	JP	NXT2			; are we at the command line?
    3369/E412 : C1 00                   NXT1:	LD	(P1)			; get current byte from program
    3370/E414 : E4 FF                   	XRI	0xFF			; is it $FF (end of program) ?
    3371/E416 : 9C 04                   	JNZ	NXT3			; no, so not done yet
    3372/E418 : C4 0A                   NXT2:	LDI	(M_RDY-M_BASE)		; 'READY'
    3373/E41A : 93 B4                   	JMP	SV_MSGOUT(P3)
    3374/E41C : 06                      NXT3:	CSA				; get CPU status
    3375/E41D : D4 20                   	ANI	0x20			; test SENSEB (start bit)
    3376/E41F : 98 71                   	JZ	BRK			; if not clear, all OK, continue
    3377/E421 : C1 FF                   	LD	-1(P1)			; continue to execute
    3378/E423 : E4 0D                   	XRI	_CR
    3379/E425 : 9C 08                   	JNZ	NEXT
    3380/E427 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    3381/E429 : CA F7                   	ST	NUMHI(P2)
    3382/E42B : C5 02                   	LD	@2(P1)
    3383/E42D : CA F8                   	ST	NUMLO(P2)
    3384/E42F : C2 7F                   NEXT:	LD	BASMODE(P2)		; load command/run flag
    3385/E431 : 01                      	XAE				; save in E
    3386/E432 : C5 01                   NEXT1:	LD	@1(P1)			; get byte from program and increase
    3387/E434 : E4 20                   	XRI	' '			; is it <space> ?
    3388/E436 : 98 FA                   	JZ	NEXT1			; yep, just eat it
    3389/E438 : 94 16                   	JP	NEXT3			; no token, potential variable
    3390/E43A : 03                      	SCL
    3391/E43B : C1 FF                   	LD	-1(P1)			; load last byte
    3392/E43D : FC A3                   	CAI	T_LET+1			; must be positive if token not allowed
    3393/E43F : 94 BF                   	JP	SYNTX			; tokens beyond LET not allowed
    3394/E441 : F4 23                   	ADI	T_LET-127		; restore token without bit7 set
    3395/E443 : 01                      	XAE				; command/run flag in A, token in E
    3396/E444 : 94 05                   	JP	NEXT2			; all tokens in lookup table allowed
    3397/E446 : C4 09                   	LDI	T_LAST-128		; clear bit7
    3398/E448 : 78                      	CAE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 174 - 10/31/2025 04:19:39 PM


    3399/E449 : 94 B5                   	JP	SYNTX			; first tokens not allowed
    3400/E44B : 02                      NEXT2:	CCL
    3401/E44C : 40                      	LDE				; calculate offset
    3402/E44D : 70                      	ADE
    3403/E44E : 90 04                   	JMP	NEXT4
    3404/E450 : C5 FF                   NEXT3:	LD	@-1(P1)			; re-get byte to correct P1
    3405/E452 : C4 44                   	LDI	(T_LET-128)*2		; set offset for LET
    3406/E454 : 01                      NEXT4:	XAE				; E holds offset
    3407/E455 : (MACRO)[1353]           	LDPI	P3,(ILSTRT+2)		; calculate lookup table address
    3407/E455 : C4 B7                            LDI    L((ILSTRT+2))
    3407/E457 : 33                               XPAL   P3
    3407/E458 : C4 D8                            LDI    H((ILSTRT+2))
    3407/E45A : 37                               XPAH   P3
> > > NIBLFP.asm(3408):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3408/E45B : C7 80                   	LD	@EREG(P3)
    3409/E45D : C4 80                   	LDI	L(SPRVSR)		; set P3 to SPRVSR
    3410/E45F : 33                      	XPAL	P3
    3411/E460 : CA FF                   	ST	-1(P2)			; store next ILCALL address low
    3412/E462 : C4 D4                   	LDI	H(SPRVSR)
    3413/E464 : 37                      	XPAH	P3
    3414/E465 : CA FE                   	ST	-2(P2)			; store next ILCALL address high
    3415/E467 : 93 D6                   	JMP	SV_SPLOAD(P3)
    3416/E469 :                         
    3417/E469 : C2 FB                   SAVEDO:	LD	DOUOFF(P2)
    3418/E46B : E4 D4                   	XRI	FORSTK			; is FOR/NEXT stack reached ?
    3419/E46D : 9B 25                   	JZ	SV_RTNEST(P3)		; yes, too many loops
    3420/E46F : E4 D4                   	XRI	FORSTK			; we XOR'ed above, restore byte
    3421/E471 : 32                      	XPAL	P2
    3422/E472 : 31                      	XPAL	P1
    3423/E473 : CE FF                   	ST	@-1(P2)
    3424/E475 : 31                      	XPAL	P1
    3425/E476 : 35                      	XPAH	P1
    3426/E477 : CE FF                   	ST	@-1(P2)
    3427/E479 : 35                      	XPAH	P1
    3428/E47A : 32                      	XPAL	P2
    3429/E47B : CA FB                   	ST	DOUOFF(P2)
    3430/E47D : 90 93                   	JMP	NXT1
    3431/E47F :                         
    3432/E47F :                         ; Convert current pointer P1.H into PAGE number.
    3433/E47F : 35                      DETPGE:	XPAH	P1			; load P1.H into E
    3434/E480 : 01                      	XAE
    3435/E481 : 40                      	LDE
    3436/E482 : 35                      	XPAH	P1
    3437/E483 : 40                      	LDE
    3438/E484 : 1C                      	SR				; shift AC (divide by 16)
    3439/E485 : 1C                      	SR
    3440/E486 : 1C                      	SR
    3441/E487 : 1C                      	SR
    3442/E488 : CA F6                   	ST	CURPG(P2)		; store page #
    3443/E48A : 90 82                   	JMP	NXT
    3444/E48C :                         
    3445/E48C :                         ; leave UNTIL and execute next statement; do not move (jump distance.)
    3446/E48C : AA FB                   LVUNTL:	ILD	DOUOFF(P2)		; adjust DSTAK by two up
    3447/E48E : AA FB                   	ILD	DOUOFF(P2)
    3448/E490 : 90 80                   	JMP	NXT1
    3449/E492 :                         
    3450/E492 :                         ; Send BREAK message after END statement, sometimes used otherwise.
    3451/E492 : C4 00                   BRK:	LDI	(M_BRK-M_BASE)		; 'BREAK'
    3452/E494 : 93 B4                   	JMP	SV_MSGOUT(P3)
    3453/E496 :                         
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 175 - 10/31/2025 04:19:39 PM


    3454/E496 : C2 FB                   UNTL:	LD	DOUOFF(P2)
    3455/E498 : E4 E0                   	XRI	DOSTAK			; is this top of DO/UNTIL stack ?
    3456/E49A : 9C 04                   	JNZ	UNTL1			; no, perform loop
    3457/E49C : C4 E6                   	LDI	(M_UNTL-M_BASE)		; 'UNTIL ERROR'
    3458/E49E : 93 B4                   	JMP	SV_MSGOUT(P3)
    3459/E4A0 : C2 FD                   UNTL1:	LD	AEXOFF(P2)
    3460/E4A2 : 32                      	XPAL	P2
    3461/E4A3 : 01                      	XAE
    3462/E4A4 : C2 01                   	LD	1(P2)
    3463/E4A6 : DE 04                   	OR	@4(P2)
    3464/E4A8 : 01                      	XAE
    3465/E4A9 : 32                      	XPAL	P2
    3466/E4AA : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    3467/E4AC : 40                      	LDE
    3468/E4AD : 9C DD                   	JNZ	LVUNTL
    3469/E4AF : C2 FB                   	LD	DOUOFF(P2)
    3470/E4B1 : 32                      	XPAL	P2
    3471/E4B2 : 35                      	XPAH	P1
    3472/E4B3 : C2 01                   	LD	1(P2)
    3473/E4B5 : 31                      	XPAL	P1
    3474/E4B6 : C2 00                   	LD	(P2)
    3475/E4B8 : 35                      	XPAH	P1
    3476/E4B9 : 32                      	XPAL	P2
    3477/E4BA : 90 C3                   	JMP	DETPGE
    3478/E4BC :                         
    3479/E4BC : C4 BF                   STRT:	LDI	(INCMD + _QMARK)	; set "PROGRAM RUNNING" mode
    3480/E4BE : CA 7F                   	ST	BASMODE(P2)		; store program/run flag
    3481/E4C0 : C4 00                   	LDI	0
    3482/E4C2 : CA F8                   	ST	NUMLO(P2)		; set line number to zero
    3483/E4C4 : CA F7                   	ST	NUMHI(P2)
    3484/E4C6 : C4 D4                   CLRSTK:	LDI	FORSTK			; top of FOR/NEXT stack
    3485/E4C8 : CA FA                   	ST	FOROFF(P2)
    3486/E4CA : C4 E0                   	LDI	DOSTAK			; top of DO/UNTIL stack
    3487/E4CC : CA FB                   	ST	DOUOFF(P2)
    3488/E4CE : C4 F0                   	LDI	L(SBRSTK)
    3489/E4D0 : CA FC                   	ST	SBROFF(P2)
    3490/E4D2 :                         ; FIXME: Next not needed anymore.
    3491/E4D2 :                         ;	LDI	(M_RDY-M_BASE)		; 'READY'
    3492/E4D2 : (MACRO)[1354]           	RTRN
    3492/E4D2 : 3F                               XPPC   P3
    3492/E4D3 : 00                               DB     0
    3493/E4D4 :                         
    3494/E4D4 :                         ; Return from GOSUB statement
    3495/E4D4 : C2 FC                   RSTR:	LD	SBROFF(P2)
    3496/E4D6 : E4 F0                   	XRI	L(SBRSTK)		; is it top of GOSUB/RETURN stack
    3497/E4D8 : 9C 04                   	JNZ	RSTR1			; no, continue
    3498/E4DA : C4 D1                   	LDI	(M_RTRN-M_BASE)		; 'RETURN ERROR'
    3499/E4DC : 93 B4                   	JMP	SV_MSGOUT(P3)
    3500/E4DE : AA FC                   RSTR1:	ILD	SBROFF(P2)		; adjust SBRSTK by two up
    3501/E4E0 : AA FC                   	ILD	SBROFF(P2)
    3502/E4E2 : 32                      	XPAL	P2
    3503/E4E3 : C2 FE                   	LD	-2(P2)
    3504/E4E5 : 94 04                   	JP	RSTR2
    3505/E4E7 : C4 0A                   	LDI	(M_RDY-M_BASE)		; 'READY'
    3506/E4E9 : 93 27                   	JMP	SV_RTERRN(P3)
    3507/E4EB : 35                      RSTR2:	XPAH	P1
    3508/E4EC : C2 FF                   	LD	-1(P2)
    3509/E4EE : 31                      	XPAL	P1
    3510/E4EF : C4 80                   	LDI	STKMID
    3511/E4F1 : 32                      	XPAL	P2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 176 - 10/31/2025 04:19:39 PM


    3512/E4F2 : 90 8B                   	JMP	DETPGE
    3513/E4F4 :                         
    3514/E4F4 :                         ; Store pointer P1 and scan input for quote.
    3515/E4F4 : 31                      STPNT:	XPAL	P1			; store current P1 into -15,-16 STACK
    3516/E4F5 : CA F1                   	ST	-15(P2)
    3517/E4F7 : 31                      	XPAL	P1
    3518/E4F8 : 35                      	XPAH	P1
    3519/E4F9 : CA F0                   	ST	-16(P2)
    3520/E4FB : 35                      	XPAH	P1
    3521/E4FC : C5 01                   STPNT1:	LD	@1(P1)			; get byte from program and increase
    3522/E4FE : E4 22                   	XRI	'"'			; is it <quote> ?
    3523/E500 : 9C FA                   	JNZ	STPNT1			; no, keep scanning
    3524/E502 : 93 D6                   	JMP	SV_SPLOAD(P3)
    3525/E504 :                         
    3526/E504 :                         ; Load pointer P1 back.
    3527/E504 : C2 F1                   LDPNT:	LD	-15(P2)			; load pointer from -15,-16 STACK
    3528/E506 : CA ED                   	ST	-19(P2)			; store into -19,-20
    3529/E508 : C2 F0                   	LD	-16(P2)
    3530/E50A : CA EC                   	ST	-20(P2)
    3531/E50C : 93 D6                   	JMP	SV_SPLOAD(P3)
    3532/E50E :                         
    3533/E50E :                         ; Identify variable and store in memory followed by 4-byte zero value.
    3534/E50E :                         ; NOTE:	Storage for variables begins at STKBASE+0x0100 and ends at STKBASE+0x03B4
    3535/E50E : 9B D6                   DEFVAR:	JZ	SV_SPLOAD(P3)
    3536/E510 : C5 FF                   	LD	@-1(P1)			; set back to previous program byte
    3537/E512 : C2 FD                   	LD	AEXOFF(P2)		; load previous P2.L STACK
    3538/E514 : 32                      	XPAL	P2
    3539/E515 : C2 01                   	LD	1(P2)			; load P3 from top of STACK
    3540/E517 : 33                      	XPAL	P3			; and use it to hold var name
    3541/E518 : C2 00                   	LD	(P2)
    3542/E51A : 37                      	XPAH	P3
    3543/E51B : C4 00                   	LDI	0
    3544/E51D : 01                      	XAE				; E is used in error handling, see below
    3545/E51E : 90 06                   	JMP	DEFV2
    3546/E520 : AA 01                   DEFV1:	ILD	1(P2)			; increase STACK stored P3, full 16-bit
    3547/E522 : 9C 02                   	JNZ	DEFV2
    3548/E524 : AA 00                   	ILD	(P2)
    3549/E526 : 03                      DEFV2:	SCL
    3550/E527 : C2 00                   	LD	(P2)			; load stored P3.H
    3551/E529 : D4 0F                   	ANI	0x0F			; stay in page, only last 4 bits
    3552/E52B : FC 0F                   	CAI	0x0F			; still enough stack space ?
    3553/E52D : 94 74                   	JP	DEFERR			; throw variable stack error
    3554/E52F : 40                      	LDE				; E is used in error handling, see below
    3555/E530 : F4 FF                   	ADI	0xFF
    3556/E532 : 01                      	XAE				; E = E + 255
    3557/E533 : C5 01                   	LD	@1(P1)			; get byte from program and incr
    3558/E535 : CF 01                   	ST	@1(P3)			; store byte in var stack and incr
    3559/E537 : 03                      	SCL				; now test for letter or digit
    3560/E538 : C1 00                   	LD	(P1)			; get current byte from program
    3561/E53A : FC 5B                   	CAI	'Z'+1
    3562/E53C : 94 0C                   	JP	DEFV3			; completed, no letter or digit anymore
    3563/E53E : F4 1A                   	ADI	26			; 'Z'-'A'+1
    3564/E540 : 94 DE                   	JP	DEFV1			; found letter
    3565/E542 : F4 07                   	ADI	7			; 'A'-'9'-1
    3566/E544 : 94 04                   	JP	DEFV3			; no digit either, go complete operation
    3567/E546 : F4 0A                   	ADI	10			; '9'-'0'+1
    3568/E548 : 94 D6                   	JP	DEFV1			; is digit
    3569/E54A : C3 FF                   DEFV3:	LD	-1(P3)			; load previous char of var name
    3570/E54C : DC 80                   	ORI	0x80
    3571/E54E : CB FF                   	ST	-1(P3)			; bit7 set terminates var name
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 177 - 10/31/2025 04:19:39 PM


    3572/E550 : C1 00                   	LD	(P1)			; get current byte from program
    3573/E552 : E4 24                   	XRI	'$'			; is it '$' ?
    3574/E554 : 98 55                   	JZ	VARERR			; string is not allowed here !
    3575/E556 : E4 0C                   	XRI	'$' ! '('		; we XOR'ed above, is it '(' ?
    3576/E558 : 98 51                     	JZ	VARERR			; array is not allowed here !
    3577/E55A : C4 00                   	LDI	0
    3578/E55C : CB 04                   	ST	4(P3)			; set exponent of var to zero
    3579/E55E : C4 80                   	LDI	STKMID			; reset P2 stack pointer
    3580/E560 : 32                      	XPAL	P2
    3581/E561 : (MACRO)[1355]           	LDPI	P3,SPRVSR		; reset P3 to supervisor
    3581/E561 : C4 80                            LDI    L(SPRVSR)
    3581/E563 : 33                               XPAL   P3
    3581/E564 : C4 D4                            LDI    H(SPRVSR)
    3581/E566 : 37                               XPAH   P3
    3582/E567 : 93 D6                   	JMP	SV_SPLOAD(P3)		; next instruction
    3583/E569 :                         
    3584/E569 :                         ; Find line number (the label) in program context.
    3585/E569 :                         ; Searched line number is stored in STACK -18,-17.
    3586/E569 :                         ; Routine returns zero in A if label was found.
    3587/E569 : C4 02                   FNDLBL:	LDI	2			; set P1 to begin of BASIC program lines
    3588/E56B : 31                      	XPAL	P1
    3589/E56C : CA F1                   	ST	-15(P2)
    3590/E56E : C2 F6                   	LD	CURPG(P2)		; convert page# into P1 high
    3591/E570 : 1E                      	RR				; rotate right AC (multiply by 16)
    3592/E571 : 1E                      	RR
    3593/E572 : 1E                      	RR
    3594/E573 : 1E                      	RR
    3595/E574 : 35                      	XPAH	P1
    3596/E575 : CA F0                   	ST	-16(P2)			; store P1 in STACK -16,-15
    3597/E577 : C1 00                   FNDLB1:	LD	(P1)			; load high byte of line number
    3598/E579 : E4 FF                   	XRI	0xFF			; is it -1 (end of program lines ?)
    3599/E57B : 9C 06                   	JNZ	FNDLB2			; no, valid line number
    3600/E57D : C1 01                   	LD	1(P1)			; load second byte
    3601/E57F : E4 FF                   	XRI	0xFF			; is it -1 ?
    3602/E581 : 98 13                   	JZ	FNDLB3			; go, end of program lines reached
    3603/E583 : 03                      FNDLB2:	SCL				; compare line numbers
    3604/E584 : C1 01                   	LD	1(P1)
    3605/E586 : FA EF                   	CAD	-17(P2)
    3606/E588 : 01                      	XAE
    3607/E589 : C1 00                   	LD	(P1)
    3608/E58B : FA EE                   	CAD	-18(P2)
    3609/E58D : 94 09                   	JP	FNDLB4
    3610/E58F : C1 02                   	LD	2(P1)			; length of program line
    3611/E591 : 01                      	XAE
> > > NIBLFP.asm(3612):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3612/E592 : C5 80                   	LD	@EREG(P1)		; advance to next line
    3613/E594 : 90 E1                   	JMP	FNDLB1			; have a new look
    3614/E596 : C4 80                   FNDLB3:	LDI	0x80			; not found, set bit7
    3615/E598 : 58                      FNDLB4:	ORE
    3616/E599 : 31                      	XPAL	P1
    3617/E59A : CA F3                   	ST	-13(P2)
    3618/E59C : 31                      	XPAL	P1
    3619/E59D : 35                      	XPAH	P1
    3620/E59E : CA F2                   	ST	-14(P2)
    3621/E5A0 : 35                      	XPAH	P1
    3622/E5A1 : (MACRO)[1356]           	RTRN
    3622/E5A1 : 3F                               XPPC   P3
    3622/E5A2 : 00                               DB     0
    3623/E5A3 :                         
    3624/E5A3 :                         ; Some error handling.
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 178 - 10/31/2025 04:19:39 PM


    3625/E5A3 : C4 00                   DEFERR:	LDI	0
> > > NIBLFP.asm(3626):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3626/E5A5 : CF 80                   	ST	@EREG(P3)
    3627/E5A7 : C4 F8                   	LDI	(M_VRST-M_BASE)		; 'VARIABLE STACK'
    3628/E5A9 : 90 04                   	JMP	HDLERR
> > > NIBLFP.asm(3629):13: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    3629/E5AB : CF 80                   VARERR:	ST	@EREG(P3)
    3630/E5AD : C4 F0                   	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
    3631/E5AF : 37                      HDLERR:	XPAH	P3			; P3.H holds offset temporarily
    3632/E5B0 : (MACRO)[1357]           	LDPI	P3,SPRVSR
    3632/E5B0 : C4 80                            LDI    L(SPRVSR)
    3632/E5B2 : 33                               XPAL   P3
    3632/E5B3 : C4 D4                            LDI    H(SPRVSR)
    3632/E5B5 : 37                               XPAH   P3
    3633/E5B6 : 93 27                   	JMP	SV_RTERRN(P3)
    3634/E5B8 :                         
    3635/E5B8 : C2 7F                   CKMODE:	LD	BASMODE(P2)		; load program/run flag
    3636/E5BA : E4 80                   	XRI	INCMD			; invert high bit
    3637/E5BC : 97 D6                   	JP	SV_SPLOAD(P3)		; was set, so in run mode, OK
    3638/E5BE : C4 DD                   	LDI	(M_STMT-M_BASE)		; 'STATEMENT ERROR'
    3639/E5C0 : 93 B4                   	JMP	SV_MSGOUT(P3)		; not running, throw error
    3640/E5C2 :                         
    3641/E5C2 :                         ; Print spaces (number determined by stack value.)
    3642/E5C2 : C2 EF                   SPC:	LD	-17(P2)			; get argument value
    3643/E5C4 : 9B 5B                   	JZ	SV_RTFUNC(P3)		; zero, nothing to do here
    3644/E5C6 : C4 20                   SPC1:	LDI	' '			; load <space>
    3645/E5C8 : =>DEFINED               	IFDEF	SCALLS
    3646/E5C8 : (MACRO)[1358]           	 SYSCALL	2
    3646/E5C8 : 3F                               XPPC   P3
    3646/E5C9 : 02                               DB     2
    3647/E5CA : =>FALSE                 	ELSE
    3648/E5CA :                         	 CALL	PUTASC
    3649/E5CA : [3645]                  	ENDIF				; print it
    3650/E5CA : BA EF                   	DLD	-17(P2)			; decrement counter
    3651/E5CC : 9C F8                   	JNZ	SPC1			; do again
    3652/E5CE : 93 5B                   	JMP	SV_RTFUNC(P3)		; all done
    3653/E5D0 :                         
    3654/E5D0 :                         ; Print string terminated by quote.
    3655/E5D0 : C5 01                   PRSTRG:	LD	@1(P1)			; get byte from program and increase
    3656/E5D2 : E4 22                   	XRI	'"'			; is it <quote> ?
    3657/E5D4 : 9B 5B                   	JZ	SV_RTFUNC(P3)		; yes, all done
    3658/E5D6 : C1 FF                   	LD	-1(P1)			; no, re-load char from string
    3659/E5D8 : =>DEFINED               	IFDEF	SCALLS
    3660/E5D8 : (MACRO)[1359]           	 SYSCALL	2
    3660/E5D8 : 3F                               XPPC   P3
    3660/E5D9 : 02                               DB     2
    3661/E5DA : =>FALSE                 	ELSE
    3662/E5DA :                         	 CALL	PUTASC
    3663/E5DA : [3659]                  	ENDIF				; print it
    3664/E5DA : 90 F4                   	JMP	PRSTRG			; do again
    3665/E5DC :                         
    3666/E5DC : =>FALSE                 	IF	0
    3667/E5DC :                         ; FIXME: Following switched off, new PRNUM is on page D
    3668/E5DC :                         ; Get 16-bit number (label) from BASIC program line and store on STACK.
    3669/E5DC :                         SPRNUM:	LD	@1(P1)			; get byte from program and increase
    3670/E5DC :                         	ST	NUMHI(P2)		; save high byte of number
    3671/E5DC :                         	LD	@2(P1)			; get byte from program and advance by 2
    3672/E5DC :                         	ST	NUMLO(P2)		; save low byte of number
    3673/E5DC :                         
    3674/E5DC :                         ; FIXME: Added just for fun another routine to convert binaries into decimal representation.
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 179 - 10/31/2025 04:19:39 PM


    3675/E5DC :                         ; old routine is enclosed in IFNDEF..ELSE..ENDIF statements.
    3676/E5DC :                         	IFNDEF	KBPLUS
    3677/E5DC :                         ; Print 16-bit number on STACK -9, -8 as decimal ASCII-representation.
    3678/E5DC :                         PRNUM:	LD	AEXOFF(P2)
    3679/E5DC :                         	XPAL	P1
    3680/E5DC :                         	ST	-15(P2)			; save P1.low
    3681/E5DC :                         	LD	STKPHI(P3)
    3682/E5DC :                         	XPAH	P1
    3683/E5DC :                         	ST	-16(P2)			; save P1.high
    3684/E5DC :                         	LDI	' '			; positive, store leading space
    3685/E5DC :                         	ST	-5(P1)			; save as prefix for number
    3686/E5DC :                         	LDI	-6			; load index of first digit
    3687/E5DC :                         	ST	CHRNUM(P2)		; store as digit counter
    3688/E5DC :                         	LD	NUMLO(P2)
    3689/E5DC :                         	ST	-3(P1)
    3690/E5DC :                         	LD	NUMHI(P2)		; load 16-bit number..
    3691/E5DC :                         	ST	-4(P1)			; and put as dividend on AEX STACK
    3692/E5DC :                         	JP	DIV
    3693/E5DC :                         	LDI	'-'			; negative, so store <minus>
    3694/E5DC :                         	ST	-5(P1)			; save as prefix for number
    3695/E5DC :                         	SCL
    3696/E5DC :                         	LDI	0			; negate number on AEX STACK
    3697/E5DC :                         	CAD	NUMLO(P2)
    3698/E5DC :                         	ST	-3(P1)
    3699/E5DC :                         	LDI	0
    3700/E5DC :                         	CAD	NUMHI(P2)
    3701/E5DC :                         	ST	-4(P1)
    3702/E5DC :                         ; NOTE: Place for quotient is reserved at -2 and -1 of AEX STACK.
    3703/E5DC :                         DIV:	LDI	0			; clear quotient
    3704/E5DC :                         	ST	-1(P1)
    3705/E5DC :                         	ST	-2(P1)
    3706/E5DC :                         	XAE				; set E to zero
    3707/E5DC :                         	LDI	16			; shift 16 bit
    3708/E5DC :                         	ST	-6(P1)			; store as bit counter below number
    3709/E5DC :                         DIVLP:	CCL
    3710/E5DC :                         	LD	-1(P1)			; shift 4 byte left one bit
    3711/E5DC :                         	ADD	-1(P1)
    3712/E5DC :                         	ST	-1(P1)
    3713/E5DC :                         	LD	-2(P1)
    3714/E5DC :                         	ADD	-2(P1)
    3715/E5DC :                         	ST	-2(P1)
    3716/E5DC :                         	LD	-3(P1)
    3717/E5DC :                         	ADD	-3(P1)
    3718/E5DC :                         	ST	-3(P1)
    3719/E5DC :                         	LD	-4(P1)
    3720/E5DC :                         	ADD	-4(P1)
    3721/E5DC :                         	ST	-4(P1)
    3722/E5DC :                         	LDE
    3723/E5DC :                         	ADE				; shift carry into E
    3724/E5DC :                         	XAE
    3725/E5DC :                         	LDE
    3726/E5DC :                         	ADI	-10			; subtract 10
    3727/E5DC :                         	JP	DIV1			; go, greater/equal 10
    3728/E5DC :                         	JMP	DIV2			; otherwise subtraction "failed"
    3729/E5DC :                         DIV1:	XAE
    3730/E5DC :                         	ILD	-1(P1)			; increase quotient
    3731/E5DC :                         DIV2:	DLD	-6(P1)			; decrease bit counter
    3732/E5DC :                         	JNZ	DIVLP			; loop again
    3733/E5DC :                         ; NOTE: AEX STACK -6 is now zero, serves as delimiter for ASCII string.
    3734/E5DC :                         	DLD	CHRNUM(P2)		; decrease digit counter
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 180 - 10/31/2025 04:19:39 PM


    3735/E5DC :                         	XAE				; put into E, A holds now remainder from divide
    3736/E5DC :                         	ORI	'0'			; prepare ASCII value
    3737/E5DC :                         	ST	EREG(P1)		; put it on AEX STACK
    3738/E5DC :                         	LD	-1(P1)			; store incomplete quotient as new dividend
    3739/E5DC :                         	ST	-3(P1)
    3740/E5DC :                         	LD	-2(P1)
    3741/E5DC :                         	ST	-4(P1)
    3742/E5DC :                         	OR	-3(P1)
    3743/E5DC :                         	JNZ	DIV			; loop, quotient not yet zero
    3744/E5DC :                         	ELSE
    3745/E5DC :                         ; Print 16-bit number on STACK -9, -8 as decimal ASCII-representation.
    3746/E5DC :                         ; From historical reasons the division by ten is realized by bit shifting,
    3747/E5DC :                         ; first mentioned by Dennis Allison in Dr. Dobb's Journal Vol.1, p.2 (January 1976).
    3748/E5DC :                         ; Advantage: Less loops while calculating BUT very gossipy code
    3749/E5DC :                         PRNUM:	LD	AEXOFF(P2)
    3750/E5DC :                         	XPAL	P1
    3751/E5DC :                         	ST	-15(P2)			; save P1.low
    3752/E5DC :                         	LDI	H(STKBASE)
    3753/E5DC :                         	XPAH	P1
    3754/E5DC :                         	ST	-16(P2)			; save P1.high
    3755/E5DC :                         	LDI	' '			; positive, store leading space
    3756/E5DC :                         	ST	-7(P1)			; save as prefix for number
    3757/E5DC :                         	LDI	-6			; load index for first digit
    3758/E5DC :                         	ST	CHRNUM(P2)		; store as digit counter
    3759/E5DC :                         	LD	NUMLO(P2)		; load line number from STACK
    3760/E5DC :                         	ST	@-1(P1)
    3761/E5DC :                         	LD	NUMHI(P2)		; load 16-bit number..
    3762/E5DC :                         	ST	@-1(P1)			; and put as dividend on top of AEX STACK
    3763/E5DC :                         	JP	DIV
    3764/E5DC :                         	LDI	'-'			; negative, so store <minus>
    3765/E5DC :                         	ST	-5(P1)			; save as prefix for number
    3766/E5DC :                         	SCL
    3767/E5DC :                         	LDI	0			; negate number on AEX STACK
    3768/E5DC :                         	CAD	1(P1)
    3769/E5DC :                         	ST	1(P1)
    3770/E5DC :                         	LDI	0
    3771/E5DC :                         	CAD	(P1)
    3772/E5DC :                         	ST	(P1)
    3773/E5DC :                         ; NOTE:	Place for quotient is reserved at -2 and -1 of AEX STACK.
    3774/E5DC :                         DIV:	CCL				; shift number 1 bit right
    3775/E5DC :                         	LD	(P1)
    3776/E5DC :                         	RRL
    3777/E5DC :                         	ST	-2(P1)
    3778/E5DC :                         	LD	1(P1)
    3779/E5DC :                         	RRL
    3780/E5DC :                         	ST	-1(P1)			; and store n >> 1 two bytes lower
    3781/E5DC :                         	CCL				; shift 1 bit right
    3782/E5DC :                         	LD	-2(P1)
    3783/E5DC :                         	RRL
    3784/E5DC :                         	ST	-4(P1)
    3785/E5DC :                         	LD	-1(P1)
    3786/E5DC :                         	RRL
    3787/E5DC :                         	ST	-3(P1)			; and store n >> 2 two bytes lower
    3788/E5DC :                         ; NOTE:	Add n >> 1 and n >> 2
    3789/E5DC :                         	CCL
    3790/E5DC :                         	LD	-3(P1)
    3791/E5DC :                         	ADD	-1(P1)
    3792/E5DC :                         	ST	-1(P1)
    3793/E5DC :                         	ST	-3(P1)
    3794/E5DC :                         	LD	-4(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 181 - 10/31/2025 04:19:39 PM


    3795/E5DC :                         	ADD	-2(P1)
    3796/E5DC :                         	ST	-2(P1)
    3797/E5DC :                         	ST	-4(P1)
    3798/E5DC :                         ; NOTE:	Shift 4 bits right.
    3799/E5DC :                         	LDI	4			; shift 4 bit
    3800/E5DC :                         	ST	-6(P1)			; store as bit counter below number
    3801/E5DC :                         SHFTR4:	CCL				; shift 1 bit right
    3802/E5DC :                         	LD	-4(P1)
    3803/E5DC :                         	RRL
    3804/E5DC :                         	ST	-4(P1)
    3805/E5DC :                         	LD	-3(P1)
    3806/E5DC :                         	RRL
    3807/E5DC :                         	ST	-3(P1)
    3808/E5DC :                         	DLD	-6(P1)
    3809/E5DC :                         	JNZ	SHFTR4			; continue shift loop
    3810/E5DC :                         ; NOTE:	add to result from above
    3811/E5DC :                         	CCL
    3812/E5DC :                         	LD	-3(P1)
    3813/E5DC :                         	ADD	-1(P1)
    3814/E5DC :                         	ST	-1(P1)
    3815/E5DC :                         	ST	-3(P1)
    3816/E5DC :                         	LD	-4(P1)
    3817/E5DC :                         	ADD	-2(P1)
    3818/E5DC :                         	ST	-2(P1)
    3819/E5DC :                         	ST	-4(P1)
    3820/E5DC :                         	LDI	8			; shift 8 bit
    3821/E5DC :                         	ST	-6(P1)			; store as bit counter below number
    3822/E5DC :                         SHFTR8:	CCL				; shift 1 bit right
    3823/E5DC :                         	LD	-4(P1)
    3824/E5DC :                         	RRL
    3825/E5DC :                         	ST	-4(P1)
    3826/E5DC :                         	LD	-3(P1)
    3827/E5DC :                         	RRL
    3828/E5DC :                         	ST	-3(P1)
    3829/E5DC :                         	DLD	-6(P1)
    3830/E5DC :                         	JNZ	SHFTR8			; continue shift loop
    3831/E5DC :                         ; NOTE:	add to result from above
    3832/E5DC :                         	CCL
    3833/E5DC :                         	LD	-3(P1)
    3834/E5DC :                         	ADD	-1(P1)
    3835/E5DC :                         	ST	-1(P1)
    3836/E5DC :                         	ST	-3(P1)
    3837/E5DC :                         	LD	-4(P1)
    3838/E5DC :                         	ADD	-2(P1)
    3839/E5DC :                         	ST	-2(P1)
    3840/E5DC :                         	ST	-4(P1)			; multiplied with 13107/16384 = 0.799987793
    3841/E5DC :                         	LDI	3			; shift 3 bit
    3842/E5DC :                         	ST	-6(P1)			; store as bit counter below number
    3843/E5DC :                         	JMP	SHFTR3
    3844/E5DC :                         DIV1:	JMP	DIV			; stepping stone
    3845/E5DC :                         ; NOTE: now divide by 8, factor over all is then 0.099998474, roughly 0.1
    3846/E5DC :                         SHFTR3:	CCL				; shift 1 bit right
    3847/E5DC :                         	LD	-2(P1)
    3848/E5DC :                         	RRL
    3849/E5DC :                         	ST	-2(P1)
    3850/E5DC :                         	LD	-1(P1)
    3851/E5DC :                         	RRL
    3852/E5DC :                         	ST	-1(P1)
    3853/E5DC :                         	DLD	-6(P1)
    3854/E5DC :                         	JNZ	SHFTR3			; continue shift loop
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 182 - 10/31/2025 04:19:39 PM


    3855/E5DC :                         ; NOTE:	Quotient q is now multiplied by ten.
    3856/E5DC :                         	CCL				; shift quotient 1 bit left
    3857/E5DC :                         	LD	-1(P1)
    3858/E5DC :                         	ADD	-1(P1)
    3859/E5DC :                         	ST	-3(P1)
    3860/E5DC :                         	LD	-2(P1)
    3861/E5DC :                         	ADD	-2(P1)
    3862/E5DC :                         	ST	-4(P1)			; and store q << 1 two bytes lower
    3863/E5DC :                         	CCL				; shift 1 bit left
    3864/E5DC :                         	LD	-3(P1)
    3865/E5DC :                         	ADD	-3(P1)
    3866/E5DC :                         	ST	-3(P1)
    3867/E5DC :                         	LD	-4(P1)
    3868/E5DC :                         	ADD	-4(P1)
    3869/E5DC :                         	ST	-4(P1)			; and store q << 2
    3870/E5DC :                         	CCL
    3871/E5DC :                         	LD	-3(P1)
    3872/E5DC :                         	ADD	-1(P1)
    3873/E5DC :                         	ST	-3(P1)
    3874/E5DC :                         	LD	-4(P1)
    3875/E5DC :                         	ADD	-2(P1)
    3876/E5DC :                         	ST	-4(P1)			; ((q << 2) + q) = 5 * q
    3877/E5DC :                         ; NOTE:	Let the quotient unchanged.
    3878/E5DC :                         	CCL
    3879/E5DC :                         	LD	-3(P1)
    3880/E5DC :                         	ADD	-3(P1)
    3881/E5DC :                         	ST	-3(P1)
    3882/E5DC :                         	LD	-4(P1)
    3883/E5DC :                         	ADD	-4(P1)
    3884/E5DC :                         	ST	-4(P1)			; (((q << 2) + q)) << 2) = 10 * q
    3885/E5DC :                         ; NOTE:	Calculate the remainder.
    3886/E5DC :                         	SCL
    3887/E5DC :                         	LD	1(P1)
    3888/E5DC :                         	CAD	-3(P1)
    3889/E5DC :                         	ST	-3(P1)			; r = n - 10 * q (only low is needed)
    3890/E5DC :                         	XAE				; put remainder into E
    3891/E5DC :                         	SCL
    3892/E5DC :                         	LDI	9
    3893/E5DC :                         	CAE				; is remainder less than ten ?
    3894/E5DC :                         	JP	GSTORE			; yes, go and store
    3895/E5DC :                         	SCL				; otherwise subtract ten..
    3896/E5DC :                         	LDE
    3897/E5DC :                         	CAI	10
    3898/E5DC :                         	XAE
    3899/E5DC :                         	ILD	-1(P1)			; ..and increase quotient by one
    3900/E5DC :                         	JNZ	GSTORE
    3901/E5DC :                         	ILD	-2(P1)
    3902/E5DC :                         GSTORE:	DLD	CHRNUM(P2)
    3903/E5DC :                         	XAE
    3904/E5DC :                         	ORI	'0'			; prepare ASCII value
    3905/E5DC :                         	ST	EREG(P1)		; put it E indexed on AEX STACK
    3906/E5DC :                         	LD	-1(P1)			; store quotient as next dividend
    3907/E5DC :                         	ST	1(P1)
    3908/E5DC :                         	LD	-2(P1)
    3909/E5DC :                         	ST	(P1)
    3910/E5DC :                         	OR	1(P1)			; is quotient zero ?
    3911/E5DC :                         	JNZ	DIV1			; no, loop again
    3912/E5DC : [3676]                  	ENDIF
    3913/E5DC :                         	DLD	CHRNUM(P2)
    3914/E5DC :                         	XAE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 183 - 10/31/2025 04:19:39 PM


    3915/E5DC :                         	LD	-5(P1)			; load prefix for number
    3916/E5DC :                         	ST	@EREG(P1)		; advance stack to begin of number string and store
    3917/E5DC :                         PRNT:	LD	@1(P1)			; load digit from stack and increase
    3918/E5DC :                         	JZ	PNEND			; zero ends printing, see above
    3919/E5DC :                         	IFDEF	SCALLS
    3920/E5DC :                         	 SYSCALL	2
    3921/E5DC :                         	ELSE
    3922/E5DC :                         	 CALL	PUTASC
    3923/E5DC : [3919]                  	ENDIF
    3924/E5DC :                         	JMP	PRNT
    3925/E5DC :                         PNEND:	LD	-15(P2)			; restore P1 and return
    3926/E5DC :                         	XPAL	P1
    3927/E5DC :                         	LD	-16(P2)
    3928/E5DC :                         	XPAH	P1
    3929/E5DC :                         	RTRN
    3930/E5DC : [3666]                  	ENDIF
    3931/E5DC :                         
    3932/E5DC :                         ; Relational operators.
    3933/E5DC : C4 01                   EQU:	LDI	1
    3934/E5DE : 90 12                   	JMP	CMP
    3935/E5E0 : C4 02                   NEQ:	LDI	2
    3936/E5E2 : 90 0E                   	JMP	CMP
    3937/E5E4 : C4 03                   LSS:	LDI	3
    3938/E5E6 : 90 0A                   	JMP	CMP
    3939/E5E8 : C4 04                   LEQ:	LDI	4
    3940/E5EA : 90 06                   	JMP	CMP
    3941/E5EC : C4 05                   GTR:	LDI	5
    3942/E5EE : 90 02                   	JMP	CMP
    3943/E5F0 : C4 06                   GEQ:	LDI	6
    3944/E5F2 : CA EB                   CMP:	ST	COUNTR(P2)
    3945/E5F4 : C2 FD                   	LD	AEXOFF(P2)
    3946/E5F6 : 31                      	XPAL	P1
    3947/E5F7 : CA F1                   	ST	-15(P2)
    3948/E5F9 : C3 A2                   	LD	STKPHI(P3)
    3949/E5FB : 35                      	XPAH	P1
    3950/E5FC : CA F0                   	ST	-16(P2)
    3951/E5FE : C1 05                   	LD	5(P1)
    3952/E600 : CA EE                   	ST	-18(P2)
    3953/E602 : C1 01                   	LD	1(P1)
    3954/E604 : CA EF                   	ST	-17(P2)
    3955/E606 : (MACRO)[1360]           	CALL	FSUB
    3955/E606 : 3F                               XPPC   P3
    3955/E607 : F1                               DB     H(FSUB)
    3955/E608 : 39                               DB     L(FSUB)
    3956/E609 : C1 01                   	LD	1(P1)
    3957/E60B : E2 EE                   	XOR	-18(P2)
    3958/E60D : 01                      	XAE
    3959/E60E : C2 EE                   	LD	-18(P2)
    3960/E610 : E2 EF                   	XOR	-17(P2)
    3961/E612 : 50                      	ANE
    3962/E613 : E1 01                   	XOR	1(P1)
    3963/E615 : CA EA                   	ST	-22(P2)
    3964/E617 : C1 01                   	LD	1(P1)
    3965/E619 : D9 00                   	OR	(P1)
    3966/E61B : 98 02                   	JZ	SETZ
    3967/E61D : C4 80                   	LDI	0x80
    3968/E61F : E4 80                   SETZ:	XRI	0x80
    3969/E621 : 01                      	XAE
    3970/E622 : BA EB                   	DLD	COUNTR(P2)
    3971/E624 : 9C 03                   	JNZ	NEQU
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 184 - 10/31/2025 04:19:39 PM


    3972/E626 : 40                      	LDE
    3973/E627 : 90 29                   	JMP	CMPR
    3974/E629 : BA EB                   NEQU:	DLD	COUNTR(P2)
    3975/E62B : 9C 05                   	JNZ	LESS
    3976/E62D : 40                      	LDE
    3977/E62E : E4 80                   	XRI	0x80
    3978/E630 : 90 20                   	JMP	CMPR
    3979/E632 : BA EB                   LESS:	DLD	COUNTR(P2)
    3980/E634 : 9C 04                   	JNZ	LEQU
    3981/E636 : C2 EA                   	LD	-22(P2)
    3982/E638 : 90 18                   	JMP	CMPR
    3983/E63A : BA EB                   LEQU:	DLD	COUNTR(P2)
    3984/E63C : 9C 05                   	JNZ	GRTR
    3985/E63E : 40                      	LDE
    3986/E63F : DA EA                   	OR	-22(P2)
    3987/E641 : 90 0F                   	JMP	CMPR
    3988/E643 : BA EB                   GRTR:	DLD	COUNTR(P2)
    3989/E645 : 9C 07                   	JNZ	GEQU
    3990/E647 : 40                      	LDE
    3991/E648 : DA EA                   	OR	-22(P2)
    3992/E64A : E4 80                   	XRI	0x80
    3993/E64C : 90 04                   	JMP	CMPR
    3994/E64E : C2 EA                   GEQU:	LD	-22(P2)
    3995/E650 : E4 80                   	XRI	0x80
    3996/E652 : 94 0A                   CMPR:	JP	FLSE
    3997/E654 : C4 80                   	LDI	0x80
    3998/E656 : C9 00                   	ST	(P1)
    3999/E658 : C4 40                   	LDI	0x40
    4000/E65A : C9 01                   	ST	1(P1)
    4001/E65C : 90 06                   	JMP	STRE1
    4002/E65E : C4 00                   FLSE:	LDI	0
    4003/E660 : C9 00                   	ST	(P1)
    4004/E662 : C9 01                   	ST	1(P1)
    4005/E664 : C4 00                   STRE1:	LDI	0
    4006/E666 : C9 02                   	ST	2(P1)
    4007/E668 : C9 03                   	ST	3(P1)
    4008/E66A : C2 F1                   	LD	-15(P2)
    4009/E66C : 31                      	XPAL	P1
    4010/E66D : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4011/E66F : C2 F0                   	LD	-16(P2)
    4012/E671 : 35                      	XPAH	P1
    4013/E672 : 93 5B                   	JMP	SV_RTFUNC(P3)
    4014/E674 :                         
    4015/E674 : C2 F3                   STBCK:	LD	-13(P2)			; restore P1.L
    4016/E676 : 31                      	XPAL	P1
    4017/E677 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4018/E679 : C2 F2                   	LD	-14(P2)
    4019/E67B : 35                      	XPAH	P1			; restore P1.H
    4020/E67C : 93 5B                   	JMP	SV_RTFUNC(P3)
    4021/E67E :                         
    4022/E67E :                         ; Implement LIST command.
    4023/E67E : 03                      LST1:	SCL
    4024/E67F : C1 01                   	LD	1(P1)
    4025/E681 : FA EF                   	CAD	-17(P2)
    4026/E683 : 01                      	XAE
    4027/E684 : C1 00                   	LD	(P1)
    4028/E686 : FA EE                   	CAD	-18(P2)
    4029/E688 : 94 0C                   	JP	LST3
    4030/E68A : C1 00                   LST2:	LD	(P1)			; test for end of program lines
    4031/E68C : E4 FF                   	XRI	0xFF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 185 - 10/31/2025 04:19:39 PM


    4032/E68E : 9C 0D                   	JNZ	LST4
    4033/E690 : C1 01                   	LD	1(P1)
    4034/E692 : E4 FF                   	XRI	0xFF
    4035/E694 : 9C 07                   	JNZ	LST4
    4036/E696 : 58                      LST3:	ORE
    4037/E697 : 98 04                   	JZ	LST4	 		; go, print actual line
    4038/E699 : C4 0A                   	LDI	(M_RDY-M_BASE)		; 'READY'
    4039/E69B : 93 B4                   	JMP	SV_MSGOUT(P3)
    4040/E69D : (MACRO)[1361]           LST4:	CALL	SPRNUM			; first print line number
    4040/E69D : 3F                               XPPC   P3
    4040/E69E : D2                               DB     H(SPRNUM)
    4040/E69F : 10                               DB     L(SPRNUM)
    4041/E6A0 : C5 01                   LST5:	LD	@1(P1)			; get byte of actual line and incr
    4042/E6A2 : 94 26                   	JP	LST9			; no token, so go and print char
    4043/E6A4 :                         ; FIXME: Can we use ext reg instead of chrnum ?
    4044/E6A4 : CA E7                   	ST	CHRNUM(P2)		; store token temporarily
    4045/E6A6 : C4 3D                   	LDI	L(TOKENS)		; load P1 with token table
    4046/E6A8 : 31                      	XPAL	P1
    4047/E6A9 : CA F1                   	ST	-15(P2)			; save prev P1.L
    4048/E6AB : C4 D7                   	LDI	H(TOKENS)
    4049/E6AD : 35                      	XPAH	P1
    4050/E6AE : CA F0                   	ST	-16(P2)			; save prev P1.H
    4051/E6B0 : C2 E7                   LST6:	LD	CHRNUM(P2)		; load token again
    4052/E6B2 : E5 01                   	XOR	@1(P1)			; compare with token from table
    4053/E6B4 : 98 06                   	JZ	LST8			; found, so go and print related keyword
    4054/E6B6 : C5 01                   LST7:	LD	@1(P1)			; not found, skip keyword
    4055/E6B8 : 94 FC                   	JP	LST7
    4056/E6BA : 90 F4                   	JMP	LST6			; test next token in table
    4057/E6BC : C5 01                   LST8:	LD	@1(P1)			; get char of keyword and incr
    4058/E6BE : =>DEFINED               	IFDEF	SCALLS
    4059/E6BE : (MACRO)[1362]           	 SYSCALL	2
    4059/E6BE : 3F                               XPPC   P3
    4059/E6BF : 02                               DB     2
    4060/E6C0 : =>FALSE                 	ELSE
    4061/E6C0 :                         	 CALL	PUTASC
    4062/E6C0 : [4058]                  	ENDIF
    4063/E6C0 : 94 FA                   	JP	LST8
    4064/E6C2 : C2 F1                   	LD	-15(P2)			; restore P1
    4065/E6C4 : 31                      	XPAL	P1
    4066/E6C5 : C2 F0                   	LD	-16(P2)
    4067/E6C7 : 35                      	XPAH	P1
    4068/E6C8 : 90 D6                   	JMP	LST5			; go ahead with rest of line
    4069/E6CA : =>DEFINED               LST9:	IFDEF	SCALLS
    4070/E6CA : (MACRO)[1363]           	 SYSCALL	2
    4070/E6CA : 3F                               XPPC   P3
    4070/E6CB : 02                               DB     2
    4071/E6CC : =>FALSE                 	ELSE
    4072/E6CC :                         	 CALL	PUTASC
    4073/E6CC : [4069]                  	ENDIF
    4074/E6CC : E4 0D                   	XRI	_CR			; was it <cr> (end of line ?)
    4075/E6CE : 9C D0                   	JNZ	LST5			; no, continue
    4076/E6D0 : C4 0A                   	LDI	_LF			; yes, print <lf>
    4077/E6D2 : =>DEFINED               	IFDEF	SCALLS
    4078/E6D2 : (MACRO)[1364]           	 SYSCALL	2
    4078/E6D2 : 3F                               XPPC   P3
    4078/E6D3 : 02                               DB     2
    4079/E6D4 : =>FALSE                 	ELSE
    4080/E6D4 :                         	 CALL	PUTASC
    4081/E6D4 : [4077]                  	ENDIF
    4082/E6D4 : 06                      	CSA				; get CPU status
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 186 - 10/31/2025 04:19:39 PM


    4083/E6D5 : D4 20                   	ANI	0x20			; check for start bit (we have input)
    4084/E6D7 : 9F D6                   	JNZ	SV_SPLOAD(P3)		; nope, continue
    4085/E6D9 : C4 00                   	LDI	(M_BRK-M_BASE)		; 'BREAK'
    4086/E6DB : 93 B4                   	JMP	SV_MSGOUT(P3)
    4087/E6DD :                         
    4088/E6DD :                         ; Look on new page for GOSUB or GOTO statement,
    4089/E6DD :                         ; GOSUB resp.GOTO must follow <cr> or <colon>.
    4090/E6DD : C1 FF                   LKPAGE:	LD	-1(P1)			; get previous byte from program
    4091/E6DF : E4 0D                   	XRI	_CR			; is it <cr> ?
    4092/E6E1 : 98 15                   	JZ	CHPAGE
    4093/E6E3 : C4 FF                   	LDI	0xFF
    4094/E6E5 : CA E7                   	ST	CHRNUM(P2)		; set counter to -1
    4095/E6E7 : AA E7                   LKPGE:	ILD	CHRNUM(P2)		; increase by 1
    4096/E6E9 : 01                      	XAE				; exchange with E
> > > NIBLFP.asm(4097):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    4097/E6EA : C1 80                   	LD	EREG(P1)		; load byte E-indexed
    4098/E6EC : E4 20                   	XRI	' '			; is it <space> ?
    4099/E6EE : 98 F7                   	JZ	LKPGE			; yes, eat it
    4100/E6F0 : E4 B1                   	XRI	' ' ! T_GOSUB		; we XOR'ed above, is it <gosub> ?
    4101/E6F2 : 98 14                   	JZ	CHPGE			; found GOSUB token
    4102/E6F4 : E4 03                   	XRI	T_GOSUB ! T_GOTO	; we XOR'ed above, is it <goto> ?
    4103/E6F6 : 98 10                   	JZ	CHPGE			; found GOTO token
    4104/E6F8 : C4 02                   CHPAGE:	LDI	2			; begin of program lines
    4105/E6FA : CA ED                   	ST	-19(P2)
    4106/E6FC : 31                      	XPAL	P1
    4107/E6FD : C2 F6                   	LD	CURPG(P2)		; convert page# into P1 high
    4108/E6FF : 1E                      	RR
    4109/E700 : 1E                      	RR
    4110/E701 : 1E                      	RR
    4111/E702 : 1E                      	RR
    4112/E703 : CA EC                   	ST	-20(P2)
    4113/E705 : 35                      	XPAH	P1
    4114/E706 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4115/E708 : C4 02                   CHPGE:	LDI	2			; begin of program lines
    4116/E70A : CA ED                   	ST	-19(P2)
    4117/E70C : C2 F6                   	LD	CURPG(P2)		; convert page# into P1 high
    4118/E70E : 1E                      	RR
    4119/E70F : 1E                      	RR
    4120/E710 : 1E                      	RR
    4121/E711 : 1E                      	RR
    4122/E712 : CA EC                   	ST	-20(P2)
    4123/E714 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4124/E716 :                         
    4125/E716 :                         ; Put the number one (DCM 1.0) onto stack.
    4126/E716 : C2 FD                   ONE:	LD	AEXOFF(P2)
    4127/E718 : 32                      	XPAL	P2			; AC holds STKMID
    4128/E719 : CE FC                   	ST	@SBROFF(P2)		; save as EXP
    4129/E71B : 1C                      	SR				; shift right
    4130/E71C : CA 01                   	ST	1(P2)			; save as M1
    4131/E71E : C4 00                   	LDI	0
    4132/E720 : CA 02                   	ST	2(P2)
    4133/E722 : CA 03                   	ST	3(P2)
    4134/E724 : C4 80                   	LDI	STKMID
    4135/E726 : 32                      	XPAL	P2
    4136/E727 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4137/E729 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4138/E72B :                         
    4139/E72B : C2 FA                   SAVFOR:	LD	FOROFF(P2)
    4140/E72D : 01                      	XAE
    4141/E72E : 40                      	LDE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 187 - 10/31/2025 04:19:39 PM


    4142/E72F : E4 A4                   	XRI	L(ILCSTK)		; maximum depth for FOR/NEXT STACK reached ?
    4143/E731 : 9B 25                   	JZ	SV_RTNEST(P3)		; yes, too much nested FOR/NEXT loops
    4144/E733 : C3 A2                   	LD	STKPHI(P3)
    4145/E735 : 37                      	XPAH	P3
    4146/E736 : C2 FD                   	LD	AEXOFF(P2)
    4147/E738 : 32                      	XPAL	P2
    4148/E739 : 40                      	LDE
    4149/E73A : E4 D4                   SFOR1:	XRI	L(FORSTK)
    4150/E73C : 98 12                   	JZ	SFOR3
    4151/E73E : E4 D4                   	XRI	L(FORSTK)		; we XOR'ed above, restore
    4152/E740 : 33                      	XPAL	P3
    4153/E741 : C2 0C                   	LD	12(P2)
    4154/E743 : E7 0C                   	XOR	@12(P3)
    4155/E745 : 9C 06                   	JNZ	SFOR2
    4156/E747 : C2 0D                   	LD	13(P2)
    4157/E749 : E3 F5                   	XOR	-11(P3)
    4158/E74B : 98 05                   	JZ	SFOR4
    4159/E74D : 33                      SFOR2:	XPAL	P3
    4160/E74E : 90 EA                   	JMP	SFOR1
    4161/E750 : 40                      SFOR3:	LDE
    4162/E751 : 33                      	XPAL	P3
    4163/E752 : 31                      SFOR4:	XPAL	P1
    4164/E753 : CF FF                   	ST	@-1(P3)
    4165/E755 : 31                      	XPAL	P1
    4166/E756 : 35                      	XPAH	P1
    4167/E757 : CF FF                   	ST	@-1(P3)
    4168/E759 : 35                      	XPAH	P1
    4169/E75A : C2 07                   	LD	7(P2)
    4170/E75C : CF FF                   	ST	@-1(P3)
    4171/E75E : C2 06                   	LD	6(P2)
    4172/E760 : CF FF                   	ST	@-1(P3)
    4173/E762 : C2 05                   	LD	5(P2)
    4174/E764 : CF FF                   	ST	@-1(P3)
    4175/E766 : C2 04                   	LD	4(P2)
    4176/E768 : CF FF                   	ST	@-1(P3)
    4177/E76A : C2 03                   	LD	3(P2)
    4178/E76C : CF FF                   	ST	@-1(P3)
    4179/E76E : C2 02                   	LD	2(P2)
    4180/E770 : CF FF                   	ST	@-1(P3)
    4181/E772 : C2 01                   	LD	1(P2)
    4182/E774 : CF FF                   	ST	@-1(P3)
    4183/E776 : C6 08                   	LD	@8(P2)
    4184/E778 : CF FF                   	ST	@-1(P3)
    4185/E77A : C2 05                   	LD	5(P2)
    4186/E77C : CF FF                   	ST	@-1(P3)
    4187/E77E : C2 04                   	LD	4(P2)
    4188/E780 : CF FF                   	ST	@-1(P3)
    4189/E782 : C4 80                   	LDI	STKMID
    4190/E784 : 32                      	XPAL	P2
    4191/E785 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4192/E787 : 33                      	XPAL	P3
    4193/E788 : CA FA                   	ST	FOROFF(P2)
    4194/E78A : C2 FD                   STVAR:	LD	AEXOFF(P2)
    4195/E78C : 32                      	XPAL	P2
    4196/E78D : C2 05                   	LD	5(P2)
    4197/E78F : 33                      	XPAL	P3
    4198/E790 : C2 04                   	LD	4(P2)
    4199/E792 : 37                      	XPAH	P3
    4200/E793 : C6 06                   	LD	@6(P2)
    4201/E795 : CB 01                   	ST	1(P3)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 188 - 10/31/2025 04:19:39 PM


    4202/E797 : C2 FB                   	LD	-5(P2)
    4203/E799 : CB 02                   	ST	2(P3)
    4204/E79B : C2 FC                   	LD	-4(P2)
    4205/E79D : CB 03                   	ST	3(P3)
    4206/E79F : C2 FD                   	LD	-3(P2)
    4207/E7A1 : CB 04                   	ST	4(P3)
    4208/E7A3 : C4 80                   	LDI	STKMID
    4209/E7A5 : 32                      	XPAL	P2
    4210/E7A6 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4211/E7A8 : C4 80                   	LDI	L(SPRVSR)
    4212/E7AA : 33                      	XPAL	P3
    4213/E7AB : C2 9C                   	LD	-100(P2)
    4214/E7AD : 37                      	XPAH	P3
    4215/E7AE : 93 D6                   	JMP	SV_SPLOAD(P3)
    4216/E7B0 :                         
    4217/E7B0 : 98 04                   NXTVAR:	JZ	VARFND
    4218/E7B2 : C4 F0                   	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
    4219/E7B4 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4220/E7B6 : C5 01                   VARFND:	LD	@1(P1)			; get byte from program and increase
    4221/E7B8 : E4 20                   	XRI	' '			; is it <space> ?
    4222/E7BA : 98 FA                   	JZ	VARFND			; yes, just eat it
    4223/E7BC : E4 2D                   	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
    4224/E7BE : 98 08                   	JZ	VAR1
    4225/E7C0 : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
    4226/E7C2 : 98 04                   	JZ	VAR1
    4227/E7C4 : C4 94                   	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
    4228/E7C6 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4229/E7C8 : C2 FA                   VAR1:	LD	FOROFF(P2)
    4230/E7CA : E4 D4                   	XRI	L(FORSTK)
    4231/E7CC : 9C 04                   	JNZ	VAR2
    4232/E7CE : C4 BE                   	LDI	(M_NEXT-M_BASE)		; 'NEXT ERROR'
    4233/E7D0 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4234/E7D2 : AA FD                   VAR2:	ILD	AEXOFF(P2)		; adjust AEXSTK by two up
    4235/E7D4 : AA FD                   	ILD	AEXOFF(P2)
    4236/E7D6 : 31                      	XPAL	P1
    4237/E7D7 : CA F1                   	ST	-15(P2)
    4238/E7D9 : C3 A2                   	LD	STKPHI(P3)
    4239/E7DB : 35                      	XPAH	P1
    4240/E7DC : CA F0                   	ST	-16(P2)
    4241/E7DE : C2 FA                   VAR3:	LD	FOROFF(P2)
    4242/E7E0 : 32                      	XPAL	P2
    4243/E7E1 : C1 FF                   	LD	-1(P1)
    4244/E7E3 : E2 01                   	XOR	1(P2)
    4245/E7E5 : 9C 06                   	JNZ	VAR4
    4246/E7E7 : C1 FE                   	LD	-2(P1)
    4247/E7E9 : E2 00                   	XOR	(P2)
    4248/E7EB : 98 0F                   	JZ	VAR5
    4249/E7ED : C6 0C                   VAR4:	LD	@12(P2)
    4250/E7EF : C4 80                   	LDI	STKMID
    4251/E7F1 : 32                      	XPAL	P2
    4252/E7F2 : CA FA                   	ST	FOROFF(P2)
    4253/E7F4 : E4 D4                   	XRI	L(FORSTK)		; is variable on FOR/NEXT stack ?
    4254/E7F6 : 9C E6                   	JNZ	VAR3			; yes, continue
    4255/E7F8 : C4 B4                   	LDI	(M_FOR-M_BASE)		; 'FOR ERROR'
    4256/E7FA : 93 B4                   	JMP	SV_MSGOUT(P3)
    4257/E7FC : 03                      VAR5:	SCL
    4258/E7FD : C4 0C                   	LDI	12
    4259/E7FF : FC 01                   VAR6:	CAI	1
    4260/E801 : 01                      	XAE
> > > NIBLFP.asm(4261):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 189 - 10/31/2025 04:19:39 PM


    4261/E802 : C2 80                   	LD	EREG(P2)
    4262/E804 : CD FF                   	ST	@-1(P1)
    4263/E806 : 40                      	LDE
    4264/E807 : 9C F6                   	JNZ	VAR6
    4265/E809 : 1D                      	SRL
    4266/E80A : 32                      	XPAL	P2
    4267/E80B : C1 03                   	LD	3(P1)
    4268/E80D : CA EA                   	ST	-22(P2)
    4269/E80F : 31                      	XPAL	P1
    4270/E810 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4271/E812 : 31                      	XPAL	P1
    4272/E813 : C5 FE                   	LD	@-2(P1)
    4273/E815 : C2 FD                   LDVAR:	LD	AEXOFF(P2)		; load last AEXSTK.L
    4274/E817 : 32                      	XPAL	P2
    4275/E818 : C2 01                   	LD	1(P2)			; set P3 to var address
    4276/E81A : 33                      	XPAL	P3
    4277/E81B : C2 00                   	LD	(P2)
    4278/E81D : 37                      	XPAH	P3
    4279/E81E : 01                      	XAE				; save P3.H in E
    4280/E81F : C3 04                   	LD	4(P3)			; load value from var
    4281/E821 : CA 01                   	ST	1(P2)			; and store in temp
    4282/E823 : C3 03                   	LD	3(P3)
    4283/E825 : CA 00                   	ST	(P2)
    4284/E827 : C3 02                   	LD	2(P3)
    4285/E829 : CA FF                   	ST	-1(P2)
    4286/E82B : C3 01                   	LD	1(P3)
    4287/E82D : CE FE                   	ST	@-2(P2)
    4288/E82F : C4 80                   	LDI	STKMID			; restore P2.L
    4289/E831 : 32                      	XPAL	P2
    4290/E832 : CA FD                   	ST	AEXOFF(P2)		; save actual STACK.L
    4291/E834 : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    4292/E836 : 33                      	XPAL	P3
    4293/E837 : 40                      	LDE
    4294/E838 : 37                      	XPAH	P3
    4295/E839 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4296/E83B :                         
    4297/E83B :                         ; Load address of version string on STACK.
    4298/E83B : C2 FD                   LDVER:	LD	AEXOFF(P2)		; load last STACK.L
    4299/E83D : 32                      	XPAL	P2
    4300/E83E : C4 13                   	LDI	L(VERSTR)
    4301/E840 : CE FF                   	ST	@-1(P2)
    4302/E842 : C4 D0                   	LDI	H(VERSTR)
    4303/E844 : CE FF                   	ST	@-1(P2)
    4304/E846 : C4 80                   	LDI	STKMID			; restore P2.L
    4305/E848 : 32                      	XPAL	P2
    4306/E849 : CA FD                   	ST	AEXOFF(P2)		; save actual STACK.L
    4307/E84B : 93 D6                   	JMP	SV_SPLOAD(P3)
    4308/E84D :                         
    4309/E84D : C2 FA                   NXTV:	LD	FOROFF(P2)
    4310/E84F : 32                      	XPAL	P2
    4311/E850 : C2 00                   	LD	(P2)
    4312/E852 : 01                      	XAE
    4313/E853 : C2 01                   	LD	1(P2)
    4314/E855 : 32                      	XPAL	P2
    4315/E856 : 40                      	LDE
    4316/E857 : 36                      	XPAH	P2
    4317/E858 : C1 00                   	LD	(P1)
    4318/E85A : CA 01                   	ST	1(P2)
    4319/E85C : C1 01                   	LD	1(P1)
    4320/E85E : CA 02                   	ST	2(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 190 - 10/31/2025 04:19:39 PM


    4321/E860 : C1 02                   	LD	2(P1)
    4322/E862 : CA 03                   	ST	3(P2)
    4323/E864 : C1 03                   	LD	3(P1)
    4324/E866 : CA 04                   	ST	4(P2)
    4325/E868 : C4 80                   	LDI	STKMID
    4326/E86A : 32                      	XPAL	P2
    4327/E86B : C3 A2                   	LD	STKPHI(P3)
    4328/E86D : 36                      	XPAH	P2
    4329/E86E : C2 EA                   	LD	-22(P2)
    4330/E870 : 94 1A                   	JP	NXTV2
    4331/E872 : (MACRO)[1365]           	CALL	SWAP
    4331/E872 : 3F                               XPPC   P3
    4331/E873 : F0                               DB     H(SWAP)
    4331/E874 : 35                               DB     L(SWAP)
    4332/E875 : (MACRO)[1366]           	CALL	FSUB
    4332/E875 : 3F                               XPPC   P3
    4332/E876 : F1                               DB     H(FSUB)
    4332/E877 : 39                               DB     L(FSUB)
    4333/E878 : C1 01                   	LD	1(P1)
    4334/E87A : E4 80                   	XRI	0x80
    4335/E87C : 94 15                   	JP	NXTV3
    4336/E87E : C5 06                   NXTV1:	LD	@6(P1)
    4337/E880 : C1 FE                   	LD	-2(P1)
    4338/E882 : 01                      	XAE
    4339/E883 : C1 FF                   	LD	-1(P1)
    4340/E885 : 31                      	XPAL	P1
    4341/E886 : CA FD                   	ST	AEXOFF(P2)		; store actual AEXSTK.L
    4342/E888 : 40                      	LDE
    4343/E889 : 35                      	XPAH	P1
    4344/E88A : 93 D6                   	JMP	SV_SPLOAD(P3)
    4345/E88C : (MACRO)[1367]           NXTV2:	CALL	FSUB
    4345/E88C : 3F                               XPPC   P3
    4345/E88D : F1                               DB     H(FSUB)
    4345/E88E : 39                               DB     L(FSUB)
    4346/E88F : C1 01                   	LD	1(P1)
    4347/E891 : 94 EB                   	JP	NXTV1
    4348/E893 : 02                      NXTV3:	CCL
    4349/E894 : C2 FA                   	LD	FOROFF(P2)
    4350/E896 : F4 0C                   	ADI	12			; adjust FORSTK.L by 12 up
    4351/E898 : CA FA                   	ST	FOROFF(P2)
    4352/E89A : C5 06                   	LD	@6(P1)
    4353/E89C : C2 F1                   	LD	-15(P2)
    4354/E89E : 31                      	XPAL	P1
    4355/E89F : CA FD                   	ST	AEXOFF(P2)		; store actual AEXSTK.L
    4356/E8A1 : C2 F0                   	LD	-16(P2)
    4357/E8A3 : 35                      	XPAH	P1
    4358/E8A4 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4359/E8A6 :                         
    4360/E8A6 :                         ; Load pointer P1 to search for DATA.
    4361/E8A6 : C2 ED                   LDDTA:	LD	-19(P2)			; load P1 from STACK -20,-19
    4362/E8A8 : 31                      	XPAL	P1
    4363/E8A9 : CA F1                   	ST	-15(P2)			; and store old one on STACK -16,-15
    4364/E8AB : C2 EC                   	LD	-20(P2)
    4365/E8AD : 35                      	XPAH	P1
    4366/E8AE : CA F0                   	ST	-16(P2)
    4367/E8B0 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4368/E8B2 :                         
    4369/E8B2 :                         ; Find next DATA statement.
    4370/E8B2 : C1 FF                   NXTDTA:	LD	-1(P1)			; was previous BASIC char
    4371/E8B4 : E4 0D                   	XRI	_CR			; .. a <cr> ?
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 191 - 10/31/2025 04:19:39 PM


    4372/E8B6 : 98 1E                   	JZ	DTA2			; no, keep scanning
    4373/E8B8 : C5 01                   DTA1:	LD	@1(P1)			; get byte from program and increase
    4374/E8BA : E4 20                   	XRI	' '			; is it <space> ?
    4375/E8BC : 98 FA                   	JZ	DTA1			; yes, just eat it
    4376/E8BE : E4 0C                   	XRI	' ' ! ','		; we XOR'ed above, is it <comma> ?
    4377/E8C0 : 98 3E                   	JZ	FNDTA
    4378/E8C2 : E4 16                   	XRI	',' ! ':'		; we XOR'ed above, is it <colon> ?
    4379/E8C4 : 98 22                   	JZ	DTA4
    4380/E8C6 : E4 37                   	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
    4381/E8C8 : 98 0C                   	JZ	DTA2
    4382/E8CA : C2 7E                   	LD	ERRNUML(P2)		; load number low
    4383/E8CC : CA F8                   	ST	NUMLO(P2)		; and store for PRNUM
    4384/E8CE : C2 7D                   	LD	ERRNUMH(P2)		; load number high
    4385/E8D0 : CA F7                   	ST	NUMHI(P2)		; and store for PRNUM
    4386/E8D2 : C4 94                   	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
    4387/E8D4 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4388/E8D6 : C1 00                   DTA2:	LD	(P1)			; check if we are at end
    4389/E8D8 : E4 FF                   	XRI	0xFF			; of program
    4390/E8DA : 9C 04                   	JNZ	DTA3			; no, not yet
    4391/E8DC : C4 9E                   	LDI	(M_DATA-M_BASE)		; 'DATA ERROR'
    4392/E8DE : 93 B4                   	JMP	SV_MSGOUT(P3)
    4393/E8E0 : C5 01                   DTA3:	LD	@1(P1)			; get high byte of line number and increase
    4394/E8E2 : CA 7D                   	ST	ERRNUMH(P2)		; store number high for possible error message
    4395/E8E4 : C5 02                   	LD	@2(P1)			; get low byte of line number and incr by 2
    4396/E8E6 : CA 7E                   	ST	ERRNUML(P2)		; store number low for possible error message
    4397/E8E8 : C5 01                   DTA4:	LD	@1(P1)			; get byte from program and increase
    4398/E8EA : E4 20                   	XRI	' '			; is it <space> ?
    4399/E8EC : 98 FA                   	JZ	DTA4			; yes, just eat it
    4400/E8EE : E4 AA                   	XRI	T_DATA ! ' '		; we XOR'ed above, is it DATA token ?
    4401/E8F0 : 98 0E                   	JZ	FNDTA
    4402/E8F2 : C1 FF                   NODTA:	LD	-1(P1)			; get previous byte from program
    4403/E8F4 : E4 3A                   	XRI	':'			; is it <colon> ?
    4404/E8F6 : 98 F0                   	JZ	DTA4
    4405/E8F8 : E4 37                   	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
    4406/E8FA : 98 DA                   	JZ	DTA2
    4407/E8FC : C5 01                   	LD	@1(P1)			; get byte from program and increase
    4408/E8FE : 90 F2                   	JMP	NODTA
    4409/E900 : C5 01                   FNDTA:	LD	@1(P1)			; get byte from program and increase
    4410/E902 : E4 20                   	XRI	' '			; is it <space> ?
    4411/E904 : 98 FA                   	JZ	FNDTA			; yes, just eat it
    4412/E906 : C5 FF                   	LD	@-1(P1)			; decrease pointer to previous byte
    4413/E908 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4414/E90A :                         
    4415/E90A : C2 EF                   ISTRNG:	LD	-17(P2)			; set P3 to -17,-18
    4416/E90C : 33                      	XPAL	P3
    4417/E90D : C2 EE                   	LD	-18(P2)
    4418/E90F : 37                      	XPAH	P3
    4419/E910 : 01                      	XAE				; save P3.H into E
    4420/E911 : C5 01                   ISTR1:	LD	@1(P1)			; get byte from program and increase
    4421/E913 : CF 01                   	ST	@1(P3)			; store into P3
    4422/E915 : E4 0D                   	XRI	_CR			; is it <cr> ?
    4423/E917 : 9C F8                   	JNZ	ISTR1			; no, continue
    4424/E919 : C4 80                   	LDI	L(SPRVSR)		; restore P3
    4425/E91B : 33                      	XPAL	P3
    4426/E91C : 40                      	LDE
    4427/E91D : 37                      	XPAH	P3
    4428/E91E : C2 F1                   XCHPNT:	LD	-15(P2)			; exhange P1 with -15,-16
    4429/E920 : 31                      	XPAL	P1
    4430/E921 : CA F1                   	ST	-15(P2)
    4431/E923 : C2 F0                   	LD	-16(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 192 - 10/31/2025 04:19:39 PM


    4432/E925 : 35                      	XPAH	P1
    4433/E926 : CA F0                   	ST	-16(P2)
    4434/E928 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4435/E92A :                         
    4436/E92A : C2 EF                   INSTR:	LD	-17(P2)			; load P3 from STACK -18,-17
    4437/E92C : 33                      	XPAL	P3
    4438/E92D : C2 EE                   	LD	-18(P2)
    4439/E92F : 37                      	XPAH	P3
    4440/E930 : 01                      	XAE				; save P3.H into E
    4441/E931 : C1 00                   INSTR1:	LD	(P1)			; get char from program line
    4442/E933 : E4 2C                   	XRI	','			; is it <comma> ?
    4443/E935 : 98 21                   	JZ	PUTS2
    4444/E937 : E4 16                   	XRI	',' ! ':'		; we XOR'ed above, is it <colon> ?
    4445/E939 : 98 1D                   	JZ	PUTS2
    4446/E93B : E4 37                   	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
    4447/E93D : 98 19                   	JZ	PUTS2
    4448/E93F : C5 01                   	LD	@1(P1)			; get char from program line and increase
    4449/E941 : CF 01                   	ST	@1(P3)
    4450/E943 : 90 EC                   	JMP	INSTR1
    4451/E945 :                         
    4452/E945 :                         ; Store quoted string at address stored on STACK
    4453/E945 : C2 EF                   PUTSTR:	LD	-17(P2)			; load P3 from -18,-17
    4454/E947 : 33                      	XPAL	P3
    4455/E948 : C2 EE                   	LD	-18(P2)
    4456/E94A : 37                      	XPAH	P3
    4457/E94B : 01                      	XAE				; save P3.H into E
    4458/E94C : C5 01                   PUTS1:	LD	@1(P1)			; get char from program line and increase
    4459/E94E : E4 22                   	XRI	'"'			; is it <quote> ?
    4460/E950 : 98 06                   	JZ	PUTS2			; yes
    4461/E952 : E4 22                   	XRI	'"'			; we XOR'ed above, restore char
    4462/E954 : CF 01                   	ST	@1(P3)			; store into P3
    4463/E956 : 90 F4                   	JMP	PUTS1			; do again
    4464/E958 : C4 0D                   PUTS2:	LDI	_CR			; load <cr>
    4465/E95A : CB 00                   	ST	(P3)			; store to terminate string
    4466/E95C : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    4467/E95E : 33                      	XPAL	P3
    4468/E95F : 40                      	LDE
    4469/E960 : 37                      	XPAH	P3
    4470/E961 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4471/E963 :                         
    4472/E963 :                         ; Store begin of BASIC Program, so that READ command
    4473/E963 :                         ;  can get the very first DATA line.
    4474/E963 :                         ; NOTE:	Address is stored in STACK -16,-15.
    4475/E963 : C4 02                   FNDDTA:	LDI	2
    4476/E965 : CA F1                   	ST	-15(P2)			; low byte to -15
    4477/E967 : C2 F6                   	LD	CURPG(P2)
    4478/E969 : 1E                      	RR
    4479/E96A : 1E                      	RR
    4480/E96B : 1E                      	RR
    4481/E96C : 1E                      	RR
    4482/E96D : CA F0                   	ST	-16(P2)			; store high byte in -16
    4483/E96F : 93 D6                   	JMP	SV_SPLOAD(P3)
    4484/E971 :                         
    4485/E971 :                         ; Print quoted string.
    4486/E971 : C5 01                   PRSTR:	LD	@1(P1)			; get char from program line and incr
    4487/E973 : E4 22                   	XRI	'"'			; is it <quote> ?
    4488/E975 : 9B D6                   	JZ	SV_SPLOAD(P3)		; yes, done
    4489/E977 : C1 FF                   	LD	-1(P1)			; no, get previous character
    4490/E979 : =>DEFINED               	IFDEF	SCALLS
    4491/E979 : (MACRO)[1368]           	 SYSCALL	2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 193 - 10/31/2025 04:19:39 PM


    4491/E979 : 3F                               XPPC   P3
    4491/E97A : 02                               DB     2
    4492/E97B : =>FALSE                 	ELSE
    4493/E97B :                         	 CALL	PUTASC
    4494/E97B : [4490]                  	ENDIF			; print it
    4495/E97B : 90 F4                   	JMP	PRSTR			; do again
    4496/E97D :                         
    4497/E97D :                         ; After ON command determine where to go.
    4498/E97D :                         ; NOTE: Use 16-byte integer stored on STACK -18,-17.
    4499/E97D : C2 EF                   GTO:	LD	-17(P2)
    4500/E97F : 9C 02                   	JNZ	GTO1
    4501/E981 : BA EE                   	DLD	-18(P2)
    4502/E983 : BA EF                   GTO1:	DLD	-17(P2)
    4503/E985 : DA EE                   	OR	-18(P2)
    4504/E987 : 98 24                   	JZ	GTO4
    4505/E989 : C5 01                   GTO2:	LD	@1(P1)			; get char from program line and incr
    4506/E98B : E4 20                   	XRI	' '			; is it <space> ?
    4507/E98D : 98 FA                   	JZ	GTO2			; yes, just eat it
    4508/E98F : E4 0C                   	XRI	' ' ! ','		; we XOR'ed above, is it <comma> ?
    4509/E991 : 98 04                   	JZ	GTO3
    4510/E993 : C4 C2                   	LDI	(M_NOGO-M_BASE)		; 'NOGO ERROR'
    4511/E995 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4512/E997 : 02                      GTO3:	CCL
    4513/E998 : C2 FD                   	LD	AEXOFF(P2)		; adjust AEXSTK by four up
    4514/E99A : F4 04                   	ADI	4
    4515/E99C : CA FD                   	ST	AEXOFF(P2)
    4516/E99E : 03                      	SCL
    4517/E99F : C2 FF                   	LD	-1(P2)			; decrease stored pointer by four
    4518/E9A1 : FC 04                   	CAI	4
    4519/E9A3 : CA FF                   	ST	-1(P2)
    4520/E9A5 : C2 FE                   	LD	-2(P2)
    4521/E9A7 : FC 00                   	CAI	0
    4522/E9A9 : CA FE                   	ST	-2(P2)
    4523/E9AB : 93 D6                   	JMP	SV_SPLOAD(P3)
    4524/E9AD : C5 01                   GTO4:	LD	@1(P1)			; get char from program line and incr
    4525/E9AF : E4 0D                   	XRI	_CR			; is it <cr> ?
    4526/E9B1 : 9B D6                   	JZ	SV_SPLOAD(P3)		; yes, done
    4527/E9B3 : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
    4528/E9B5 : 9B D6                   	JZ	SV_SPLOAD(P3)		; yes, done
    4529/E9B7 : 90 F4                   	JMP	GTO4			; continue (skip until end of statement)
    4530/E9B9 :                         
    4531/E9B9 :                         ; Execute machine code.
    4532/E9B9 : C4 70                   MC:	LDI	AEXSTK+16
    4533/E9BB : 93 3C                   	JMP	SV_RTRN1(P3)
    4534/E9BD :                         
    4535/E9BD :                         ; Implement EDIT statement.
    4536/E9BD : 98 04                   EDITR:	JZ	EDIT1			; correct label was found
    4537/E9BF : C4 0A                   	LDI	(M_RDY-M_BASE)		; 'READY'
    4538/E9C1 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4539/E9C3 : CA EA                   EDIT1:	ST	-22(P2)			; store <null> as temporary counter
    4540/E9C5 :                         ; FIXME: redundant code, so replaced PRNUM by SPRNUM
    4541/E9C5 : =>FALSE                 	IF	0
    4542/E9C5 :                         	 LD	@1(P1)			; get line number high from BASIC line
    4543/E9C5 :                         	 ST	NUMHI(P2)
    4544/E9C5 :                         	 LD	@2(P1)			; get line number low and skip length of line
    4545/E9C5 :                         	 ST	NUMLO(P2)		; store line number in NUMHI / NUMLO of STACK
    4546/E9C5 :                         	 CALL	PRNUM			; print line number of BASIC line
    4547/E9C5 : [4541]                  	ENDIF
    4548/E9C5 : (MACRO)[1369]           	CALL	SPRNUM			; store line number on STACK and print
    4548/E9C5 : 3F                               XPPC   P3
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 194 - 10/31/2025 04:19:39 PM


    4548/E9C6 : D2                               DB     H(SPRNUM)
    4548/E9C7 : 10                               DB     L(SPRNUM)
    4549/E9C8 : C5 01                   EDIT2:	LD	@1(P1)			; get byte from BASIC line and increase
    4550/E9CA : E4 0C                   	XRI	_FF
    4551/E9CC : 9C 04                   	JNZ	EDIT3
    4552/E9CE : C4 5C                   	LDI	'\\'			; print a <backslash> instead of <ff>
    4553/E9D0 : 90 34                   	JMP	EDIT8
    4554/E9D2 : E4 01                   EDIT3:	XRI	_FF ! _CR		; we XOR'ed above, is it <cr> ?
    4555/E9D4 : 98 36                   	JZ	EDIT9			; yes, output line
    4556/E9D6 : C1 FF                   	LD	-1(P1)			; load byte again
    4557/E9D8 : 94 26                   	JP	EDIT7			; jump, is normal character
    4558/E9DA : 01                      	XAE				; save in E
    4559/E9DB :                         	; NOTE:	Byte has bit7 set, so must be token, identify it.
    4560/E9DB : C4 3D                   	LDI	L(TOKENS)		; load P1 with token table
    4561/E9DD : 31                      	XPAL	P1
    4562/E9DE : CA F1                   	ST	-15(P2)			; save prev P1.L
    4563/E9E0 : C4 D7                   	LDI	H(TOKENS)
    4564/E9E2 : 35                      	XPAH	P1
    4565/E9E3 : CA F0                   	ST	-16(P2)			; save prev P1.H
    4566/E9E5 : 40                      EDIT4:	LDE				; load token from E
    4567/E9E6 : E5 01                   	XOR	@1(P1)			; compare with token from table and incr
    4568/E9E8 : 98 06                   	JZ	EDIT6			; jump if token found
    4569/E9EA : C5 01                   EDIT5:	LD	@1(P1)			; get byte from token table and incr
    4570/E9EC : 94 FC                   	JP	EDIT5			; loop until terminating byte (bit7 set)
    4571/E9EE : 90 F5                   	JMP	EDIT4			; compare with next token
    4572/E9F0 : AA EA                   EDIT6:	ILD	-22(P2)
    4573/E9F2 : C5 01                   	LD	@1(P1)			; load byte of keyword pointed to by P1 and incr
    4574/E9F4 : =>DEFINED               	IFDEF	SCALLS
    4575/E9F4 : (MACRO)[1370]           	 SYSCALL	2
    4575/E9F4 : 3F                               XPPC   P3
    4575/E9F5 : 02                               DB     2
    4576/E9F6 : =>FALSE                 	ELSE
    4577/E9F6 :                         	 CALL	PUTASC
    4578/E9F6 : [4574]                  	ENDIF
    4579/E9F6 : 94 F8                   	JP	EDIT6			; loop until terminating byte (bit7 set)
    4580/E9F8 : C2 F1                   	LD	-15(P2)			; load saved P1 (line buffer) from STACK -15, -16
    4581/E9FA : 31                      	XPAL	P1
    4582/E9FB : C2 F0                   	LD	-16(P2)
    4583/E9FD : 35                      	XPAH	P1			; load old P1 (line buffer) from STACK
    4584/E9FE : 90 C8                   	JMP	EDIT2
    4585/EA00 : D4 60                   EDIT7:	ANI	0x60			; is it really digit or letter ?
    4586/EA02 : 98 C4                   	JZ	EDIT2			; looks as non-printable, continue
    4587/EA04 : C1 FF                   	LD	-1(P1)
    4588/EA06 : =>DEFINED               EDIT8:	IFDEF	SCALLS
    4589/EA06 : (MACRO)[1371]           	 SYSCALL	2
    4589/EA06 : 3F                               XPPC   P3
    4589/EA07 : 02                               DB     2
    4590/EA08 : =>FALSE                 	ELSE
    4591/EA08 :                         	 CALL	PUTASC
    4592/EA08 : [4588]                  	ENDIF
    4593/EA08 : AA EA                   	ILD	-22(P2)
    4594/EA0A : 90 BC                   	JMP	EDIT2
    4595/EA0C :                         ; NOTE:	Set cursor back behind line number, use counter fron STACK -22
    4596/EA0C : C4 08                   EDIT9:	LDI	_BS			; load <backspace>
    4597/EA0E : =>DEFINED               	IFDEF	SCALLS
    4598/EA0E : (MACRO)[1372]           	 SYSCALL	2
    4598/EA0E : 3F                               XPPC   P3
    4598/EA0F : 02                               DB     2
    4599/EA10 : =>FALSE                 	ELSE
    4600/EA10 :                         	 CALL	PUTASC
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 195 - 10/31/2025 04:19:39 PM


    4601/EA10 : [4597]                  	ENDIF
    4602/EA10 : BA EA                   	DLD	-22(P2)
    4603/EA12 : 9C F8                   	JNZ	EDIT9			; not zero, loop again
    4604/EA14 : C4 B6                   	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
    4605/EA16 : 31                      	XPAL	P1
    4606/EA17 : C3 A2                   	LD	STKPHI(P3)
    4607/EA19 : DC 03                   	ORI	H(STKIBUF)		; offset for STKBASE.H
    4608/EA1B : 35                      	XPAH	P1			; set P1.H to start of input buffer
    4609/EA1C : C2 00                   	LD	(P2)			; load input buffer length, max. number of chars
    4610/EA1E : CA EA                   	ST	-22(P2)			; store as temporary counter
    4611/EA20 : 01                      CLRBUF:	XAE
    4612/EA21 : C4 FF                   	LDI	0xFF			; load as empty-marker (nothing here)
> > > NIBLFP.asm(4613):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    4613/EA23 : C9 80                   	ST	EREG(P1)		; fill input buffer with empty-marker
    4614/EA25 : BA EA                   	DLD	-22(P2)			; decrease temp counter
    4615/EA27 : 94 F7                   	JP	CLRBUF
    4616/EA29 : C4 00                   	LDI	0
    4617/EA2B : 01                      	XAE
    4618/EA2C :                         ;NOTE:	Copy line number into line buffer
    4619/EA2C : C2 FD                   	LD	AEXOFF(P2)
    4620/EA2E : 32                      	XPAL	P2
    4621/EA2F : C6 F7                   	LD	@-9(P2)			; advance P1 to begin of stored number string
    4622/EA31 : CD 01                   EDIT10:	ST	@1(P1)			; store digit in line buffer
    4623/EA33 : 02                      	CCL
    4624/EA34 : 01                      	XAE
    4625/EA35 : F4 01                   	ADI	1
    4626/EA37 : 01                      	XAE
    4627/EA38 : C6 FF                   	LD	@-1(P2)
    4628/EA3A : 9C F5                   	JNZ	EDIT10			; loop until <null>
    4629/EA3C : C4 80                   EDIT11:	LDI	STKMID
    4630/EA3E : 32                      	XPAL	P2
    4631/EA3F : 40                      	LDE
    4632/EA40 : CA E7                   	ST	CHRNUM(P2)		; store as index after line number
    4633/EA42 : C2 F3                   	LD	-13(P2)
    4634/EA44 : 33                      	XPAL	P3
    4635/EA45 : C2 F2                   	LD	-14(P2)
    4636/EA47 : 37                      	XPAH	P3
    4637/EA48 : C7 03                   	LD	@3(P3)			; advance P3 to first byte of program line
    4638/EA4A : C7 01                   EDIT12:	LD	@1(P3)			; get that byte
    4639/EA4C : E4 0D                   	XRI	_CR			; is it <cr> ?
    4640/EA4E : 98 32                   	JZ	EDIT17			; yes, we are done
    4641/EA50 : C3 FF                   	LD	-1(P3)			; no, load byte anew
    4642/EA52 : 94 2A                   	JP	EDIT16			; go, no token
    4643/EA54 : CA EA                   	ST	-22(P2)			; save token temporary
    4644/EA56 : C4 3D                   	LDI	L(TOKENS)		; load P3 with token table
    4645/EA58 : 33                      	XPAL	P3
    4646/EA59 : CA F1                   	ST	-15(P2)			; save prev P3.L
    4647/EA5B : C4 D7                   	LDI	H(TOKENS)
    4648/EA5D : 37                      	XPAH	P3
    4649/EA5E : CA F0                   	ST	-16(P2)			; save prev P3.H
    4650/EA60 : C2 EA                   EDIT13:	LD	-22(P2)			; load token
    4651/EA62 : E7 01                   	XOR	@1(P3)			; test for it in table
    4652/EA64 : 98 06                   	JZ	EDIT15
    4653/EA66 : C7 01                   EDIT14:	LD	@1(P3)
    4654/EA68 : 94 FC                   	JP	EDIT14			; skip keyword
    4655/EA6A : 90 F4                   	JMP	EDIT13			; loop for next
    4656/EA6C : C7 01                   EDIT15:	LD	@1(P3)
    4657/EA6E : D4 7F                   	ANI	0x7F
    4658/EA70 : CD 01                   	ST	@1(P1)
    4659/EA72 : C3 FF                   	LD	-1(P3)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 196 - 10/31/2025 04:19:39 PM


    4660/EA74 : 94 F6                   	JP	EDIT15
    4661/EA76 : C2 F1                   	LD	-15(P2)
    4662/EA78 : 33                      	XPAL	P3
    4663/EA79 : C2 F0                   	LD	-16(P2)
    4664/EA7B : 37                      	XPAH	P3
    4665/EA7C : 90 CC                   	JMP	EDIT12
    4666/EA7E : CD 01                   EDIT16:	ST	@1(P1)
    4667/EA80 : 90 C8                   	JMP	EDIT12
    4668/EA82 : C4 B6                   EDIT17:	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
    4669/EA84 : 31                      	XPAL	P1
    4670/EA85 : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    4671/EA87 : 33                      	XPAL	P3
    4672/EA88 : C2 9C                   	LD	-100(P2)
    4673/EA8A : 37                      	XPAH	P3
    4674/EA8B : 93 D6                   	JMP	SV_SPLOAD(P3)
    4675/EA8D :                         
    4676/EA8D :                         ; Test for decimal number and store as 16-byte integer on AEXSTK.
    4677/EA8D : C5 01                   NUMTST:	LD	@1(P1)			; get byte from program and increase
    4678/EA8F : E4 20                   	XRI	' '			; is it <space> ?
    4679/EA91 : 98 FA                   	JZ	NUMTST			; yes, just eat it
    4680/EA93 : E4 20                   	XRI	' '			; XOR back, restore byte
    4681/EA95 : 03                      	SCL
    4682/EA96 : FC 3A                   	CAI	'9'+1
    4683/EA98 : 94 04                   	JP	NUMERR			; no digit
    4684/EA9A : F4 0A                   	ADI	10			; '9'-'0'+1
    4685/EA9C : 94 06                   	JP	DIGIT			; is digit
    4686/EA9E : C5 FF                   NUMERR:	LD	@-1(P1)
    4687/EAA0 : C4 D7                   	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
    4688/EAA2 : 93 B4                   	JMP	SV_MSGOUT(P3)
    4689/EAA4 : 01                      DIGIT:	XAE
    4690/EAA5 : BA FD                   	DLD	AEXOFF(P2)		; adjust AEXSTK by two down
    4691/EAA7 : BA FD                   	DLD	AEXOFF(P2)
    4692/EAA9 : 32                      	XPAL	P2
    4693/EAAA : 40                      	LDE
    4694/EAAB : CA 01                   	ST	1(P2)
    4695/EAAD : 60                      	XRE
    4696/EAAE : CA 00                   DIGIT1:	ST	(P2)
    4697/EAB0 : 03                      	SCL
    4698/EAB1 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    4699/EAB3 : FC 3A                   	CAI	'9'+1
    4700/EAB5 : 94 04                   	JP	NUMEND			; no digit
    4701/EAB7 : F4 0A                   	ADI	10			; '9'-'0'+1
    4702/EAB9 : 94 07                   	JP	MORE
    4703/EABB : C5 FF                   NUMEND:	LD	@-1(P1)			; decr P1, load previous program byte
    4704/EABD : C4 80                   	LDI	STKMID
    4705/EABF : 32                      	XPAL	P2
    4706/EAC0 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4707/EAC2 : 01                      MORE:	XAE
    4708/EAC3 : 02                      	CCL
    4709/EAC4 : C2 01                   	LD	1(P2)
    4710/EAC6 : F2 01                   	ADD	1(P2)
    4711/EAC8 : CA FF                   	ST	-1(P2)
    4712/EACA : C2 00                   	LD	(P2)
    4713/EACC : F2 00                   	ADD	(P2)
    4714/EACE : CA FE                   	ST	-2(P2)
    4715/EAD0 : 02                      	CCL
    4716/EAD1 : C2 FF                   	LD	-1(P2)
    4717/EAD3 : F2 FF                   	ADD	-1(P2)
    4718/EAD5 : CA FF                   	ST	-1(P2)
    4719/EAD7 : C2 FE                   	LD	-2(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 197 - 10/31/2025 04:19:39 PM


    4720/EAD9 : F2 FE                   	ADD	-2(P2)
    4721/EADB : CA FE                   	ST	-2(P2)
    4722/EADD : 02                      	CCL
    4723/EADE : C2 FF                   	LD	-1(P2)
    4724/EAE0 : F2 01                   	ADD	1(P2)
    4725/EAE2 : CA 01                   	ST	1(P2)
    4726/EAE4 : C2 FE                   	LD	-2(P2)
    4727/EAE6 : F2 00                   	ADD	(P2)
    4728/EAE8 : CA 00                   	ST	(P2)
    4729/EAEA : 02                      	CCL
    4730/EAEB : C2 01                   	LD	1(P2)
    4731/EAED : F2 01                   	ADD	1(P2)
    4732/EAEF : CA 01                   	ST	1(P2)
    4733/EAF1 : C2 00                   	LD	(P2)
    4734/EAF3 : F2 00                   	ADD	(P2)
    4735/EAF5 : CA 00                   	ST	(P2)
    4736/EAF7 : 02                      	CCL
    4737/EAF8 : 40                      	LDE
    4738/EAF9 : F2 01                   	ADD	1(P2)
    4739/EAFB : CA 01                   	ST	1(P2)
    4740/EAFD : C4 00                   	LDI	0
    4741/EAFF : F2 00                   	ADD	(P2)
    4742/EB01 : 94 AB                   	JP	DIGIT1
    4743/EB03 : 93 6B                   	JMP	SV_VALERR(P3)
    4744/EB05 :                         
    4745/EB05 :                         ; AUTO statement: Output line number and give max. char count per line.
    4746/EB05 : C2 EF                   AUTONM:	LD	-17(P2)			; get line number from STACK -18, -17
    4747/EB07 : CA F8                   	ST	NUMLO(P2)		; and store for PRNUM
    4748/EB09 : C2 EE                   	LD	-18(P2)
    4749/EB0B : CA F7                   	ST	NUMHI(P2)
    4750/EB0D : (MACRO)[1373]           	CALL	PRNUM
    4750/EB0D : 3F                               XPPC   P3
    4750/EB0E : D2                               DB     H(PRNUM)
    4750/EB0F : 18                               DB     L(PRNUM)
    4751/EB10 : C4 48                   	LDI	72			; max. characters per line
    4752/EB12 : CA 00                   	ST	(P2)
    4753/EB14 : 93 D6                   	JMP	SV_SPLOAD(P3)
    4754/EB16 :                         
    4755/EB16 :                         ; AUTO statement: Load distance to next line from AEXSTK.
    4756/EB16 : C2 E7                   AUTON:	LD	CHRNUM(P2)
    4757/EB18 : 9B D6                   	JZ	SV_SPLOAD(P3)
    4758/EB1A : C2 FD                   	LD	AEXOFF(P2)		; load P1 with arithmetics stack
    4759/EB1C : 31                      	XPAL	P1
    4760/EB1D : C3 A2                   	LD	STKPHI(P3)
    4761/EB1F : 35                      	XPAH	P1
    4762/EB20 : 02                      	CCL
    4763/EB21 : C2 F8                   	LD	NUMLO(P2)		; load last line number.
    4764/EB23 : F1 01                   	ADD	1(P1)			; add distance to next line..
    4765/EB25 : CA EF                   	ST	-17(P2)			; ..and store on STACK -18, -17
    4766/EB27 : C2 F7                   	LD	NUMHI(P2)
    4767/EB29 : F1 00                   	ADD	(P1)
    4768/EB2B : CA EE                   	ST	-18(P2)
    4769/EB2D : 93 D6                   	JMP	SV_SPLOAD(P3)
    4770/EB2F :                         
    4771/EB2F :                         ; Convert floating point number on arithmetics stack into 16-bit integer.
    4772/EB2F : AA FD                   FIX:	ILD	AEXOFF(P2)		; adjust STACK top by two up
    4773/EB31 : AA FD                   	ILD	AEXOFF(P2)
    4774/EB33 : 32                      	XPAL	P2
    4775/EB34 : C2 00                   	LD	(P2)
    4776/EB36 : CA 01                   	ST	1(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 198 - 10/31/2025 04:19:39 PM


    4777/EB38 : C2 FF                   	LD	-1(P2)
    4778/EB3A : CA 00                   	ST	(P2)
    4779/EB3C : C4 00                   	LDI	0
    4780/EB3E : 01                      FIX1:	XAE
    4781/EB3F : 03                      FIX2:	SCL
    4782/EB40 : AA FE                   	ILD	-2(P2)
    4783/EB42 : 9B 6B                   	JZ	SV_VALERR(P3)
    4784/EB44 : 94 27                   	JP	FIX5
    4785/EB46 : FC 8F                   	CAI	0x8F
    4786/EB48 : 98 13                   	JZ	FIX3
    4787/EB4A : C2 00                   	LD	(P2)
    4788/EB4C : F2 00                   	ADD	(P2)
    4789/EB4E : C2 00                   	LD	(P2)
    4790/EB50 : 1F                      	RRL
    4791/EB51 : CA 00                   	ST	(P2)
    4792/EB53 : C2 01                   	LD	1(P2)
    4793/EB55 : 1F                      	RRL
    4794/EB56 : CA 01                   	ST	1(P2)
    4795/EB58 : 06                      	CSA
    4796/EB59 : 94 E4                   	JP	FIX2
    4797/EB5B : 90 E1                   	JMP	FIX1
    4798/EB5D : 40                      FIX3:	LDE
    4799/EB5E : D2 00                   	AND	(P2)
    4800/EB60 : 94 06                   	JP	FIX4
    4801/EB62 : AA 01                   	ILD	1(P2)
    4802/EB64 : 9C 02                   	JNZ	FIX4
    4803/EB66 : AA 00                   	ILD	(P2)
    4804/EB68 : C4 80                   FIX4:	LDI	STKMID
    4805/EB6A : 32                      	XPAL	P2
    4806/EB6B : 93 D6                   	JMP	SV_SPLOAD(P3)
    4807/EB6D : C4 00                   FIX5:	LDI	0
    4808/EB6F : CA 01                   	ST	1(P2)
    4809/EB71 : CA 00                   	ST	(P2)
    4810/EB73 : 90 F3                   	JMP	FIX4
    4811/EB75 :                         
    4812/EB75 :                         ; Implement MID$ string function for quoted strings.
    4813/EB75 : C2 FD                   MIDST:	LD	AEXOFF(P2)
    4814/EB77 : 32                      	XPAL	P2
    4815/EB78 : C5 01                   MID1:	LD	@1(P1)			; get byte from program and increase
    4816/EB7A : E4 22                   	XRI	'"'			; is it <quote> ?
    4817/EB7C : 98 0C                   	JZ	MID3
    4818/EB7E : C2 03                   	LD	3(P2)
    4819/EB80 : 9C 02                   	JNZ	MID2
    4820/EB82 : BA 02                   	DLD	2(P2)
    4821/EB84 : BA 03                   MID2:	DLD	3(P2)
    4822/EB86 : DA 02                   	OR	2(P2)
    4823/EB88 : 9C EE                   	JNZ	MID1
    4824/EB8A : C5 FF                   MID3:	LD	@-1(P1)
    4825/EB8C : C2 01                   	LD	1(P2)
    4826/EB8E : CA 03                   	ST	3(P2)
    4827/EB90 : C6 02                   	LD	@2(P2)
    4828/EB92 : CA 00                   	ST	(P2)
    4829/EB94 : C4 80                   	LDI	STKMID
    4830/EB96 : 32                      	XPAL	P2
    4831/EB97 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    4832/EB99 :                         
    4833/EB99 :                         ; Implement LEFT$ string function for quoted strings.
    4834/EB99 : AA FD                   LEFTST:	ILD	AEXOFF(P2)		; adjust STACK top by two up
    4835/EB9B : AA FD                   	ILD	AEXOFF(P2)
    4836/EB9D : 32                      	XPAL	P2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 199 - 10/31/2025 04:19:39 PM


    4837/EB9E : C2 01                   	LD	1(P2)
    4838/EBA0 : 33                      	XPAL	P3
    4839/EBA1 : C2 00                   	LD	(P2)
    4840/EBA3 : 37                      	XPAH	P3
    4841/EBA4 : 01                      	XAE
    4842/EBA5 : C5 01                   LEFT1:	LD	@1(P1)			; get byte from program and increase
    4843/EBA7 : E4 22                   	XRI	'"'			; is it <quote> ?
    4844/EBA9 : 98 10                   	JZ	LEFT3
    4845/EBAB : E4 22                   	XRI	'"'			; undo XOR, restore char
    4846/EBAD : CF 01                   	ST	@1(P3)
    4847/EBAF : C2 FF                   	LD	-1(P2)
    4848/EBB1 : 9C 02                   	JNZ	LEFT2
    4849/EBB3 : BA FE                   	DLD	-2(P2)
    4850/EBB5 : BA FF                   LEFT2:	DLD	-1(P2)
    4851/EBB7 : DA FE                   	OR	-2(P2)
    4852/EBB9 : 9C EA                   	JNZ	LEFT1
    4853/EBBB : C4 0D                   LEFT3:	LDI	_CR			; store <cr> in P3
    4854/EBBD : CB 00                   	ST	(P3)			; (terminate string)
    4855/EBBF : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    4856/EBC1 : 33                      	XPAL	P3
    4857/EBC2 : CA 01                   	ST	1(P2)
    4858/EBC4 : 40                      	LDE
    4859/EBC5 : 37                      	XPAH	P3
    4860/EBC6 : CA 00                   	ST	(P2)			; store string addr.H
    4861/EBC8 : C4 80                   	LDI	STKMID			; restore stack
    4862/EBCA : 32                      	XPAL	P2
    4863/EBCB : C2 F1                   	LD	-15(P2)			; restore P1
    4864/EBCD : 31                      	XPAL	P1
    4865/EBCE : C2 F0                   	LD	-16(P2)
    4866/EBD0 : 35                      	XPAH	P1
    4867/EBD1 : 93 5B                   	JMP	SV_RTFUNC(P3)
    4868/EBD3 :                         
    4869/EBD3 :                         ; Implement RIGHT$ string function for quoted strings.
    4870/EBD3 : AA FD                   RGHTST:	ILD	AEXOFF(P2)		; adjust STACK top by two up
    4871/EBD5 : AA FD                   	ILD	AEXOFF(P2)
    4872/EBD7 : 32                      	XPAL	P2
    4873/EBD8 : C2 01                   	LD	1(P2)
    4874/EBDA : 33                      	XPAL	P3
    4875/EBDB : C2 00                   	LD	(P2)
    4876/EBDD : 37                      	XPAH	P3
    4877/EBDE : 01                      	XAE
    4878/EBDF : C5 01                   RIGHT1:	LD	@1(P1)			; get byte from program and increase
    4879/EBE1 : E4 22                   	XRI	'"'			; is it <quote> ?
    4880/EBE3 : 9C FA                   	JNZ	RIGHT1
    4881/EBE5 : C5 FF                   	LD	@-1(P1)
    4882/EBE7 : C1 FF                   RIGHT2:	LD	-1(P1)
    4883/EBE9 : E4 22                   	XRI	'"'			; is it <quote> ?
    4884/EBEB : 98 0E                   	JZ	RIGHT4
    4885/EBED : C5 FF                   	LD	@-1(P1)
    4886/EBEF : C2 FF                   	LD	-1(P2)
    4887/EBF1 : 9C 02                   	JNZ	RIGHT3
    4888/EBF3 : BA FE                   	DLD	-2(P2)
    4889/EBF5 : BA FF                   RIGHT3:	DLD	-1(P2)
    4890/EBF7 : DA FE                   	OR	-2(P2)
    4891/EBF9 : 9C EC                   	JNZ	RIGHT2
    4892/EBFB : C5 01                   RIGHT4:	LD	@1(P1)			; get byte from program and increase
    4893/EBFD : E4 22                   	XRI	'"'			; is it <quote> ?
    4894/EBFF : 98 BA                   	JZ	LEFT3			; use end of LEFT$ for restoring ponzers
    4895/EC01 : E4 22                   	XRI	'"'			; undo XOR, restore char
    4896/EC03 : CF 01                   	ST	@1(P3)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 200 - 10/31/2025 04:19:39 PM


    4897/EC05 : 90 F4                   	JMP	RIGHT4
    4898/EC07 :                         
    4899/EC07 :                         ; Implement CHR$ string function.
    4900/EC07 : AA FD                   CHRSTR:	ILD	AEXOFF(P2)		; adjust STACK top by two up
    4901/EC09 : AA FD                   	ILD	AEXOFF(P2)
    4902/EC0B : 32                      	XPAL	P2
    4903/EC0C : C2 01                   	LD	1(P2)
    4904/EC0E : 33                      	XPAL	P3
    4905/EC0F : C2 00                   	LD	(P2)
    4906/EC11 : 37                      	XPAH	P3
    4907/EC12 : 01                      	XAE
    4908/EC13 : C2 FF                   	LD	-1(P2)
    4909/EC15 : CF 01                   	ST	@1(P3)
    4910/EC17 : 90 16                   	JMP	PUTST2
    4911/EC19 :                         
    4912/EC19 : C2 FD                   PUTST:	LD	AEXOFF(P2)
    4913/EC1B : 32                      	XPAL	P2
    4914/EC1C : C2 01                   	LD	1(P2)
    4915/EC1E : 33                      	XPAL	P3
    4916/EC1F : C2 00                   	LD	(P2)
    4917/EC21 : 37                      	XPAH	P3
    4918/EC22 : 01                      	XAE
    4919/EC23 : C5 01                   PUTST1:	LD	@1(P1)			; get byte from program and increase
    4920/EC25 : E4 22                   	XRI	'"'			; is it <quote> ?
    4921/EC27 : 98 06                   	JZ	PUTST2
    4922/EC29 : E4 22                   	XRI	'"'			; we XOR'ed above, restore char
    4923/EC2B : CF 01                   	ST	@1(P3)
    4924/EC2D : 90 F4                   	JMP	PUTST1
    4925/EC2F : C4 0D                   PUTST2:	LDI	_CR
    4926/EC31 : CB 00                   	ST	(P3)			; store terminating <cr>
    4927/EC33 : C4 80                   	LDI	L(SPRVSR)
    4928/EC35 : 33                      	XPAL	P3
    4929/EC36 : CA 01                   	ST	1(P2)
    4930/EC38 : 40                      	LDE
    4931/EC39 : 37                      	XPAH	P3
    4932/EC3A : CA 00                   	ST	(P2)
    4933/EC3C : C4 80                   	LDI	STKMID
    4934/EC3E : 32                      	XPAL	P2
    4935/EC3F : 93 5B                   	JMP	SV_RTFUNC(P3)
    4936/EC41 :                         
    4937/EC41 :                         ; Implement MID$ function with string variable.
    4938/EC41 : C2 FD                   MIDSTR:	LD	AEXOFF(P2)
    4939/EC43 : 32                      	XPAL	P2
    4940/EC44 : C2 05                   	LD	5(P2)
    4941/EC46 : 31                      	XPAL	P1
    4942/EC47 : CA 05                   	ST	5(P2)
    4943/EC49 : C2 04                   	LD	4(P2)
    4944/EC4B : 35                      	XPAH	P1
    4945/EC4C : CA 04                   	ST	4(P2)
    4946/EC4E : C5 01                   MSTR1:	LD	@1(P1)			; get byte from program and increase
    4947/EC50 : E4 0D                   	XRI	_CR			; is it <cr> ?
    4948/EC52 : 98 0C                   	JZ	MSTR3
    4949/EC54 : C2 03                   	LD	3(P2)
    4950/EC56 : 9C 02                   	JNZ	MSTR2
    4951/EC58 : BA 02                   	DLD	2(P2)
    4952/EC5A : BA 03                   MSTR2:	DLD	3(P2)
    4953/EC5C : DA 02                   	OR	2(P2)
    4954/EC5E : 9C EE                   	JNZ	MSTR1
    4955/EC60 : C5 FF                   MSTR3:	LD	@-1(P1)
    4956/EC62 : C2 01                   	LD	1(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 201 - 10/31/2025 04:19:39 PM


    4957/EC64 : CA 03                   	ST	3(P2)
    4958/EC66 : C6 06                   	LD	@6(P2)
    4959/EC68 : CA FC                   	ST	-4(P2)
    4960/EC6A : 90 0F                   	JMP	LFSTR1
    4961/EC6C :                         
    4962/EC6C :                         ; Implement LEFT$ function with string variable.
    4963/EC6C : C2 FD                   LFTSTR:	LD	AEXOFF(P2)
    4964/EC6E : 32                      	XPAL	P2
    4965/EC6F : C2 03                   	LD	3(P2)
    4966/EC71 : 31                      	XPAL	P1
    4967/EC72 : CA 03                   	ST	3(P2)
    4968/EC74 : C2 02                   	LD	2(P2)
    4969/EC76 : 35                      	XPAH	P1
    4970/EC77 : CA 02                   	ST	2(P2)
    4971/EC79 : C6 04                   	LD	@4(P2)
    4972/EC7B : C2 01                   LFSTR1:	LD	1(P2)
    4973/EC7D : 33                      	XPAL	P3
    4974/EC7E : C2 00                   	LD	(P2)
    4975/EC80 : 37                      	XPAH	P3
    4976/EC81 : 01                      	XAE
    4977/EC82 : C5 01                   LFSTR2:	LD	@1(P1)			; get byte from program and increase
    4978/EC84 : E4 0D                   	XRI	_CR			; is it <cr> ?
    4979/EC86 : 98 10                   	JZ	LFSTR4
    4980/EC88 : E4 0D                   	XRI	_CR			; undo XOR, restore char
    4981/EC8A : CF 01                   	ST	@1(P3)
    4982/EC8C : C2 FD                   	LD	AEXOFF(P2)
    4983/EC8E : 9C 02                   	JNZ	LFSTR3
    4984/EC90 : BA FC                   	DLD	-4(P2)
    4985/EC92 : BA FD                   LFSTR3:	DLD	AEXOFF(P2)
    4986/EC94 : DA FC                   	OR	-4(P2)
    4987/EC96 : 9C EA                   	JNZ	LFSTR2
    4988/EC98 : C4 0D                   LFSTR4:	LDI	_CR			; load <cr>
    4989/EC9A : CB 00                   	ST	(P3)			; store as string terminator
    4990/EC9C : 90 64                   	JMP	STREND
    4991/EC9E :                         
    4992/EC9E :                         ; Implement RIGHT$ function with string variable.
    4993/EC9E : C2 FD                   RGHSTR:	LD	AEXOFF(P2)
    4994/ECA0 : 32                      	XPAL	P2
    4995/ECA1 : C2 03                   	LD	3(P2)
    4996/ECA3 : 31                      	XPAL	P1
    4997/ECA4 : CA 03                   	ST	3(P2)
    4998/ECA6 : C2 02                   	LD	2(P2)
    4999/ECA8 : 35                      	XPAH	P1
    5000/ECA9 : CA 02                   	ST	2(P2)
    5001/ECAB : C2 05                   	LD	5(P2)
    5002/ECAD : 33                      	XPAL	P3
    5003/ECAE : C2 04                   	LD	4(P2)
    5004/ECB0 : 37                      	XPAH	P3
    5005/ECB1 : 01                      	XAE
    5006/ECB2 : C4 FF                   	LDI	0xFF
    5007/ECB4 : CA FF                   	ST	-1(P2)
    5008/ECB6 : CA FE                   	ST	-2(P2)
    5009/ECB8 : AA FF                   RGSTR1:	ILD	-1(P2)
    5010/ECBA : 9C 02                   	JNZ	RGSTR2
    5011/ECBC : AA FE                   	ILD	-2(P2)
    5012/ECBE : C5 01                   RGSTR2:	LD	@1(P1)			; get byte from program and increase
    5013/ECC0 : E4 0D                   	XRI	_CR			; is it <cr> ?
    5014/ECC2 : 9C F4                   	JNZ	RGSTR1
    5015/ECC4 : C5 FF                   	LD	@-1(P1)
    5016/ECC6 : 03                      	SCL
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 202 - 10/31/2025 04:19:39 PM


    5017/ECC7 : C2 FF                   	LD	-1(P2)
    5018/ECC9 : FA 01                   	CAD	1(P2)
    5019/ECCB : C2 FE                   	LD	-2(P2)
    5020/ECCD : FE 04                   	CAD	@4(P2)
    5021/ECCF : 94 08                   	JP	RGSTR3
    5022/ECD1 : C2 FB                   	LD	-5(P2)
    5023/ECD3 : CA FD                   	ST	AEXOFF(P2)
    5024/ECD5 : C2 FA                   	LD	-6(P2)
    5025/ECD7 : CA FC                   	ST	-4(P2)
    5026/ECD9 : 03                      RGSTR3:	SCL
    5027/ECDA : 31                      	XPAL	P1
    5028/ECDB : FA FD                   	CAD	AEXOFF(P2)
    5029/ECDD : 31                      	XPAL	P1
    5030/ECDE : 35                      	XPAH	P1
    5031/ECDF : FA FC                   	CAD	-4(P2)
    5032/ECE1 : 35                      	XPAH	P1
    5033/ECE2 : 90 14                   	JMP	MVSTR1
    5034/ECE4 : C2 FD                   MOVSTR:	LD	AEXOFF(P2)
    5035/ECE6 : 32                      	XPAL	P2
    5036/ECE7 : C6 01                   	LD	@1(P2)
    5037/ECE9 : 35                      	XPAH	P1
    5038/ECEA : CA FF                   	ST	-1(P2)
    5039/ECEC : C6 01                   	LD	@1(P2)
    5040/ECEE : 31                      	XPAL	P1
    5041/ECEF : CA FF                   	ST	-1(P2)
    5042/ECF1 : C2 00                   	LD	(P2)
    5043/ECF3 : 37                      	XPAH	P3
    5044/ECF4 : 01                      	XAE
    5045/ECF5 : C2 01                   	LD	1(P2)
    5046/ECF7 : 33                      	XPAL	P3
    5047/ECF8 : C5 01                   MVSTR1:	LD	@1(P1)			; get byte from source string
    5048/ECFA : CF 01                   	ST	@1(P3)			; store in destination string
    5049/ECFC : E4 0D                   	XRI	_CR			; is it a <cr> ?
    5050/ECFE : 9C F8                   	JNZ	MVSTR1			; nope, continue
    5051/ED00 : C7 FF                   	LD	@-1(P3)
    5052/ED02 : C2 FF                   STREND:	LD	-1(P2)			; finish functions for string variables
    5053/ED04 : 31                      	XPAL	P1
    5054/ED05 : C2 FE                   	LD	-2(P2)
    5055/ED07 : 35                      	XPAH	P1
    5056/ED08 : C4 80                   	LDI	L(SPRVSR)
    5057/ED0A : 33                      	XPAL	P3
    5058/ED0B : CA 01                   	ST	1(P2)
    5059/ED0D : 40                      	LDE
    5060/ED0E : 37                      	XPAH	P3
    5061/ED0F : CA 00                   	ST	(P2)
    5062/ED11 : C4 80                   	LDI	STKMID
    5063/ED13 : 32                      	XPAL	P2
    5064/ED14 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    5065/ED16 : 93 5B                   	JMP	SV_RTFUNC(P3)
    5066/ED18 :                         
    5067/ED18 :                         ; Convert floating point number into string and
    5068/ED18 :                         ;  Leave address of string on arithmetics stack.
    5069/ED18 :                         ; NOTE: By using FNUM before the desired string is on AEXSTK.
    5070/ED18 : C2 FD                   FSTRNG:	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
    5071/ED1A : 31                      	XPAL	P1			; P1 holds arithmetics stack
    5072/ED1B : C1 05                   	LD	5(P1)			; get destination address from AEXSTK
    5073/ED1D : 33                      	XPAL	P3
    5074/ED1E : C1 04                   	LD	4(P1)
    5075/ED20 : 37                      	XPAH	P3			; P3 holds start of ASCII representation
    5076/ED21 : 01                      	XAE				; save prev P3.H to E
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 203 - 10/31/2025 04:19:39 PM


    5077/ED22 : C5 FB                   	LD	@-5(P1)			; get byte from source string
    5078/ED24 : CF 01                   FSTR1:	ST	@1(P3)			; store byte into destination string
    5079/ED26 : C5 FF                   	LD	@-1(P1)			; get previous byte from source string
    5080/ED28 :                         ; FIXME: delimiter byte changed from bit7 set to zero byte.
    5081/ED28 : 9C FA                   	JNZ	FSTR1			; loop until <null>
    5082/ED2A : C4 0D                   	LDI	_CR			; terminate string with a <cr>
    5083/ED2C : CB 00                   	ST	(P3)
    5084/ED2E : C4 5E                   	LDI	L(AEXSTK)-2		; restore P1 back so point to destination
    5085/ED30 : 31                      	XPAL	P1
    5086/ED31 : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    5087/ED33 : 33                      	XPAL	P3
    5088/ED34 : C9 01                   	ST	1(P1)			; store address of new string in P1
    5089/ED36 : 40                      	LDE				; restore saved P3.H from E
    5090/ED37 : 37                      	XPAH	P3
    5091/ED38 : C9 00                   	ST	(P1)
    5092/ED3A : 93 D6                   	JMP	SV_SPLOAD(P3)
    5093/ED3C :                         
    5094/ED3C : AA FD                   POPSTR:	ILD	AEXOFF(P2)		; adjust STACK top by two up
    5095/ED3E : AA FD                   	ILD	AEXOFF(P2)
    5096/ED40 : 93 5B                   	JMP	SV_RTFUNC(P3)
    5097/ED42 :                         
    5098/ED42 :                         ; Store pointer P1 on STACK.
    5099/ED42 : 31                      STRPNT:	XPAL	P1
    5100/ED43 : CA F1                   	ST	-15(P2)
    5101/ED45 : 31                      	XPAL	P1
    5102/ED46 : 35                      	XPAH	P1
    5103/ED47 : CA F0                   	ST	-16(P2)
    5104/ED49 : 35                      	XPAH	P1
    5105/ED4A : 93 D6                   	JMP	SV_SPLOAD(P3)
    5106/ED4C :                         
    5107/ED4C :                         ; Compare string variable with quoted string.
    5108/ED4C : BA FD                   CMPRST:	DLD	AEXOFF(P2)		; adjust AEXSTK.L by two down
    5109/ED4E : BA FD                   	DLD	AEXOFF(P2)
    5110/ED50 : 32                      	XPAL	P2			; P2 holds arithmetics stack
    5111/ED51 : C2 03                   	LD	3(P2)
    5112/ED53 : 33                      	XPAL	P3
    5113/ED54 : C2 02                   	LD	2(P2)
    5114/ED56 : 37                      	XPAH	P3
    5115/ED57 : 01                      	XAE
    5116/ED58 : C5 01                   CMPR1:	LD	@1(P1)			; get byte from program and increase
    5117/ED5A : E4 22                   	XRI	'"'			; is it <quote> ?
    5118/ED5C : 98 14                   	JZ	CMPR4
    5119/ED5E : E4 22                   	XRI	'"'			; undo XOR, restore char
    5120/ED60 : E7 01                   	XOR	@1(P3)
    5121/ED62 : 98 F4                   	JZ	CMPR1
    5122/ED64 : C5 01                   CMPR2:	LD	@1(P1)			; get byte from program and increase
    5123/ED66 : E4 22                   	XRI	'"'			; is it <quote> ?
    5124/ED68 : 9C FA                   	JNZ	CMPR2
    5125/ED6A : C4 00                   CMPR3:	LDI	0
    5126/ED6C : CA 00                   	ST	(P2)
    5127/ED6E : CA 01                   	ST	1(P2)
    5128/ED70 : 90 4A                   	JMP	CMPEND
    5129/ED72 : C3 00                   CMPR4:	LD	(P3)			; load char from src
    5130/ED74 : E4 0D                   	XRI	_CR			; is it <cr> ?
    5131/ED76 : 9C F2                   	JNZ	CMPR3			; no, continue
    5132/ED78 : C4 80                   	LDI	0x80			; yes
    5133/ED7A : CA 00                   	ST	(P2)
    5134/ED7C : 1C                      	SR
    5135/ED7D : CA 01                   	ST	1(P2)
    5136/ED7F : 90 3B                   	JMP	CMPEND			; go and finish comparing
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 204 - 10/31/2025 04:19:39 PM


    5137/ED81 :                         
    5138/ED81 :                         ; Compare string variable with another one.
    5139/ED81 : C2 FD                   CMPSTR:	LD	AEXOFF(P2)
    5140/ED83 : 32                      	XPAL	P2
    5141/ED84 : C2 03                   	LD	3(P2)
    5142/ED86 : 33                      	XPAL	P3
    5143/ED87 : C2 02                   	LD	2(P2)
    5144/ED89 : 37                      	XPAH	P3
    5145/ED8A : 01                      	XAE
    5146/ED8B : C2 01                   	LD	1(P2)
    5147/ED8D : 31                      	XPAL	P1
    5148/ED8E : CA 03                   	ST	3(P2)
    5149/ED90 : C2 00                   	LD	(P2)
    5150/ED92 : 35                      	XPAH	P1
    5151/ED93 : CA 02                   	ST	2(P2)
    5152/ED95 : C5 01                   CMP1:	LD	@1(P1)			; get byte from program and increase
    5153/ED97 : E4 0D                   	XRI	_CR			; is it <cr> ?
    5154/ED99 : 98 0E                   	JZ	CMP3
    5155/ED9B : E4 0D                   	XRI	_CR			; undo XOR, restore char
    5156/ED9D : E7 01                   	XOR	@1(P3)
    5157/ED9F : 98 F4                   	JZ	CMP1
    5158/EDA1 : C4 00                   CMP2:	LDI	0
    5159/EDA3 : CA 00                   	ST	(P2)
    5160/EDA5 : CA 01                   	ST	1(P2)
    5161/EDA7 : 90 0D                   	JMP	CMP4
    5162/EDA9 : C3 00                   CMP3:	LD	(P3)			; load char from src
    5163/EDAB : E4 0D                   	XRI	_CR			; is it <cr> ?
    5164/EDAD : 9C F2                   	JNZ	CMP2			; no, continue
    5165/EDAF : C4 80                   	LDI	0x80			; yes
    5166/EDB1 : CA 00                   	ST	(P2)
    5167/EDB3 : 1C                      	SR
    5168/EDB4 : CA 01                   	ST	1(P2)
    5169/EDB6 : C2 03                   CMP4:	LD	3(P2)			; restore P1
    5170/EDB8 : 31                      	XPAL	P1
    5171/EDB9 : C2 02                   	LD	2(P2)
    5172/EDBB : 35                      	XPAH	P1
    5173/EDBC :                         ; Finish compare, restore P2 and P3.
    5174/EDBC : C4 00                   CMPEND:	LDI	0
    5175/EDBE : CA 02                   	ST	2(P2)
    5176/EDC0 : CA 03                   	ST	3(P2)
    5177/EDC2 : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    5178/EDC4 : 33                      	XPAL	P3
    5179/EDC5 : 40                      	LDE
    5180/EDC6 : 37                      	XPAH	P3
    5181/EDC7 : C4 80                   	LDI	STKMID			; restore stack
    5182/EDC9 : 32                      	XPAL	P2
    5183/EDCA : 93 5B                   	JMP	SV_RTFUNC(P3)
    5184/EDCC :                         
    5185/EDCC :                         ; Implement POKE command.
    5186/EDCC : C2 FD                   PUTBYT:	LD	AEXOFF(P2)
    5187/EDCE : 32                      	XPAL	P2
    5188/EDCF : C6 04                   	LD	@4(P2)			; adjust AEXSTK top by four up
    5189/EDD1 : C2 FF                   	LD	-1(P2)
    5190/EDD3 : 33                      	XPAL	P3
    5191/EDD4 : C2 FE                   	LD	-2(P2)
    5192/EDD6 : 37                      	XPAH	P3
    5193/EDD7 : 01                      	XAE
    5194/EDD8 : C2 FD                   	LD	AEXOFF(P2)
    5195/EDDA : CB 00                   	ST	(P3)
    5196/EDDC : C4 80                   	LDI	STKMID			; restore stack
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 205 - 10/31/2025 04:19:39 PM


    5197/EDDE : 32                      	XPAL	P2
    5198/EDDF : CA FD                   	ST	AEXOFF(P2)		; save actual offset
    5199/EDE1 : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    5200/EDE3 : 33                      	XPAL	P3
    5201/EDE4 : 40                      	LDE
    5202/EDE5 : 37                      	XPAH	P3
    5203/EDE6 : 93 D6                   	JMP	SV_SPLOAD(P3)
    5204/EDE8 :                         
    5205/EDE8 :                         ; Implement PEEK command.
    5206/EDE8 : C2 FD                   GETBYT:	LD	AEXOFF(P2)
    5207/EDEA : 32                      	XPAL	P2
    5208/EDEB : C2 01                   	LD	1(P2)
    5209/EDED : 33                      	XPAL	P3
    5210/EDEE : C2 00                   	LD	(P2)
    5211/EDF0 : 37                      	XPAH	P3
    5212/EDF1 : 01                      	XAE
    5213/EDF2 : C3 00                   	LD	(P3)
    5214/EDF4 : CA 01                   	ST	1(P2)
    5215/EDF6 : C4 00                   	LDI	0
    5216/EDF8 : CA 00                   	ST	(P2)
    5217/EDFA : C4 80                   STRNG:	LDI	STKMID			; restore stack
    5218/EDFC : 32                      	XPAL	P2
    5219/EDFD : C4 80                   	LDI	L(SPRVSR)		; restore P3 to Supervisor
    5220/EDFF : 33                      	XPAL	P3
    5221/EE00 : 40                      	LDE
    5222/EE01 : 37                      	XPAH	P3
    5223/EE02 : 93 5B                   	JMP	SV_RTFUNC(P3)
    5224/EE04 :                         
    5225/EE04 :                         ; Take the first char of a quoted string and output its numeric value.
    5226/EE04 : C2 FD                   ASC:	LD	AEXOFF(P2)
    5227/EE06 : 32                      	XPAL	P2
    5228/EE07 : C4 00                   	LDI	0
    5229/EE09 : CE FF                   	ST	@-1(P2)
    5230/EE0B : CE FF                   	ST	@-1(P2)
    5231/EE0D : C5 01                   	LD	@1(P1)			; get byte from program and increase
    5232/EE0F : E4 22                   	XRI	'"'			; is it <quote> ?
    5233/EE11 : 98 59                   	JZ	LEN3			; yes, done
    5234/EE13 : E4 22                   	XRI	'"'			; undo XOR, restore char
    5235/EE15 : CA 01                   	ST	1(P2)
    5236/EE17 : C5 01                   ASC1:	LD	@1(P1)			; get byte from program and increase
    5237/EE19 : E4 22                   	XRI	'"'			; is it <quote> ?
    5238/EE1B : 9C FA                   	JNZ	ASC1			; no, keep scanning
    5239/EE1D : 90 4D                   	JMP	LEN3			; done
    5240/EE1F :                         
    5241/EE1F :                         ; Take the first char of a string variable and output its numeric value.
    5242/EE1F : C2 FD                   ASTRNG:	LD	AEXOFF(P2)
    5243/EE21 : 32                      	XPAL	P2
    5244/EE22 : C2 01                   	LD	1(P2)
    5245/EE24 : 33                      	XPAL	P3
    5246/EE25 : C2 00                   	LD	(P2)
    5247/EE27 : 37                      	XPAH	P3
    5248/EE28 : 01                      	XAE
    5249/EE29 : C4 00                   	LDI	0
    5250/EE2B : CA 00                   	ST	(P2)
    5251/EE2D : C7 01                   	LD	@1(P3)
    5252/EE2F : E4 0D                   	XRI	_CR			; is it <cr> ?
    5253/EE31 : 98 02                   	JZ	ASTR1			; yes
    5254/EE33 : E4 0D                   	XRI	_CR			; undo XOR, restore char
    5255/EE35 : CA 01                   ASTR1:	ST	1(P2)
    5256/EE37 : 90 C1                   	JMP	STRNG
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 206 - 10/31/2025 04:19:39 PM


    5257/EE39 :                         
    5258/EE39 :                         ; Store length of a string variable on stack.
    5259/EE39 : C2 FD                   LSTRNG:	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
    5260/EE3B : 32                      	XPAL	P2
    5261/EE3C : C2 01                   	LD	1(P2)
    5262/EE3E : 33                      	XPAL	P3
    5263/EE3F : C2 00                   	LD	(P2)
    5264/EE41 : 37                      	XPAH	P3
    5265/EE42 : 01                      	XAE
    5266/EE43 : C4 FF                   	LDI	0xFF
    5267/EE45 : CA 01                   	ST	1(P2)
    5268/EE47 : CA 00                   	ST	(P2)
    5269/EE49 : AA 01                   LSTR1:	ILD	1(P2)
    5270/EE4B : 9C 02                   	JNZ	LSTR2
    5271/EE4D : AA 00                   	ILD	(P2)
    5272/EE4F : C7 01                   LSTR2:	LD	@1(P3)
    5273/EE51 : E4 0D                   	XRI	_CR			; is it <cr> ?
    5274/EE53 : 9C F4                   	JNZ	LSTR1			; no, continue scanning
    5275/EE55 : 90 A3                   	JMP	STRNG			; yes, done
    5276/EE57 :                         
    5277/EE57 :                         ; Store length of a quoted string on stack.
    5278/EE57 : C2 FD                   LEN:	LD	AEXOFF(P2)		; load actual offset of AEXSTK.L
    5279/EE59 : 32                      	XPAL	P2
    5280/EE5A : C4 FF                   	LDI	-1
    5281/EE5C : CE FF                   	ST	@-1(P2)
    5282/EE5E : CE FF                   	ST	@-1(P2)			; reserve two bytes on stack
    5283/EE60 : AA 01                   LEN1:	ILD	1(P2)
    5284/EE62 : 9C 02                   	JNZ	LEN2
    5285/EE64 : AA 00                   	ILD	(P2)
    5286/EE66 : C5 01                   LEN2:	LD	@1(P1)			; get byte from program
    5287/EE68 : E4 22                   	XRI	'"'			; is it <quote> ?
    5288/EE6A : 9C F4                   	JNZ	LEN1			; no, continue counting
    5289/EE6C : C4 80                   LEN3:	LDI	STKMID			; yes, reset P2 stack
    5290/EE6E : 32                      	XPAL	P2
    5291/EE6F : CA FD                   	ST	AEXOFF(P2)		; save last AEXSTK.L
    5292/EE71 : C5 01                   LEN4:	LD	@1(P1)			; get byte from program
    5293/EE73 : E4 20                   	XRI	' '			; is it <space> ?
    5294/EE75 : 98 FA                   	JZ	LEN4			; yes, just eat it
    5295/EE77 : E4 09                   	XRI	' ' ! ')'		; we XOR'ed above, is it ')' ?
    5296/EE79 : 9B 5B                   	JZ	SV_RTFUNC(P3)
    5297/EE7B : C4 AC                   	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
    5298/EE7D : 93 B4                   	JMP	SV_MSGOUT(P3)
    5299/EE7F :                         
    5300/EE7F :                         ; After found variable check for existence of $ and closing parenthesis.
    5301/EE7F :                         ; NOTE: Needed at end of string functions.
    5302/EE7F : 98 04                   CKDLLR:	JZ	CKDLL1
    5303/EE81 : C4 F0                   	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
    5304/EE83 : 93 B4                   	JMP	SV_MSGOUT(P3)
    5305/EE85 : C5 01                   CKDLL1:	LD	@1(P1)			; get byte from program
    5306/EE87 : E4 24                   	XRI	'$'			; is it $ ?
    5307/EE89 : 98 04                   	JZ	CKDLL2
    5308/EE8B : C4 D7                   	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
    5309/EE8D : 93 B4                   	JMP	SV_MSGOUT(P3)
    5310/EE8F : C5 01                   CKDLL2:	LD	@1(P1)			; get byte from program
    5311/EE91 : E4 20                   	XRI	' '			; is it <space> ?
    5312/EE93 : 98 FA                   	JZ	CKDLL2			; yes, just eat it
    5313/EE95 : E4 09                   	XRI	' ' ! ')'		; we XOR'ed above, is it ')' ?
    5314/EE97 : 9B D6                   	JZ	SV_SPLOAD(P3)
    5315/EE99 : C4 AC                   	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
    5316/EE9B : 93 B4                   	JMP	SV_MSGOUT(P3)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 207 - 10/31/2025 04:19:39 PM


    5317/EE9D :                         
    5318/EE9D :                         ; Implement CHR$ function.
    5319/EE9D : C2 EF                   PRCHAR:	LD	-17(P2)			; load value to be printed
    5320/EE9F : =>DEFINED               	IFDEF	SCALLS
    5321/EE9F : (MACRO)[1374]           	 SYSCALL	2
    5321/EE9F : 3F                               XPPC   P3
    5321/EEA0 : 02                               DB     2
    5322/EEA1 : =>FALSE                 	ELSE
    5323/EEA1 :                         	 CALL	PUTASC
    5324/EEA1 : [5320]                  	ENDIF
    5325/EEA1 : 93 5B                   	JMP	SV_RTFUNC(P3)		; .. and return
    5326/EEA3 :                         
    5327/EEA3 :                         ; Determine first free byte after BASIC program storage on actual page.
    5328/EEA3 :                         ; Put absolute address on STACK, return actual STACK.L value.
    5329/EEA3 : C2 F6                   TOP:	LD	CURPG(P2)		; convert page# into high address byte
    5330/EEA5 : 1E                      	RR				; rotate right AC (multiply by 16)
    5331/EEA6 : 1E                      	RR
    5332/EEA7 : 1E                      	RR
    5333/EEA8 : 1E                      	RR
    5334/EEA9 : 33                      	XPAL	P3			; store temporarely in P3.L
    5335/EEAA : C4 02                   	LDI	2			; position of first program byte
    5336/EEAC : 33                      	XPAL	P3			; use pointer P3
    5337/EEAD : 37                      	XPAH	P3			; P3 holds pointer to program storage
    5338/EEAE : C3 00                   TOP1:	LD	(P3)			; get current program byte
    5339/EEB0 : E4 FF                   	XRI	0xFF			; is it first byte of end termination ?
    5340/EEB2 : 9C 06                   	JNZ	TOP2			; no, go ahead
    5341/EEB4 : C3 01                   	LD	1(P3)
    5342/EEB6 : E4 FF                   	XRI	0xFF			; do we have second byte ?
    5343/EEB8 : 98 07                   	JZ	TOP3			; yes, we are finished
    5344/EEBA : C3 02                   TOP2:	LD	2(P3)			; get byte, advance pointer by two
    5345/EEBC : 01                      	XAE				; E holds length of line
> > > NIBLFP.asm(5346):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
    5346/EEBD : C7 80                   	LD	@EREG(P3)		; advance to next program line
    5347/EEBF : 90 ED                   	JMP	TOP1			; loop again
    5348/EEC1 : C7 02                   TOP3:	LD	@2(P3)			; advance to first free byte
    5349/EEC3 : C2 9C                   	LD	-100(P2)		; load SPRVSR.H
    5350/EEC5 : 37                      	XPAH	P3
    5351/EEC6 : 01                      	XAE				; TOP.H into E
    5352/EEC7 : C2 FD                   	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
    5353/EEC9 : 32                      	XPAL	P2			; P2 holds arithmetics stack
    5354/EECA : 33                      	XPAL	P3
    5355/EECB : CE FF                   	ST	@-1(P2)			; put TOP.L on stack
    5356/EECD : 40                      	LDE
    5357/EECE : CE FF                   	ST	@-1(P2)			; put TOP.H on stack
    5358/EED0 : C4 80                   	LDI	STKMID			; reset P2 stack
    5359/EED2 : 32                      	XPAL	P2
    5360/EED3 : CA FD                   	ST	AEXOFF(P2)		; save actual AEXSTK.L
    5361/EED5 : (MACRO)[1375]           	RTRN
    5361/EED5 : 3F                               XPPC   P3
    5361/EED6 : 00                               DB     0
    5362/EED7 :                         
    5363/EED7 :                         ; Calculate amount of free space above BASIC program in page.
    5364/EED7 : C2 FD                   FREE:	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
    5365/EED9 : 32                      	XPAL	P2			; P2 holds arithmetics stack
    5366/EEDA : 03                      	SCL
    5367/EEDB : C4 00                   	LDI	0
    5368/EEDD : FA 01                   	CAD	1(P2)			; subtract TOP.L
    5369/EEDF : CA 01                   	ST	1(P2)			; store as FREE.L
    5370/EEE1 : C2 00                   	LD	(P2)			; load TOP.H
    5371/EEE3 : D4 F0                   	ANI	0xF0			; isolate PAGE, shifted by 16
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 208 - 10/31/2025 04:19:39 PM


    5372/EEE5 : E4 70                   	XRI	H(RAMBASE)		; compare with RAMBASE.H
    5373/EEE7 : 9C 04                   	JNZ	FREE1			; go, normal page
    5374/EEE9 : C4 0C                   	LDI	H(STKTOP)		; no, must subtract STACK space
    5375/EEEB : 90 02                   	JMP	FREE2
    5376/EEED : C4 00                   FREE1:	LDI	0
    5377/EEEF : FA 00                   FREE2:	CAD	(P2)			; subtract TOP.H
    5378/EEF1 : D4 0F                   	ANI	0x0F			; only last 4 bits are relevant
    5379/EEF3 : CA 00                   	ST	(P2)			; store as FREE.H
    5380/EEF5 : C4 80                   	LDI	STKMID
    5381/EEF7 : 32                      	XPAL	P2
    5382/EEF8 : 93 5B                   	JMP	SV_RTFUNC(P3)
    5383/EEFA :                         
    5384/EEFA :                         ; Read hexadecimal number and store on arithmetics stack.
    5385/EEFA :                         ; NOTE: Numbers greater than #7FFF are negative (#8000 is -32768.)
    5386/EEFA : BA FD                   HEX:	DLD	AEXOFF(P2)		; adjust STACK top by two down
    5387/EEFC : BA FD                   	DLD	AEXOFF(P2)
    5388/EEFE : 32                      	XPAL	P2			; P2 holds arithmetics stack
    5389/EEFF : C4 00                   	LDI	0			; clear the two reserved bytes
    5390/EF01 : CA 01                   	ST	1(P2)
    5391/EF03 : CA 00                   	ST	(P2)
    5392/EF05 : CA FF                   	ST	-1(P2)
    5393/EF07 : 01                      HEX1:	XAE
    5394/EF08 : C1 00                   	LD	(P1)
    5395/EF0A : 03                      	SCL
    5396/EF0B : FC 3A                   	CAI	'9'+1
    5397/EF0D : 94 06                   	JP	HEX2			; no digit
    5398/EF0F : F4 0A                   	ADI	10			; '9'-'0'+1
    5399/EF11 : 94 1D                   	JP	HEX6
    5400/EF13 : 90 08                   	JMP	HEX3
    5401/EF15 : FC 0D                   HEX2:	CAI	_CR
    5402/EF17 : 94 04                   	JP	HEX3
    5403/EF19 : F4 06                   	ADI	6
    5404/EF1B : 94 11                   	JP	HEX5
    5405/EF1D : C4 80                   HEX3:	LDI	STKMID			; reset P2 stack
    5406/EF1F : 32                      	XPAL	P2
    5407/EF20 : 40                      	LDE
    5408/EF21 : 9C 04                   	JNZ	HEX4
    5409/EF23 : C4 B7                   	LDI	(M_HEX-M_BASE)		; 'HEX ERROR', not a valid hexadecimal
    5410/EF25 : 93 B4                   	JMP	SV_MSGOUT(P3)
    5411/EF27 : 03                      HEX4:	SCL
    5412/EF28 : FC 05                   	CAI	5
    5413/EF2A : 97 6B                   	JP	SV_VALERR(P3)		; jump to 'VALUE ERROR'
    5414/EF2C : 93 5B                   	JMP	SV_RTFUNC(P3)
    5415/EF2E : F4 09                   HEX5:	ADI	9
    5416/EF30 : 01                      HEX6:	XAE
    5417/EF31 : C4 04                   	LDI	4			; shift four times left
    5418/EF33 : CA FE                   	ST	-2(P2)			; store as temporary counter
    5419/EF35 : 02                      HEX7:	CCL
    5420/EF36 : C2 01                   	LD	1(P2)
    5421/EF38 : F2 01                   	ADD	1(P2)
    5422/EF3A : CA 01                   	ST	1(P2)
    5423/EF3C : C2 00                   	LD	(P2)
    5424/EF3E : F2 00                   	ADD	(P2)
    5425/EF40 : CA 00                   	ST	(P2)
    5426/EF42 : BA FE                   	DLD	-2(P2)
    5427/EF44 : 9C EF                   	JNZ	HEX7
    5428/EF46 : C2 01                   	LD	1(P2)			; multiplication by 16 done
    5429/EF48 : 58                      	ORE
    5430/EF49 : CA 01                   	ST	1(P2)			; OR in new digit
    5431/EF4B : C5 01                   	LD	@1(P1)			; get byte from program and increase
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 209 - 10/31/2025 04:19:39 PM


    5432/EF4D : AA FF                   	ILD	-1(P2)
    5433/EF4F : 90 B6                   	JMP	HEX1
    5434/EF51 :                         
    5435/EF51 : =>DEFINED               	IFDEF	SCALLS
    5436/EF51 :                         ; Print version string via external tty.
    5437/EF51 : C4 03                   VERS:	LDI	L(VERMSG)		; point P1 to string
    5438/EF53 : 31                      	XPAL	P1
    5439/EF54 : CA F1                   	ST	-15(P2)			; save prev P1.L
    5440/EF56 : C4 D0                   	LDI	H(VERMSG)
    5441/EF58 : 35                      	XPAH	P1
    5442/EF59 : CA F0                   	ST	-16(P2)			; save prev P1.H
    5443/EF5B : C5 01                   	LD	@1(P1)			; get first byte from string and increase
    5444/EF5D : (MACRO)[1376]           	SYSCALL	2
    5444/EF5D : 3F                               XPPC   P3
    5444/EF5E : 02                               DB     2
    5445/EF5F : C1 00                   VER1:	LD	(P1)			; get byte from string
    5446/EF61 : E4 0D                   	XRI	_CR			; is it terminating <cr> ?
    5447/EF63 : 9B 30                   	JZ	SV_LINE(P3)		; return and print a newline
    5448/EF65 : C5 01                   	LD	@1(P1)			; get byte again and increase
    5449/EF67 : (MACRO)[1377]           	SYSCALL	2
    5449/EF67 : 3F                               XPPC   P3
    5449/EF68 : 02                               DB     2
    5450/EF69 : 90 F4                   	JMP	VER1
    5451/EF6B : =>FALSE                 	ELSE
    5452/EF6B :                         ; Print version string via internal tty.
    5453/EF6B :                         VERS:	LDI	L(VERMSG)		; point P1 to string
    5454/EF6B :                         	XPAL	P1
    5455/EF6B :                         	ST	-15(P2)			; save prev P1.L
    5456/EF6B :                         	LDI	H(VERMSG)
    5457/EF6B :                         	XPAH	P1
    5458/EF6B :                         	ST	-16(P2)			; save prev P1.H
    5459/EF6B :                         	LD	@1(P1)			; get first byte from string and increase
    5460/EF6B :                         	CALL	PUTASC
    5461/EF6B :                         VER1:	LD	(P1)			; get byte from string
    5462/EF6B :                         	XRI	_CR			; is it terminating <cr> ?
    5463/EF6B :                         	JZ	SV_LINE(P3)		; return and print a newline
    5464/EF6B :                         	LD	@1(P1)			; get byte again and increase
    5465/EF6B :                         	CALL	PUTASC
    5466/EF6B :                         	JMP	VER1
    5467/EF6B : [5435]                  	ENDIF
    5468/EF6B :                         
    5469/EF6B :                         ;************************************
    5470/EF6B :                         ;*  PAGE BREAK - THIRD BLOCK OF 4K  *
    5471/EF6B :                         ;************************************
    5472/EF6B :                         ;
    5473/F000 :                         	ORG	BASE+0x2000
    5474/F000 : 08                      	NOP				; needed so Supervisor can do -1 here
    5475/F001 :                         
    5476/F001 :                         ; NEW command (store new page number.)
    5477/F001 : C2 EF                   NUPAGE:	LD	-17(P2)
    5478/F003 : D4 07                   	ANI	7			; allow pages 0..7
    5479/F005 : 9C 02                   	JNZ	NUPGE2
    5480/F007 : C4 01                   NUPGE1:	LDI	1			; reset page# to 1
    5481/F009 : CA F6                   NUPGE2:	ST	CURPG(P2)
    5482/F00B : 93 D6                   	JMP	SV_SPLOAD(P3)
    5483/F00D :                         
    5484/F00D :                         ; Mark current page as empty.
    5485/F00D : C4 02                   NEWPGM:	LDI	2			; set P1 to new page, offset 2
    5486/F00F : 31                      	XPAL	P1
    5487/F010 : C2 F6                   	LD	CURPG(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 210 - 10/31/2025 04:19:39 PM


    5488/F012 : 1E                      	RR
    5489/F013 : 1E                      	RR
    5490/F014 : 1E                      	RR
    5491/F015 : 1E                      	RR
    5492/F016 : 35                      	XPAH	P1
    5493/F017 : C4 0D                   	LDI	_CR			; store a <cr>
    5494/F019 : C9 FF                   	ST	-1(P1)
    5495/F01B : C4 FF                   	LDI	-1			; store line number -1
    5496/F01D : C9 00                   	ST	(P1)
    5497/F01F : C9 01                   	ST	1(P1)
    5498/F021 : 93 D6                   	JMP	SV_SPLOAD(P3)
    5499/F023 :                         
    5500/F023 :                         ; CLEAR command (clear stacks and all variables.)
    5501/F023 : 93 A0                   CLEAR:	JMP	SV_RESTRT(P3)
    5502/F025 :                         
    5503/F025 :                         ; Swap first and second number on STACK in P1.
    5504/F025 : C1 05                   ABSWP:	LD	5(P1)
    5505/F027 : E1 01                   	XOR	1(P1)
    5506/F029 : CA EA                   	ST	-22(P2)
    5507/F02B : (MACRO)[1378]           	CALL	ABSWP1
    5507/F02B : 3F                               XPPC   P3
    5507/F02C : F0                               DB     H(ABSWP1)
    5507/F02D : 2E                               DB     L(ABSWP1)
    5508/F02E : C1 01                   ABSWP1:	LD	1(P1)
    5509/F030 : 94 03                   	JP	SWAP			; positive, go ahead
    5510/F032 : (MACRO)[1379]           	CALL	FNEG			; negate number
    5510/F032 : 3F                               XPPC   P3
    5510/F033 : F1                               DB     H(FNEG)
    5510/F034 : AC                               DB     L(FNEG)
    5511/F035 : C4 04                   SWAP:	LDI	4			; counter for 4-byte swap
    5512/F037 : CA E9                   	ST	-23(P2)
    5513/F039 : C5 01                   SWAP1:	LD	@1(P1)			; load byte of first number from stack
    5514/F03B : C9 FB                   	ST	-5(P1)			; temporary store 4 bytes lower
    5515/F03D : C1 03                   	LD	3(P1)			; load byte of second number from stack
    5516/F03F : C9 FF                   	ST	-1(P1)			; store byte into first number on stack
    5517/F041 : C1 FB                   	LD	-5(P1)			; load temporary stored byte
    5518/F043 : C9 03                   	ST	3(P1)			; store byte into second number on stack
    5519/F045 : BA E9                   	DLD	-23(P2)			; decrease counter
    5520/F047 : 9C F0                   	JNZ	SWAP1			; do again
    5521/F049 : C5 FC                   	LD	@-4(P1)
    5522/F04B : (MACRO)[1380]           	RTRN
    5522/F04B : 3F                               XPPC   P3
    5522/F04C : 00                               DB     0
    5523/F04D :                         
    5524/F04D :                         ; Two floats are on AEX STACK at -4(P1) and (P1), E holds difference of exponents.
    5525/F04D : C4 00                   MD:	LDI	0
    5526/F04F : C9 03                   	ST	3(P1)
    5527/F051 : C9 02                   	ST	2(P1)
    5528/F053 : C9 01                   	ST	1(P1)
    5529/F055 : C9 00                   	ST	(P1)			; set topmost float to zero
    5530/F057 : 06                      	CSA
    5531/F058 : 94 09                   	JP	MD1
    5532/F05A : C4 A0                   	LDI	0xA0			; load b'10100000' 10<<4 ?
    5533/F05C : 01                      	XAE
    5534/F05D : 94 09                   	JP	MD2
    5535/F05F : C4 C6                   	LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
    5536/F061 : 93 B4                   	JMP	SV_MSGOUT(P3)
    5537/F063 : C4 A0                   MD1:	LDI	0xA0			; load b'10100000' 10<<4 ?
    5538/F065 : 01                      	XAE
    5539/F066 : 94 0A                   	JP	MD3
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 211 - 10/31/2025 04:19:39 PM


    5540/F068 : E4 80                   MD2:	XRI	0x80
    5541/F06A : C9 00                   	ST	(P1)
    5542/F06C : C4 18                   	LDI	0x18
    5543/F06E : C9 F8                   	ST	-8(P1)
    5544/F070 : 93 38                   	JMP	SV_RTRN(P3)
    5545/F072 : AA E3                   MD3:	ILD	SUBOFF(P2)		; adjust SUBSTK.L by two bytes up
    5546/F074 : AA E3                   	ILD	SUBOFF(P2)
    5547/F076 : 93 38                   	JMP	SV_RTRN(P3)
    5548/F078 :                         
    5549/F078 : (MACRO)[1381]           FDIV:	CALL	ABSWP
    5549/F078 : 3F                               XPPC   P3
    5549/F079 : F0                               DB     H(ABSWP)
    5549/F07A : 25                               DB     L(ABSWP)
    5550/F07B : 02                      FDIV0:	CCL
    5551/F07C : C1 04                   	LD	4(P1)
    5552/F07E : FD 04                   	CAD	@4(P1)
    5553/F080 : (MACRO)[1382]           	CALL	MD
    5553/F080 : 3F                               XPPC   P3
    5553/F081 : F0                               DB     H(MD)
    5553/F082 : 4D                               DB     L(MD)
    5554/F083 : 03                      FDIV1:	SCL
    5555/F084 : C1 FB                   	LD	-5(P1)
    5556/F086 : F9 FF                   	CAD	-1(P1)
    5557/F088 : C9 FB                   	ST	-5(P1)
    5558/F08A : C1 FA                   	LD	-6(P1)
    5559/F08C : F9 FE                   	CAD	-2(P1)
    5560/F08E : C9 FA                   	ST	-6(P1)
    5561/F090 : C1 F9                   	LD	-7(P1)
    5562/F092 : F9 FD                   	CAD	-3(P1)
    5563/F094 : C9 F9                   	ST	-7(P1)
    5564/F096 : 94 15                   	JP	FDIV2
    5565/F098 : 02                      	CCL
    5566/F099 : C1 FB                   	LD	-5(P1)
    5567/F09B : F1 FF                   	ADD	-1(P1)
    5568/F09D : C9 FB                   	ST	-5(P1)
    5569/F09F : C1 FA                   	LD	-6(P1)
    5570/F0A1 : F1 FE                   	ADD	-2(P1)
    5571/F0A3 : C9 FA                   	ST	-6(P1)
    5572/F0A5 : C1 F9                   	LD	-7(P1)
    5573/F0A7 : F1 FD                   	ADD	-3(P1)
    5574/F0A9 : C9 F9                   	ST	-7(P1)
    5575/F0AB : 90 02                   	JMP	FDIV3
    5576/F0AD : A9 03                   FDIV2:	ILD	3(P1)
    5577/F0AF : B9 F8                   FDIV3:	DLD	-8(P1)
    5578/F0B1 : 98 78                   	JZ	MDEND
    5579/F0B3 : 02                      	CCL
    5580/F0B4 : 40                      	LDE
    5581/F0B5 : 70                      	ADE
    5582/F0B6 : 01                      	XAE
    5583/F0B7 : C1 FB                   	LD	-5(P1)
    5584/F0B9 : F1 FB                   	ADD	-5(P1)
    5585/F0BB : C9 FB                   	ST	-5(P1)
    5586/F0BD : C1 FA                   	LD	-6(P1)
    5587/F0BF : F1 FA                   	ADD	-6(P1)
    5588/F0C1 : C9 FA                   	ST	-6(P1)
    5589/F0C3 : C1 F9                   	LD	-7(P1)
    5590/F0C5 : 94 04                   	JP	FDIV4
    5591/F0C7 : C4 A7                   	LDI	(M_DIV0-M_BASE)		; 'DIVISION BY 0 ERROR'
    5592/F0C9 : 93 B4                   	JMP	SV_MSGOUT(P3)
    5593/F0CB : F1 F9                   FDIV4:	ADD	-7(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 212 - 10/31/2025 04:19:39 PM


    5594/F0CD : C9 F9                   	ST	-7(P1)
    5595/F0CF : C1 03                   	LD	3(P1)
    5596/F0D1 : F1 03                   	ADD	3(P1)
    5597/F0D3 : C9 03                   	ST	3(P1)
    5598/F0D5 : C1 02                   	LD	2(P1)
    5599/F0D7 : F1 02                   	ADD	2(P1)
    5600/F0D9 : C9 02                   	ST	2(P1)
    5601/F0DB : C1 01                   	LD	1(P1)
    5602/F0DD : F1 01                   	ADD	1(P1)
    5603/F0DF : C9 01                   	ST	1(P1)
    5604/F0E1 : 90 A0                   	JMP	FDIV1
    5605/F0E3 :                         
    5606/F0E3 : (MACRO)[1383]           FMUL:	CALL	ABSWP
    5606/F0E3 : 3F                               XPPC   P3
    5606/F0E4 : F0                               DB     H(ABSWP)
    5606/F0E5 : 25                               DB     L(ABSWP)
    5607/F0E6 : 02                      	CCL
    5608/F0E7 : C1 04                   	LD	4(P1)
    5609/F0E9 : F5 04                   	ADD	@4(P1)
    5610/F0EB : (MACRO)[1384]           	CALL	MD
    5610/F0EB : 3F                               XPPC   P3
    5610/F0EC : F0                               DB     H(MD)
    5610/F0ED : 4D                               DB     L(MD)
    5611/F0EE : 02                      FMUL1:	CCL
    5612/F0EF : C1 F9                   	LD	-7(P1)
    5613/F0F1 : 1F                      	RRL
    5614/F0F2 : C9 F9                   	ST	-7(P1)
    5615/F0F4 : C1 FA                   	LD	-6(P1)
    5616/F0F6 : 1F                      	RRL
    5617/F0F7 : C9 FA                   	ST	-6(P1)
    5618/F0F9 : C1 FB                   	LD	-5(P1)
    5619/F0FB : 1F                      	RRL
    5620/F0FC : C9 FB                   	ST	-5(P1)
    5621/F0FE : 06                      	CSA
    5622/F0FF : 94 12                   	JP	FMUL2
    5623/F101 : C1 03                   	LD	3(P1)
    5624/F103 : F1 FF                   	ADD	-1(P1)
    5625/F105 : C9 03                   	ST	3(P1)
    5626/F107 : C1 02                   	LD	2(P1)
    5627/F109 : F1 FE                   	ADD	-2(P1)
    5628/F10B : C9 02                   	ST	2(P1)
    5629/F10D : C1 01                   	LD	1(P1)
    5630/F10F : F1 FD                   	ADD	-3(P1)
    5631/F111 : C9 01                   	ST	1(P1)
    5632/F113 : B9 F8                   FMUL2:	DLD	-8(P1)
    5633/F115 : E4 01                   	XRI	1
    5634/F117 : 98 12                   	JZ	MDEND
    5635/F119 : 02                      	CCL
    5636/F11A : C1 01                   	LD	1(P1)
    5637/F11C : 1F                      	RRL
    5638/F11D : C9 01                   	ST	1(P1)
    5639/F11F : C1 02                   	LD	2(P1)
    5640/F121 : 1F                      	RRL
    5641/F122 : C9 02                   	ST	2(P1)
    5642/F124 : C1 03                   	LD	3(P1)
    5643/F126 : 1F                      	RRL
    5644/F127 : C9 03                   	ST	3(P1)
    5645/F129 : 90 C3                   	JMP	FMUL1
    5646/F12B : 02                      MDEND:	CCL
    5647/F12C : C1 01                   	LD	1(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 213 - 10/31/2025 04:19:39 PM


    5648/F12E : 94 03                   	JP	MDSGN
    5649/F130 : (MACRO)[1385]           	CALL	ALGN2
    5649/F130 : 3F                               XPPC   P3
    5649/F131 : F1                               DB     H(ALGN2)
    5649/F132 : E9                               DB     L(ALGN2)
    5650/F133 : C2 EA                   MDSGN:	LD	-22(P2)
    5651/F135 : 97 38                   	JP	SV_RTRN(P3)
    5652/F137 : 90 73                   	JMP	FNEG
    5653/F139 :                         
    5654/F139 :                         ; Subtract the two topmost floating point numbers on arithmetics stack.
    5655/F139 : (MACRO)[1386]           FSUB:	CALL	FNEG			; negate and add
    5655/F139 : 3F                               XPPC   P3
    5655/F13A : F1                               DB     H(FNEG)
    5655/F13B : AC                               DB     L(FNEG)
    5656/F13C :                         
    5657/F13C :                         ; Add the two topmost floating point numbers on arithmetics stack.
    5658/F13C : (MACRO)[1387]           FADD:	CALL	ALGEXP			; align exponents for addition
    5658/F13C : 3F                               XPPC   P3
    5658/F13D : F2                               DB     H(ALGEXP)
    5658/F13E : 59                               DB     L(ALGEXP)
    5659/F13F : 02                      	CCL
    5660/F140 : C1 07                   	LD	7(P1)
    5661/F142 : F1 03                   	ADD	3(P1)
    5662/F144 : C9 07                   	ST	7(P1)
    5663/F146 : C1 06                   	LD	6(P1)
    5664/F148 : F1 02                   	ADD	2(P1)
    5665/F14A : C9 06                   	ST	6(P1)
    5666/F14C : C1 05                   	LD	5(P1)
    5667/F14E : F1 01                   	ADD	1(P1)
    5668/F150 : C9 05                   	ST	5(P1)
    5669/F152 : C5 04                   	LD	@4(P1)
    5670/F154 : 90 69                   	JMP	ALGN1
    5671/F156 :                         
    5672/F156 :                         ; Logical Operations with the two topmost floats on arithmetics stack.
    5673/F156 : C1 07                   AND:	LD	7(P1)
    5674/F158 : D1 03                   	AND	3(P1)
    5675/F15A : C9 07                   	ST	7(P1)
    5676/F15C : C1 06                   	LD	6(P1)
    5677/F15E : D1 02                   	AND	2(P1)
    5678/F160 : C9 06                   	ST	6(P1)
    5679/F162 : C1 05                   	LD	5(P1)
    5680/F164 : D1 01                   	AND	1(P1)
    5681/F166 : C9 05                   	ST	5(P1)
    5682/F168 : C5 04                   	LD	@4(P1)
    5683/F16A : 90 58                   	JMP	NORM
    5684/F16C :                         
    5685/F16C : C1 07                   OR:	LD	7(P1)
    5686/F16E : D9 03                   	OR	3(P1)
    5687/F170 : C9 07                   	ST	7(P1)
    5688/F172 : C1 06                   	LD	6(P1)
    5689/F174 : D9 02                   	OR	2(P1)
    5690/F176 : C9 06                   	ST	6(P1)
    5691/F178 : C1 05                   	LD	5(P1)
    5692/F17A : D9 01                   	OR	1(P1)
    5693/F17C : C9 05                   	ST	5(P1)
    5694/F17E : C5 04                   	LD	@4(P1)
    5695/F180 : 90 42                   	JMP	NORM
    5696/F182 :                         
    5697/F182 : 60                      NOT:	XRE
    5698/F183 : CD FF                   	ST	@-1(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 214 - 10/31/2025 04:19:39 PM


    5699/F185 : CD FF                   	ST	@-1(P1)
    5700/F187 : C4 80                   	LDI	0x80
    5701/F189 : CD FF                   	ST	@-1(P1)
    5702/F18B : C4 7F                   	LDI	0x7F
    5703/F18D : CD FF                   	ST	@-1(P1)
    5704/F18F : (MACRO)[1388]           	CALL	ALGEXP
    5704/F18F : 3F                               XPPC   P3
    5704/F190 : F2                               DB     H(ALGEXP)
    5704/F191 : 59                               DB     L(ALGEXP)
    5705/F192 :                         
    5706/F192 : C1 07                   EXOR:	LD	7(P1)
    5707/F194 : E1 03                   	XOR	3(P1)
    5708/F196 : C9 07                   	ST	7(P1)
    5709/F198 : C1 06                   	LD	6(P1)
    5710/F19A : E1 02                   	XOR	2(P1)
    5711/F19C : C9 06                   	ST	6(P1)
    5712/F19E : C1 05                   	LD	5(P1)
    5713/F1A0 : E1 01                   	XOR	1(P1)
    5714/F1A2 : C9 05                   	ST	5(P1)
    5715/F1A4 : C5 04                   	LD	@4(P1)
    5716/F1A6 : 90 1C                   	JMP	NORM
    5717/F1A8 :                         
    5718/F1A8 :                         ; Return absolute value of topmost float on arithmetics stack.
    5719/F1A8 : C1 01                   FABS:	LD	1(P1)
    5720/F1AA : 97 38                   	JP	SV_RTRN(P3)		; positive, do nothing
    5721/F1AC :                         ; Negate topmost floating point number on arithmetics stack.
    5722/F1AC : 03                      FNEG:	SCL
    5723/F1AD : C4 00                   	LDI	0
    5724/F1AF : F9 03                   	CAD	3(P1)
    5725/F1B1 : C9 03                   	ST	3(P1)
    5726/F1B3 : C4 00                   	LDI	0
    5727/F1B5 : F9 02                   	CAD	2(P1)
    5728/F1B7 : C9 02                   	ST	2(P1)
    5729/F1B9 : C4 00                   	LDI	0
    5730/F1BB : F9 01                   	CAD	1(P1)
    5731/F1BD : C9 01                   	ST	1(P1)
    5732/F1BF : 06                      ALGN1:	CSA
    5733/F1C0 : D4 40                   	ANI	0x40
    5734/F1C2 : 9C 25                   	JNZ	ALGN2
    5735/F1C4 : C1 01                   NORM:	LD	1(P1)
    5736/F1C6 : F1 01                   	ADD	1(P1)
    5737/F1C8 : E1 01                   	XOR	1(P1)
    5738/F1CA : 94 02                   	JP	NORM1
    5739/F1CC : 93 38                   	JMP	SV_RTRN(P3)
    5740/F1CE : C1 00                   NORM1:	LD	(P1)
    5741/F1D0 : 9B 38                   	JZ	SV_RTRN(P3)
    5742/F1D2 : B9 00                   	DLD	(P1)
    5743/F1D4 : 02                      	CCL
    5744/F1D5 : C1 03                   	LD	3(P1)
    5745/F1D7 : F1 03                   	ADD	3(P1)
    5746/F1D9 : C9 03                   	ST	3(P1)
    5747/F1DB : C1 02                   	LD	2(P1)
    5748/F1DD : F1 02                   	ADD	2(P1)
    5749/F1DF : C9 02                   	ST	2(P1)
    5750/F1E1 : C1 01                   	LD	1(P1)
    5751/F1E3 : F1 01                   	ADD	1(P1)
    5752/F1E5 : C9 01                   	ST	1(P1)
    5753/F1E7 : 90 DB                   	JMP	NORM
    5754/F1E9 : A9 00                   ALGN2:	ILD	(P1)
    5755/F1EB : 9C 04                   	JNZ	ALGN3
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 215 - 10/31/2025 04:19:39 PM


    5756/F1ED : C4 C6                   	LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
    5757/F1EF : 93 B4                   	JMP	SV_MSGOUT(P3)
    5758/F1F1 : C1 01                   ALGN3:	LD	1(P1)
    5759/F1F3 : 1F                      	RRL
    5760/F1F4 : C9 01                   	ST	1(P1)
    5761/F1F6 : C1 02                   	LD	2(P1)
    5762/F1F8 : 1F                      	RRL
    5763/F1F9 : C9 02                   	ST	2(P1)
    5764/F1FB : C1 03                   	LD	3(P1)
    5765/F1FD : 1F                      	RRL
    5766/F1FE : C9 03                   	ST	3(P1)
    5767/F200 : 93 38                   	JMP	SV_RTRN(P3)
    5768/F202 :                         
    5769/F202 : 60                      INT:	XRE
    5770/F203 : 01                      INT1:	XAE
    5771/F204 : 03                      INT2:	SCL
    5772/F205 : C1 00                   	LD	(P1)
    5773/F207 : 94 06                   	JP	INT3
    5774/F209 : FC 96                   	CAI	0x96
    5775/F20B : 98 1C                   	JZ	INT4
    5776/F20D : 97 38                   	JP	SV_RTRN(P3)
    5777/F20F : C1 01                   INT3:	LD	1(P1)
    5778/F211 : F1 01                   	ADD	1(P1)
    5779/F213 : C1 01                   	LD	1(P1)
    5780/F215 : 1F                      	RRL
    5781/F216 : C9 01                   	ST	1(P1)
    5782/F218 : C1 02                   	LD	2(P1)
    5783/F21A : 1F                      	RRL
    5784/F21B : C9 02                   	ST	2(P1)
    5785/F21D : C1 03                   	LD	3(P1)
    5786/F21F : 1F                      	RRL
    5787/F220 : C9 03                   	ST	3(P1)
    5788/F222 : A9 00                   	ILD	(P1)
    5789/F224 : 06                      	CSA
    5790/F225 : 94 DD                   	JP	INT2
    5791/F227 : 90 DA                   	JMP	INT1
    5792/F229 : 01                      INT4:	XAE
    5793/F22A : D1 01                   	AND	1(P1)
    5794/F22C : 94 96                   	JP	NORM
    5795/F22E : 40                      	LDE
    5796/F22F : F1 03                   	ADD	3(P1)
    5797/F231 : C9 03                   	ST	3(P1)
    5798/F233 : 40                      	LDE
    5799/F234 : F1 02                   	ADD	2(P1)
    5800/F236 : C9 02                   	ST	2(P1)
    5801/F238 : 40                      	LDE
    5802/F239 : F1 01                   	ADD	1(P1)
    5803/F23B : C9 01                   	ST	1(P1)
    5804/F23D : 90 80                   	JMP	ALGN1
    5805/F23F :                         
    5806/F23F :                         ; Print vertical tabs (number in AC and determined by stack value.)
    5807/F23F : 94 0A                   VERT:	JP	VERT2
    5808/F241 : C4 0B                   VERT1:	LDI	_CTLK			; used as <vtab> for lines upwards
    5809/F243 : =>DEFINED               	IFDEF	SCALLS
    5810/F243 : (MACRO)[1389]           	 SYSCALL	2
    5810/F243 : 3F                               XPPC   P3
    5810/F244 : 02                               DB     2
    5811/F245 : =>FALSE                 	ELSE
    5812/F245 :                         	 CALL	PUTASC
    5813/F245 : [5809]                  	ENDIF
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 216 - 10/31/2025 04:19:39 PM


    5814/F245 : AA EF                   	ILD	-17(P2)
    5815/F247 : 9C F8                   	JNZ	VERT1
    5816/F249 : 93 5B                   	JMP	SV_RTFUNC(P3)
    5817/F24B : DA EF                   VERT2:	OR	-17(P2)
    5818/F24D : 9B 5B                   	JZ	SV_RTFUNC(P3)		; do nothing if zero
    5819/F24F : C4 0A                   VERT3:	LDI	_LF			; lines downwards
    5820/F251 : =>DEFINED               	IFDEF	SCALLS
    5821/F251 : (MACRO)[1390]           	 SYSCALL	2
    5821/F251 : 3F                               XPPC   P3
    5821/F252 : 02                               DB     2
    5822/F253 : =>FALSE                 	ELSE
    5823/F253 :                         	 CALL	PUTASC
    5824/F253 : [5820]                  	ENDIF
    5825/F253 : BA EF                   	DLD	-17(P2)
    5826/F255 : 9C F8                   	JNZ	VERT3
    5827/F257 : 93 5B                   	JMP	SV_RTFUNC(P3)
    5828/F259 :                         
    5829/F259 :                         ; Align exponents of two floating point numbers on arithmetics stack.
    5830/F259 :                         ; NOTE: Pointer P1 contains actual arithmetics stack.
    5831/F259 : 03                      ALGEXP:	SCL
    5832/F25A : C1 00                   	LD	(P1)			; compare the exponents of the floats
    5833/F25C : F9 04                   	CAD	4(P1)
    5834/F25E : 9B 38                   	JZ	SV_RTRN(P3)		; all done when equal
    5835/F260 : 06                      	CSA
    5836/F261 : 94 14                   	JP	ALG2
    5837/F263 : C4 04                   	LDI	4
    5838/F265 : CA E9                   	ST	-23(P2)			; store as temporary counter
    5839/F267 : C5 01                   ALG1:	LD	@1(P1)			; swap two floats on STACK
    5840/F269 : 01                      	XAE
    5841/F26A : C1 03                   	LD	3(P1)
    5842/F26C : C9 FF                   	ST	-1(P1)
    5843/F26E : 40                      	LDE
    5844/F26F : C9 03                   	ST	3(P1)
    5845/F271 : BA E9                   	DLD	-23(P2)
    5846/F273 : 9C F2                   	JNZ	ALG1			; handle four bytes
    5847/F275 : C5 FC                   	LD	@-4(P1)
    5848/F277 : A9 00                   ALG2:	ILD	(P1)			; increment exponent..
    5849/F279 : C1 01                   	LD	1(P1)			; ..and shift mantissa one bit right
    5850/F27B : F1 01                   	ADD	1(P1)
    5851/F27D : C1 01                   	LD	1(P1)
    5852/F27F : 1F                      	RRL
    5853/F280 : C9 01                   	ST	1(P1)
    5854/F282 : C1 02                   	LD	2(P1)
    5855/F284 : 1F                      	RRL
    5856/F285 : C9 02                   	ST	2(P1)
    5857/F287 : C1 03                   	LD	3(P1)
    5858/F289 : 1F                      	RRL
    5859/F28A : C9 03                   	ST	3(P1)
    5860/F28C : 90 CB                   	JMP	ALGEXP
    5861/F28E :                         
    5862/F28E :                         ; Load arithmetics stack into P1 and save previous content.
    5863/F28E : C2 FD                   STACK:	LD	AEXOFF(P2)
    5864/F290 : 31                      	XPAL	P1
    5865/F291 : CA F3                   	ST	-13(P2)
    5866/F293 : C3 A2                   	LD	STKPHI(P3)
    5867/F295 : 35                      	XPAH	P1
    5868/F296 : CA F2                   	ST	-14(P2)
    5869/F298 : 93 D6                   	JMP	SV_SPLOAD(P3)
    5870/F29A :                         
    5871/F29A :                         ; Convert 4-byte floating point number to ASCII-representation,
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 217 - 10/31/2025 04:19:39 PM


    5872/F29A :                         ; store beyond number as string (terminated by <null> byte.)
    5873/F29A :                         ; NOTE: Pointer P1 contains actual arithmetics stack.
    5874/F29A :                         ; 4 BYTES: CHARA MAN1 MAN2 MAN3, EXP = CHARA - 128
    5875/F29A :                         ; MAN1 bits 7:6 b'10' negative (whole mantissa 2's complement), bits 7:6 b'01' positive
    5876/F29A :                         ; AEXOFF = AEXSTK-4, means one fp number on AEX STACK
    5877/F29A :                         ; scratch is 4 bytes lower as fp number
    5878/F29A :                         ; NOTE:	DB	0x83, 0x50, 0, 0	; DCM  10.0
    5879/F29A :                         ;	DB	0x82, 0xB0, 0, 0	; DCM -10.0
    5880/F29A : C4 00                   FNUM:	LDI	0			; load zero
    5881/F29C : CA E7                   	ST	CHRNUM(P2)	; digit counter or sign ? 0 = positive ?
    5882/F29E : C4 20                   	LDI	' '			; load <space> for positive number
    5883/F2A0 : C9 FB                   	ST	-5(P1)			; store 5 bytes lower (below scratch)
    5884/F2A2 : C1 01                   	LD	1(P1)
    5885/F2A4 : 98 22                   	JZ	FZERO			; is MSB of mantissa <null> ?
    5886/F2A6 : 94 17                   	JP	FDIG10			; go, mantissa is positive
    5887/F2A8 : C4 2D                   	LDI	'-'			; load <minus> for negative number
    5888/F2AA : C9 FB                   	ST	-5(P1)			; store 5 bytes lower (below scratch)
    5889/F2AC : 03                      	SCL
    5890/F2AD : C4 00                   	LDI	0			; negate number on AEX STACK
    5891/F2AF : F9 03                   	CAD	3(P1)
    5892/F2B1 : C9 03                   	ST	3(P1)
    5893/F2B3 : C4 00                   	LDI	0
    5894/F2B5 : F9 02                   	CAD	2(P1)
    5895/F2B7 : C9 02                   	ST	2(P1)
    5896/F2B9 : C4 00                   	LDI	0
    5897/F2BB : F9 01                   	CAD	1(P1)
    5898/F2BD : C9 01                   	ST	1(P1)			; now positive BUT sometimes bit7 set!
    5899/F2BF :                         ; NOTE:	now invert bit7 of exponent (strip characteristic)
    5900/F2BF : C1 00                   FDIG10:	LD	(P1)
    5901/F2C1 : E4 80                   	XRI	0x80
    5902/F2C3 :                         ; NOTE:	If number is positive, skip and fall through directly to ZERO
    5903/F2C3 : 94 03                   	JP	FZERO			; go, exponent is positive
    5904/F2C5 : (MACRO)[1391]           	CALL	NEGEXP
    5904/F2C5 : 3F                               XPPC   P3
    5904/F2C6 : F3                               DB     H(NEGEXP)
    5904/F2C7 : D8                               DB     L(NEGEXP)
    5905/F2C8 : C4 01                   FZERO:	LDI	1
    5906/F2CA : C9 FC                   	ST	-4(P1)			; store 1 in temporary
    5907/F2CC : C1 01                   	LD	1(P1)			; load MANT1
    5908/F2CE : 98 77                   	JZ	FDIG19			; go, MANT1 is zero
    5909/F2D0 : C4 A0                   FDIG13:	LDI	0xA0			; load b'10100000' 10<<4 ?
    5910/F2D2 : 01                      	XAE				; preserve in E
    5911/F2D3 : C1 03                   	LD	3(P1)			; copy number four bytes down in SCRATCH
    5912/F2D5 : C9 FF                   	ST	-1(P1)
    5913/F2D7 : C1 02                   	LD	2(P1)
    5914/F2D9 : C9 FE                   	ST	-2(P1)
    5915/F2DB : C1 01                   	LD	1(P1)
    5916/F2DD : C9 FD                   	ST	-3(P1)
    5917/F2DF : C4 00                   	LDI	0			; set top mantissa to zero
    5918/F2E1 : C9 03                   	ST	3(P1)
    5919/F2E3 : C9 02                   	ST	2(P1)
    5920/F2E5 : C9 01                   	ST	1(P1)
    5921/F2E7 : C4 18                   	LDI	24			; shift 24 bit
    5922/F2E9 : C9 FA                   	ST	-6(P1)			; store bit counter
    5923/F2EB : 03                      FDIGLP:	SCL				; shift left loop
    5924/F2EC : C1 FD                   	LD	-3(P1)			; load MANT1
    5925/F2EE : FC 50                   	CAI	0x50			; subtract b'01010000' 10<<3 ?
    5926/F2F0 : 94 02                   	JP	FDIG15			; go, greater / equal 10
    5927/F2F2 : 90 04                   	JMP	FDIG16			; otherwise subtraction "failed"
    5928/F2F4 : C9 FD                   FDIG15:	ST	-3(P1)			; store again
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 218 - 10/31/2025 04:19:39 PM


    5929/F2F6 : A9 03                   	ILD	3(P1)			; increase quotient
    5930/F2F8 : B9 FA                   FDIG16:	DLD	-6(P1)			; decrease shift counter
    5931/F2FA : 98 2A                   	JZ	FDIG17			; zero, shift loop complete
    5932/F2FC : 02                      	CCL
    5933/F2FD : 40                      	LDE				; E holds 0xA0, see above
    5934/F2FE : 70                      	ADE
    5935/F2FF : 01                      	XAE
    5936/F300 : C1 FF                   	LD	-1(P1)
    5937/F302 : F1 FF                   	ADD	-1(P1)
    5938/F304 : C9 FF                   	ST	-1(P1)
    5939/F306 : C1 FE                   	LD	-2(P1)
    5940/F308 : F1 FE                   	ADD	-2(P1)
    5941/F30A : C9 FE                   	ST	-2(P1)
    5942/F30C : C1 FD                   	LD	-3(P1)
    5943/F30E : F1 FD                   	ADD	-3(P1)
    5944/F310 : C9 FD                   	ST	-3(P1)
    5945/F312 :                         ; NOTE: shifted E and mantissa 1 bit left
    5946/F312 : C1 03                   	LD	3(P1)
    5947/F314 : F1 03                   	ADD	3(P1)
    5948/F316 : C9 03                   	ST	3(P1)
    5949/F318 : C1 02                   	LD	2(P1)
    5950/F31A : F1 02                   	ADD	2(P1)
    5951/F31C : C9 02                   	ST	2(P1)
    5952/F31E : C1 01                   	LD	1(P1)
    5953/F320 : F1 01                   	ADD	1(P1)
    5954/F322 : C9 01                   	ST	1(P1)
    5955/F324 :                         ; NOTE: shifted quotient 1 bit left
    5956/F324 : 90 C5                   	JMP	FDIGLP			; continue shift loop
    5957/F326 : C1 01                   FDIG17:	LD	1(P1)			; comes here from shift loop
    5958/F328 : 94 10                   	JP	FDIG18			; test bit7 of QUOTIENT1
    5959/F32A :                         ; NOTE:	bit7 set, so shift quotient right one bit (dividde by 2)
    5960/F32A : 02                      	CCL
    5961/F32B : 1F                      	RRL
    5962/F32C : C9 01                   	ST	1(P1)
    5963/F32E : C1 02                   	LD	2(P1)
    5964/F330 : 1F                      	RRL
    5965/F331 : C9 02                   	ST	2(P1)
    5966/F333 : C1 03                   	LD	3(P1)
    5967/F335 : 1F                      	RRL
    5968/F336 : C9 03                   	ST	3(P1)
    5969/F338 :                         ; NOTE:	compensate divide by increasing exp by one
    5970/F338 : A9 00                   	ILD	(P1)
    5971/F33A : 03                      FDIG18:	SCL
    5972/F33B : C1 00                   	LD	(P1)
    5973/F33D : FC 04                   	CAI	4			; subtract exponent by 4
    5974/F33F : C9 00                   	ST	(P1)
    5975/F341 : 94 04                   	JP	FDIG19
    5976/F343 : A9 FC                   	ILD	-4(P1)			; increase temporary
    5977/F345 : 90 89                   	JMP	FDIG13
    5978/F347 : C1 FC                   FDIG19:	LD	-4(P1)			; load temporary
    5979/F349 : CA EB                   	ST	COUNTR(P2)		; store on STACK -21
    5980/F34B : C2 E7                   	LD	CHRNUM(P2)		; load digit counter
    5981/F34D : 9C 0F                   	JNZ	FDIG20
    5982/F34F : 03                      	SCL
    5983/F350 : C4 06                   	LDI	6			; maximal digit limit ?
    5984/F352 : F9 FC                   	CAD	-4(P1)
    5985/F354 : 94 08                   	JP	FDIG20			; not reached
    5986/F356 : B9 FC                   	DLD	-4(P1)			; decrease temporary..
    5987/F358 : CA E7                   	ST	CHRNUM(P2)		; ..store as digit counter
    5988/F35A : C4 01                   	LDI	1
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 219 - 10/31/2025 04:19:39 PM


    5989/F35C : C9 FC                   	ST	-4(P1)			; store one in temporary
    5990/F35E : 02                      FDIG20:	CCL
    5991/F35F : C1 01                   	LD	1(P1)
    5992/F361 : 1F                      	RRL
    5993/F362 : C9 01                   	ST	1(P1)
    5994/F364 : C1 02                   	LD	2(P1)
    5995/F366 : 1F                      	RRL
    5996/F367 : C9 02                   	ST	2(P1)
    5997/F369 : C1 03                   	LD	3(P1)
    5998/F36B : 1F                      	RRL
    5999/F36C : C9 03                   	ST	3(P1)
    6000/F36E : 40                      	LDE
    6001/F36F : 1F                      	RRL
    6002/F370 : 01                      	XAE
    6003/F371 : A9 00                   	ILD	(P1)
    6004/F373 : E4 86                   	XRI	0x86
    6005/F375 : 9C E7                   	JNZ	FDIG20
    6006/F377 :                         ; shifted E and quotient 1 bit right until exp equal 6
    6007/F377 : 40                      	LDE
    6008/F378 : F4 02                   	ADI	2
    6009/F37A : C9 01                   	ST	1(P1)
    6010/F37C : C4 05                   	LDI	5
    6011/F37E : C9 00                   	ST	(P1)
    6012/F380 :                         ; NOTE:	advance AEX STACK pointer to begin of number string
    6013/F380 : C5 FB                   	LD	@-5(P1)
    6014/F382 : 06                      	CSA
    6015/F383 :                         ; NOTE: Bit7 in status reg is carry/link.
    6016/F383 : 94 1E                   	JP	FDEC
    6017/F385 : A9 08                   	ILD	8(P1)			; was before 3(P1)
    6018/F387 : 9C 1A                   	JNZ	FDEC
    6019/F389 : A9 07                   	ILD	7(P1)			; was before 2(P1)
    6020/F38B : 9C 16                   	JNZ	FDEC
    6021/F38D : C4 31                   	LDI	'1'
    6022/F38F : CD FF                   	ST	@-1(P1)			; increase and store <one>
    6023/F391 : C2 E7                   	LD	CHRNUM(P2)		; load digit counter
    6024/F393 : 9C 08                   	JNZ	FDIG21
    6025/F395 : C1 02                   	LD	2(P1)			; temporary, was before -4(P1) ?
    6026/F397 : E4 06                   	XRI	6
    6027/F399 : 9C 08                   	JNZ	FDEC
    6028/F39B : F4 05                   	ADI	5
    6029/F39D : F4 00                   FDIG21:	ADI	0
    6030/F39F : CA E7                   	ST	CHRNUM(P2)		; store digit counter
    6031/F3A1 : 90 07                   	JMP	FEXP
    6032/F3A3 : (MACRO)[1392]           FDEC:	CALL	BINDEC			; convert binary to decimal
    6032/F3A3 : 3F                               XPPC   P3
    6032/F3A4 : F4                               DB     H(BINDEC)
    6032/F3A5 : 32                               DB     L(BINDEC)
    6033/F3A6 : C2 E7                   	LD	CHRNUM(P2)		; load digit counter
    6034/F3A8 : 98 28                   	JZ	FNUMND
    6035/F3AA : 01                      FEXP:	XAE				; calculate decimal exponent
    6036/F3AB : C4 45                   	LDI	'E'
    6037/F3AD : CD FF                   	ST	@-1(P1)			; store 'E' for exponent
    6038/F3AF : 40                      	LDE				; E holds exponent
    6039/F3B0 : 94 04                   	JP	FEXP1			; positive exponent ?
    6040/F3B2 : C4 2D                   	LDI	'-'
    6041/F3B4 : CD FF                   	ST	@-1(P1)			; store <minus> for negative exponent
    6042/F3B6 : 03                      FEXP1:	SCL
    6043/F3B7 : 40                      	LDE
    6044/F3B8 : D4 7F                   	ANI	0x7F			; strip characteristic
    6045/F3BA : FC 0A                   	CAI	10			; subtract 10
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 220 - 10/31/2025 04:19:39 PM


    6046/F3BC : 94 02                   	JP	FEXP2			; exponent is equal / greater 10
    6047/F3BE : 90 0E                   	JMP	FEXPD
    6048/F3C0 : 01                      FEXP2:	XAE
    6049/F3C1 : C4 30                   	LDI	'0'
    6050/F3C3 : CD FF                   	ST	@-1(P1)			; decrease and store <zero>
    6051/F3C5 : A9 00                   FEXP3:	ILD	(P1)			; increase digit
    6052/F3C7 : 40                      	LDE
    6053/F3C8 : FC 0A                   	CAI	10			; subtract 10 while positive and increase counter
    6054/F3CA : 01                      	XAE
    6055/F3CB : 40                      	LDE
    6056/F3CC : 94 F7                   	JP	FEXP3			; exponent still equal / greater 10
    6057/F3CE : F4 3A                   FEXPD:	ADI	'9'+1			; calculate ASCII value of latest digit
    6058/F3D0 : CD FF                   	ST	@-1(P1)			; decrease and store ASCII digit
    6059/F3D2 : C4 00                   FNUMND:	LDI	0			; load <null>
    6060/F3D4 : CD FF                   	ST	@-1(P1)			; and store as string delimiter
    6061/F3D6 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6062/F3D8 :                         
    6063/F3D8 :                         ; Special treatment for floats with negative exponent.
    6064/F3D8 : 02                      NEGEXP:	CCL				; exponent is negative
    6065/F3D9 : F4 09                   	ADI	9			; add 9 (lb 512 = 9)
    6066/F3DB : 94 53                   	JP	NEGSKP			; exponent < 9, so < 1/512 or >= -1/512
    6067/F3DD : C4 80                   	LDI	0x80			; load 128
    6068/F3DF : CA E7                   	ST	CHRNUM(P2)	; digit counter or sign ? 128 = negative ?
    6069/F3E1 :                         ; NOTE:
    6070/F3E1 :                         ; Following only if exponent is negative and greater/equal -1/512 or less than 1/512.
    6071/F3E1 :                         ; Printed number will then have scientific notation,
    6072/F3E1 :                         ; so count zero before and zero(s) behind decimal point.
    6073/F3E1 :                         ; -1/512 = -1.95312E-3 and 1/512 = 0.00195
    6074/F3E1 : AA E7                   FDIG11:	ILD	CHRNUM(P2)		; increase digit counter by one
    6075/F3E3 : 02                      	CCL
    6076/F3E4 : C1 01                   	LD	1(P1)			; shift MANT1 right
    6077/F3E6 : 1F                      	RRL
    6078/F3E7 : C9 FD                   	ST	-3(P1)			; store 4 bytes lower SCRATCH1
    6079/F3E9 : C1 02                   	LD	2(P1)			; shift MANT2 right
    6080/F3EB : 1F                      	RRL
    6081/F3EC : C9 FE                   	ST	-2(P1)			; store 4 bytes lower SCRATCH2
    6082/F3EE : C1 03                   	LD	3(P1)			; shift MANT3 right
    6083/F3F0 : 1F                      	RRL
    6084/F3F1 : C9 FF                   	ST	-1(P1)			; store 4 bytes lower SCRATCH3
    6085/F3F3 :                         ; NOTE:	shifted mantissa one bit right and stored in scratch
    6086/F3F3 :                         ; scratch = mantissa / 2
    6087/F3F3 : 02                      	CCL
    6088/F3F4 : C1 FD                   	LD	-3(P1)			; shift SCRATCH1 right
    6089/F3F6 : 1F                      	RRL
    6090/F3F7 : C9 FD                   	ST	-3(P1)			; store in SCRATCH1
    6091/F3F9 : C1 FE                   	LD	-2(P1)			; shift SCRATCH2 right
    6092/F3FB : 1F                      	RRL
    6093/F3FC : C9 FE                   	ST	-2(P1)			; store in SCRATCH2
    6094/F3FE : C1 FF                   	LD	-1(P1)			; shift SCRATCH3 right
    6095/F400 : 1F                      	RRL
    6096/F401 : C9 FF                   	ST	-1(P1)			; store in SCRATCH3
    6097/F403 :                         ; NOTE:	shifted scratch one bit right,
    6098/F403 :                         ; scratch = scratch / 2
    6099/F403 : C1 03                   	LD	3(P1)
    6100/F405 : F1 FF                   	ADD	-1(P1)
    6101/F407 : C9 03                   	ST	3(P1)
    6102/F409 : C1 02                   	LD	2(P1)
    6103/F40B : F1 FE                   	ADD	-2(P1)
    6104/F40D : C9 02                   	ST	2(P1)
    6105/F40F : C1 01                   	LD	1(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 221 - 10/31/2025 04:19:39 PM


    6106/F411 : F1 FD                   	ADD	-3(P1)
    6107/F413 : C9 01                   	ST	1(P1)
    6108/F415 :                         ; NOTE: added mantissa and scratch
    6109/F415 :                         ; result = mantissa + mantissa / 4
    6110/F415 : 94 10                   	JP	FDIG12			; bit7=0, so no more shift right
    6111/F417 : 02                      	CCL
    6112/F418 : 1F                      	RRL
    6113/F419 : C9 01                   	ST	1(P1)
    6114/F41B : C1 02                   	LD	2(P1)
    6115/F41D : 1F                      	RRL
    6116/F41E : C9 02                   	ST	2(P1)
    6117/F420 : C1 03                   	LD	3(P1)
    6118/F422 : 1F                      	RRL
    6119/F423 : C9 03                   	ST	3(P1)
    6120/F425 :                         ; NOTE: mantissa has an extra shift right
    6121/F425 : A9 00                   	ILD	(P1)			; increase exponent
    6122/F427 : 02                      FDIG12:	CCL
    6123/F428 : C1 00                   	LD	(P1)
    6124/F42A : F4 03                   	ADI	3
    6125/F42C : C9 00                   	ST	(P1)			; add 3 to exponent (multiply mantissa by 8)
    6126/F42E : 94 B1                   	JP	FDIG11			; positive, repeat
    6127/F430 : (MACRO)[1393]           NEGSKP:	RTRN
    6127/F430 : 3F                               XPPC   P3
    6127/F431 : 00                               DB     0
    6128/F432 :                         
    6129/F432 :                         ; Convert binary to decimal number, digits are stored on arithmetics stack.
    6130/F432 : C2 FD                   BINDEC:	LD	AEXOFF(P2)		; load P2 with offset to topmost number
    6131/F434 : 32                      	XPAL	P2
    6132/F435 : C4 06                   FDEC1:	LDI	6			; evaluate decimal fraction
    6133/F437 : 01                      	XAE
    6134/F438 :                         ; NOTE:	E holds b'00000110', after 3 left shifts it is b'0011xxxx'.
    6135/F438 :                         ;	After multiplication by 10 there is the searched decimal as ASCII digit
    6136/F438 : 02                      	CCL
    6137/F439 : C2 01                   	LD	1(P2)
    6138/F43B : F2 01                   	ADD	1(P2)
    6139/F43D : CA FF                   	ST	-1(P2)
    6140/F43F : C2 03                   	LD	3(P2)
    6141/F441 : F2 03                   	ADD	3(P2)
    6142/F443 : CA FE                   	ST	-2(P2)
    6143/F445 : C2 02                   	LD	2(P2)
    6144/F447 : F2 02                   	ADD	2(P2)
    6145/F449 : CA FD                   	ST	-3(P2)
    6146/F44B : 40                      	LDE
    6147/F44C : 70                      	ADE
    6148/F44D : 01                      	XAE
    6149/F44E :                         ; NOTE: shifted quotient and E one bit left and store result in scratch and E
    6150/F44E : C2 FF                   	LD	-1(P2)
    6151/F450 : F2 FF                   	ADD	-1(P2)
    6152/F452 : CA FF                   	ST	-1(P2)
    6153/F454 : C2 FE                   	LD	-2(P2)
    6154/F456 : F2 FE                   	ADD	-2(P2)
    6155/F458 : CA FE                   	ST	-2(P2)
    6156/F45A : C2 FD                   	LD	-3(P2)
    6157/F45C : F2 FD                   	ADD	-3(P2)
    6158/F45E : CA FD                   	ST	-3(P2)
    6159/F460 : 40                      	LDE
    6160/F461 : 70                      	ADE
    6161/F462 : 01                      	XAE
    6162/F463 :                         ; NOTE: shifted scratch and E one bit left,
    6163/F463 :                         ; result = quotient * 4
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 222 - 10/31/2025 04:19:39 PM


    6164/F463 : C2 01                   	LD	1(P2)
    6165/F465 : F2 FF                   	ADD	-1(P2)
    6166/F467 : CA 01                   	ST	1(P2)
    6167/F469 : C2 03                   	LD	3(P2)
    6168/F46B : F2 FE                   	ADD	-2(P2)
    6169/F46D : CA 03                   	ST	3(P2)
    6170/F46F : C2 02                   	LD	2(P2)
    6171/F471 : F2 FD                   	ADD	-3(P2)
    6172/F473 : CA 02                   	ST	2(P2)
    6173/F475 : 40                      	LDE
    6174/F476 : F4 00                   	ADI	0			; take care of carry/link
    6175/F478 : 01                      	XAE
    6176/F479 :                         ; NOTE: added scratch to quotient
    6177/F479 :                         ; result = 4 * quotient + quotient = 5 * quotient
    6178/F479 : C2 01                   	LD	1(P2)
    6179/F47B : F2 01                   	ADD	1(P2)
    6180/F47D : CA 01                   	ST	1(P2)
    6181/F47F : C2 03                   	LD	3(P2)
    6182/F481 : F2 03                   	ADD	3(P2)
    6183/F483 : CA 03                   	ST	3(P2)
    6184/F485 : C2 02                   	LD	2(P2)
    6185/F487 : F2 02                   	ADD	2(P2)
    6186/F489 : CA 02                   	ST	2(P2)
    6187/F48B : 40                      	LDE
    6188/F48C : 70                      	ADE
    6189/F48D : CD FF                   	ST	@-1(P1)			; store as next decimal digit
    6190/F48F :                         ; NOTE:	shifted modified quotient one bit left
    6191/F48F :                         ; result = (5 * quotient) * 2 = 10 * quotient
    6192/F48F : BA 00                   	DLD	(P2)
    6193/F491 : BA FC                   	DLD	-4(P2)
    6194/F493 : 9C 04                   	JNZ	FDEC2
    6195/F495 : C4 2E                   	LDI	'.'			; load <period>
    6196/F497 : CD FF                   	ST	@-1(P1)			; store as decimal point
    6197/F499 : C2 00                   FDEC2:	LD	(P2)
    6198/F49B : 94 98                   	JP	FDEC1
    6199/F49D : C5 01                   FDEC3:	LD	@1(P1)			; get byte from number string and increase
    6200/F49F : E4 30                   	XRI	'0'			; is it leading <zero> ?
    6201/F4A1 : 98 FA                   	JZ	FDEC3			; yes, just eat it
    6202/F4A3 : D4 F0                   	ANI	0xF0
    6203/F4A5 : 9C 02                   	JNZ	FDEC4			; was there another digit ?
    6204/F4A7 : C5 FF                   	LD	@-1(P1)			; yes, set back to previous byte
    6205/F4A9 : C4 80                   FDEC4:	LDI	STKMID			; load P2 with STACK
    6206/F4AB : 32                      	XPAL	P2
    6207/F4AC : (MACRO)[1394]           	RTRN
    6207/F4AC : 3F                               XPPC   P3
    6207/F4AD : 00                               DB     0
    6208/F4AE :                         
    6209/F4AE :                         ; restore only P1, leave top of AEX STACK unchanged.
    6210/F4AE : C2 F3                   STPBCK:	LD	-13(P2)
    6211/F4B0 : 31                      	XPAL	P1
    6212/F4B1 : C2 F2                   	LD	-14(P2)
    6213/F4B3 : 35                      	XPAH	P1
    6214/F4B4 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6215/F4B6 :                         
    6216/F4B6 :                         ; Characteristic has bias 128, so subtract 128 to obtain exponent
    6217/F4B6 :                         ; 00 = -128 ... 7F = -1, 80 = 0, 81 = +1 ... FF = +127
    6218/F4B6 :                         ; e is Euler's number
    6219/F4B6 :                         ; 80 5C 55 1E	L2E	DCM 1.4426950409	; log base 2 of e ( lb e )
    6220/F4B6 :                         ; 86 57 6A E1	A2	DCM 87.417497202
    6221/F4B6 :                         ; 89 4D 3F 1D	B2	DCM 617.9722695
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 223 - 10/31/2025 04:19:39 PM


    6222/F4B6 :                         ; 7B 46 FA 70	C2	DCM 0.034657359		; (ln 2) / 20
    6223/F4B6 :                         ; 83 4F A3 03	D	DCM 9.9545957821
    6224/F4B6 :                         ; 7E 6F 2D ED	L10E	DCM 0.4342945		; log base 10 of e ( log e )
    6225/F4B6 :                         ; 7E 4D 10 4D	L102	DCM 0.301029996		; log base 10 of 2 ( log 2 )
    6226/F4B6 :                         ; 80 5A 82 7A	R22	DCM 1.414213562		; sqrt(2)
    6227/F4B6 :                         ; 7F 58 B9 0C	LE2	DCM 0.69314718		; log base e of 2 ( ln 2 )
    6228/F4B6 :                         ; 80 52 B0 40	A1	DCM 1.2920074
    6229/F4B6 :                         ; 81 AB 86 49	MB	DCM -2.6398577
    6230/F4B6 :                         ; 80 6A 08 66	C	DCM 1.6567626
    6231/F4B6 :                         ; 7F 40 00 00	MHLF	DCM 0.5
    6232/F4B6 :                         ; 7E 80 00 00	MMHLF	DCM -0.5
    6233/F4B6 :                         ; 80 40 00 00	ONE	DCM 1.0
    6234/F4B6 :                         ; 7F 80 00 00	MONE	DCM -1.0
    6235/F4B6 :                         ; 81 64 87 ED	PI	DCM 3.14159265		; circle number
    6236/F4B6 :                         
    6237/F4B6 :                         ; Put logarithmic base 10 of 2 ( log 2 ) on stack.
    6238/F4B6 : C4 4D                   LG2:	LDI	0x4D
    6239/F4B8 : CD FF                   	ST	@-1(P1)
    6240/F4BA : CD FE                   	ST	@-2(P1)
    6241/F4BC : C4 10                   	LDI	0x10
    6242/F4BE : C9 01                   	ST	1(P1)
    6243/F4C0 : C4 7E                   	LDI	0x7E
    6244/F4C2 : CD FF                   	ST	@-1(P1)			; 7E 4D 10 4D -> DCM 0.301029996
    6245/F4C4 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6246/F4C6 :                         
    6247/F4C6 :                         ; Put logarithmic base e of 2 ( ln 2 ) on stack.
    6248/F4C6 : C4 0C                   LN2:	LDI	0x0C
    6249/F4C8 : CD FF                   	ST	@-1(P1)
    6250/F4CA : C4 B9                   	LDI	0xB9
    6251/F4CC : CD FF                   	ST	@-1(P1)
    6252/F4CE : C4 58                   	LDI	0x58
    6253/F4D0 : CD FF                   	ST	@-1(P1)
    6254/F4D2 : C4 7F                   	LDI	0x7F
    6255/F4D4 : CD FF                   	ST	@-1(P1)			; 7F 58 B9 0C -> DCM 0.69314718
    6256/F4D6 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6257/F4D8 :                         
    6258/F4D8 :                         ; Calculate natural log of topmost floating point number.
    6259/F4D8 :                         ; NOTE: Pointer P1 contains actual arithmetics stack.
    6260/F4D8 : C1 01                   LOG2:	LD	1(P1)
    6261/F4DA : 94 04                   	JP	LOG21
    6262/F4DC : C4 88                   LGERR:	LDI	(M_ARG-M_BASE)		; 'ARGUMENT ERROR', can not be negative..
    6263/F4DE : 93 B4                   	JMP	SV_MSGOUT(P3)
    6264/F4E0 : D9 02                   LOG21:	OR	2(P1)
    6265/F4E2 : D9 03                   	OR	3(P1)
    6266/F4E4 : 98 F6                   	JZ	LGERR			; ..let alone zero
    6267/F4E6 : C4 00                   	LDI	0
    6268/F4E8 : C9 FF                   	ST	-1(P1)
    6269/F4EA : C1 00                   	LD	(P1)
    6270/F4EC : E4 80                   	XRI	0x80			; complement sign bit of original exp
    6271/F4EE : C9 FD                   	ST	-3(P1)
    6272/F4F0 : C4 80                   	LDI	0x80
    6273/F4F2 : C9 00                   	ST	(P1)
    6274/F4F4 : C9 FE                   	ST	-2(P1)
    6275/F4F6 : C4 86                   	LDI	0x86
    6276/F4F8 : CD FC                   	ST	@-4(P1)
    6277/F4FA : (MACRO)[1395]           	CALL	NORM
    6277/F4FA : 3F                               XPPC   P3
    6277/F4FB : F1                               DB     H(NORM)
    6277/F4FC : C4                               DB     L(NORM)
    6278/F4FD : (MACRO)[1396]           	CALL	SWAP
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 224 - 10/31/2025 04:19:39 PM


    6278/F4FD : 3F                               XPPC   P3
    6278/F4FE : F0                               DB     H(SWAP)
    6278/F4FF : 35                               DB     L(SWAP)
    6279/F500 : C1 03                   	LD	3(P1)
    6280/F502 : C9 FF                   	ST	-1(P1)
    6281/F504 : C1 02                   	LD	2(P1)
    6282/F506 : C9 FE                   	ST	-2(P1)
    6283/F508 : C1 01                   	LD	1(P1)
    6284/F50A : C9 FD                   	ST	-3(P1)
    6285/F50C : C1 00                   	LD	(P1)
    6286/F50E : CD FC                   	ST	@-4(P1)			; adjust stack by four down
    6287/F510 : C4 7A                   	LDI	0x7A			; load sqrt(2) on stack
    6288/F512 : CD FF                   	ST	@-1(P1)
    6289/F514 : C4 82                   	LDI	0x82
    6290/F516 : CD FF                   	ST	@-1(P1)
    6291/F518 : C4 5A                   	LDI	0x5A
    6292/F51A : CD FF                   	ST	@-1(P1)
    6293/F51C : C4 80                   	LDI	0x80
    6294/F51E : CD FF                   	ST	@-1(P1)			; 80 5A 82 7A -> DCM 1.414213562 ( SQRT(2) )
    6295/F520 : (MACRO)[1397]           	CALL	FSUB			; z - sqrt(2)
    6295/F520 : 3F                               XPPC   P3
    6295/F521 : F1                               DB     H(FSUB)
    6295/F522 : 39                               DB     L(FSUB)
    6296/F523 : (MACRO)[1398]           	CALL	SWAP
    6296/F523 : 3F                               XPPC   P3
    6296/F524 : F0                               DB     H(SWAP)
    6296/F525 : 35                               DB     L(SWAP)
    6297/F526 : C4 7A                   	LDI	0x7A			; load sqrt(2) on stack
    6298/F528 : CD FF                   	ST	@-1(P1)
    6299/F52A : C4 82                   	LDI	0x82
    6300/F52C : CD FF                   	ST	@-1(P1)
    6301/F52E : C4 5A                   	LDI	0x5A
    6302/F530 : CD FF                   	ST	@-1(P1)
    6303/F532 : C4 80                   	LDI	0x80
    6304/F534 : CD FF                   	ST	@-1(P1)			; 80 5A 82 7A -> DCM 1.414213562 ( SQRT(2) )
    6305/F536 : (MACRO)[1399]           	CALL	FADD			; z + sqrt(2)
    6305/F536 : 3F                               XPPC   P3
    6305/F537 : F1                               DB     H(FADD)
    6305/F538 : 3C                               DB     L(FADD)
    6306/F539 : (MACRO)[1400]           	CALL	FDIV			; z - sqrt(2) / z + sqrt(2)
    6306/F539 : 3F                               XPPC   P3
    6306/F53A : F0                               DB     H(FDIV)
    6306/F53B : 78                               DB     L(FDIV)
    6307/F53C : C4 49                   	LDI	0x49			; load mb on stack
    6308/F53E : CD FF                   	ST	@-1(P1)
    6309/F540 : C4 86                   	LDI	0x86
    6310/F542 : CD FF                   	ST	@-1(P1)
    6311/F544 : C4 AB                   	LDI	0xAB
    6312/F546 : CD FF                   	ST	@-1(P1)
    6313/F548 : C4 81                   	LDI	0x81
    6314/F54A : CD FF                   	ST	@-1(P1)			; 81 AB 86 49 -> DCM -2.6398577 ( MB )
    6315/F54C : C1 07                   	LD	7(P1)
    6316/F54E : C9 FF                   	ST	-1(P1)
    6317/F550 : C9 FB                   	ST	-5(P1)
    6318/F552 : C1 06                   	LD	6(P1)
    6319/F554 : C9 FE                   	ST	-2(P1)
    6320/F556 : C9 FA                   	ST	-6(P1)
    6321/F558 : C1 05                   	LD	5(P1)
    6322/F55A : C9 FD                   	ST	-3(P1)
    6323/F55C : C9 F9                   	ST	-7(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 225 - 10/31/2025 04:19:39 PM


    6324/F55E : C1 04                   	LD	4(P1)
    6325/F560 : C9 FC                   	ST	-4(P1)
    6326/F562 : CD F8                   	ST	@-8(P1)
    6327/F564 : (MACRO)[1401]           	CALL	FMUL			; t * t
    6327/F564 : 3F                               XPPC   P3
    6327/F565 : F0                               DB     H(FMUL)
    6327/F566 : E3                               DB     L(FMUL)
    6328/F567 : C4 66                   	LDI	0x66			; load c on stack
    6329/F569 : CD FF                   	ST	@-1(P1)
    6330/F56B : C4 08                   	LDI	8
    6331/F56D : CD FF                   	ST	@-1(P1)
    6332/F56F : C4 6A                   	LDI	0x6A
    6333/F571 : CD FF                   	ST	@-1(P1)
    6334/F573 : C4 80                   	LDI	0x80
    6335/F575 : CD FF                   	ST	@-1(P1)			; 80 6A 08 66 -> DCM 1.6567626 ( C )
    6336/F577 : (MACRO)[1402]           	CALL	FSUB			; t * t -c
    6336/F577 : 3F                               XPPC   P3
    6336/F578 : F1                               DB     H(FSUB)
    6336/F579 : 39                               DB     L(FSUB)
    6337/F57A : (MACRO)[1403]           	CALL	FDIV			; mb / (t * t - c)
    6337/F57A : 3F                               XPPC   P3
    6337/F57B : F0                               DB     H(FDIV)
    6337/F57C : 78                               DB     L(FDIV)
    6338/F57D : C4 40                   	LDI	0x40			; load a1 on stack
    6339/F57F : CD FF                   	ST	@-1(P1)
    6340/F581 : C4 B0                   	LDI	0xB0
    6341/F583 : CD FF                   	ST	@-1(P1)
    6342/F585 : C4 52                   	LDI	0x52
    6343/F587 : CD FF                   	ST	@-1(P1)
    6344/F589 : C4 80                   	LDI	0x80
    6345/F58B : CD FF                   	ST	@-1(P1)			; 80 52 B0 40 -> DCM 1.2920074 ( A1 )
    6346/F58D : (MACRO)[1404]           	CALL	FADD			; mb / (t * t - c) + a1
    6346/F58D : 3F                               XPPC   P3
    6346/F58E : F1                               DB     H(FADD)
    6346/F58F : 3C                               DB     L(FADD)
    6347/F590 : (MACRO)[1405]           	CALL	FMUL			; (mb / (t * t - c) + a1) * t
    6347/F590 : 3F                               XPPC   P3
    6347/F591 : F0                               DB     H(FMUL)
    6347/F592 : E3                               DB     L(FMUL)
    6348/F593 : (MACRO)[1406]           	CALL	FADD
    6348/F593 : 3F                               XPPC   P3
    6348/F594 : F1                               DB     H(FADD)
    6348/F595 : 3C                               DB     L(FADD)
    6349/F596 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6350/F598 :                         
    6351/F598 :                         ; Calculate exponentiation.
    6352/F598 :                         ; NOTE: Pointer P1 contains actual arithmetics stack.
    6353/F598 : C4 00                   EXP2:	LDI	0
    6354/F59A : C9 FF                   	ST	-1(P1)
    6355/F59C : C9 FE                   	ST	-2(P1)
    6356/F59E : C1 01                   	LD	1(P1)
    6357/F5A0 : 9C 09                   	JNZ	EXP21
    6358/F5A2 : C4 80                   	LDI	0x80
    6359/F5A4 : C9 00                   	ST	(P1)
    6360/F5A6 : 1C                      	SR
    6361/F5A7 : C9 01                   	ST	1(P1)
    6362/F5A9 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6363/F5AB : C9 FD                   EXP21:	ST	-3(P1)
    6364/F5AD : C1 00                   	LD	(P1)
    6365/F5AF : CD FC                   	ST	@-4(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 226 - 10/31/2025 04:19:39 PM


    6366/F5B1 : 03                      EXP22:	SCL
    6367/F5B2 : C4 86                   	LDI	0x86
    6368/F5B4 : F9 00                   	CAD	(P1)
    6369/F5B6 : 98 25                   	JZ	EXP25
    6370/F5B8 : 94 16                   	JP	EXP24
    6371/F5BA : C1 01                   	LD	1(P1)
    6372/F5BC : 94 0E                   	JP	EXP23
    6373/F5BE : C5 04                   	LD	@4(P1)
    6374/F5C0 : C4 00                   	LDI	0
    6375/F5C2 : C9 03                   	ST	3(P1)
    6376/F5C4 : C9 02                   	ST	2(P1)
    6377/F5C6 : C9 01                   	ST	1(P1)
    6378/F5C8 : C9 00                   	ST	(P1)
    6379/F5CA : 93 D6                   	JMP	SV_SPLOAD(P3)
    6380/F5CC : C4 C6                   EXP23:	LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
    6381/F5CE : 93 B4                   	JMP	SV_MSGOUT(P3)
    6382/F5D0 : C1 01                   EXP24:	LD	1(P1)
    6383/F5D2 : F1 01                   	ADD	1(P1)
    6384/F5D4 : C1 01                   	LD	1(P1)
    6385/F5D6 : 1D                      	SRL
    6386/F5D7 : C9 01                   	ST	1(P1)
    6387/F5D9 : A9 00                   	ILD	(P1)
    6388/F5DB : 90 D4                   	JMP	EXP22
    6389/F5DD : C1 01                   EXP25:	LD	1(P1)
    6390/F5DF : CA E8                   	ST	-24(P2)
    6391/F5E1 : (MACRO)[1407]           	CALL	NORM
    6391/F5E1 : 3F                               XPPC   P3
    6391/F5E2 : F1                               DB     H(NORM)
    6391/F5E3 : C4                               DB     L(NORM)
    6392/F5E4 : (MACRO)[1408]           	CALL	FSUB
    6392/F5E4 : 3F                               XPPC   P3
    6392/F5E5 : F1                               DB     H(FSUB)
    6392/F5E6 : 39                               DB     L(FSUB)
    6393/F5E7 : C4 70                   	LDI	0x70
    6394/F5E9 : CD FF                   	ST	@-1(P1)
    6395/F5EB : C4 FA                   	LDI	0xFA
    6396/F5ED : CD FF                   	ST	@-1(P1)
    6397/F5EF : C4 46                   	LDI	0x46
    6398/F5F1 : CD FF                   	ST	@-1(P1)
    6399/F5F3 : C4 7B                   	LDI	0x7B
    6400/F5F5 : CD FF                   	ST	@-1(P1)			; 7B 46 FA 70 -> DCM .03465735903 ( C2 )
    6401/F5F7 : C1 07                   	LD	7(P1)
    6402/F5F9 : C9 FF                   	ST	-1(P1)
    6403/F5FB : C9 FB                   	ST	-5(P1)
    6404/F5FD : C1 06                   	LD	6(P1)
    6405/F5FF : C9 FE                   	ST	-2(P1)
    6406/F601 : C9 FA                   	ST	-6(P1)
    6407/F603 : C1 05                   	LD	5(P1)
    6408/F605 : C9 FD                   	ST	-3(P1)
    6409/F607 : C9 F9                   	ST	-7(P1)
    6410/F609 : C1 04                   	LD	4(P1)
    6411/F60B : C9 FC                   	ST	-4(P1)
    6412/F60D : CD F8                   	ST	@-8(P1)
    6413/F60F : (MACRO)[1409]           	CALL	FMUL
    6413/F60F : 3F                               XPPC   P3
    6413/F610 : F0                               DB     H(FMUL)
    6413/F611 : E3                               DB     L(FMUL)
    6414/F612 : (MACRO)[1410]           	CALL	FMUL
    6414/F612 : 3F                               XPPC   P3
    6414/F613 : F0                               DB     H(FMUL)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 227 - 10/31/2025 04:19:39 PM


    6414/F614 : E3                               DB     L(FMUL)
    6415/F615 : C4 E1                   	LDI	0xE1
    6416/F617 : CD FB                   	ST	@-5(P1)
    6417/F619 : C4 6A                   	LDI	0x6A
    6418/F61B : CD FF                   	ST	@-1(P1)
    6419/F61D : C4 57                   	LDI	0x57
    6420/F61F : CD FF                   	ST	@-1(P1)
    6421/F621 : C4 86                   	LDI	0x86
    6422/F623 : CD FF                   	ST	@-1(P1)			; 86 57 6A E1 -> DCM 87.417497202 ( A2 )
    6423/F625 : (MACRO)[1411]           	CALL	FADD			; z * z + a2
    6423/F625 : 3F                               XPPC   P3
    6423/F626 : F1                               DB     H(FADD)
    6423/F627 : 3C                               DB     L(FADD)
    6424/F628 : C4 1D                   	LDI	0x1D
    6425/F62A : CD FF                   	ST	@-1(P1)
    6426/F62C : C4 3F                   	LDI	0x3F
    6427/F62E : CD FF                   	ST	@-1(P1)
    6428/F630 : C4 4D                   	LDI	0x4D
    6429/F632 : CD FF                   	ST	@-1(P1)
    6430/F634 : C4 89                   	LDI	0x89
    6431/F636 : CD FF                   	ST	@-1(P1)			; 89 4D 3F 1D -> DCM 617.9722695 ( B2 )
    6432/F638 : C1 05                   	LD	5(P1)
    6433/F63A : E1 01                   	XOR	1(P1)
    6434/F63C : CA EA                   	ST	-22(P2)
    6435/F63E : (MACRO)[1412]           	CALL	SWAP
    6435/F63E : 3F                               XPPC   P3
    6435/F63F : F0                               DB     H(SWAP)
    6435/F640 : 35                               DB     L(SWAP)
    6436/F641 : (MACRO)[1413]           	CALL	FDIV0
    6436/F641 : 3F                               XPPC   P3
    6436/F642 : F0                               DB     H(FDIV0)
    6436/F643 : 7B                               DB     L(FDIV0)
    6437/F644 : (MACRO)[1414]           	CALL	FSUB
    6437/F644 : 3F                               XPPC   P3
    6437/F645 : F1                               DB     H(FSUB)
    6437/F646 : 39                               DB     L(FSUB)
    6438/F647 : C1 07                   	LD	7(P1)
    6439/F649 : C9 FF                   	ST	-1(P1)
    6440/F64B : C1 06                   	LD	6(P1)
    6441/F64D : C9 FE                   	ST	-2(P1)
    6442/F64F : C1 05                   	LD	5(P1)
    6443/F651 : C9 FD                   	ST	-3(P1)
    6444/F653 : C1 04                   	LD	4(P1)
    6445/F655 : CD FC                   	ST	@-4(P1)
    6446/F657 : (MACRO)[1415]           	CALL	FSUB
    6446/F657 : 3F                               XPPC   P3
    6446/F658 : F1                               DB     H(FSUB)
    6446/F659 : 39                               DB     L(FSUB)
    6447/F65A : C4 03                   	LDI	3
    6448/F65C : CD FF                   	ST	@-1(P1)
    6449/F65E : C4 A3                   	LDI	0xA3
    6450/F660 : CD FF                   	ST	@-1(P1)
    6451/F662 : C4 4F                   	LDI	0x4F
    6452/F664 : CD FF                   	ST	@-1(P1)
    6453/F666 : C4 83                   	LDI	0x83
    6454/F668 : CD FF                   	ST	@-1(P1)			; 83 4F A3 03 -> DCM 9.9545957821 ( D )
    6455/F66A : (MACRO)[1416]           	CALL	FADD			; d + c2 * z * z - b2 / (z * z + a2)
    6455/F66A : 3F                               XPPC   P3
    6455/F66B : F1                               DB     H(FADD)
    6455/F66C : 3C                               DB     L(FADD)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 228 - 10/31/2025 04:19:39 PM


    6456/F66D : (MACRO)[1417]           	CALL	FDIV			; z / (d + c2 * z * z - b2 / (z * z + a2))
    6456/F66D : 3F                               XPPC   P3
    6456/F66E : F0                               DB     H(FDIV)
    6456/F66F : 78                               DB     L(FDIV)
    6457/F670 : C4 00                   	LDI	0
    6458/F672 : CD FF                   	ST	@-1(P1)
    6459/F674 : CD FF                   	ST	@-1(P1)
    6460/F676 : C4 40                   	LDI	0x40
    6461/F678 : CD FF                   	ST	@-1(P1)
    6462/F67A : C4 7F                   	LDI	0x7F
    6463/F67C : CD FF                   	ST	@-1(P1)			; 7F 40 00 00 -> DCM 0.5 ( MHLF )
    6464/F67E : (MACRO)[1418]           	CALL	FADD			; z / (d + c2 * z * z - b2 / (z * z + a2)) + 0.5
    6464/F67E : 3F                               XPPC   P3
    6464/F67F : F1                               DB     H(FADD)
    6464/F680 : 3C                               DB     L(FADD)
    6465/F681 : 03                      	SCL
    6466/F682 : C2 E8                   	LD	-24(P2)
    6467/F684 : F1 00                   	ADD	(P1)
    6468/F686 : C9 00                   	ST	(P1)
    6469/F688 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6470/F68A :                         
    6471/F68A :                         ; Modulo operation
    6472/F68A :                         ; Return remainder or signed remainder of a division.
    6473/F68A :                         ; NOTE: Pointer P1 is set to actual arithmetics stack.
    6474/F68A : (MACRO)[1419]           FMOD:	CALL	ABSWP
    6474/F68A : 3F                               XPPC   P3
    6474/F68B : F0                               DB     H(ABSWP)
    6474/F68C : 25                               DB     L(ABSWP)
    6475/F68D : 02                      	CCL
    6476/F68E : C1 04                   	LD	4(P1)
    6477/F690 : FD 04                   	CAD	@4(P1)
    6478/F692 : (MACRO)[1420]           	CALL	MD
    6478/F692 : 3F                               XPPC   P3
    6478/F693 : F0                               DB     H(MD)
    6478/F694 : 4D                               DB     L(MD)
    6479/F695 : 03                      FMOD1:	SCL
    6480/F696 : C1 FB                   	LD	-5(P1)
    6481/F698 : F9 FF                   	CAD	-1(P1)
    6482/F69A : C9 FB                   	ST	-5(P1)
    6483/F69C : C1 FA                   	LD	-6(P1)
    6484/F69E : F9 FE                   	CAD	-2(P1)
    6485/F6A0 : C9 FA                   	ST	-6(P1)
    6486/F6A2 : C1 F9                   	LD	-7(P1)
    6487/F6A4 : F9 FD                   	CAD	-3(P1)
    6488/F6A6 : C9 F9                   	ST	-7(P1)
    6489/F6A8 : 94 14                   	JP	FMOD2
    6490/F6AA : C1 FB                   	LD	-5(P1)
    6491/F6AC : F1 FF                   	ADD	-1(P1)
    6492/F6AE : C9 FB                   	ST	-5(P1)
    6493/F6B0 : C1 FA                   	LD	-6(P1)
    6494/F6B2 : F1 FE                   	ADD	-2(P1)
    6495/F6B4 : C9 FA                   	ST	-6(P1)
    6496/F6B6 : C1 F9                   	LD	-7(P1)
    6497/F6B8 : F1 FD                   	ADD	-3(P1)
    6498/F6BA : C9 F9                   	ST	-7(P1)
    6499/F6BC : 90 02                   	JMP	FMOD3
    6500/F6BE : A9 03                   FMOD2:	ILD	3(P1)
    6501/F6C0 : B9 F8                   FMOD3:	DLD	-8(P1)
    6502/F6C2 : FC 01                   	CAI	1
    6503/F6C4 : 94 0E                   	JP	FMOD5
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 229 - 10/31/2025 04:19:39 PM


    6504/F6C6 : C1 00                   	LD	(P1)
    6505/F6C8 : 98 4E                   	JZ	FMOD10
    6506/F6CA : 94 35                   	JP	FMOD7
    6507/F6CC : B9 00                   FMOD4:	DLD	(P1)
    6508/F6CE : C1 01                   	LD	1(P1)
    6509/F6D0 : D4 3F                   	ANI	0x3F
    6510/F6D2 : C9 01                   	ST	1(P1)
    6511/F6D4 : 02                      FMOD5:	CCL
    6512/F6D5 : C1 FB                   	LD	-5(P1)
    6513/F6D7 : F1 FB                   	ADD	-5(P1)
    6514/F6D9 : C9 FB                   	ST	-5(P1)
    6515/F6DB : C1 FA                   	LD	-6(P1)
    6516/F6DD : F1 FA                   	ADD	-6(P1)
    6517/F6DF : C9 FA                   	ST	-6(P1)
    6518/F6E1 : C1 F9                   	LD	-7(P1)
    6519/F6E3 : 94 04                   	JP	FMOD6
    6520/F6E5 : C4 A7                   	LDI	(M_DIV0-M_BASE)		; 'DIVISION BY 0 ERROR'
    6521/F6E7 : 93 B4                   	JMP	SV_MSGOUT(P3)
    6522/F6E9 : F1 F9                   FMOD6:	ADD	-7(P1)
    6523/F6EB : C9 F9                   	ST	-7(P1)
    6524/F6ED : C1 03                   	LD	3(P1)
    6525/F6EF : F1 03                   	ADD	3(P1)
    6526/F6F1 : C9 03                   	ST	3(P1)
    6527/F6F3 : C1 02                   	LD	2(P1)
    6528/F6F5 : F1 02                   	ADD	2(P1)
    6529/F6F7 : C9 02                   	ST	2(P1)
    6530/F6F9 : C1 01                   	LD	1(P1)
    6531/F6FB : F1 01                   	ADD	1(P1)
    6532/F6FD : C9 01                   	ST	1(P1)
    6533/F6FF : 90 94                   	JMP	FMOD1
    6534/F701 : E4 7F                   FMOD7:	XRI	0x7F
    6535/F703 : 9C 08                   	JNZ	FMOD8
    6536/F705 : C1 01                   	LD	1(P1)
    6537/F707 : 94 06                   	JP	FMOD9
    6538/F709 : D4 7F                   	ANI	0x7F
    6539/F70B : C9 01                   	ST	1(P1)
    6540/F70D : C1 01                   FMOD8:	LD	1(P1)
    6541/F70F : D4 C0                   FMOD9:	ANI	0xC0
    6542/F711 : 98 B9                   	JZ	FMOD4
    6543/F713 : 94 03                   	JP	FMOD10
    6544/F715 : (MACRO)[1421]           	CALL	ALGN2
    6544/F715 : 3F                               XPPC   P3
    6544/F716 : F1                               DB     H(ALGN2)
    6544/F717 : E9                               DB     L(ALGN2)
    6545/F718 : C2 EA                   FMOD10:	LD	-22(P2)
    6546/F71A : 97 D6                   	JP	SV_SPLOAD(P3)
    6547/F71C : (MACRO)[1422]           	CALL	FNEG
    6547/F71C : 3F                               XPPC   P3
    6547/F71D : F1                               DB     H(FNEG)
    6547/F71E : AC                               DB     L(FNEG)
    6548/F71F : 93 D6                   	JMP	SV_SPLOAD(P3)
    6549/F721 :                         
    6550/F721 :                         ; Push four bytes on STACK and swap with former topmost four bytes.
    6551/F721 : C5 FC                   PSHSWP:	LD	@-4(P1)			; reserve four bytes on STACK
    6552/F723 : C4 04                   	LDI	4
    6553/F725 : CA E9                   	ST	-23(P2)			; temporary counter
    6554/F727 : C5 01                   SWP1:	LD	@1(P1)			; get byte from STACK and increase
    6555/F729 : 01                      	XAE
    6556/F72A : C1 03                   	LD	3(P1)
    6557/F72C : C9 FF                   	ST	-1(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 230 - 10/31/2025 04:19:39 PM


    6558/F72E : 40                      	LDE
    6559/F72F : C9 03                   	ST	3(P1)
    6560/F731 : BA E9                   	DLD	-23(P2)			; decrease counter
    6561/F733 : 9C F2                   	JNZ	SWP1			; loop four times
    6562/F735 : C5 FC                   	LD	@-4(P1)			; reset STACK
    6563/F737 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6564/F739 :                         
    6565/F739 :                         ; Number on AEXSTK represents fractional part of decimal number
    6566/F739 :                         ; and is transformed into the corresponding binary float.
    6567/F739 :                         ; NOTE: Pointer P1 is set to actual arithmetics stack.
    6568/F739 : C1 01                   FD10:	LD	1(P1)
    6569/F73B : 9B D6                   	JZ	SV_SPLOAD(P3)
    6570/F73D : C4 A0                   FD11:	LDI	0xA0
    6571/F73F : 01                      	XAE
    6572/F740 : C1 03                   	LD	3(P1)
    6573/F742 : C9 FF                   	ST	-1(P1)
    6574/F744 : C1 02                   	LD	2(P1)
    6575/F746 : C9 FE                   	ST	-2(P1)
    6576/F748 : C1 01                   	LD	1(P1)
    6577/F74A : C9 FD                   	ST	-3(P1)			; topmost 3-byte number is copied downwards
    6578/F74C : C4 00                   	LDI	0
    6579/F74E : C9 03                   	ST	3(P1)			; topmost 3 bytes are set to zero..
    6580/F750 : C9 02                   	ST	2(P1)
    6581/F752 : C9 01                   	ST	1(P1)			; ..and used as mantissa
    6582/F754 : C4 18                   	LDI	0x18			; corresponding to 24 bit
    6583/F756 : C9 FC                   	ST	-4(P1)			; store as bit counter
    6584/F758 : 03                      FD12:	SCL
    6585/F759 : C1 FD                   	LD	-3(P1)
    6586/F75B : FC 50                   	CAI	0x50
    6587/F75D : 94 02                   	JP	FD13
    6588/F75F : 90 04                   	JMP	FD14
    6589/F761 : C9 FD                   FD13:	ST	-3(P1)
    6590/F763 : A9 03                   	ILD	3(P1)
    6591/F765 : B9 FC                   FD14:	DLD	-4(P1)			; decrease bit counter
    6592/F767 : 98 2A                   	JZ	FD15			; all bits processed ?
    6593/F769 : 02                      	CCL				; clear carry for addition
    6594/F76A :                         ; NOTE:	both mantissas are shifted left one bit (multiplied by 2)
    6595/F76A : 40                      	LDE
    6596/F76B : 70                      	ADE
    6597/F76C : 01                      	XAE
    6598/F76D : C1 FF                   	LD	-1(P1)
    6599/F76F : F1 FF                   	ADD	-1(P1)
    6600/F771 : C9 FF                   	ST	-1(P1)
    6601/F773 : C1 FE                   	LD	-2(P1)
    6602/F775 : F1 FE                   	ADD	-2(P1)
    6603/F777 : C9 FE                   	ST	-2(P1)
    6604/F779 : C1 FD                   	LD	-3(P1)
    6605/F77B : F1 FD                   	ADD	-3(P1)
    6606/F77D : C9 FD                   	ST	-3(P1)
    6607/F77F : C1 03                   	LD	3(P1)
    6608/F781 : F1 03                   	ADD	3(P1)
    6609/F783 : C9 03                   	ST	3(P1)
    6610/F785 : C1 02                   	LD	2(P1)
    6611/F787 : F1 02                   	ADD	2(P1)
    6612/F789 : C9 02                   	ST	2(P1)
    6613/F78B : C1 01                   	LD	1(P1)
    6614/F78D : F1 01                   	ADD	1(P1)
    6615/F78F : C9 01                   	ST	1(P1)
    6616/F791 : 90 C5                   	JMP	FD12
    6617/F793 :                         ; NOTE:	topmost mantissa is shifted right one bit (divided by 2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 231 - 10/31/2025 04:19:39 PM


    6618/F793 : C1 01                   FD15:	LD	1(P1)
    6619/F795 : 94 10                   	JP	FD16
    6620/F797 : 02                      	CCL
    6621/F798 : 1F                      	RRL
    6622/F799 : C9 01                   	ST	1(P1)
    6623/F79B : C1 02                   	LD	2(P1)
    6624/F79D : 1F                      	RRL
    6625/F79E : C9 02                   	ST	2(P1)
    6626/F7A0 : C1 03                   	LD	3(P1)
    6627/F7A2 : 1F                      	RRL
    6628/F7A3 : C9 03                   	ST	3(P1)
    6629/F7A5 : A9 00                   	ILD	(P1)
    6630/F7A7 : 03                      FD16:	SCL
    6631/F7A8 : C1 00                   	LD	(P1)
    6632/F7AA : FC 04                   	CAI	4
    6633/F7AC : C9 00                   	ST	(P1)
    6634/F7AE : E4 80                   	XRI	0x80
    6635/F7B0 : 94 8B                   	JP	FD11
    6636/F7B2 : BA E8                   	DLD	-24(P2)			; take the digit count from TESTN routine
    6637/F7B4 : 94 87                   	JP	FD11			; process all digits
    6638/F7B6 : 93 D6                   	JMP	SV_SPLOAD(P3)		; we're done
    6639/F7B8 :                         
    6640/F7B8 :                         ; Build-in the number for the negative exponent to binary float.
    6641/F7B8 :                         ; Divide binary representation on AEXSTK by 10 and adjust exponent.
    6642/F7B8 : C2 FD                   FDIV11:	LD	AEXOFF(P2)
    6643/F7BA : 32                      	XPAL	P2
    6644/F7BB : C6 02                   	LD	@2(P2)			; load MSB of number, advance 2 bytes
    6645/F7BD : 9F 6B                   	JNZ	SV_VALERR(P3)		; exponent > 255 not valid
    6646/F7BF : C2 01                   	LD	1(P2)
    6647/F7C1 : 98 7B                   	JZ	FDEND
    6648/F7C3 : 03                      FDIV12:	SCL
    6649/F7C4 : C2 00                   	LD	(P2)
    6650/F7C6 : FC 04                   	CAI	4
    6651/F7C8 : 01                      	XAE
    6652/F7C9 : C2 03                   	LD	3(P2)
    6653/F7CB : CA FE                   	ST	-2(P2)
    6654/F7CD : C2 02                   	LD	2(P2)
    6655/F7CF : CA FD                   	ST	-3(P2)
    6656/F7D1 : C2 01                   	LD	1(P2)
    6657/F7D3 : CA FC                   	ST	-4(P2)			; topmost 3-byte number is copied downwards
    6658/F7D5 : C4 00                   	LDI	0
    6659/F7D7 : CA 03                   	ST	3(P2)			; topmost 4 bytes are set to zero..
    6660/F7D9 : CA 02                   	ST	2(P2)
    6661/F7DB : CA 01                   	ST	1(P2)
    6662/F7DD : CA 00                   	ST	(P2)			; ..and used as mantissa with exponent
    6663/F7DF : 06                      	CSA
    6664/F7E0 : 94 5C                   	JP	FDEND
    6665/F7E2 : C4 A0                   	LDI	0xA0
    6666/F7E4 : 01                      	XAE
    6667/F7E5 : CA 00                   	ST	(P2)
    6668/F7E7 : C4 18                   	LDI	0x18			; corresponding to 24 bit
    6669/F7E9 : CA FB                   	ST	-5(P2)			; store as temporary counter
    6670/F7EB : 03                      FDIV13:	SCL
    6671/F7EC : C2 FC                   	LD	-4(P2)
    6672/F7EE : FC 50                   	CAI	0x50
    6673/F7F0 : 94 02                   	JP	FDIV14
    6674/F7F2 : 90 04                   	JMP	FDIV15
    6675/F7F4 : CA FC                   FDIV14:	ST	-4(P2)
    6676/F7F6 : AA 03                   	ILD	3(P2)
    6677/F7F8 : BA FB                   FDIV15:	DLD	-5(P2)			; decrease bit counter
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 232 - 10/31/2025 04:19:39 PM


    6678/F7FA : 98 2A                   	JZ	FDIV16			; all bits processed ?
    6679/F7FC : 02                      	CCL
    6680/F7FD : 40                      	LDE
    6681/F7FE : 70                      	ADE
    6682/F7FF : 01                      	XAE
    6683/F800 : C2 FE                   	LD	-2(P2)
    6684/F802 : F2 FE                   	ADD	-2(P2)
    6685/F804 : CA FE                   	ST	-2(P2)
    6686/F806 : C2 FD                   	LD	-3(P2)
    6687/F808 : F2 FD                   	ADD	-3(P2)
    6688/F80A : CA FD                   	ST	-3(P2)
    6689/F80C : C2 FC                   	LD	-4(P2)
    6690/F80E : F2 FC                   	ADD	-4(P2)
    6691/F810 : CA FC                   	ST	-4(P2)
    6692/F812 : C2 03                   	LD	3(P2)
    6693/F814 : F2 03                   	ADD	3(P2)
    6694/F816 : CA 03                   	ST	3(P2)
    6695/F818 : C2 02                   	LD	2(P2)
    6696/F81A : F2 02                   	ADD	2(P2)
    6697/F81C : CA 02                   	ST	2(P2)
    6698/F81E : C2 01                   	LD	1(P2)
    6699/F820 : F2 01                   	ADD	1(P2)
    6700/F822 : CA 01                   	ST	1(P2)
    6701/F824 : 90 C5                   	JMP	FDIV13
    6702/F826 : C2 01                   FDIV16:	LD	1(P2)
    6703/F828 : 94 10                   	JP	FDIV17
    6704/F82A : 02                      	CCL
    6705/F82B : 1F                      	RRL
    6706/F82C : CA 01                   	ST	1(P2)
    6707/F82E : C2 02                   	LD	2(P2)
    6708/F830 : 1F                      	RRL
    6709/F831 : CA 02                   	ST	2(P2)
    6710/F833 : C2 03                   	LD	3(P2)
    6711/F835 : 1F                      	RRL
    6712/F836 : CA 03                   	ST	3(P2)
    6713/F838 : AA 00                   	ILD	(P2)
    6714/F83A : BA FF                   FDIV17:	DLD	-1(P2)
    6715/F83C : 9C 85                   	JNZ	FDIV12
    6716/F83E : C4 80                   FDEND:	LDI	STKMID
    6717/F840 : 32                      	XPAL	P2
    6718/F841 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    6719/F843 : 93 5B                   	JMP	SV_RTFUNC(P3)
    6720/F845 :                         
    6721/F845 :                         ; Build-in the number for the positive exponent to binary float.
    6722/F845 :                         ; Multiply binary representation on AEXSTK by 10 and adjust exponent.
    6723/F845 : C2 FD                   FMUL11:	LD	AEXOFF(P2)
    6724/F847 : 32                      	XPAL	P2
    6725/F848 : C6 02                   	LD	@2(P2)			; load MSB of number, advance 2 bytes
    6726/F84A : 9F 6B                   	JNZ	SV_VALERR(P3)		; exponent > 255 not valid
    6727/F84C : C2 01                   	LD	1(P2)
    6728/F84E : 98 58                   	JZ	FMEND
    6729/F850 : 02                      FMUL12:	CCL
    6730/F851 : C2 01                   	LD	1(P2)
    6731/F853 : 1F                      	RRL
    6732/F854 : CA FC                   	ST	-4(P2)
    6733/F856 : C2 02                   	LD	2(P2)
    6734/F858 : 1F                      	RRL
    6735/F859 : CA FD                   	ST	-3(P2)
    6736/F85B : C2 03                   	LD	3(P2)
    6737/F85D : 1F                      	RRL
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 233 - 10/31/2025 04:19:39 PM


    6738/F85E : CA FE                   	ST	-2(P2)
    6739/F860 : 02                      	CCL
    6740/F861 : C2 FC                   	LD	-4(P2)
    6741/F863 : 1F                      	RRL
    6742/F864 : CA FC                   	ST	-4(P2)
    6743/F866 : C2 FD                   	LD	-3(P2)
    6744/F868 : 1F                      	RRL
    6745/F869 : CA FD                   	ST	-3(P2)
    6746/F86B : C2 FE                   	LD	-2(P2)
    6747/F86D : 1F                      	RRL
    6748/F86E : CA FE                   	ST	-2(P2)
    6749/F870 : C2 03                   	LD	3(P2)
    6750/F872 : F2 FE                   	ADD	-2(P2)
    6751/F874 : CA 03                   	ST	3(P2)
    6752/F876 : C2 02                   	LD	2(P2)
    6753/F878 : F2 FD                   	ADD	-3(P2)
    6754/F87A : CA 02                   	ST	2(P2)
    6755/F87C : C2 01                   	LD	1(P2)
    6756/F87E : F2 FC                   	ADD	-4(P2)
    6757/F880 : CA 01                   	ST	1(P2)
    6758/F882 : 94 12                   	JP	FMUL13
    6759/F884 : 02                      	CCL
    6760/F885 : 1F                      	RRL
    6761/F886 : CA 01                   	ST	1(P2)
    6762/F888 : C2 02                   	LD	2(P2)
    6763/F88A : 1F                      	RRL
    6764/F88B : CA 02                   	ST	2(P2)
    6765/F88D : C2 03                   	LD	3(P2)
    6766/F88F : 1F                      	RRL
    6767/F890 : CA 03                   	ST	3(P2)
    6768/F892 : AA 00                   	ILD	(P2)
    6769/F894 : 98 0A                   	JZ	FMUL14
    6770/F896 : 02                      FMUL13:	CCL
    6771/F897 : C2 00                   	LD	(P2)
    6772/F899 : F4 03                   	ADI	3
    6773/F89B : CA 00                   	ST	(P2)
    6774/F89D : 06                      	CSA
    6775/F89E : 94 04                   	JP	FMUL15
    6776/F8A0 : C4 C6                   FMUL14: LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
    6777/F8A2 : 93 27                   	JMP	SV_RTERRN(P3)
    6778/F8A4 : BA FF                   FMUL15:	DLD	-1(P2)
    6779/F8A6 : 9C A8                   	JNZ	FMUL12
    6780/F8A8 : C4 80                   FMEND:	LDI	STKMID
    6781/F8AA : 32                      	XPAL	P2
    6782/F8AB : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    6783/F8AD : 93 5B                   	JMP	SV_RTFUNC(P3)
    6784/F8AF :                         
    6785/F8AF :                         ; Calculate the trigonometric function arctangens by a Taylor series.
    6786/F8AF : C1 01                   ATN:	LD	1(P1)
    6787/F8B1 : 9B D6                   	JZ	SV_SPLOAD(P3)
    6788/F8B3 : CA E8                   	ST	-24(P2)
    6789/F8B5 : 94 03                   	JP	ATN1
    6790/F8B7 : (MACRO)[1423]           	CALL	FNEG
    6790/F8B7 : 3F                               XPPC   P3
    6790/F8B8 : F1                               DB     H(FNEG)
    6790/F8B9 : AC                               DB     L(FNEG)
    6791/F8BA : C1 00                   ATN1:	LD	(P1)
    6792/F8BC : CA EB                   	ST	COUNTR(P2)
    6793/F8BE : 94 1E                   	JP	ATN2
    6794/F8C0 : CD FC                   	ST	@-4(P1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 234 - 10/31/2025 04:19:39 PM


    6795/F8C2 : C1 05                   	LD	5(P1)
    6796/F8C4 : C9 01                   	ST	1(P1)
    6797/F8C6 : C1 06                   	LD	6(P1)
    6798/F8C8 : C9 02                   	ST	2(P1)
    6799/F8CA : C1 07                   	LD	7(P1)
    6800/F8CC : C9 03                   	ST	3(P1)
    6801/F8CE : C4 80                   	LDI	0x80
    6802/F8D0 : C9 04                   	ST	4(P1)
    6803/F8D2 : 1C                      	SR
    6804/F8D3 : C9 05                   	ST	5(P1)
    6805/F8D5 : C4 00                   	LDI	0
    6806/F8D7 : C9 06                   	ST	6(P1)
    6807/F8D9 : C9 07                   	ST	7(P1)
    6808/F8DB : (MACRO)[1424]           	CALL	FDIV
    6808/F8DB : 3F                               XPPC   P3
    6808/F8DC : F0                               DB     H(FDIV)
    6808/F8DD : 78                               DB     L(FDIV)
    6809/F8DE : C4 81                   ATN2:	LDI	0x81
    6810/F8E0 : C9 FF                   	ST	-1(P1)
    6811/F8E2 : C4 D5                   	LDI	0xD5
    6812/F8E4 : C9 FE                   	ST	-2(P1)
    6813/F8E6 : C4 6B                   	LDI	0x6B
    6814/F8E8 : C9 FD                   	ST	-3(P1)
    6815/F8EA : C4 7B                   	LDI	0x7B
    6816/F8EC : C9 FC                   	ST	-4(P1)			; 7B 6B D5 81 -> DCM 0.05265332
    6817/F8EE : C4 DD                   	LDI	0xDD
    6818/F8F0 : C9 FB                   	ST	-5(P1)
    6819/F8F2 : C4 FA                   	LDI	0xFA
    6820/F8F4 : C9 FA                   	ST	-6(P1)
    6821/F8F6 : C4 9F                   	LDI	0x9F
    6822/F8F8 : C9 F9                   	ST	-7(P1)
    6823/F8FA : C4 79                   	LDI	0x79
    6824/F8FC : C9 F8                   	ST	-8(P1)			; 79 9F FA DD -> DCM -0.0117212
    6825/F8FE : C1 03                   	LD	3(P1)
    6826/F900 : C9 F7                   	ST	-9(P1)
    6827/F902 : C9 F3                   	ST	-13(P1)
    6828/F904 : C1 02                   	LD	2(P1)
    6829/F906 : C9 F6                   	ST	-10(P1)
    6830/F908 : C9 F2                   	ST	-14(P1)
    6831/F90A : C1 01                   	LD	1(P1)
    6832/F90C : C9 F5                   	ST	-11(P1)
    6833/F90E : C9 F1                   	ST	-15(P1)
    6834/F910 : C1 00                   	LD	(P1)
    6835/F912 : C9 F4                   	ST	-12(P1)
    6836/F914 : CD F0                   	ST	@-16(P1)
    6837/F916 : (MACRO)[1425]           	CALL	FMUL
    6837/F916 : 3F                               XPPC   P3
    6837/F917 : F0                               DB     H(FMUL)
    6837/F918 : E3                               DB     L(FMUL)
    6838/F919 : (MACRO)[1426]           	CALL	FMUL
    6838/F919 : 3F                               XPPC   P3
    6838/F91A : F0                               DB     H(FMUL)
    6838/F91B : E3                               DB     L(FMUL)
    6839/F91C : (MACRO)[1427]           	CALL	FADD
    6839/F91C : 3F                               XPPC   P3
    6839/F91D : F1                               DB     H(FADD)
    6839/F91E : 3C                               DB     L(FADD)
    6840/F91F : C4 D2                   	LDI	0xD2
    6841/F921 : C9 FF                   	ST	-1(P1)
    6842/F923 : C4 C5                   	LDI	0xC5
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 235 - 10/31/2025 04:19:39 PM


    6843/F925 : C9 FE                   	ST	-2(P1)
    6844/F927 : C4 88                   	LDI	0x88
    6845/F929 : C9 FD                   	ST	-3(P1)
    6846/F92B : C4 7C                   	LDI	0x7C
    6847/F92D : CD FC                   	ST	@-4(P1)
    6848/F92F : (MACRO)[1428]           	CALL	SWPMUL
    6848/F92F : 3F                               XPPC   P3
    6848/F930 : F9                               DB     H(SWPMUL)
    6848/F931 : 82                               DB     L(SWPMUL)
    6849/F932 : C4 21                   	LDI	0x21
    6850/F934 : C9 FF                   	ST	-1(P1)
    6851/F936 : C4 18                   	LDI	0x18
    6852/F938 : C9 FE                   	ST	-2(P1)
    6853/F93A : C4 63                   	LDI	0x63
    6854/F93C : C9 FD                   	ST	-3(P1)
    6855/F93E : C4 7D                   	LDI	0x7D
    6856/F940 : CD FC                   	ST	@-4(P1)			; 7D 63 18 21 -> DCM 0.1935435
    6857/F942 : (MACRO)[1429]           	CALL	SWPMUL
    6857/F942 : 3F                               XPPC   P3
    6857/F943 : F9                               DB     H(SWPMUL)
    6857/F944 : 82                               DB     L(SWPMUL)
    6858/F945 : C4 30                   	LDI	0x30
    6859/F947 : C9 FF                   	ST	-1(P1)
    6860/F949 : C4 D9                   	LDI	0xD9
    6861/F94B : C9 FE                   	ST	-2(P1)
    6862/F94D : C4 AA                   	LDI	0xAA
    6863/F94F : C9 FD                   	ST	-3(P1)
    6864/F951 : C4 7E                   	LDI	0x7E
    6865/F953 : CD FC                   	ST	@-4(P1)			; 7E AA D9 30 -> DCM -0.3326235
    6866/F955 : (MACRO)[1430]           	CALL	SWPMUL
    6866/F955 : 3F                               XPPC   P3
    6866/F956 : F9                               DB     H(SWPMUL)
    6866/F957 : 82                               DB     L(SWPMUL)
    6867/F958 : C4 41                   	LDI	0x41
    6868/F95A : C9 FF                   	ST	-1(P1)
    6869/F95C : C4 FF                   	LDI	0xFF
    6870/F95E : C9 FE                   	ST	-2(P1)
    6871/F960 : C4 7F                   	LDI	0x7F
    6872/F962 : C9 FD                   	ST	-3(P1)			; 7F 7F FF 41 -> DCM 0.9999772
    6873/F964 : CD FC                   	ST	@-4(P1)
    6874/F966 : (MACRO)[1431]           	CALL	SWPMUL
    6874/F966 : 3F                               XPPC   P3
    6874/F967 : F9                               DB     H(SWPMUL)
    6874/F968 : 82                               DB     L(SWPMUL)
    6875/F969 : (MACRO)[1432]           	CALL	FMUL
    6875/F969 : 3F                               XPPC   P3
    6875/F96A : F0                               DB     H(FMUL)
    6875/F96B : E3                               DB     L(FMUL)
    6876/F96C : C2 EB                   	LD	COUNTR(P2)
    6877/F96E : 94 09                   	JP	ATN3
    6878/F970 : (MACRO)[1433]           	CALL	PI2
    6878/F970 : 3F                               XPPC   P3
    6878/F971 : F9                               DB     H(PI2)
    6878/F972 : A0                               DB     L(PI2)
    6879/F973 : (MACRO)[1434]           	CALL	SWAP
    6879/F973 : 3F                               XPPC   P3
    6879/F974 : F0                               DB     H(SWAP)
    6879/F975 : 35                               DB     L(SWAP)
    6880/F976 : (MACRO)[1435]           	CALL	FSUB
    6880/F976 : 3F                               XPPC   P3
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 236 - 10/31/2025 04:19:39 PM


    6880/F977 : F1                               DB     H(FSUB)
    6880/F978 : 39                               DB     L(FSUB)
    6881/F979 : C2 E8                   ATN3:	LD	-24(P2)
    6882/F97B : 97 D6                   	JP	SV_SPLOAD(P3)
    6883/F97D : (MACRO)[1436]           	CALL	FNEG
    6883/F97D : 3F                               XPPC   P3
    6883/F97E : F1                               DB     H(FNEG)
    6883/F97F : AC                               DB     L(FNEG)
    6884/F980 : 93 D6                   	JMP	SV_SPLOAD(P3)
    6885/F982 :                         
    6886/F982 :                         ; Bytewise swap topmost two floating point numbers,
    6887/F982 :                         ; multiply and add.
    6888/F982 : C4 04                   SWPMUL:	LDI	4
    6889/F984 : CA E9                   	ST	-23(P2)			; store as byte counter
    6890/F986 : C5 01                   SWPM:	LD	@1(P1)			; get byte from STACK and increase
    6891/F988 : C9 F7                   	ST	-9(P1)
    6892/F98A : C1 03                   	LD	3(P1)
    6893/F98C : C9 FF                   	ST	-1(P1)
    6894/F98E : C1 F7                   	LD	-9(P1)
    6895/F990 : C9 03                   	ST	3(P1)
    6896/F992 : BA E9                   	DLD	-23(P2)
    6897/F994 : 9C F0                   	JNZ	SWPM
    6898/F996 : C5 F8                   	LD	@-8(P1)
    6899/F998 : (MACRO)[1437]           	CALL	FMUL
    6899/F998 : 3F                               XPPC   P3
    6899/F999 : F0                               DB     H(FMUL)
    6899/F99A : E3                               DB     L(FMUL)
    6900/F99B : (MACRO)[1438]           	CALL	FADD
    6900/F99B : 3F                               XPPC   P3
    6900/F99C : F1                               DB     H(FADD)
    6900/F99D : 3C                               DB     L(FADD)
    6901/F99E : (MACRO)[1439]           	RTRN
    6901/F99E : 3F                               XPPC   P3
    6901/F99F : 00                               DB     0
    6902/F9A0 :                         
    6903/F9A0 :                         ; Put half of circle number PI (90 degrees) onto STACK.
    6904/F9A0 : C4 ED                   PI2:	LDI	0xED
    6905/F9A2 : CD FF                   	ST	@-1(P1)
    6906/F9A4 : C4 87                   	LDI	0x87
    6907/F9A6 : CD FF                   	ST	@-1(P1)
    6908/F9A8 : C4 64                   	LDI	0x64
    6909/F9AA : CD FF                   	ST	@-1(P1)
    6910/F9AC : C4 80                   	LDI	0x80
    6911/F9AE : CD FF                   	ST	@-1(P1)
    6912/F9B0 : (MACRO)[1440]           	RTRN
    6912/F9B0 : 3F                               XPPC   P3
    6912/F9B1 : 00                               DB     0
    6913/F9B2 :                         
    6914/F9B2 :                         ; Calculate the trigonometric functions tangens and sinus by Taylor series.
    6915/F9B2 : C1 03                   TAN:	LD	3(P1)
    6916/F9B4 : C9 FF                   	ST	-1(P1)
    6917/F9B6 : C1 02                   	LD	2(P1)
    6918/F9B8 : C9 FE                   	ST	-2(P1)
    6919/F9BA : C1 01                   	LD	1(P1)
    6920/F9BC : C9 FD                   	ST	-3(P1)
    6921/F9BE : C1 00                   	LD	(P1)
    6922/F9C0 : CD FC                   	ST	@-4(P1)
    6923/F9C2 : C1 01                   SIN:	LD	1(P1)
    6924/F9C4 : 9B D6                   	JZ	SV_SPLOAD(P3)
    6925/F9C6 : CA E8                   	ST	-24(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 237 - 10/31/2025 04:19:39 PM


    6926/F9C8 : 94 03                   	JP	SIN1
    6927/F9CA : (MACRO)[1441]           	CALL	FNEG
    6927/F9CA : 3F                               XPPC   P3
    6927/F9CB : F1                               DB     H(FNEG)
    6927/F9CC : AC                               DB     L(FNEG)
    6928/F9CD : C4 EC                   SIN1:	LDI	0xEC
    6929/F9CF : C9 FF                   	ST	-1(P1)
    6930/F9D1 : C4 87                   	LDI	0x87
    6931/F9D3 : C9 FE                   	ST	-2(P1)
    6932/F9D5 : C4 64                   	LDI	0x64
    6933/F9D7 : C9 FD                   	ST	-3(P1)
    6934/F9D9 : C4 80                   	LDI	0x80
    6935/F9DB : CD FC                   	ST	@-4(P1)			; 80 64 87 EC -> DCM
    6936/F9DD : (MACRO)[1442]           	CALL	FDIV
    6936/F9DD : 3F                               XPPC   P3
    6936/F9DE : F0                               DB     H(FDIV)
    6936/F9DF : 78                               DB     L(FDIV)
    6937/F9E0 : C1 00                   	LD	(P1)
    6938/F9E2 : 94 2A                   	JP	SIN4
    6939/F9E4 : C1 03                   	LD	3(P1)
    6940/F9E6 : D4 FE                   	ANI	0xFE
    6941/F9E8 : C9 03                   	ST	3(P1)
    6942/F9EA : 02                      SIN2:	CCL
    6943/F9EB : C1 03                   	LD	3(P1)
    6944/F9ED : F1 03                   	ADD	3(P1)
    6945/F9EF : C9 03                   	ST	3(P1)
    6946/F9F1 : C1 02                   	LD	2(P1)
    6947/F9F3 : F1 02                   	ADD	2(P1)
    6948/F9F5 : C9 02                   	ST	2(P1)
    6949/F9F7 : C1 01                   	LD	1(P1)
    6950/F9F9 : F1 01                   	ADD	1(P1)
    6951/F9FB : C9 01                   	ST	1(P1)
    6952/F9FD : B9 00                   	DLD	(P1)
    6953/F9FF : E4 7F                   	XRI	0x7F
    6954/FA01 : 9C E7                   	JNZ	SIN2
    6955/FA03 : 06                      	CSA
    6956/FA04 : E1 01                   	XOR	1(P1)
    6957/FA06 : (MACRO)[1443]           	CALL	NORM
    6957/FA06 : 3F                               XPPC   P3
    6957/FA07 : F1                               DB     H(NORM)
    6957/FA08 : C4                               DB     L(NORM)
    6958/FA09 : 94 03                   	JP	SIN4
    6959/FA0B : (MACRO)[1444]           	CALL	FNEG
    6959/FA0B : 3F                               XPPC   P3
    6959/FA0C : F1                               DB     H(FNEG)
    6959/FA0D : AC                               DB     L(FNEG)
    6960/FA0E : 03                      SIN4:	SCL
    6961/FA0F : C1 00                   	LD	(P1)
    6962/FA11 : FC 76                   	CAI	0x76
    6963/FA13 : 94 07                   	JP	SIN5
    6964/FA15 : C5 FC                   	LD	@-4(P1)
    6965/FA17 : (MACRO)[1445]           	CALL	FMUL
    6965/FA17 : 3F                               XPPC   P3
    6965/FA18 : F0                               DB     H(FMUL)
    6965/FA19 : E3                               DB     L(FMUL)
    6966/FA1A : 90 7B                   	JMP	SIN7
    6967/FA1C : FC 0A                   SIN5:	CAI	10
    6968/FA1E : 98 77                   	JZ	SIN7
    6969/FA20 : F4 01                   	ADI	1
    6970/FA22 : 9C 09                   	JNZ	SIN6
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 238 - 10/31/2025 04:19:39 PM


    6971/FA24 : 1D                      	SRL
    6972/FA25 : E1 01                   	XOR	1(P1)
    6973/FA27 : D9 02                   	OR	2(P1)
    6974/FA29 : D9 03                   	OR	3(P1)
    6975/FA2B : 98 6A                   	JZ	SIN7
    6976/FA2D : C4 37                   SIN6:	LDI	0x37
    6977/FA2F : C9 FF                   	ST	-1(P1)
    6978/FA31 : C4 65                   	LDI	0x65
    6979/FA33 : C9 FE                   	ST	-2(P1)
    6980/FA35 : C4 51                   	LDI	0x51
    6981/FA37 : C9 FD                   	ST	-3(P1)
    6982/FA39 : C4 7C                   	LDI	0x7C
    6983/FA3B : C9 FC                   	ST	-4(P1)			; 7C 51 65 37 -> DCM
    6984/FA3D : C4 73                   	LDI	0x73
    6985/FA3F : C9 FB                   	ST	-5(P1)
    6986/FA41 : C4 86                   	LDI	0x86
    6987/FA43 : C9 FA                   	ST	-6(P1)
    6988/FA45 : C4 B8                   	LDI	0xB8
    6989/FA47 : C9 F9                   	ST	-7(P1)
    6990/FA49 : C4 78                   	LDI	0x78
    6991/FA4B : C9 F8                   	ST	-8(P1)			; 78 B8 86 73 -> DCM
    6992/FA4D : C1 03                   	LD	3(P1)
    6993/FA4F : C9 F7                   	ST	-9(P1)
    6994/FA51 : C9 F3                   	ST	-13(P1)
    6995/FA53 : C1 02                   	LD	2(P1)
    6996/FA55 : C9 F6                   	ST	-10(P1)
    6997/FA57 : C9 F2                   	ST	-14(P1)
    6998/FA59 : C1 01                   	LD	1(P1)
    6999/FA5B : C9 F5                   	ST	-11(P1)
    7000/FA5D : C9 F1                   	ST	-15(P1)
    7001/FA5F : C1 00                   	LD	(P1)
    7002/FA61 : C9 F4                   	ST	-12(P1)
    7003/FA63 : CD F0                   	ST	@-16(P1)
    7004/FA65 : (MACRO)[1446]           	CALL	FMUL
    7004/FA65 : 3F                               XPPC   P3
    7004/FA66 : F0                               DB     H(FMUL)
    7004/FA67 : E3                               DB     L(FMUL)
    7005/FA68 : (MACRO)[1447]           	CALL	FMUL
    7005/FA68 : 3F                               XPPC   P3
    7005/FA69 : F0                               DB     H(FMUL)
    7005/FA6A : E3                               DB     L(FMUL)
    7006/FA6B : (MACRO)[1448]           	CALL	FADD
    7006/FA6B : 3F                               XPPC   P3
    7006/FA6C : F1                               DB     H(FADD)
    7006/FA6D : 3C                               DB     L(FADD)
    7007/FA6E : C4 76                   	LDI	0x76
    7008/FA70 : C9 FF                   	ST	-1(P1)
    7009/FA72 : C4 52                   	LDI	0x52
    7010/FA74 : C9 FE                   	ST	-2(P1)
    7011/FA76 : C4 AD                   	LDI	0xAD
    7012/FA78 : C9 FD                   	ST	-3(P1)
    7013/FA7A : C4 7F                   	LDI	0x7F
    7014/FA7C : CD FC                   	ST	@-4(P1)			; 7F AD 52 76 -> DCM
    7015/FA7E : (MACRO)[1449]           	CALL	SWPMUL
    7015/FA7E : 3F                               XPPC   P3
    7015/FA7F : F9                               DB     H(SWPMUL)
    7015/FA80 : 82                               DB     L(SWPMUL)
    7016/FA81 : C4 E7                   	LDI	0xE7
    7017/FA83 : C9 FF                   	ST	-1(P1)
    7018/FA85 : C4 87                   	LDI	0x87
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 239 - 10/31/2025 04:19:39 PM


    7019/FA87 : C9 FE                   	ST	-2(P1)
    7020/FA89 : C4 64                   	LDI	0x64
    7021/FA8B : C9 FD                   	ST	-3(P1)
    7022/FA8D : C4 80                   	LDI	0x80
    7023/FA8F : CD FC                   	ST	@-4(P1)			; 80 64 87 E7 -> DCM
    7024/FA91 : (MACRO)[1450]           	CALL	SWPMUL
    7024/FA91 : 3F                               XPPC   P3
    7024/FA92 : F9                               DB     H(SWPMUL)
    7024/FA93 : 82                               DB     L(SWPMUL)
    7025/FA94 : (MACRO)[1451]           	CALL	FMUL
    7025/FA94 : 3F                               XPPC   P3
    7025/FA95 : F0                               DB     H(FMUL)
    7025/FA96 : E3                               DB     L(FMUL)
    7026/FA97 : C2 E8                   SIN7:	LD	-24(P2)
    7027/FA99 : 97 D6                   	JP	SV_SPLOAD(P3)
    7028/FA9B : (MACRO)[1452]           	CALL	FNEG
    7028/FA9B : 3F                               XPPC   P3
    7028/FA9C : F1                               DB     H(FNEG)
    7028/FA9D : AC                               DB     L(FNEG)
    7029/FA9E : 93 D6                   	JMP	SV_SPLOAD(P3)
    7030/FAA0 :                         
    7031/FAA0 :                         ; Put circle number PI onto arithmetics stack.
    7032/FAA0 : C2 FD                   PI:	LD	AEXOFF(P2)
    7033/FAA2 : 32                      	XPAL	P2
    7034/FAA3 : C4 ED                   	LDI	0xED
    7035/FAA5 : CE FF                   	ST	@-1(P2)
    7036/FAA7 : C4 87                   	LDI	0x87
    7037/FAA9 : CE FF                   	ST	@-1(P2)
    7038/FAAB : C4 64                   	LDI	0x64
    7039/FAAD : CE FF                   	ST	@-1(P2)
    7040/FAAF : C4 81                   	LDI	0x81
    7041/FAB1 : CE FF                   	ST	@-1(P2)
    7042/FAB3 : C4 80                   	LDI	STKMID
    7043/FAB5 : 32                      	XPAL	P2
    7044/FAB6 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    7045/FAB8 : 93 5B                   	JMP	SV_RTFUNC(P3)
    7046/FABA :                         
    7047/FABA :                         ; Put ten ( 10 ) as 16-bit number onto arithmetics stack.
    7048/FABA : C2 FD                   TEN:	LD	AEXOFF(P2)
    7049/FABC : 32                      	XPAL	P2
    7050/FABD : C4 0A                   	LDI	L(10)
    7051/FABF : CE FF                   	ST	@-1(P2)
    7052/FAC1 : C4 00                   	LDI	H(10)
    7053/FAC3 : CE FF                   	ST	@-1(P2)
    7054/FAC5 : C4 80                   	LDI	STKMID
    7055/FAC7 : 32                      	XPAL	P2
    7056/FAC8 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    7057/FACA : 93 D6                   	JMP	SV_SPLOAD(P3)
    7058/FACC :                         
    7059/FACC :                         ; Calculate a float random number from 0..1 and put it onto STACK.
    7060/FACC : C4 08                   RND:	LDI	8
    7061/FACE : CA E9                   	ST	-23(P2)
    7062/FAD0 : C2 E4                   	LD	RNDY(P2)
    7063/FAD2 : CD FF                   	ST	@-1(P1)
    7064/FAD4 : C2 E5                   	LD	RNDX(P2)
    7065/FAD6 : CD FF                   	ST	@-1(P1)
    7066/FAD8 : C2 E6                   	LD	RNDF(P2)
    7067/FADA : 01                      	XAE
    7068/FADB : 02                      RND1:	CCL
    7069/FADC : C2 E4                   	LD	RNDY(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 240 - 10/31/2025 04:19:39 PM


    7070/FADE : F1 01                   	ADD	1(P1)
    7071/FAE0 : CA E4                   	ST	RNDY(P2)
    7072/FAE2 : 02                      	CCL
    7073/FAE3 : C2 E5                   	LD	RNDX(P2)
    7074/FAE5 : F1 00                   	ADD	(P1)
    7075/FAE7 : CA E5                   	ST	RNDX(P2)
    7076/FAE9 : 02                      	CCL
    7077/FAEA : C2 E6                   	LD	RNDF(P2)
    7078/FAEC : 70                      	ADE
    7079/FAED : 01                      	XAE
    7080/FAEE : BA E9                   	DLD	-23(P2)
    7081/FAF0 : 9C E9                   	JNZ	RND1
    7082/FAF2 : 02                      	CCL
    7083/FAF3 : C2 E4                   	LD	RNDY(P2)
    7084/FAF5 : F4 07                   	ADI	7
    7085/FAF7 : 1E                      	RR
    7086/FAF8 : CA E4                   	ST	RNDY(P2)
    7087/FAFA : C9 01                   	ST	1(P1)
    7088/FAFC : 02                      	CCL
    7089/FAFD : C2 E5                   	LD	RNDX(P2)
    7090/FAFF : F4 07                   	ADI	7
    7091/FB01 : 1E                      	RR
    7092/FB02 : CA E5                   	ST	RNDX(P2)
    7093/FB04 : C9 00                   	ST	(P1)
    7094/FB06 : 02                      	CCL
    7095/FB07 : 40                      	LDE
    7096/FB08 : F4 07                   	ADI	7
    7097/FB0A : 01                      	XAE
    7098/FB0B : AA A0                   	ILD	-96(P2)
    7099/FB0D : 98 03                   	JZ	RND2
    7100/FB0F : 40                      	LDE
    7101/FB10 : CA E6                   	ST	RNDF(P2)
    7102/FB12 : C2 E6                   RND2:	LD	RNDF(P2)
    7103/FB14 : E4 FF                   	XRI	0xFF
    7104/FB16 : D4 7F                   	ANI	0x7F
    7105/FB18 : CD FF                   	ST	@-1(P1)
    7106/FB1A : C4 7F                   	LDI	0x7F
    7107/FB1C : CD FF                   	ST	@-1(P1)
    7108/FB1E : 93 D6                   	JMP	SV_SPLOAD(P3)
    7109/FB20 :                         
    7110/FB20 :                         ; Depending on the sign put +1, 0 or -1 onto STACK.
    7111/FB20 : C2 FD                   SGN:	LD	AEXOFF(P2)
    7112/FB22 : 32                      	XPAL	P2
    7113/FB23 : 01                      	XAE				; E holds STKMID
    7114/FB24 : C2 01                   	LD	1(P2)
    7115/FB26 : 98 17                   	JZ	SGN3			; SGN(0) is 0 so return
    7116/FB28 : 94 09                   	JP	SGN1			; is mantissa positive ?
    7117/FB2A : C4 7F                   	LDI	0x7F			; prepare exp and MSB of -1
    7118/FB2C : CA 00                   	ST	(P2)
    7119/FB2E : 40                      	LDE
    7120/FB2F : CA 01                   	ST	1(P2)
    7121/FB31 : 90 06                   	JMP	SGN2
    7122/FB33 : 40                      SGN1:	LDE				; prepare exp and MSB of +1
    7123/FB34 : CA 00                   	ST	(P2)
    7124/FB36 : 1C                      	SR
    7125/FB37 : CA 01                   	ST	1(P2)
    7126/FB39 : C4 00                   SGN2:	LDI	0			; complete mantissa with zeros
    7127/FB3B : CA 02                   	ST	2(P2)
    7128/FB3D : CA 03                   	ST	3(P2)
    7129/FB3F : 40                      SGN3:	LDE
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 241 - 10/31/2025 04:19:39 PM


    7130/FB40 : 32                      	XPAL	P2
    7131/FB41 : 93 5B                   	JMP	SV_RTFUNC(P3)
    7132/FB43 :                         
    7133/FB43 :                         ; Calculate square root of (positive) number S following Heron's method.
    7134/FB43 :                         ; Iterate over (xi + S / xi) / 2
    7135/FB43 : C1 01                   SQRT:	LD	1(P1)			; load first byte of mantissa
    7136/FB45 : 94 04                   	JP	SQRT1			; go, valid number
    7137/FB47 : C4 88                   	LDI	(M_ARG-M_BASE)		; 'ARGUMENT ERROR', cannot be negative
    7138/FB49 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7139/FB4B : C9 FD                   SQRT1:	ST	-3(P1)			; test mantissa for zero
    7140/FB4D : D9 02                   	OR	2(P1)
    7141/FB4F : D9 03                   	OR	3(P1)
    7142/FB51 : 9B D6                   	JZ	SV_SPLOAD(P3)		; sqrt(0) is 0, we're done
    7143/FB53 : C1 03                   	LD	3(P1)
    7144/FB55 : C9 FF                   	ST	-1(P1)
    7145/FB57 : C1 02                   	LD	2(P1)
    7146/FB59 : C9 FE                   	ST	-2(P1)
    7147/FB5B : C1 00                   	LD	(P1)
    7148/FB5D : CD FC                   	ST	@-4(P1)			; argument is copied downwards
    7149/FB5F :                         ; NOTE: arithmetics stack was adjusted by four down
    7150/FB5F : C4 00                   	LDI	0
    7151/FB61 : CD FF                   	ST	@-1(P1)
    7152/FB63 : CD FF                   	ST	@-1(P1)
    7153/FB65 : C4 40                   	LDI	0x40
    7154/FB67 : CD FF                   	ST	@-1(P1)			; 7F 40 00 00 -> DCM 0.5
    7155/FB69 : 02                      	CCL
    7156/FB6A : C1 03                   	LD	3(P1)
    7157/FB6C : 94 01                   	JP	SQRT2
    7158/FB6E : 03                      	SCL
    7159/FB6F : 1D                      SQRT2:	SRL				; shift right (divide by 2)
    7160/FB70 : E4 40                   	XRI	0x40
    7161/FB72 : CD FF                   	ST	@-1(P1)
    7162/FB74 : (MACRO)[1453]           	CALL	FDIV
    7162/FB74 : 3F                               XPPC   P3
    7162/FB75 : F0                               DB     H(FDIV)
    7162/FB76 : 78                               DB     L(FDIV)
    7163/FB77 : C4 04                   	LDI	4
    7164/FB79 : CA E8                   	ST	-24(P2)			; temporary counter
    7165/FB7B : C1 03                   SQRT3:	LD	3(P1)
    7166/FB7D : C9 FF                   	ST	-1(P1)
    7167/FB7F : C1 02                   	LD	2(P1)
    7168/FB81 : C9 FE                   	ST	-2(P1)
    7169/FB83 : C1 01                   	LD	1(P1)
    7170/FB85 : C9 FD                   	ST	-3(P1)
    7171/FB87 : C1 00                   	LD	(P1)
    7172/FB89 : CD FC                   	ST	@-4(P1)			; adjust arithmetics stack by four down
    7173/FB8B : C1 0B                   	LD	11(P1)
    7174/FB8D : C9 07                   	ST	7(P1)
    7175/FB8F : C1 0A                   	LD	10(P1)
    7176/FB91 : C9 06                   	ST	6(P1)
    7177/FB93 : C1 09                   	LD	9(P1)
    7178/FB95 : C9 05                   	ST	5(P1)
    7179/FB97 : C1 08                   	LD	8(P1)
    7180/FB99 : C9 04                   	ST	4(P1)
    7181/FB9B : (MACRO)[1454]           	CALL	FDIV
    7181/FB9B : 3F                               XPPC   P3
    7181/FB9C : F0                               DB     H(FDIV)
    7181/FB9D : 78                               DB     L(FDIV)
    7182/FB9E : C5 FC                   	LD	@-4(P1)
    7183/FBA0 : (MACRO)[1455]           	CALL	FADD
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 242 - 10/31/2025 04:19:39 PM


    7183/FBA0 : 3F                               XPPC   P3
    7183/FBA1 : F1                               DB     H(FADD)
    7183/FBA2 : 3C                               DB     L(FADD)
    7184/FBA3 : B9 00                   	DLD	(P1)
    7185/FBA5 : BA E8                   	DLD	-24(P2)			; decrease counter
    7186/FBA7 : 9C D2                   	JNZ	SQRT3			; do four loops
    7187/FBA9 : C1 03                   	LD	3(P1)
    7188/FBAB : C9 07                   	ST	7(P1)
    7189/FBAD : C1 02                   	LD	2(P1)
    7190/FBAF : C9 06                   	ST	6(P1)
    7191/FBB1 : C1 01                   	LD	1(P1)
    7192/FBB3 : C9 05                   	ST	5(P1)
    7193/FBB5 : C5 04                   	LD	@4(P1)			; re-adjust arithmetics stack
    7194/FBB7 : C9 00                   	ST	(P1)
    7195/FBB9 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7196/FBBB :                         
    7197/FBBB :                         ; Final action to perform VAL() function.
    7198/FBBB :                         ; Pull pointer P1 from top of arithmetics stack as begin of string
    7199/FBBB :                         ;  and resave on normal STACK -16,15 to be used by RNUM.
    7200/FBBB : AA FD                   VALSTR:	ILD	AEXOFF(P2)		; adjust AEXSTK by two up
    7201/FBBD : AA FD                   	ILD	AEXOFF(P2)
    7202/FBBF : 32                      	XPAL	P2
    7203/FBC0 : C2 FF                   	LD	-1(P2)
    7204/FBC2 : 31                      	XPAL	P1
    7205/FBC3 : 01                      	XAE
    7206/FBC4 : C2 FE                   	LD	-2(P2)
    7207/FBC6 : 35                      	XPAH	P1
    7208/FBC7 : 32                      	XPAL	P2
    7209/FBC8 : C4 80                   	LDI	STKMID
    7210/FBCA : 32                      	XPAL	P2
    7211/FBCB : CA F0                   	ST	-16(P2)
    7212/FBCD : 40                      	LDE
    7213/FBCE : CA F1                   	ST	-15(P2)			; store begin of string in STACK -16,-15
    7214/FBD0 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7215/FBD2 :                         
    7216/FBD2 :                         ; Convert 16-bit integer into 4-byte float.
    7217/FBD2 : C2 FD                   FLOAT2:	LD	AEXOFF(P2)
    7218/FBD4 : 32                      	XPAL	P2
    7219/FBD5 : C2 00                   	LD	(P2)
    7220/FBD7 : CA FF                   	ST	-1(P2)
    7221/FBD9 : C2 01                   	LD	1(P2)
    7222/FBDB : CA 00                   	ST	(P2)
    7223/FBDD : C4 00                   	LDI	0
    7224/FBDF : CA 01                   	ST	1(P2)
    7225/FBE1 : C4 8E                   	LDI	0x8E			; load +14 as exponent
    7226/FBE3 : CE FE                   	ST	@-2(P2)			; adjust two byte down and store exp
    7227/FBE5 : C2 01                   FNORM:	LD	1(P2)
    7228/FBE7 : F2 01                   	ADD	1(P2)
    7229/FBE9 : E2 01                   	XOR	1(P2)
    7230/FBEB : 94 07                   	JP	FNORM1			; go, normalize number
    7231/FBED : C4 80                   FLEND:	LDI	STKMID			; reset pointer P2
    7232/FBEF : 32                      	XPAL	P2
    7233/FBF0 : CA FD                   	ST	AEXOFF(P2)		; store last offset to AEXSTK
    7234/FBF2 : 93 5B                   	JMP	SV_RTFUNC(P3)		; return
    7235/FBF4 : C2 00                   FNORM1:	LD	(P2)			; normalize floating point number
    7236/FBF6 : 98 F5                   	JZ	FLEND
    7237/FBF8 : BA 00                   	DLD	(P2)			; decrease exponent..
    7238/FBFA : 02                      	CCL				; ..and shift mantissa one bit left
    7239/FBFB : C2 03                   	LD	3(P2)
    7240/FBFD : F2 03                   	ADD	3(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 243 - 10/31/2025 04:19:39 PM


    7241/FBFF : CA 03                   	ST	3(P2)
    7242/FC01 : C2 02                   	LD	2(P2)
    7243/FC03 : F2 02                   	ADD	2(P2)
    7244/FC05 : CA 02                   	ST	2(P2)
    7245/FC07 : C2 01                   	LD	1(P2)
    7246/FC09 : F2 01                   	ADD	1(P2)
    7247/FC0B : CA 01                   	ST	1(P2)
    7248/FC0D : 90 D6                   	JMP	FNORM
    7249/FC0F :                         
    7250/FC0F : 98 04                   LODVAR:	JZ	LOD1
    7251/FC11 : C4 F0                   	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
    7252/FC13 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7253/FC15 : C5 01                   LOD1:	LD	@1(P1)			; get byte from program and increase
    7254/FC17 : E4 28                   	XRI	'('
    7255/FC19 : 98 06                   	JZ	LOD2
    7256/FC1B : C5 FF                   	LD	@-1(P1)
    7257/FC1D : C4 D7                   	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
    7258/FC1F : 93 B4                   	JMP	SV_MSGOUT(P3)
    7259/FC21 : C2 FD                   LOD2:	LD	AEXOFF(P2)
    7260/FC23 : 32                      	XPAL	P2
    7261/FC24 : C2 01                   	LD	1(P2)
    7262/FC26 : 31                      	XPAL	P1
    7263/FC27 : CA FB                   	ST	-5(P2)
    7264/FC29 : C2 00                   	LD	(P2)
    7265/FC2B : 35                      	XPAH	P1
    7266/FC2C : CA FA                   	ST	FOROFF(P2)
    7267/FC2E : C1 04                   	LD	4(P1)
    7268/FC30 : CE FF                   	ST	@-1(P2)
    7269/FC32 : C1 03                   	LD	3(P1)
    7270/FC34 : CE FF                   	ST	@-1(P2)
    7271/FC36 : C1 02                   	LD	2(P1)
    7272/FC38 : 9C 04                   	JNZ	LOD3
    7273/FC3A : C4 A2                   	LDI	(M_RDIM-M_BASE)		; 'REDIMENSION ERROR'
    7274/FC3C : 93 27                   	JMP	SV_RTERRN(P3)
    7275/FC3E : CE FF                   LOD3:	ST	@-1(P2)
    7276/FC40 : C1 01                   	LD	1(P1)
    7277/FC42 : CE FF                   	ST	@-1(P2)
    7278/FC44 : C2 FF                   	LD	-1(P2)
    7279/FC46 : 31                      	XPAL	P1
    7280/FC47 : C2 FE                   	LD	-2(P2)
    7281/FC49 : 35                      	XPAH	P1
    7282/FC4A : C4 80                   	LDI	STKMID
    7283/FC4C : 32                      	XPAL	P2
    7284/FC4D : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    7285/FC4F : 93 D6                   	JMP	SV_SPLOAD(P3)
    7286/FC51 :                         
    7287/FC51 : C2 FD                   STFLD:	LD	AEXOFF(P2)
    7288/FC53 : 32                      	XPAL	P2
    7289/FC54 : C2 03                   	LD	3(P2)
    7290/FC56 : 33                      	XPAL	P3
    7291/FC57 : C2 02                   	LD	2(P2)
    7292/FC59 : 37                      	XPAH	P3
    7293/FC5A : 01                      	XAE
    7294/FC5B : C2 01                   	LD	1(P2)
    7295/FC5D : CA 03                   	ST	3(P2)
    7296/FC5F : CB 04                   	ST	4(P3)
    7297/FC61 : C6 02                   	LD	@2(P2)
    7298/FC63 : CA 00                   	ST	(P2)
    7299/FC65 : CB 03                   	ST	3(P3)
    7300/FC67 : C4 00                   	LDI	0
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 244 - 10/31/2025 04:19:39 PM


    7301/FC69 : CB 02                   	ST	2(P3)
    7302/FC6B : CB 01                   	ST	1(P3)
    7303/FC6D : C4 80                   	LDI	0x80
    7304/FC6F : 33                      	XPAL	P3
    7305/FC70 : 40                      	LDE
    7306/FC71 : 37                      	XPAH	P3
    7307/FC72 : C4 80                   	LDI	STKMID
    7308/FC74 : 32                      	XPAL	P2
    7309/FC75 : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    7310/FC77 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7311/FC79 :                         
    7312/FC79 : C2 FD                   DIMSN:	LD	AEXOFF(P2)
    7313/FC7B : 32                      	XPAL	P2
    7314/FC7C : C2 00                   	LD	(P2)
    7315/FC7E : D4 FC                   	ANI	0xFC
    7316/FC80 : 98 04                   	JZ	DIMS1
    7317/FC82 : C4 A4                   	LDI	(M_DIM-M_BASE)		; 'DIMENSION ERROR'
    7318/FC84 : 93 27                   	JMP	SV_RTERRN(P3)
    7319/FC86 : 02                      DIMS1:	CCL
    7320/FC87 : C2 01                   	LD	1(P2)
    7321/FC89 : F2 01                   	ADD	1(P2)
    7322/FC8B : CA FF                   	ST	-1(P2)
    7323/FC8D : C2 00                   	LD	(P2)
    7324/FC8F : F2 00                   	ADD	(P2)
    7325/FC91 : CA FE                   	ST	-2(P2)
    7326/FC93 : C2 FF                   	LD	-1(P2)
    7327/FC95 : F2 FF                   	ADD	-1(P2)
    7328/FC97 : CA FF                   	ST	-1(P2)
    7329/FC99 : C2 FE                   	LD	-2(P2)
    7330/FC9B : F2 FE                   	ADD	-2(P2)
    7331/FC9D : CA FE                   	ST	-2(P2)
    7332/FC9F : C2 FF                   	LD	-1(P2)
    7333/FCA1 : F4 04                   	ADI	4
    7334/FCA3 : CA FF                   	ST	-1(P2)
    7335/FCA5 : C2 FE                   	LD	-2(P2)
    7336/FCA7 : F4 00                   	ADI	0
    7337/FCA9 : CA FE                   	ST	-2(P2)
    7338/FCAB : C2 03                   	LD	3(P2)
    7339/FCAD : F4 02                   	ADI	2
    7340/FCAF : CA 03                   	ST	3(P2)
    7341/FCB1 : C2 02                   	LD	2(P2)
    7342/FCB3 : F4 00                   	ADI	0
    7343/FCB5 : E2 02                   	XOR	2(P2)
    7344/FCB7 : D4 F0                   	ANI	0xF0
    7345/FCB9 : 98 04                   	JZ	DIMS2
    7346/FCBB : C4 84                   ARERR:	LDI	(M_AREA-M_BASE)		; 'AREA ERROR'
    7347/FCBD : 93 27                   	JMP	SV_RTERRN(P3)
    7348/FCBF : C2 02                   DIMS2:	LD	2(P2)
    7349/FCC1 : F4 00                   	ADI	0
    7350/FCC3 : CA 02                   	ST	2(P2)
    7351/FCC5 : C2 03                   	LD	3(P2)
    7352/FCC7 : F2 FF                   	ADD	-1(P2)
    7353/FCC9 : C2 02                   	LD	2(P2)
    7354/FCCB : F2 FE                   	ADD	-2(P2)
    7355/FCCD : E2 02                   	XOR	2(P2)
    7356/FCCF : D4 F0                   	ANI	0xF0
    7357/FCD1 : 9C E8                   	JNZ	ARERR
    7358/FCD3 : C2 03                   	LD	3(P2)
    7359/FCD5 : 33                      	XPAL	P3
    7360/FCD6 : C2 02                   	LD	2(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 245 - 10/31/2025 04:19:39 PM


    7361/FCD8 : 37                      	XPAH	P3
    7362/FCD9 : 01                      	XAE
    7363/FCDA : C2 01                   	LD	1(P2)
    7364/FCDC : CB FE                   	ST	-2(P3)
    7365/FCDE : C6 04                   	LD	@4(P2)
    7366/FCE0 : CB FF                   	ST	-1(P3)
    7367/FCE2 : C4 00                   DIMS3:	LDI	0
    7368/FCE4 : CF 01                   	ST	@1(P3)
    7369/FCE6 : C2 FB                   	LD	-5(P2)
    7370/FCE8 : 9C 02                   	JNZ	DIMS4
    7371/FCEA : BA FA                   	DLD	FOROFF(P2)
    7372/FCEC : BA FB                   DIMS4:	DLD	-5(P2)
    7373/FCEE : DA FA                   	OR	FOROFF(P2)
    7374/FCF0 : 9C F0                   	JNZ	DIMS3
    7375/FCF2 : C4 80                   	LDI	L(SPRVSR)
    7376/FCF4 : 33                      	XPAL	P3
    7377/FCF5 : 40                      	LDE
    7378/FCF6 : 37                      	XPAH	P3
    7379/FCF7 : C4 80                   	LDI	STKMID
    7380/FCF9 : 32                      	XPAL	P2
    7381/FCFA : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    7382/FCFC : 93 D6                   	JMP	SV_SPLOAD(P3)
    7383/FCFE :                         
    7384/FCFE :                         ; Check for opening parenthesis.
    7385/FCFE : 98 04                   CKPT:	JZ	CKP1
    7386/FD00 : C4 F0                   	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
    7387/FD02 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7388/FD04 : C5 01                   CKP1:	LD	@1(P1)			; get byte from program and increase
    7389/FD06 : E4 28                   	XRI	'('
    7390/FD08 : 9B D6                   	JZ	SV_SPLOAD(P3)
    7391/FD0A : C5 FF                   	LD	@-1(P1)
    7392/FD0C : 93 5B                   	JMP	SV_RTFUNC(P3)
    7393/FD0E :                         
    7394/FD0E : C2 FD                   LADVAR:	LD	AEXOFF(P2)
    7395/FD10 : 32                      	XPAL	P2
    7396/FD11 : C2 01                   	LD	1(P2)
    7397/FD13 : 31                      	XPAL	P1
    7398/FD14 : CA FF                   	ST	-1(P2)
    7399/FD16 : C2 00                   	LD	(P2)
    7400/FD18 : 35                      	XPAH	P1
    7401/FD19 : CA FE                   	ST	-2(P2)
    7402/FD1B : C1 01                   	LD	1(P1)
    7403/FD1D : D9 02                   	OR	2(P1)
    7404/FD1F : 98 04                   	JZ	LAD1
    7405/FD21 : C4 A4                   	LDI	(M_DIM-M_BASE)		; 'DIMENSION ERROR'
    7406/FD23 : 93 27                   	JMP	SV_RTERRN(P3)
    7407/FD25 : C1 04                   LAD1:	LD	4(P1)
    7408/FD27 : CA 01                   	ST	1(P2)
    7409/FD29 : C1 03                   	LD	3(P1)
    7410/FD2B : CA 00                   	ST	(P2)
    7411/FD2D : C2 FF                   	LD	-1(P2)
    7412/FD2F : 31                      	XPAL	P1
    7413/FD30 : C2 FE                   	LD	-2(P2)
    7414/FD32 : 35                      	XPAH	P1
    7415/FD33 : C4 80                   	LDI	STKMID
    7416/FD35 : 32                      	XPAL	P2
    7417/FD36 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7418/FD38 :                         
    7419/FD38 : C2 FD                   DMNSN:	LD	AEXOFF(P2)
    7420/FD3A : 32                      	XPAL	P2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 246 - 10/31/2025 04:19:39 PM


    7421/FD3B : C2 03                   	LD	3(P2)
    7422/FD3D : 31                      	XPAL	P1
    7423/FD3E : CA 03                   	ST	3(P2)
    7424/FD40 : C2 02                   	LD	2(P2)
    7425/FD42 : 35                      	XPAH	P1
    7426/FD43 : CA 02                   	ST	2(P2)
    7427/FD45 : 03                      	SCL
    7428/FD46 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    7429/FD48 : FA 01                   	CAD	1(P2)
    7430/FD4A : C1 00                   	LD	(P1)
    7431/FD4C : FA 00                   	CAD	(P2)
    7432/FD4E : 94 04                   	JP	DMN1
    7433/FD50 : C4 A4                   	LDI	(M_DIM-M_BASE)		; 'DIMENSION ERROR'
    7434/FD52 : 93 27                   	JMP	SV_RTERRN(P3)
    7435/FD54 : 02                      DMN1:	CCL
    7436/FD55 : C2 01                   	LD	1(P2)
    7437/FD57 : F2 01                   	ADD	1(P2)
    7438/FD59 : CA 01                   	ST	1(P2)
    7439/FD5B : C2 00                   	LD	(P2)
    7440/FD5D : F2 00                   	ADD	(P2)
    7441/FD5F : CA 00                   	ST	(P2)
    7442/FD61 : C2 01                   	LD	1(P2)
    7443/FD63 : F2 01                   	ADD	1(P2)
    7444/FD65 : CA 01                   	ST	1(P2)
    7445/FD67 : C2 00                   	LD	(P2)
    7446/FD69 : F2 00                   	ADD	(P2)
    7447/FD6B : CA 00                   	ST	(P2)
    7448/FD6D : C2 03                   	LD	3(P2)
    7449/FD6F : 31                      	XPAL	P1
    7450/FD70 : F2 01                   	ADD	1(P2)
    7451/FD72 : CA 03                   	ST	3(P2)
    7452/FD74 : C2 02                   	LD	2(P2)
    7453/FD76 : 35                      	XPAH	P1
    7454/FD77 : F6 02                   	ADD	@2(P2)
    7455/FD79 : CA 00                   	ST	(P2)
    7456/FD7B : C4 80                   	LDI	STKMID
    7457/FD7D : 32                      	XPAL	P2
    7458/FD7E : CA FD                   	ST	AEXOFF(P2)		; store last AEXSTK.L
    7459/FD80 : C5 01                   DMN2:	LD	@1(P1)			; get byte from program and increase
    7460/FD82 : E4 20                   	XRI	' '			; is it <space> ?
    7461/FD84 : 98 FA                   	JZ	DMN2			; yes, just eat it
    7462/FD86 : E4 09                   	XRI	' ' ! ')'		; we XOR'ed above, is it ')' ?
    7463/FD88 : 9B 5B                   	JZ	SV_RTFUNC(P3)
    7464/FD8A : C5 FF                   	LD	@-1(P1)			; decrease, so pointing to last byte
    7465/FD8C : C4 AC                   	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
    7466/FD8E : 93 B4                   	JMP	SV_MSGOUT(P3)
    7467/FD90 :                         
    7468/FD90 : 98 04                   POPDLR:	JZ	PD1
    7469/FD92 : C4 F0                   	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
    7470/FD94 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7471/FD96 : C1 00                   PD1:	LD	(P1)
    7472/FD98 : E4 24                   	XRI	'$'
    7473/FD9A : 9B D6                   	JZ	SV_SPLOAD(P3)
    7474/FD9C : AA FD                   	ILD	AEXOFF(P2)		; adjust AEXSTK by two up
    7475/FD9E : AA FD                   	ILD	AEXOFF(P2)
    7476/FDA0 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7477/FDA2 :                         
    7478/FDA2 :                         ; Print version string (abuse PSTRNG routine).
    7479/FDA2 : C4 13                   VSTRNG:	LDI	L(VERSTR)
    7480/FDA4 : CA EF                   	ST	-17(P2)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 247 - 10/31/2025 04:19:39 PM


    7481/FDA6 : C4 D0                   	LDI	H(VERSTR)
    7482/FDA8 : CA EE                   	ST	-18(P2)
    7483/FDAA :                         
    7484/FDAA :                         ; Print string variable.
    7485/FDAA : C2 EF                   PSTRNG:	LD	-17(P2)			; load P1 and save prev content
    7486/FDAC : 31                      	XPAL	P1
    7487/FDAD : CA EF                   	ST	-17(P2)
    7488/FDAF : C2 EE                   	LD	-18(P2)
    7489/FDB1 : 35                      	XPAH	P1
    7490/FDB2 : CA EE                   	ST	-18(P2)
    7491/FDB4 : C5 01                   PSTR1:	LD	@1(P1)			; get byte from program and increase
    7492/FDB6 : E4 0D                   	XRI	_CR
    7493/FDB8 : 98 09                   	JZ	PSTR2
    7494/FDBA : E4 0D                   	XRI	_CR
    7495/FDBC : =>DEFINED               	IFDEF	SCALLS
    7496/FDBC : (MACRO)[1456]           	 SYSCALL	2
    7496/FDBC : 3F                               XPPC   P3
    7496/FDBD : 02                               DB     2
    7497/FDBE : =>FALSE                 	ELSE
    7498/FDBE :                         	 CALL	PUTASC
    7499/FDBE : [7495]                  	ENDIF
    7500/FDBE : 06                      	CSA				; get CPU status
    7501/FDBF : D4 20                   	ANI	0x20			; check for SENSEB (start bit)
    7502/FDC1 : 9C F1                   	JNZ	PSTR1			; no input, continue
    7503/FDC3 : C2 EF                   PSTR2:	LD	-17(P2)			; restore P1
    7504/FDC5 : 31                      	XPAL	P1
    7505/FDC6 : C2 EE                   	LD	-18(P2)
    7506/FDC8 : 35                      	XPAH	P1
    7507/FDC9 : 93 5B                   	JMP	SV_RTFUNC(P3)
    7508/FDCB :                         
    7509/FDCB : C4 1D                   TAB:	LDI	0x1D
    7510/FDCD : =>DEFINED               	IFDEF	SCALLS
    7511/FDCD : (MACRO)[1457]           	 SYSCALL	2
    7511/FDCD : 3F                               XPPC   P3
    7511/FDCE : 02                               DB     2
    7512/FDCF : =>FALSE                 	ELSE
    7513/FDCF :                         	 CALL	PUTASC
    7514/FDCF : [7510]                  	ENDIF
    7515/FDCF : C2 EF                   	LD	-17(P2)
    7516/FDD1 : 9B 5B                   	JZ	SV_RTFUNC(P3)
    7517/FDD3 : C4 09                   TAB1:	LDI	_HTAB
    7518/FDD5 : =>DEFINED               	IFDEF	SCALLS
    7519/FDD5 : (MACRO)[1458]           	 SYSCALL	2
    7519/FDD5 : 3F                               XPPC   P3
    7519/FDD6 : 02                               DB     2
    7520/FDD7 : =>FALSE                 	ELSE
    7521/FDD7 :                         	 CALL	PUTASC
    7522/FDD7 : [7518]                  	ENDIF
    7523/FDD7 : BA EF                   	DLD	-17(P2)
    7524/FDD9 : 9C F8                   	JNZ	TAB1
    7525/FDDB : 93 5B                   	JMP	SV_RTFUNC(P3)
    7526/FDDD :                         
    7527/FDDD :                         ; Put status register as 16-bit integer onto STACK.
    7528/FDDD : 06                      STATUS:	CSA				; load CPU status register
    7529/FDDE : 90 02                   	JMP	PSH
    7530/FDE0 :                         ; Put current page as 16-bit integer onto STACK
    7531/FDE0 : C2 F6                   PGE:	LD	CURPG(P2)		; load value for current page
    7532/FDE2 : 01                      PSH:	XAE				; save in E
    7533/FDE3 : C2 FD                   	LD	AEXOFF(P2)		; load actual offset of AEXSTK
    7534/FDE5 : 32                      	XPAL	P2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 248 - 10/31/2025 04:19:39 PM


    7535/FDE6 : 01                      	XAE				; save prev P2.L in E
    7536/FDE7 : CE FF                   	ST	@-1(P2)			; push value as low byte onto STACK
    7537/FDE9 : C4 00                   	LDI	0
    7538/FDEB : CE FF                   	ST	@-1(P2)			; push zero as high byte
    7539/FDED : 40                      	LDE				; load prev P2.L
    7540/FDEE : 32                      	XPAL	P2			; restore P2..
    7541/FDEF : CA FD                   	ST	AEXOFF(P2)		; ..and save AEXSTK.L
    7542/FDF1 : 93 5B                   	JMP	SV_RTFUNC(P3)
    7543/FDF3 :                         
    7544/FDF3 :                         ; Find 'DEF' token with following 'FN' in current page containing BASIC program.
    7545/FDF3 : C4 02                   FNDDEF:	LDI	2			; load begin of basic program into P1
    7546/FDF5 : 31                      	XPAL	P1
    7547/FDF6 : CA F1                   	ST	-15(P2)
    7548/FDF8 : C2 F6                   	LD	CURPG(P2)		; convert current page# into P1.H
    7549/FDFA : 1E                      	RR
    7550/FDFB : 1E                      	RR
    7551/FDFC : 1E                      	RR
    7552/FDFD : 1E                      	RR
    7553/FDFE : 35                      	XPAH	P1
    7554/FDFF : CA F0                   	ST	-16(P2)			; save prev P1 in STACK -16,-15
    7555/FE01 : C1 00                   DEF1:	LD	(P1)
    7556/FE03 : E4 FF                   	XRI	0xFF			; end of program ?
    7557/FE05 : 9C 04                   	JNZ	DEF2			; go ahead
    7558/FE07 : C4 98                   	LDI	(M_DEF-M_BASE)		; 'DEFINE ERROR'
    7559/FE09 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7560/FE0B : C5 01                   DEF2:	LD	@1(P1)			; load number.H and increase
    7561/FE0D : CA F4                   	ST	-12(P2)
    7562/FE0F : C5 02                   	LD	@2(P1)			; load number.L and skip line length
    7563/FE11 : CA F5                   	ST	-11(P2)			; save number on STACK -12, -11
    7564/FE13 : C5 01                   DEF3:	LD	@1(P1)			; get byte from program and increase
    7565/FE15 : E4 20                   	XRI	' '			; is it <space> ?
    7566/FE17 : 98 FA                   	JZ	DEF3			; yes, just eat it
    7567/FE19 : E4 AB                   	XRI	' ' ! T_DEF		; we XOR'ed above, is it 'DEF' token ?
    7568/FE1B : 98 0E                   	JZ	DEF5			; found, go ahead
    7569/FE1D : C1 FF                   DEF4:	LD	-1(P1)			; get previous byte
    7570/FE1F : E4 3A                   	XRI	':'			; is it <colon> ?
    7571/FE21 : 98 F0                   	JZ	DEF3			; search token on line behind colon
    7572/FE23 : E4 37                   	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
    7573/FE25 : 98 DA                   	JZ	DEF1			; search token on next line
    7574/FE27 : C5 01                   	LD	@1(P1)			; get byte from program and incr
    7575/FE29 : 90 F2                   	JMP	DEF4			; keep searching
    7576/FE2B : C5 01                   DEF5:	LD	@1(P1)			; get byte from program and incr
    7577/FE2D : E4 20                   	XRI	' '			; is it <space> ?
    7578/FE2F : 98 FA                   	JZ	DEF5			; yes, just eat it
    7579/FE31 : E4 90                   	XRI	' ' ! T_FN		; we XOR'ed above, is it 'FN' token ?
    7580/FE33 : 98 0C                   	JZ	DEF6			; found, go ahead
    7581/FE35 : C2 F5                   FNERR:	LD	-11(P2)			; prepare error message
    7582/FE37 : CA F8                   	ST	NUMLO(P2)		; load line number from STACK -12,-11
    7583/FE39 : C2 F4                   	LD	-12(P2)
    7584/FE3B : CA F7                   	ST	NUMHI(P2)		; put line number onto STACK -9, -8
    7585/FE3D : C4 D7                   	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
    7586/FE3F : 93 B4                   	JMP	SV_MSGOUT(P3)
    7587/FE41 : C5 01                   DEF6:	LD	@1(P1)			; get byte from program and incr
    7588/FE43 : 60                      	XRE
    7589/FE44 : E4 80                   	XRI	0x80
    7590/FE46 : 9C D5                   	JNZ	DEF4
    7591/FE48 : 03                      	SCL
    7592/FE49 : C1 00                   	LD	(P1)			; get current byte
    7593/FE4B : FC 5B                   	CAI	'Z'+1			; no beginning letter
    7594/FE4D : 97 D6                   	JP	SV_SPLOAD(P3)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 249 - 10/31/2025 04:19:39 PM


    7595/FE4F : F4 1A                   	ADI	26			; 'Z'-'A'+1
    7596/FE51 : 94 CA                   	JP	DEF4			; found letter
    7597/FE53 : F4 07                   	ADI	7			; 'A'-'9'-1
    7598/FE55 : 97 D6                   	JP	SV_SPLOAD(P3)		; no digit
    7599/FE57 : F4 0A                   	ADI	10			; '9'-'0'+1
    7600/FE59 : 94 C2                   	JP	DEF4			; is digit
    7601/FE5B : 93 D6                   	JMP	SV_SPLOAD(P3)
    7602/FE5D :                         
    7603/FE5D : C2 F5                   FNT:	LD	-11(P2)
    7604/FE5F : CA F8                   	ST	NUMLO(P2)
    7605/FE61 : C2 F4                   	LD	-12(P2)
    7606/FE63 : CA F7                   	ST	NUMHI(P2)
    7607/FE65 : C2 F1                   	LD	-15(P2)
    7608/FE67 : CA F5                   	ST	-11(P2)
    7609/FE69 : C2 F0                   	LD	-16(P2)
    7610/FE6B : CA F4                   	ST	-12(P2)
    7611/FE6D : 93 D6                   	JMP	SV_SPLOAD(P3)
    7612/FE6F :                         
    7613/FE6F : C5 01                   FNDNE:	LD	@1(P1)			; get byte from program and increase
    7614/FE71 : E4 20                   	XRI	' '			; is it <space> ?
    7615/FE73 : 98 FA                   	JZ	FNDNE			; yes, just eat it
    7616/FE75 : E4 2D                   	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
    7617/FE77 : 98 08                   	JZ	FNDN
    7618/FE79 : E4 37                   	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
    7619/FE7B : 98 04                   	JZ	FNDN
    7620/FE7D : C4 94                   	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
    7621/FE7F : 93 B4                   	JMP	SV_MSGOUT(P3)
    7622/FE81 : C2 F5                   FNDN:	LD	-11(P2)
    7623/FE83 : 31                      	XPAL	P1
    7624/FE84 : C2 F4                   	LD	-12(P2)
    7625/FE86 : 35                      	XPAH	P1
    7626/FE87 : C5 FF                   FNDN1:	LD	@-1(P1)
    7627/FE89 : E4 0D                   	XRI	_CR
    7628/FE8B : 9C FA                   	JNZ	FNDN1
    7629/FE8D : C1 01                   	LD	1(P1)
    7630/FE8F : CA F7                   	ST	NUMHI(P2)
    7631/FE91 : C1 02                   	LD	2(P1)
    7632/FE93 : CA F8                   	ST	NUMLO(P2)
    7633/FE95 : C2 F5                   	LD	-11(P2)
    7634/FE97 : 31                      	XPAL	P1
    7635/FE98 : C2 F4                   	LD	-12(P2)
    7636/FE9A : 35                      	XPAH	P1
    7637/FE9B : 93 5B                   	JMP	SV_RTFUNC(P3)
    7638/FE9D :                         
    7639/FE9D :                         ; Implement the USING keyword.
    7640/FE9D :                         ; Takes string argument and counts '#' before and behind the decimal comma.
    7641/FE9D :                         ; After FNUM had generated a number string, the quoted string determines
    7642/FE9D :                         ;  the format for printing the number string.
    7643/FE9D : C4 00                   USING:	LDI	0
    7644/FE9F : CA E1                   	ST	UFRACS(P2)		; counter for '#'s behind decimal comma
    7645/FEA1 : CA E2                   	ST	UTOTAL(P2)		; total counter for '#'s
    7646/FEA3 : C5 01                   USNG1:	LD	@1(P1)			; get byte from program and increase
    7647/FEA5 : E4 20                   	XRI	' '			; is it <space> ?
    7648/FEA7 : 98 FA                   	JZ	USNG1			; yes, just eat it
    7649/FEA9 : C1 FF                   	LD	-1(P1)			; get previous byte of program
    7650/FEAB : E4 23                   	XRI	'#'			; is it '#' ?
    7651/FEAD : 9C 28                   	JNZ	USNG5			; at least one '#' must be there
    7652/FEAF : AA E2                   USNG2:	ILD	UTOTAL(P2)
    7653/FEB1 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    7654/FEB3 : E4 23                   	XRI	'#'			; is it '#' ?
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 250 - 10/31/2025 04:19:39 PM


    7655/FEB5 : 98 F8                   	JZ	USNG2
    7656/FEB7 : E4 0F                   	XRI	'#' ! ','		; we XOR'ed above, is it ',' ?
    7657/FEB9 : 9C 12                   	JNZ	USNG4
    7658/FEBB : C2 E2                   	LD	UTOTAL(P2)
    7659/FEBD : DC 80                   	ORI	0x80			; set bit7 (found separator <comma>)
    7660/FEBF : CA E2                   	ST	UTOTAL(P2)
    7661/FEC1 : AA E2                   USNG3:	ILD	UTOTAL(P2)
    7662/FEC3 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    7663/FEC5 : E4 23                   	XRI	'#'
    7664/FEC7 : 9C 04                   	JNZ	USNG4
    7665/FEC9 : AA E1                   	ILD	UFRACS(P2)
    7666/FECB : 90 F4                   	JMP	USNG3
    7667/FECD : C1 FF                   USNG4:	LD	-1(P1)			; get previous byte of program
    7668/FECF : E4 22                   	XRI	'"'			; is it <quote> ?
    7669/FED1 : 9B D6                   	JZ	SV_SPLOAD(P3)		; yes, we are done
    7670/FED3 : C4 B0                   	LDI	(M_ENDQ-M_BASE)		; 'ENDQUOTE ERROR'
    7671/FED5 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7672/FED7 : C4 D7                   USNG5:	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
    7673/FED9 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7674/FEDB :                         
    7675/FEDB :                         ; Print floating point number after applying of formatting from USING statement.
    7676/FEDB : C2 FD                   USING2:	LD	AEXOFF(P2)		; load actual AEXSTK.L
    7677/FEDD : E4 60                   	XRI	L(AEXSTK)		; default top of AEXSTK
    7678/FEDF : 9B D6                   	JZ	SV_SPLOAD(P3)		; STACK empty, jump back
    7679/FEE1 : E4 60                   	XRI	L(AEXSTK)		; we XOR'ed above
    7680/FEE3 : 31                      	XPAL	P1
    7681/FEE4 : C3 A2                   	LD	STKPHI(P3)
    7682/FEE6 : 35                      	XPAH	P1
    7683/FEE7 : C5 FC                   	LD	@-4(P1)			; set P1 to begin of number string
    7684/FEE9 : 03                      	SCL
    7685/FEEA : C2 E2                   	LD	UTOTAL(P2)
    7686/FEEC : D4 7F                   	ANI	0x7F
    7687/FEEE : CA EE                   	ST	-18(P2)			; store total count of '#'s
    7688/FEF0 : FA E1                   	CAD	UFRACS(P2)
    7689/FEF2 : CA EF                   	ST	-17(P2)
    7690/FEF4 : C2 E2                   	LD	UTOTAL(P2)
    7691/FEF6 : 94 04                   	JP	USNG21			; bit7 not set, so no separator <comma>
    7692/FEF8 : BA EF                   	DLD	-17(P2)
    7693/FEFA : 98 13                   	JZ	USNG23
    7694/FEFC : C5 FF                   USNG21:	LD	@-1(P1)			; decrease and get byte from program
    7695/FEFE : E4 2D                   	XRI	'-'
    7696/FF00 : 9C 06                   	JNZ	USNG22
    7697/FF02 : C5 01                   	LD	@1(P1)			; get byte from program and increase
    7698/FF04 : AA EB                   	ILD	COUNTR(P2)
    7699/FF06 : 98 07                   	JZ	USNG23
    7700/FF08 : 03                      USNG22:	SCL
    7701/FF09 : C2 EF                   	LD	-17(P2)
    7702/FF0B : FA EB                   	CAD	COUNTR(P2)
    7703/FF0D : 94 0A                   	JP	USNG24
    7704/FF0F : C4 2A                   USNG23:	LDI	'*'			; fill with '*' if format too small
    7705/FF11 : =>DEFINED               	IFDEF	SCALLS
    7706/FF11 : (MACRO)[1459]           	 SYSCALL	2
    7706/FF11 : 3F                               XPPC   P3
    7706/FF12 : 02                               DB     2
    7707/FF13 : =>FALSE                 	ELSE
    7708/FF13 :                         	 CALL	PUTASC
    7709/FF13 : [7705]                  	ENDIF
    7710/FF13 : BA EE                   	DLD	-18(P2)
    7711/FF15 : 9C F8                   	JNZ	USNG23
    7712/FF17 : 90 64                   	JMP	STINIT
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 251 - 10/31/2025 04:19:39 PM


    7713/FF19 : 98 0A                   USNG24:	JZ	USNG26
    7714/FF1B : CA EA                   	ST	-22(P2)
    7715/FF1D : C4 20                   USNG25:	LDI	' '			; fill with spaces
    7716/FF1F : =>DEFINED               	IFDEF	SCALLS
    7717/FF1F : (MACRO)[1460]           	 SYSCALL	2
    7717/FF1F : 3F                               XPPC   P3
    7717/FF20 : 02                               DB     2
    7718/FF21 : =>FALSE                 	ELSE
    7719/FF21 :                         	 CALL	PUTASC
    7720/FF21 : [7716]                  	ENDIF
    7721/FF21 : BA EA                   	DLD	-22(P2)
    7722/FF23 : 9C F8                   	JNZ	USNG25
    7723/FF25 : C2 E7                   USNG26:	LD	CHRNUM(P2)
    7724/FF27 : 94 12                   	JP	USNG28
    7725/FF29 : C1 FF                   	LD	-1(P1)
    7726/FF2B : E4 2D                   	XRI	'-'
    7727/FF2D : 9C 06                   	JNZ	USNG27
    7728/FF2F : BA EB                   	DLD	COUNTR(P2)
    7729/FF31 : C5 FF                   	LD	@-1(P1)
    7730/FF33 : =>DEFINED               	IFDEF	SCALLS
    7731/FF33 : (MACRO)[1461]           	 SYSCALL	2
    7731/FF33 : 3F                               XPPC   P3
    7731/FF34 : 02                               DB     2
    7732/FF35 : =>FALSE                 	ELSE
    7733/FF35 :                         	 CALL	PUTASC
    7734/FF35 : [7730]                  	ENDIF
    7735/FF35 : C4 30                   USNG27:	LDI	'0'
    7736/FF37 : =>DEFINED               	IFDEF	SCALLS
    7737/FF37 : (MACRO)[1462]           	 SYSCALL	2
    7737/FF37 : 3F                               XPPC   P3
    7737/FF38 : 02                               DB     2
    7738/FF39 : =>FALSE                 	ELSE
    7739/FF39 :                         	 CALL	PUTASC
    7740/FF39 : [7736]                  	ENDIF
    7741/FF39 : 90 03                   	JMP	USNG29
    7742/FF3B : (MACRO)[1463]           USNG28:	CALL	USING3
    7742/FF3B : 3F                               XPPC   P3
    7742/FF3C : DB                               DB     H(USING3)
    7742/FF3D : 1D                               DB     L(USING3)
    7743/FF3E : C2 E2                   USNG29:	LD	UTOTAL(P2)
    7744/FF40 : 94 3B                   	JP	STINIT
    7745/FF42 : C4 2C                   	LDI	','
    7746/FF44 : =>DEFINED               	IFDEF	SCALLS
    7747/FF44 : (MACRO)[1464]           	 SYSCALL	2
    7747/FF44 : 3F                               XPPC   P3
    7747/FF45 : 02                               DB     2
    7748/FF46 : =>FALSE                 	ELSE
    7749/FF46 :                         	 CALL	PUTASC
    7750/FF46 : [7746]                  	ENDIF
    7751/FF46 : C2 E1                   	LD	UFRACS(P2)
    7752/FF48 : 98 33                   	JZ	STINIT
    7753/FF4A : CA EB                   	ST	COUNTR(P2)
    7754/FF4C : C2 E7                   	LD	CHRNUM(P2)
    7755/FF4E : 94 10                   	JP	USNG2B
    7756/FF50 : CA EA                   	ST	-22(P2)
    7757/FF52 : C4 30                   USNG2A:	LDI	'0'			; <zero>'s post <comma>
    7758/FF54 : =>DEFINED               	IFDEF	SCALLS
    7759/FF54 : (MACRO)[1465]           	 SYSCALL	2
    7759/FF54 : 3F                               XPPC   P3
    7759/FF55 : 02                               DB     2
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 252 - 10/31/2025 04:19:39 PM


    7760/FF56 : =>FALSE                 	ELSE
    7761/FF56 :                         	 CALL	PUTASC
    7762/FF56 : [7758]                  	ENDIF
    7763/FF56 : BA EB                   	DLD	COUNTR(P2)
    7764/FF58 : 98 23                   	JZ	STINIT
    7765/FF5A : BA EA                   	DLD	-22(P2)
    7766/FF5C : E4 81                   	XRI	0x81
    7767/FF5E : 9C F2                   	JNZ	USNG2A
    7768/FF60 : (MACRO)[1466]           USNG2B:	CALL	USING3
    7768/FF60 : 3F                               XPPC   P3
    7768/FF61 : DB                               DB     H(USING3)
    7768/FF62 : 1D                               DB     L(USING3)
    7769/FF63 : 90 18                   	JMP	STINIT
    7770/FF65 :                         
    7771/FF65 :                         ; Print floating point number (as string on STACK.)
    7772/FF65 : C2 FD                   PRFNUM:	LD	AEXOFF(P2)		; load actual AEXSTK.L
    7773/FF67 : E4 60                   	XRI	L(AEXSTK)		; is it top of arithmetics stack ?
    7774/FF69 : 9B D6                   	JZ	SV_SPLOAD(P3)		; STACK empty, jump back
    7775/FF6B : E4 60                   	XRI	L(AEXSTK)		; we XOR'ed above
    7776/FF6D : 31                      	XPAL	P1
    7777/FF6E : C3 A2                   	LD	STKPHI(P3)
    7778/FF70 : 35                      	XPAH	P1
    7779/FF71 : C5 FB                   	LD	@-5(P1)			; set P1 below stored number to ASCII string
    7780/FF73 : =>DEFINED               PRFNM1:	IFDEF	SCALLS
    7781/FF73 : (MACRO)[1467]           	 SYSCALL	2
    7781/FF73 : 3F                               XPPC   P3
    7781/FF74 : 02                               DB     2
    7782/FF75 : =>FALSE                 	ELSE
    7783/FF75 :                         	 CALL	PUTASC
    7784/FF75 : [7780]                  	ENDIF
    7785/FF75 : C5 FF                   	LD	@-1(P1)			; decrease P1 and load byte
    7786/FF77 : 9C FA                   	JNZ	PRFNM1			; loop until <null>
    7787/FF79 :                         
    7788/FF79 :                         ; Print a <space> and reset arithmetics stack
    7789/FF79 : C4 20                   PRSPCE:	LDI	' '
    7790/FF7B : =>DEFINED               	IFDEF	SCALLS
    7791/FF7B : (MACRO)[1468]           	 SYSCALL	2
    7791/FF7B : 3F                               XPPC   P3
    7791/FF7C : 02                               DB     2
    7792/FF7D : =>FALSE                 	ELSE
    7793/FF7D :                         	 CALL	PUTASC
    7794/FF7D : [7790]                  	ENDIF
    7795/FF7D :                         
    7796/FF7D :                         ; After printing, top of the arithmetic STACK is reset to default.
    7797/FF7D : C4 60                   STINIT:	LDI	L(AEXSTK)		; load default top of AEXSTK.L
    7798/FF7F : 31                      	XPAL	P1			; temporarily put into P1.L
    7799/FF80 :                         
    7800/FF80 :                         ; Set stack back (also use as stand-alone routine.)
    7801/FF80 : C2 F3                   STBACK:	LD	-13(P2)			; restore pointer P1
    7802/FF82 : 31                      	XPAL	P1
    7803/FF83 : CA FD                   	ST	AEXOFF(P2)		; store default/actual top of AEXSTK.L
    7804/FF85 : C2 F2                   	LD	-14(P2)
    7805/FF87 : 35                      	XPAH	P1
    7806/FF88 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7807/FF8A :                         
    7808/FF8A : =>TRUE                  	IF USE_CASS
    7809/FF8A : (MACRO)[1469]           CSAVE2:	JS	P3,CASW			; execute Cassette Write system call
    7809/FF8A : C4 D1                            LDI    H(CASW-1)
    7809/FF8C : 37                               XPAH   P3
    7809/FF8D : C4 5F                            LDI    L(CASW-1)
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 253 - 10/31/2025 04:19:39 PM


    7809/FF8F : 33                               XPAL   P3
    7809/FF90 : 3F                               XPPC   P3
    7810/FF91 : (MACRO)[1470]           	LDPI	P3,SPRVSR		; restore P3 to Supervisor
    7810/FF91 : C4 80                            LDI    L(SPRVSR)
    7810/FF93 : 33                               XPAL   P3
    7810/FF94 : C4 D4                            LDI    H(SPRVSR)
    7810/FF96 : 37                               XPAH   P3
    7811/FF97 : 93 D6                   	JMP	SV_SPLOAD(P3)		; return to supervisor
    7812/FF99 :                         
    7813/FF99 : C4 5C                   CLOAD2:	LDI	L(AEXSTK)-4		; set buffer address for PRNUM
    7814/FF9B : CA FD                   	ST	AEXOFF(P2)		; store as actual offset to AEXSTK.L
    7815/FF9D : (MACRO)[1471]           	JS	P3,CASR			; execute Cassette Read system call
    7815/FF9D : C4 D1                            LDI    H(CASR-1)
    7815/FF9F : 37                               XPAH   P3
    7815/FFA0 : C4 B8                            LDI    L(CASR-1)
    7815/FFA2 : 33                               XPAL   P3
    7815/FFA3 : 3F                               XPPC   P3
    7816/FFA4 : 01                      	XAE				; save AC
    7817/FFA5 : (MACRO)[1472]           	LDPI	P3,SPRVSR		; set P3 back to SPRVSR
    7817/FFA5 : C4 80                            LDI    L(SPRVSR)
    7817/FFA7 : 33                               XPAL   P3
    7817/FFA8 : C4 D4                            LDI    H(SPRVSR)
    7817/FFAA : 37                               XPAH   P3
    7818/FFAB : 40                      	LDE				; load saved AC
    7819/FFAC : 98 08                   	JZ	CLOAD4			; all OK
    7820/FFAE : C4 BF                   CLOAD3:	LDI	(INCMD + _QMARK)	; set "PROGRAM RUNNING" flag
    7821/FFB0 : CA 7F                   	ST	BASMODE(P2)		; store program / run flag
    7822/FFB2 : C4 90                   	LDI	(M_CASS-M_BASE)		; 'CASS ERROR'
    7823/FFB4 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7824/FFB6 : (MACRO)[1473]           CLOAD4:	CALL	FNDVAR
    7824/FFB6 : 3F                               XPPC   P3
    7824/FFB7 : E2                               DB     H(FNDVAR)
    7824/FFB8 : E1                               DB     L(FNDVAR)
    7825/FFB9 : 98 F3                   	JZ	CLOAD3			; no variable found
    7826/FFBB : 93 D6                   	JMP	SV_SPLOAD(P3)		; return to supervisor
    7827/FFBD :                         
    7828/FFBD :                         ; Determine start of program on current page.
    7829/FFBD : C2 F6                   BOT:	LD	CURPG(P2)		; load page #
    7830/FFBF : 1E                      	RR				; rotate right AC (multiply by 16)
    7831/FFC0 : 1E                      	RR
    7832/FFC1 : 1E                      	RR
    7833/FFC2 : 1E                      	RR
    7834/FFC3 : 01                      	XAE
    7835/FFC4 : BA FD                   	DLD	AEXOFF(P2)		; decrease stored P2.L by 2
    7836/FFC6 : BA FD                   	DLD	AEXOFF(P2)
    7837/FFC8 : 32                      	XPAL	P2
    7838/FFC9 : 01                      	XAE				; save prev P2.L in E
    7839/FFCA : CA 00                   	ST	(P2)			; store START.H on STACK 0
    7840/FFCC : C4 01                   	LDI	1			; program begins at byte 1 of page
    7841/FFCE : CA 01                   	ST	1(P2)			; store START.L on STACK 1
    7842/FFD0 : 40                      	LDE
    7843/FFD1 : 32                      	XPAL	P2
    7844/FFD2 : 93 D6                   	JMP	SV_SPLOAD(P3)
    7845/FFD4 :                         
    7846/FFD4 : C2 DF                   CFINI:	LD	-33(P2)			; get start addr L
    7847/FFD6 : CA F8                   	ST	NUMLO(P2)		; store for PRNUM
    7848/FFD8 : C2 DE                   	LD	-34(P2)			; get start addr H
    7849/FFDA : CA F7                   	ST	NUMHI(P2)		; store for PRNUM
    7850/FFDC : (MACRO)[1474]           	CALL	PRNUM			; print the number
    7850/FFDC : 3F                               XPPC   P3
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 254 - 10/31/2025 04:19:39 PM


    7850/FFDD : D2                               DB     H(PRNUM)
    7850/FFDE : 18                               DB     L(PRNUM)
    7851/FFDF : C4 2D                   	LDI	'-'			; print <minus>
    7852/FFE1 : =>DEFINED               	IFDEF	SCALLS
    7853/FFE1 : (MACRO)[1475]           	 SYSCALL	2
    7853/FFE1 : 3F                               XPPC   P3
    7853/FFE2 : 02                               DB     2
    7854/FFE3 : =>FALSE                 	ELSE
    7855/FFE3 :                         	 CALL	PUTASC
    7856/FFE3 : [7852]                  	ENDIF
    7857/FFE3 : C2 DD                   	LD	-35(P2)			; get end addr L
    7858/FFE5 : CA F8                   	ST	NUMLO(P2)		; store for PRNUM
    7859/FFE7 : C2 DC                   	LD	-36(P2)			; get end addr H
    7860/FFE9 : CA F7                   	ST	NUMHI(P2)		; store for PRNUM
    7861/FFEB : (MACRO)[1476]           	CALL	PRNUM			; print the number
    7861/FFEB : 3F                               XPPC   P3
    7861/FFEC : D2                               DB     H(PRNUM)
    7861/FFED : 18                               DB     L(PRNUM)
    7862/FFEE : (MACRO)[1477]           	CALL	LINE			; print newline
    7862/FFEE : 3F                               XPPC   P3
    7862/FFEF : E0                               DB     H(LINE)
    7862/FFF0 : FE                               DB     L(LINE)
    7863/FFF1 : C4 0A                   	LDI	(M_RDY-M_BASE)		; 'READY'
    7864/FFF3 : 93 B4                   	JMP	SV_MSGOUT(P3)
    7865/FFF5 : [7808]                  	ENDIF
    7866/FFF5 :                         
    7867/FFF5 :                         	; Fill up space to end of ROM.
    7868/FFFF :                         	ORG	(BASE+0x3000) - 1
    7869/FFFF : FF                      	DB	0xFF
    7870/10000 :                        
    7871/10000 :                        	END	RESET
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 255 - 10/31/2025 04:19:39 PM


  Symbol Table (* = unused):
  --------------------------

 ABSWP :                       F025 C |  ABSWP1 :                      F02E C |
 ADD :                         E2B0 C |  ADD1 :                        E2B2 C |
 ADD2 :                        E2CC C |  ADD3 :                        E2D4 C |
 ADD4 :                        E2D5 C |  AEXOFF :          FFFFFFFFFFFFFFFD - |
 AEXSTK :                        60 - |  ALG1 :                        F267 C |
 ALG2 :                        F277 C |  ALGEXP :                      F259 C |
 ALGN1 :                       F1BF C |  ALGN2 :                       F1E9 C |
 ALGN3 :                       F1F1 C |  AND :                         F156 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARERR :                       FCBB C |  ASC :                         EE04 C |
 ASC1 :                        EE17 C |  ASTR1 :                       EE35 C |
 ASTRNG :                      EE1F C |  ATN :                         F8AF C |
 ATN1 :                        F8BA C |  ATN2 :                        F8DE C |
 ATN3 :                        F979 C |  AUTO :                        DA95 C |
 AUTO1 :                       DAA0 C |  AUTO2 :                       DAA2 C |
 AUTO3 :                       DAAC C |  AUTON :                       EB16 C |
 AUTONM :                      EB05 C |  B12_CYCLES :                    EF - |
 B34_CYCLES :                   13F - |  B5_CYCLES :                     D0 - |
 B67_CYCLES :                     D - |  B89_CYCLES :                   110 - |
 BACK :                        E0B6 C |  BASE :                        D000 - |
 BASMODE :                       7F - |  BAUD :                         960 - |
*BIGENDIAN :                      1 - |  BINDEC :                      F432 C |
 BOT :                         FFBD C |  BRK :                         E492 C |
 BUFOUT :                      E0DF C |  BYE :                         E383 C |
 CALBIT :                        20 - |  CALBITH :                     2000 - |
*CASESENSITIVE :                  0 - |  CASR :                        D1B9 C |
 CASR1 :                       D1D3 C |  CASR2 :                       D1DC C |
 CASR3 :                       D1F6 C |  CASR4 :                       D1FF C |
 CASR5 :                       D205 C |  CASRD :                       D126 C |
 CASRD1 :                      D12F C |  CASRD2 :                      D13B C |
 CASRD3 :                      D143 C |  CASRD4 :                      D14B C |
 CASRD5 :                      D158 C |  CASW :                        D160 C |
 CASW1 :                       D180 C |  CASW2 :                       D189 C |
 CASW3 :                       D1A7 C |  CASW4 :                       D1AF C |
 CASWR :                       D0FE C |  CASWR1 :                      D10E C |
 CASWR2 :                      D116 C |  CFINI :                       FFD4 C |
 CHPAGE :                      E6F8 C |  CHPGE :                       E708 C |
 CHRNUM :          FFFFFFFFFFFFFFE7 - |  CHRSTR :                      EC07 C |
 CKDLL1 :                      EE85 C |  CKDLL2 :                      EE8F C |
 CKDLLR :                      EE7F C |  CKMODE :                      E5B8 C |
 CKP1 :                        FD04 C |  CKPT :                        FCFE C |
 CLEAR :                       F023 C |  CLOAD :                       DF61 C |
 CLOAD2 :                      FF99 C |  CLOAD3 :                      FFAE C |
 CLOAD4 :                      FFB6 C |  CLRBUF :                      EA20 C |
 CLRSTK :                      E4C6 C |  CMP :                         E5F2 C |
 CMP1 :                        ED95 C |  CMP2 :                        EDA1 C |
 CMP3 :                        EDA9 C |  CMP4 :                        EDB6 C |
 CMPEND :                      EDBC C |  CMPR :                        E652 C |
 CMPR1 :                       ED58 C |  CMPR2 :                       ED64 C |
 CMPR3 :                       ED6A C |  CMPR4 :                       ED72 C |
 CMPRE :                       E3C5 C |  CMPRST :                      ED4C C |
 CMPSTR :                      ED81 C | *CONSTPI :     3.141592653589793239 - |
 COUNTR :          FFFFFFFFFFFFFFEB - |  CSAVE :                       DF59 C |
 CSAVE2 :                      FF8A C |  CSPEED_A :                      17 - |
 CSPEED_B :                       1 - |  CSPEED_C :                      78 - |
 CSPEED_D :                       0 - |  CSPEED_E :                      24 - |
 CSPEED_F :                       1 - |  CTRL1 :                       E053 C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 256 - 10/31/2025 04:19:39 PM


 CTRL2 :                       E07E C |  CTRL3 :                       E092 C |
 CTRL4 :                       E059 C |  CTRL5 :                       E099 C |
 CTRL6 :                       E0BC C |  CTRL7 :                       E0F3 C |
 CTRLS :                       E044 C |  CURPG :           FFFFFFFFFFFFFFF6 - |
 CYCLES_PER_BIT :               1A0 - | *DATE :                "10/31/2025" - |
 DEC :                         D362 C |  DEF1 :                        FE01 C |
 DEF2 :                        FE0B C |  DEF3 :                        FE13 C |
 DEF4 :                        FE1D C |  DEF5 :                        FE2B C |
 DEF6 :                        FE41 C |  DEFERR :                      E5A3 C |
 DEFV1 :                       E520 C |  DEFV2 :                       E526 C |
 DEFV3 :                       E54A C |  DEFVAR :                      E50E C |
 DETPGE :                      E47F C |  DIG10 :                       D27E C |
 DIG13 :                       D28F C |  DIG15 :                       D2B3 C |
 DIG16 :                       D2B7 C |  DIG17 :                       D2E5 C |
 DIG18 :                       D2F9 C |  DIG19 :                       D306 C |
 DIG20 :                       D31D C |  DIG21 :                       D35C C |
 DIGIT :                       EAA4 C |  DIGIT1 :                      EAAE C |
 DIGLP :                       D2AA C |  DIM :                         DACF C |
 DIMS1 :                       FC86 C |  DIMS2 :                       FCBF C |
 DIMS3 :                       FCE2 C |  DIMS4 :                       FCEC C |
 DIMSN :                       FC79 C |  DMN1 :                        FD54 C |
 DMN2 :                        FD80 C |  DMNSN :                       FD38 C |
 DNE :                         E3B3 C |  DO :                          DA41 C |
 DOLLAR :                      D90F C |  DONE :                        E371 C |
 DOSTAK :                        E0 - |  DOUOFF :          FFFFFFFFFFFFFFFB - |
 DOWN :                        E24E C |  DTA1 :                        E8B8 C |
 DTA2 :                        E8D6 C |  DTA3 :                        E8E0 C |
 DTA4 :                        E8E8 C |  EDIT :                        DA89 C |
 EDIT1 :                       E9C3 C |  EDIT10 :                      EA31 C |
*EDIT11 :                      EA3C C |  EDIT12 :                      EA4A C |
 EDIT13 :                      EA60 C |  EDIT14 :                      EA66 C |
 EDIT15 :                      EA6C C |  EDIT16 :                      EA7E C |
 EDIT17 :                      EA82 C |  EDIT2 :                       E9C8 C |
 EDIT3 :                       E9D2 C |  EDIT4 :                       E9E5 C |
 EDIT5 :                       E9EA C |  EDIT6 :                       E9F0 C |
 EDIT7 :                       EA00 C |  EDIT8 :                       EA06 C |
 EDIT9 :                       EA0C C |  EDITR :                       E9BD C |
 ELS :                         E3D4 C |  ELS1 :                        E3E2 C |
 ELS2 :                        E3EA C |  ENDPAR :                      D92F C |
 ENDPR :                       E404 C |  ENTER :                       D022 C |
 ENTR1 :                       D062 C |  ENTR2 :                       D078 C |
 ENTR3 :                       D07E C |  ENTR4 :                       D088 C |
 ENTR5 :                       D090 C |  EQU :                         E5DC C |
 EREG :            FFFFFFFFFFFFFF80 - |  ERRNUMH :                       7D - |
 ERRNUML :                       7E - |  EXOR :                        F192 C |
 EXP2 :                        F598 C |  EXP21 :                       F5AB C |
 EXP22 :                       F5B1 C |  EXP23 :                       F5CC C |
 EXP24 :                       F5D0 C |  EXP25 :                       F5DD C |
 FABS :                        F1A8 C |  FACTOR :                      DED9 C |
 FADD :                        F13C C | *FALSE :                          0 - |
 FCTR1 :                       DEDE C |  FCTR10 :                      DF44 C |
 FCTR11 :                      DF49 C |  FCTR2 :                       DEE9 C |
 FCTR3 :                       DEF5 C |  FCTR4 :                       DEFC C |
 FCTR5 :                       DF07 C |  FCTR6 :                       DF13 C |
 FCTR7 :                       DF18 C |  FCTR8 :                       DF21 C |
 FCTR9 :                       DF38 C |  FD10 :                        F739 C |
 FD11 :                        F73D C |  FD12 :                        F758 C |
 FD13 :                        F761 C |  FD14 :                        F765 C |
 FD15 :                        F793 C |  FD16 :                        F7A7 C |
 FDEC :                        F3A3 C |  FDEC1 :                       F435 C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 257 - 10/31/2025 04:19:39 PM


 FDEC2 :                       F499 C |  FDEC3 :                       F49D C |
 FDEC4 :                       F4A9 C |  FDEND :                       F83E C |
 FDIG10 :                      F2BF C |  FDIG11 :                      F3E1 C |
 FDIG12 :                      F427 C |  FDIG13 :                      F2D0 C |
 FDIG15 :                      F2F4 C |  FDIG16 :                      F2F8 C |
 FDIG17 :                      F326 C |  FDIG18 :                      F33A C |
 FDIG19 :                      F347 C |  FDIG20 :                      F35E C |
 FDIG21 :                      F39D C |  FDIGLP :                      F2EB C |
 FDIV :                        F078 C |  FDIV0 :                       F07B C |
 FDIV1 :                       F083 C |  FDIV11 :                      F7B8 C |
 FDIV12 :                      F7C3 C |  FDIV13 :                      F7EB C |
 FDIV14 :                      F7F4 C |  FDIV15 :                      F7F8 C |
 FDIV16 :                      F826 C |  FDIV17 :                      F83A C |
 FDIV2 :                       F0AD C |  FDIV3 :                       F0AF C |
 FDIV4 :                       F0CB C |  FEXP :                        F3AA C |
 FEXP1 :                       F3B6 C |  FEXP2 :                       F3C0 C |
 FEXP3 :                       F3C5 C |  FEXPD :                       F3CE C |
 FIX :                         EB2F C |  FIX1 :                        EB3E C |
 FIX2 :                        EB3F C |  FIX3 :                        EB5D C |
 FIX4 :                        EB68 C |  FIX5 :                        EB6D C |
 FLEND :                       FBED C |  FLOAT2 :                      FBD2 C |
*FLOATMAX :   1.18973149535725E4932 - |  FLSE :                        E65E C |
 FMEND :                       F8A8 C |  FMOD :                        F68A C |
 FMOD1 :                       F695 C |  FMOD10 :                      F718 C |
 FMOD2 :                       F6BE C |  FMOD3 :                       F6C0 C |
 FMOD4 :                       F6CC C |  FMOD5 :                       F6D4 C |
 FMOD6 :                       F6E9 C |  FMOD7 :                       F701 C |
 FMOD8 :                       F70D C |  FMOD9 :                       F70F C |
 FMUL :                        F0E3 C |  FMUL1 :                       F0EE C |
 FMUL11 :                      F845 C |  FMUL12 :                      F850 C |
 FMUL13 :                      F896 C |  FMUL14 :                      F8A0 C |
 FMUL15 :                      F8A4 C |  FMUL2 :                       F113 C |
 FN1 :                         DDEE C |  FN2 :                         DDFB C |
 FN3 :                         DE01 C |  FN4 :                         DE0D C |
 FN5 :                         DE1A C |  FN6 :                         DE24 C |
 FN7 :                         DE2D C |  FNDDEF :                      FDF3 C |
 FNDDTA :                      E963 C |  FNDLB1 :                      E577 C |
 FNDLB2 :                      E583 C |  FNDLB3 :                      E596 C |
 FNDLB4 :                      E598 C |  FNDLBL :                      E569 C |
 FNDN :                        FE81 C |  FNDN1 :                       FE87 C |
 FNDNE :                       FE6F C |  FNDTA :                       E900 C |
 FNDV0 :                       E2E9 C |  FNDV1 :                       E2F6 C |
 FNDV2 :                       E301 C |  FNDV3 :                       E30D C |
 FNDV4 :                       E317 C |  FNDV5 :                       E31D C |
 FNDV6 :                       E325 C |  FNDV7 :                       E338 C |
 FNDV8 :                       E33A C |  FNDV9 :                       E33B C |
 FNDVAR :                      E2E1 C |  FNEG :                        F1AC C |
 FNERR :                       FE35 C |  FNORM :                       FBE5 C |
 FNORM1 :                      FBF4 C |  FNT :                         FE5D C |
 FNUM :                        F29A C |  FNUMND :                      F3D2 C |
 FOR :                         D971 C |  FOR1 :                        D98A C |
 FOR2 :                        D98C C |  FOROFF :          FFFFFFFFFFFFFFFA - |
 FORSTK :                        D4 - |  FREE :                        EED7 C |
 FREE1 :                       EEED C |  FREE2 :                       EEEF C |
 FSTR1 :                       ED24 C |  FSTRNG :                      ED18 C |
 FSUB :                        F139 C |  FZERO :                       F2C8 C |
 GEQ :                         E5F0 C |  GEQU :                        E64E C |
 GETASC :                      D0D0 C |  GETBYT :                      EDE8 C |
 GETLIN :                      E001 C |  GETLN1 :                      E00B C |
 GETLN2 :                      E022 C |  GINP :                        D0E2 C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 258 - 10/31/2025 04:19:39 PM


 GOFUNC :                      D4CB C |  GOSUB :                       DA79 C |
 GOSUB1 :                      DA7D C |  GOTO :                        DA73 C |
 GOTO1 :                       DA7F C |  GRTR :                        E643 C |
 GTO :                         E97D C |  GTO1 :                        E983 C |
 GTO2 :                        E989 C |  GTO3 :                        E997 C |
 GTO4 :                        E9AD C |  GTR :                         E5EC C |
 GWAIT :                       D0D4 C |  GZERO :                       D0ED C |
*HAS64 :                          1 - |  HCTRLS :                      E063 C |
 HDLERR :                      E5AF C |  HEX :                         EEFA C |
 HEX1 :                        EF07 C |  HEX2 :                        EF15 C |
 HEX3 :                        EF1D C |  HEX4 :                        EF27 C |
 HEX5 :                        EF2E C |  HEX6 :                        EF30 C |
 HEX7 :                        EF35 C |  IF :                          DAB4 C |
 IGNORE :                      E408 C |  IGNRE :                       E38A C |
 ILCOFF :          FFFFFFFFFFFFFFF9 - |  ILCSTK :                        A4 - |
 ILSTRT :                      D8B5 C |  ILTB1 :                       D8A4 C |
 ILTB2 :                       D8A9 C |  ILTBL :                       D8A2 C |
 INCMD :                         80 - | *INCR :                        E036 C |
 INDEX :                       DF51 C |  INPT :                        E02B C |
 INPUT :                       DA06 C |  INPUT1 :                      DA0D C |
 INPUT2 :                      DA1E C |  INPUT3 :                      DA20 C |
 INPUT4 :                      DA22 C |  INPUT5 :                      DA29 C |
 INS1 :                        E21B C |  INS2 :                        E22B C |
 INS3 :                        E237 C |  INSRT :                       E209 C |
 INSTR :                       E92A C |  INSTR1 :                      E931 C |
 INT :                         F202 C |  INT1 :                        F203 C |
 INT2 :                        F204 C |  INT3 :                        F20F C |
 INT4 :                        F229 C | *INTERNAL :                       1 - |
 ISTR1 :                       E911 C |  ISTRNG :                      E90A C |
 JMPBIT :                        80 - |  JMPBITH :                     8000 - |
 LAD1 :                        FD25 C |  LADVAR :                      FD0E C |
 LDDTA :                       E8A6 C |  LDPNT :                       E504 C |
 LDVAR :                       E815 C |  LDVER :                       E83B C |
 LEFT1 :                       EBA5 C |  LEFT2 :                       EBB5 C |
 LEFT3 :                       EBBB C |  LEFTST :                      EB99 C |
 LEN :                         EE57 C |  LEN1 :                        EE60 C |
 LEN2 :                        EE66 C |  LEN3 :                        EE6C C |
 LEN4 :                        EE71 C |  LEQ :                         E5E8 C |
 LEQU :                        E63A C |  LESS :                        E632 C |
 LET :                         D906 C |  LFSTR1 :                      EC7B C |
 LFSTR2 :                      EC82 C |  LFSTR3 :                      EC92 C |
 LFSTR4 :                      EC98 C |  LFTSTR :                      EC6C C |
 LG2 :                         F4B6 C |  LGERR :                       F4DC C |
 LINE :                        E0FE C |  LINK :                        DA4F C |
 LIST :                        D944 C |  LIST1 :                       D951 C |
 LIST2 :                       D955 C |  LIST3 :                       D957 C |
 LIST4 :                       D95B C | *LISTON :                         1 - |
 LKPAGE :                      E6DD C |  LKPGE :                       E6E7 C |
 LKVAR :                       D523 C |  LN2 :                         F4C6 C |
 LNUM :                        D67F C |  LNUM1 :                       D692 C |
 LOD1 :                        FC15 C |  LOD2 :                        FC21 C |
 LOD3 :                        FC3E C |  LODVAR :                      FC0F C |
 LOG2 :                        F4D8 C |  LOG21 :                       F4E0 C |
 LSS :                         E5E4 C |  LST1 :                        E67E C |
 LST2 :                        E68A C |  LST3 :                        E696 C |
 LST4 :                        E69D C |  LST5 :                        E6A0 C |
 LST6 :                        E6B0 C |  LST7 :                        E6B6 C |
 LST8 :                        E6BC C |  LST9 :                        E6CA C |
 LSTR1 :                       EE49 C |  LSTR2 :                       EE4F C |
 LSTRNG :                      EE39 C |  LVTST1 :                      D517 C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 259 - 10/31/2025 04:19:39 PM


 LVTST2 :                      D51D C |  LVTST3 :                      D539 C |
 LVUNTL :                      E48C C | *MACEXP :                         7 - |
 MC :                          E9B9 C |  MD :                          F04D C |
 MD1 :                         F063 C |  MD2 :                         F068 C |
 MD3 :                         F072 C |  MDEND :                       F12B C |
 MDSGN :                       F133 C |  MEM1 :                        D600 C |
 MEM2 :                        D604 C |  MEM3 :                        D610 C |
 MEM4 :                        D617 C |  MEMSIZ :                      D5F3 C |
 MESG :                        D655 C |  MESG1 :                       D667 C |
 MESG2 :                       D679 C |  MICROCYCLE :                     1 - |
 MID1 :                        EB78 C |  MID2 :                        EB84 C |
 MID3 :                        EB8A C |  MIDST :                       EB75 C |
 MIDSTR :                      EC41 C | *MOMCPU :                         0 - |
*MOMCPUNAME :               "SC/MP" - |  MORE :                        EAC2 C |
 MOVE :                        E244 C |  MOVESR :                      E3B0 C |
 MOVSTR :                      ECE4 C |  MSGOFF :          FFFFFFFFFFFFFF82 - |
 MSGOUT :                      D435 C |  MSTR1 :                       EC4E C |
 MSTR2 :                       EC5A C |  MSTR3 :                       EC60 C |
 MVSTR1 :                      ECF8 C |  M_AREA :                      D6A1 C |
 M_ARG :                       D6A5 C |  M_BASE :                      D71D - |
 M_BRK :                       D71D C |  M_CASS :                      D6AD C |
 M_CHAR :                      D6B1 C |  M_DATA :                      D6BB C |
 M_DEF :                       D6B5 C |  M_DIM :                       D6C1 C |
 M_DIV0 :                      D6C4 C |  M_ENDP :                      D6C9 C |
 M_ENDQ :                      D6CD C |  M_ERR :                       D722 C |
 M_FOR :                       D6D1 C |  M_FREE :                      D72C C |
 M_HEX :                       D6D4 C |  M_NEST :                      D6D7 C |
 M_NEXT :                      D6DB C |  M_NOGO :                      D6DF C |
 M_OVRF :                      D6E3 C | *M_RAM :                       D6EB C |
 M_RDIM :                      D6BF C |  M_RDY :                       D727 C |
 M_RTRN :                      D6EE C |  M_SNTX :                      D6F4 C |
 M_STMT :                      D6FA C |  M_UNTL :                      D703 C |
 M_VALU :                      D708 C |  M_VAR :                       D70D C |
 M_VRST :                      D715 C |  NEG :                         DAE7 C |
 NEGEXP :                      F3D8 C |  NEGSKP :                      F430 C |
 NEQ :                         E5E0 C |  NEQU :                        E629 C |
*NESTMAX :                      100 - |  NEW :                         D961 C |
 NEW1 :                        D969 C |  NEW2 :                        D96B C |
 NEWPGM :                      F00D C |  NEXT :                        E42F C |
 NEXT1 :                       E432 C |  NEXT2 :                       E44B C |
 NEXT3 :                       E450 C |  NEXT4 :                       E454 C |
 NEXTG :                       D992 C |  NODTA :                       E8F2 C |
 NOMSPC :                      E0EE C |  NORM :                        F1C4 C |
 NORM1 :                       F1CE C |  NOT :                         F182 C |
 NUMEND :                      EABB C |  NUMERR :                      EA9E C |
 NUMHI :           FFFFFFFFFFFFFFF7 - |  NUMLO :           FFFFFFFFFFFFFFF8 - |
 NUMTST :                      EA8D C |  NUPAGE :                      F001 C |
 NUPGE1 :                      F007 C |  NUPGE2 :                      F009 C |
 NXT :                         E40E C |  NXT1 :                        E412 C |
 NXT2 :                        E418 C |  NXT3 :                        E41C C |
 NXTDTA :                      E8B2 C |  NXTV :                        E84D C |
 NXTV1 :                       E87E C |  NXTV2 :                       E88C C |
 NXTV3 :                       E893 C |  NXTVAR :                      E7B0 C |
 ON :                          DA5D C |  ON1 :                         DA6A C |
 ONE :                         E716 C |  OR :                          F16C C |
 OUTCH :                       E03A C | *P1HIGH :          FFFFFFFFFFFFFFF0 - |
*P1LOW :           FFFFFFFFFFFFFFF1 - |  PAGE :                        D920 C |
 PAGE0 :                       D91D C |  PAGES :           FFFFFFFFFFFFFF84 - |
 PD1 :                         FD96 C |  PEXP :                        D369 C |
 PEXP1 :                       D375 C |  PEXP2 :                       D37F C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 260 - 10/31/2025 04:19:39 PM


 PEXP3 :                       D384 C |  PEXPD :                       D38D C |
 PFNUM :                       D259 C |  PFNUMD :                      D391 C |
 PGE :                         FDE0 C |  PGTOPH :          FFFFFFFFFFFFFF85 - |
 PGTOPL :          FFFFFFFFFFFFFF86 - |  PI :                          FAA0 C |
 PI2 :                         F9A0 C |  PNORM :                       D234 C |
 POKE :                        DAC0 C |  POP1 :                        E1C7 C |
 POP2 :                        E1C8 C |  POP3 :                        E1E6 C |
 POP4 :                        E1F3 C |  POP5 :                        E1F9 C |
 POPAE :                       E1BD C |  POPDLR :                      FD90 C |
 POPSTR :                      ED3C C |  PRCHAR :                      EE9D C |
 PREX1 :                       DB46 C |  PREX10 :                      DB8B C |
 PREX2 :                       DB4F C |  PREX3 :                       DB58 C |
 PREX4 :                       DB5F C |  PREX5 :                       DB68 C |
 PREX6 :                       DB6D C |  PREX7 :                       DB76 C |
 PREX8 :                       DB87 C |  PREX9 :                       DB89 C |
 PREXP :                       DB41 C |  PRFNM1 :                      FF73 C |
 PRFNUM :                      FF65 C |  PRINT :                       DAED C |
 PRINT0 :                      D931 C |  PRNT1 :                       DAF5 C |
 PRNT2 :                       DAFE C |  PRNT3 :                       DB03 C |
 PRNT4 :                       DB06 C |  PRNT5 :                       DB0A C |
 PRNT6 :                       DB13 C |  PRNT7 :                       DB18 C |
 PRNUM :                       D218 C | *PRSPCE :                      FF79 C |
 PRSTR :                       E971 C |  PRSTRG :                      E5D0 C |
 PSH :                         FDE2 C |  PSHSWP :                      F721 C |
 PSTR1 :                       FDB4 C |  PSTR2 :                       FDC3 C |
 PSTRNG :                      FDAA C | *PTEND :                       D3A4 C |
 PTNUM :                       D39E C |  PUTA1 :                       D0A8 C |
 PUTA2 :                       D0C0 C |  PUTASC :                      D097 C |
 PUTBYT :                      EDCC C |  PUTC3 :                       D0CC C |
 PUTS1 :                       E94C C |  PUTS2 :                       E958 C |
 PUTST :                       EC19 C |  PUTST1 :                      EC23 C |
 PUTST2 :                      EC2F C |  PUTSTR :                      E945 C |
 RAMBAS :          FFFFFFFFFFFFFF83 - |  RAMBASE :                     7000 - |
*RAMSTK :                        F6 - |  READ :                        D9A8 C |
 READ1 :                       D9AC C |  READ2 :                       D9BB C |
 READ3 :                       D9CA C |  READ4 :                       D9CD C |
 READ5 :                       D9D5 C |  READ6 :                       D9E5 C |
 READ7 :                       D9E7 C |  READ8 :                       D9F0 C |
 READ9 :                       D9F4 C |  REL1 :                        DCA3 C |
 REL2 :                        DCAA C |  REL3 :                        DCB1 C |
 REL4 :                        DCB8 C |  REL5 :                        DCBF C |
*RELAXED :                        0 - |  RELEXP :                      DC9A C |
 RELSTR :                      DC72 C |  RELXPR :                      DC98 C |
 RESET :                       D000 C |  RESTOR :                      D9F6 C |
 RESTR :                       DC89 C |  RESTR1 :                      DA02 C |
 RESTRT :                      D421 C |  RETURN :                      DA85 C |
 REX1 :                        DCD3 C |  REX2 :                        DCD6 C |
 REX3 :                        DCD8 C |  REX4 :                        DCE5 C |
 REX5 :                        DCF2 C |  REX6 :                        DD01 C |
 REXPN :                       DD5B C |  REXPN1 :                      DD5D C |
 REXPR :                       DCC6 C |  RF1 :                         DD99 C |
 RF10 :                        DE45 C |  RF11 :                        DE54 C |
 RF12 :                        DE63 C |  RF13 :                        DE6E C |
 RF14 :                        DE73 C |  RF15 :                        DE7E C |
 RF16 :                        DE85 C |  RF17 :                        DE90 C |
 RF18 :                        DE9B C |  RF19 :                        DEB0 C |
 RF2 :                         DDA2 C |  RF20 :                        DECE C |
 RF21 :                        DED5 C |  RF3 :                         DDAB C |
 RF4 :                         DDB6 C |  RF5 :                         DDC1 C |
 RF6 :                         DDD0 C |  RF7 :                         DDDF C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 261 - 10/31/2025 04:19:39 PM


 RF8 :                         DE2F C |  RF9 :                         DE3A C |
 RFACTR :                      DD79 C |  RGHSTR :                      EC9E C |
 RGHTST :                      EBD3 C |  RGSTR1 :                      ECB8 C |
 RGSTR2 :                      ECBE C |  RGSTR3 :                      ECD9 C |
 RIGHT1 :                      EBDF C |  RIGHT2 :                      EBE7 C |
 RIGHT3 :                      EBF5 C |  RIGHT4 :                      EBFB C |
 RINDEX :                      DF4F C |  RND :                         FACC C |
 RND1 :                        FADB C |  RND2 :                        FB12 C |
 RNDF :            FFFFFFFFFFFFFFE6 - |  RNDX :            FFFFFFFFFFFFFFE5 - |
 RNDY :            FFFFFFFFFFFFFFE4 - |  RNUM :                        DD7B C |
 RNUM1 :                       DD88 C |  RNUM2 :                       DD92 C |
 RNUM3 :                       DD95 C |  RSTR :                        E4D4 C |
 RSTR1 :                       E4DE C |  RSTR2 :                       E4EB C |
 RT1 :                         DD12 C |  RT2 :                         DD1F C |
 RT3 :                         DD2C C |  RT4 :                         DD3B C |
 RT5 :                         DD4A C |  RTERM :                       DD10 C |
 RTERRN :                      D4A8 C |  RTFUNC :                      D4DC C |
 RTNEST :                      D4A6 C |  RTRN :                        DD78 C |
 RUBEND :                      E0AB C |  RUN :                         D9A0 C |
 RUN1 :                        D9A6 C |  SAV :                         E350 C |
 SAV1 :                        E35E C |  SAVEDO :                      E469 C |
 SAVFOR :                      E72B C |  SBROFF :          FFFFFFFFFFFFFFFC - |
 SBRSTK :                        F0 - |  SCALL :                       D3FF C |
 SCALL1 :                      D41F C |  SCALLS :                      D01E C |
 SCAN :                        E108 C |  SCAN1 :                       E13E C |
 SCAN2 :                       E155 C |  SCAN3 :                       E157 C |
 SCAN4 :                       E15D C |  SCAN5 :                       E167 C |
 SCAN6 :                       E176 C |  SCAN7 :                       E17C C |
 SCAN8 :                       E184 C |  SCAND :                       E14A C |
 SCANR :                       E12A C |  SCNRR :                       E1B3 C |
 SETZ :                        E61F C |  SFOR1 :                       E73A C |
 SFOR2 :                       E74D C |  SFOR3 :                       E750 C |
 SFOR4 :                       E752 C |  SGN :                         FB20 C |
 SGN1 :                        FB33 C |  SGN2 :                        FB39 C |
 SGN3 :                        FB3F C |  SHFTL :                       E09B C |
 SHFTR :                       E0CD C |  SIN :                         F9C2 C |
 SIN1 :                        F9CD C |  SIN2 :                        F9EA C |
 SIN4 :                        FA0E C |  SIN5 :                        FA1C C |
 SIN6 :                        FA2D C |  SIN7 :                        FA97 C |
 SNGL :                        DD70 C |  SNTX :                        E3F8 C |
 SPC :                         E5C2 C |  SPC1 :                        E5C6 C |
 SPEXEC :                      D47D C |  SPLINE :                      D4B1 C |
 SPLOAD :                      D457 C |  SPLOD2 :                      D4C9 C |
 SPRNUM :                      D210 C |  SPRTN :                       D4B9 C |
 SPRTN1 :                      D4BD C |  SPRVSR :                      D480 C |
 SPTEST :                      D45F C |  SPTST1 :                      D4AF C |
 SPTST2 :                      D4EA C |  SPTST3 :                      D53D C |
 SQRT :                        FB43 C |  SQRT1 :                       FB4B C |
 SQRT2 :                       FB6F C |  SQRT3 :                       FB7B C |
 SSCAN :                       E115 C |  SSCAN1 :                      E128 C |
 SSKP1 :                       E19B C |  SSKP2 :                       E1A9 C |
 STACK :                       F28E C |  STAT :                        D939 C |
 STAT0 :                       D936 C |  STATUS :                      FDDD C |
 STBACK :                      FF80 C |  STBCK :                       E674 C |
 STFLD :                       FC51 C |  STINIT :                      FF7D C |
 STKBASE :                     7C00 - |  STKIBUF :                      3B6 - |
 STKMID :                        80 - |  STKPHI :          FFFFFFFFFFFFFFA2 - |
 STKTOP :                       C00 - |  STPBCK :                      F4AE C |
 STPNT :                       E4F4 C |  STPNT1 :                      E4FC C |
 STRE1 :                       E664 C |  STREND :                      ED02 C |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 262 - 10/31/2025 04:19:39 PM


 STREX1 :                      DB94 C |  STREX2 :                      DB9B C |
 STREXP :                      DB92 C |  STRF :                        DB9D C |
 STRF1 :                       DBA2 C |  STRF10 :                      DC63 C |
 STRF2 :                       DBAB C |  STRF3 :                       DBC4 C |
 STRF4 :                       DBDD C |  STRF5 :                       DBFD C |
 STRF6 :                       DC1D C |  STRF7 :                       DC36 C |
 STRF8 :                       DC4F C |  STRF9 :                       DC5C C |
 STRNG :                       EDFA C |  STRPNT :                      ED42 C |
 STRT :                        E4BC C |  STVAR :                       E78A C |
 SUBOFF :          FFFFFFFFFFFFFFE3 - |  SUBSTK :                        1E - |
 SV_BASE :                     D400 - |  SV_LINE :                       30 - |
 SV_MSGOUT :       FFFFFFFFFFFFFFB4 - |  SV_RESTRT :       FFFFFFFFFFFFFFA0 - |
 SV_RTERRN :                     27 - |  SV_RTFUNC :                     5B - |
 SV_RTNEST :                     25 - |  SV_RTRN :                       38 - |
 SV_RTRN1 :                      3C - |  SV_SPLOAD :       FFFFFFFFFFFFFFD6 - |
 SV_VALERR :                     6B - |  SWAP :                        F035 C |
 SWAP1 :                       F039 C |  SWP1 :                        F727 C |
 SWPM :                        F986 C |  SWPMUL :                      F982 C |
 SYNTAX :                      D942 C |  SYNTX :                       E400 C |
 SYSRTN :                      D4AD C |  S_FLAG0 :                        1 - |
*S_SENSEA :                      10 - |  S_SENSEB :                      20 - |
 TAB :                         FDCB C |  TAB1 :                        FDD3 C |
 TAN :                         F9B2 C |  TEN :                         FABA C |
 TESTB6 :                      D506 C |  TESTLP :                      D4F0 C |
 TESTN :                       D53F C |  THEN :                        E3A2 C |
*TIME :               "04:19:39 PM" - |  TOKENS :                      D73D C |
 TOP :                         EEA3 C |  TOP1 :                        EEAE C |
 TOP2 :                        EEBA C |  TOP3 :                        EEC1 C |
*TRUE :                           1 - |  TSTBIT :                        40 - |
 TSTBITH :                     4000 - |  TSTN1 :                       D543 C |
 TSTN10 :                      D58D C |  TSTN11 :                      D5AB C |
 TSTN2 :                       D552 C |  TSTN3 :                       D554 C |
 TSTN4 :                       D55E C |  TSTN5 :                       D56F C |
 TSTN6 :                       D57A C |  TSTN7 :                       D57C C |
 TSTN8 :                       D584 C |  TSTN9 :                       D5D8 C |
 TTY_B1 :                        71 - |  TTY_B2 :                         0 - |
 TTY_B3 :                        99 - |  TTY_B4 :                         0 - |
 TTY_B5 :                         1 - |  TTY_B6 :                         0 - |
 TTY_B7 :                         0 - |  TTY_B8 :                        81 - |
 TTY_B9 :                         0 - |  T_ABS :                         AC - |
 T_AND :                         A3 - |  T_ASC :                         BD - |
 T_ATN :                         AD - |  T_AUTO :                        80 - |
 T_BYE :                         81 - |  T_CHR :                         C5 - |
 T_CLEAR :                       82 - |  T_CLOAD :                       83 - |
 T_COS :                         AE - |  T_CSAVE :                       84 - |
 T_DATA :                        8A - |  T_DEF :                         8B - |
 T_DIM :                         8C - |  T_DIV :                         A4 - |
 T_DO :                          8D - |  T_EDIT :                        85 - |
 T_ELSE :                        8E - |  T_END :                         8F - |
 T_EXOR :                        A5 - |  T_EXP :                         AF - |
 T_FN :                          B0 - |  T_FOR :                         90 - |
 T_FREE :                        BE - |  T_GE :                          AA - |
 T_GOSUB :                       91 - |  T_GOTO :                        92 - |
 T_IF :                          93 - |  T_INPUT :                       94 - |
 T_INT :                         B1 - |  T_LAST :                        89 - |
 T_LB :                          B2 - |  T_LE :                          A9 - |
 T_LEFT :                        C6 - |  T_LEN :                         BF - |
 T_LET :                         A2 - |  T_LG :                          B3 - |
 T_LINK :                        95 - |  T_LIST :                        86 - |
 T_LN :                          B4 - |  T_MID :                         C7 - |
 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 263 - 10/31/2025 04:19:39 PM


 T_MOD :                         A6 - |  T_NE :                          AB - |
 T_NEW :                         87 - |  T_NEXT :                        96 - |
 T_NOT :                         B5 - |  T_ON :                          97 - |
 T_OR :                          A7 - |  T_PAGE :                        98 - |
 T_PEEK :                        A8 - |  T_PI :                          B6 - |
 T_POKE :                        99 - |  T_POS :                         C0 - |
 T_PR :                          9B - |  T_PRINT :                       9A - |
 T_READ :                        9C - |  T_REM :                         9D - |
 T_RESTORE :                     9E - |  T_RETURN :                      9F - |
 T_RIGHT :                       C8 - |  T_RND :                         B7 - |
 T_RUN :                         88 - |  T_SGN :                         B8 - |
 T_SIN :                         B9 - |  T_SPC :                         C9 - |
 T_SQR :                         BA - |  T_STAR :                        CF - |
 T_STAT :                        A0 - |  T_STEP :                        C2 - |
 T_STR :                         CA - |  T_TAB :                         CB - |
 T_TAN :                         BB - |  T_THEN :                        C3 - |
 T_TO :                          C4 - |  T_TOP :                         C1 - |
 T_UNTIL :                       A1 - |  T_USING :                       CC - |
 T_VAL :                         BC - |  T_VER :                         CD - |
 T_VERS :                        89 - |  T_VERT :                        CE - |
 UFRACS :          FFFFFFFFFFFFFFE1 - |  UNTIL :                       DA47 C |
 UNTL :                        E496 C |  UNTL1 :                       E4A0 C |
 UP :                          E264 C |  UP1 :                         E270 C |
 UP2 :                         E295 C | *USETTY :                         1 - |
 USE_CASS :                       2 - |  USING :                       FE9D C |
 USING2 :                      FEDB C |  USING3 :                      DB1D C |
 USNG1 :                       FEA3 C |  USNG2 :                       FEAF C |
 USNG21 :                      FEFC C |  USNG22 :                      FF08 C |
 USNG23 :                      FF0F C |  USNG24 :                      FF19 C |
 USNG25 :                      FF1D C |  USNG26 :                      FF25 C |
 USNG27 :                      FF35 C |  USNG28 :                      FF3B C |
 USNG29 :                      FF3E C |  USNG2A :                      FF52 C |
 USNG2B :                      FF60 C |  USNG3 :                       FEC1 C |
 USNG31 :                      DB2D C |  USNG32 :                      DB37 C |
 USNG4 :                       FECD C |  USNG5 :                       FED7 C |
 UTOTAL :          FFFFFFFFFFFFFFE2 - |  VALER1 :                      D58B C |
 VALER2 :                      D521 C |  VALERR :                      D4EC C |
 VALSTR :                      FBBB C |  VAR1 :                        E7C8 C |
 VAR2 :                        E7D2 C |  VAR3 :                        E7DE C |
 VAR4 :                        E7ED C |  VAR5 :                        E7FC C |
 VAR6 :                        E7FF C |  VARERR :                      E5AB C |
 VARFND :                      E7B6 C |  VARSBUF :                      100 - |
 VER1 :                        EF5F C |  VERMSG :                      D003 C |
 VERS :                        EF51 C | *VERSION :                     142F - |
 VERSTR :                      D013 C |  VERT :                        F23F C |
 VERT1 :                       F241 C |  VERT2 :                       F24B C |
 VERT3 :                       F24F C |  VSTRNG :                      FDA2 C |
 XCHPNT :                      E91E C |  XFER :                        E396 C |
 XFER1 :                       E39C C |  ZERO :                        D287 C |
 _BS :                            8 - |  _CR :                            D - |
*_CTLC :                          3 - |  _CTLK :                          B - |
 _CTLL :                          C - |  _CTLO :                          F - |
 _CTLR :                         12 - |  _CTLX :                         18 - |
 _FF :                            C - |  _HTAB :                          9 - |
 _LF :                            A - |  _PRMPT :                       '>' - |
 _QMARK :                       '?' - |

   1064 symbols
     29 unused symbols

 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 264 - 10/31/2025 04:19:39 PM


 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 265 - 10/31/2025 04:19:39 PM


  Defined Macros:
  ---------------

CALL                                  | DO                                   
GOTO                                  | ILCALL                               
ILRTRN                                | JS                                   
LDPI                                  | MESG                                 
MESGCR                                | RTRN                                 
SYSCALL                               | TOKEN                                
TSTNUM                                | TSTSTR                               
TSTVAR                                |

     15 macros

 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 266 - 10/31/2025 04:19:39 PM


  Defined Functions:
  ------------------

CALC_DELAY_A                          | CALC_DELAY_D                         
CALC_DELAY_CYCLES                     | H                                    
L                                     |

 AS V1.42 Beta [Bld 296] - Source File NIBLFP.asm - Page 267 - 10/31/2025 04:19:39 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.08 seconds assembly time

   7970 lines source file
  15181 lines incl. macro expansions
      2 passes
      0 errors
     27 warnings
