; NIBLFP.ASM originally written by Erich Küster, late seventies of last century
; some additions 40 years later by Fred N. van Kempen, Fort Wayne, Indiana / USA
;  assembler listing
;  some labels are fallen into oblivion and substituted by L_[hex address]
;  rewritten 2023 for macro assembler asl
; the macro-assembler used here is a free tool by Alfred Arnold, Aachen / Germany
; found at <http://john.ccac.rwth-aachen.de:8000/as/>
; GitHub repositories:
; original resurrected and slightly modified version of NIBLFP by Erich Küster at
;  <https://github.com/ekuester/SCMP-INS8060-NIBL-FloatingPoint-TinyBASIC-Interpreter>
; a completely rewritten, modernized and commented version by Fred N. van Kempen
;  will be found soon at <https://github.com/VARCem/VARCem8>
;
; AUTHORS:	National Semiconductor, NIBL, 1975
;		Erich Küster (ekuester), rewrite, add floating point, late 1970/early 1980's
;		Fred N. van Kempen (waltje), cleanup-rewrite, 2023
;
; first published: Krefeld / Germany May 8, 2023
;
; 2023/08/08	ekuester
;		changes start address to X'D000, supervisor is now at X'D180,
;		 replaced spaces by tab stopps at positions 9, 17, 33 if possible
;
; Last update:	2024/02/07, ekuester

L FUNCTION VAL16, (VAL16 & 0xFF)
H FUNCTION VAL16, ((VAL16 >> 8) & 0xFF)

; ILLEGAL OPCODES USED FOR EMULATION (DEFINE EMULA BEFORE BUILD)
	IFDEF EMULA
WRCHAR	= 0x20			; WRITE CHAR TO TTY
RDCHAR	= 0x21			; READ CHAR FROM TTY
	MESSAGE "will generate emulation code"
	ENDIF

JS    MACRO  P,VAL		; JUMP TO SUBROUTINE
	LDI  H(VAL-1)
	XPAH P
	LDI  L(VAL-1)
	XPAL P
	XPPC P
      ENDM

LDPI  MACRO  P,VAL		; LOAD POINTER
	LDI  L(VAL)
	XPAL P
	LDI  H(VAL)
	XPAH P
      ENDM

CALL  MACRO  P,VAL		; CALL SUBROUTINE
	XPPC P
	DB   H(VAL)
	DB   L(VAL)
      ENDM

RTRN  MACRO  P,VAL		; RETURN FROM SUBROUTINE
	XPPC P
	DB   0
      ENDM

;******************************************************
;*     WE ARE TIED DOWN TO A LANGUAGE WHICH	      *
;*     MAKES UP IN OBSCURITY WHAT IT LACKS	      *
;*     IN STYLE.				      *
;*		       - TOM STOPPARD		      *
;*     CONFIRMED				      *
;*		       - ERICH KUESTER		      *
;******************************************************

; SET THE DESIRED LOAD (3 x 4096 BYTES) ADDRESS
BASE	= 0xD000

; SET STACKPOINTER
STACKP	= 0x7C00

; Supervisor jumps using P3 offsetting.
STKPHI		= (RESTRT -SPRVSR +1)	; STORAGE FOR STACKPOINTER HIGH
SV_RESTRT	= (RESTRT -SPRVSR -1)	; X'D106
SV_ERROUT	= (ERROUT -SPRVSR -1)	; X'D11F
SV_SPLOAD	= (SPLOAD -SPRVSR -1)	; X'D157
SV_RTNEST	= (RTNEST -SPRVSR -1)	; X'D1A0
SV_RTERRN	= (RTERRN -SPRVSR -1)	; X'D1A2
SV_RTRN		= (RTN -SPRVSR -1)	; X'D1A7
SV_RTN1		= (RTN1 -SPRVSR -1)	; X'D1AB
SV_SPPULL	= (SPPULL -SPRVSR -1)	; X'D1C8
SV_VALERR	= (VALERR -SPRVSR -1)	; X'D1D8

JMPBIT	=  0x80
TSTBIT	=  0x40			; I.L. INSTRUCTION FLAGS
CALBIT	=  0x20
P1	=  1			; SC/MP POINTER ASSIGNMENTS
P2	=  2
P3	=  3
EREG	=  -128			; THE EXTENSION REGISTER

; DESIRED BAUD RATE SET IN TTY_INIT

	INCLUDE "TTY_INIT.inc"

;**************************************
;*   NIBLFP - INITIALIZATION OF NIBL  *
;**************************************

	ORG    BASE
ENTRY:	DINT
	LDPI	P3, SPRVSR	; POINT P3 TO SUPERVISOR
	LDI	0x1E
	XPAL	P2
	LD	STKPHI(P3)	; SET STACKPOINTER HI
	XPAH	P2		; LOAD P2 WITH STACKP+0x1E
	LDI	0
	ST	1(P2)
	LDI	0
	ST	(P2)
	LDI	0x80
	XPAL	P2
	ST	-29(P2)
	LDI	1
	ST	-10(P2)
	XPAL	P1
	LDI	0x70		; SET PAGE 7
AGAIN:	XPAH	P1
	LDI	0x0D		; 'CR'
	ST	(P1)
	LD	3(P1)
	JZ	MARKP
	XAE
	LD	EREG(P1)
	XRI	0x0D		; IS IT 'CR'
	JZ	ISCR
MARKP:	LDI	0xFF		; MARK PAGE AS EMPTY
	ST	1(P1)
	ST	2(P1)
ISCR:	XPAH	P1
	SCL
	CAI	0x10		; DECREASE PAGE NO BY 1
	JNZ	AGAIN
	LDI	L(LETSGO)
	XPAL	P0		; SET PC LOW

	ORG	BASE+0x0FF
LETSGO:	NOP
	LDI	0x0C		; CLEAR SCREEN
	CALL	P3,PUTASC
RESTRT:	LDI	H(STACKP)	; BASIC STACK
	ORI	1
	XPAH	P1
	LDI	L(STACKP)
	XPAL	P1		; SET P1 WITH VARIABLES' BUFFER
	LDI	0
	ST	(P1)		; MARK AS EMPTY
	ST	127(P2)
	LDI	0x1F
	ST	-94(P2)
	CALL	P3,CLRSTK
	LDI	0x1C		; INIT CALL/RTRN STACK
	ST	-29(P2)
	LDE			; ADDRESS LOW 'READY' IN E
ERROUT:	XPAL	P1
	LDI	H(MESGS)	; ADDRESS HIGH MESSAGES
	XPAH	P1
SPACE:	LDI	' '
	CALL	P3,PUTASC
TXTOUT:	LD	@1(P1)
	CALL	P3,PUTASC
	JP	TXTOUT
	LDI	L(M_ERR)	; ADDRESS LOW 'ERROR'
	XPAL	P1
	JP	SPACE
	CALL	P3,LNUM
	NOP			; DO NOT DELETE, ENSURES SPRVSR AT X'D180
	LDI	0x48
	ST	(P2)
	LDI	0x3E		; PROMPT >
	ST	127(P2)
	LDI	0xB1
	ST	-7(P2)
	LDI	0x60
	ST	-3(P2)
	LDI	H(ILTABLE)
	ST	-2(P2)
	LDI	L(ILTABLE)
	ST	-1(P2)
	CALL	P3,LINE
	LDI	0x1A		; SET CALL/RTRN STACK
	ST	-29(P2)
SPLOAD:	LD	-1(P2)
	XPAL	P3
	LD	-2(P2)
	ORI	0xC0		; ENSURE THAT BIT7, BIT6 ARE SET
	XPAH	P3
SPTEST:	LD	1(P3)
	ST	-1(P2)
	LD	@2(P3)
	JZ	SPPULL
	ST	-2(P2)
	ANI	0xE0		; ONLY BIT7,BIT6,BIT5
	JZ	SPPUSH		; NO BIT SET
	JP	SPLOAD
	XRI	0xE0
	JNZ	TESTLP
	LD	-1(P3)
	XPAL	P3
	ST	-1(P2)
	LD	-2(P2)
	XPAH	P3
	ST	-2(P2)
SPEXEC:	LD	@-1(P3)
	LDE			; HAS FIXED ADDRESS AT X'D17F
SPRVSR:	XPPC	P3		; SUPERVISOR FOR CALL AND RETURN
	XAE
	LD	@1(P3)
	LD	(P3)
	JZ	RTN		; IS IT A RETURN?
	LD	-29(P2)
	XPAL	P2
SUPRVS:	LD	@2(P3)
	ST	-2(P2)
CALL:	LD	-1(P3)		; PREPARE CALL ADDRESS
	XPAL	P3
	ST	@-1(P2)
	LD	-1(P2)
	XPAH	P3
	ST	@-1(P2)
	LDI	0x80
	XPAL	P2
	ST	-29(P2)
	JNZ	SPEXEC		; DECREASE P3 AND EXECUTE
RTNEST:	LDI	L(M_NEST)	; 'NEST ERROR'
RTERRN:	XAE			; RETURN FROM ERROR
	LDI	0x1E		; RESET CALL/RTRN STACK
	JMP	RTN1
RTN:	ILD	-29(P2)
	ILD	-29(P2)
RTN1:	XPAL	P2
RTN2:	LD	-1(P2)
	XPAL	P3
	LD	-2(P2)
	XPAH	P3
	LDI	0x80
	XPAL	P2
	JMP	SPEXEC
SPPUSH:	DLD	-7(P2)
	DLD	-7(P2)
	JP	RTNEST
	XPAL	P2
	XPAL	P3
	ST	1(P2)
	XPAH	P3
	ST	(P2)
	XPAL	P3
	XPAL	P2
SPLOD1:	JMP	SPLOAD
SPPULL:	ILD	-7(P2)
	ILD	-7(P2)
	XPAL	P2
	LD	-1(P2)
	XPAL	P3
	LD	-2(P2)
	XPAH	P3
	LDI	0x80
	XPAL	P2
SPTST1:	JMP	SPTEST
VALERR:	LDI	L(M_VALU)	; 'VALUE' ERROR
	JMP	RTERRN
TESTLP:	LD	@1(P1)
	XRI	' '
	JZ	TESTLP
	LD	-2(P2)
	ANI	0x60		; ONLY BIT6,BIT5
	JNZ	TESTB6
	LD	-1(P1)
	XOR	@1(P3)
	JZ	SPTST1
	LD	@-1(P1)
	JMP	SPLOD1
TESTB6:	XRI	0x40		; IS TSTBIT (BIT6) = 0?
	JZ	TESTN		; TEST IF NUMBER
	LD	-1(P1)
	XAE
	SCL
	LDE
	CAI	0x5B
	JP	LVTST1
	ADI	0x1A
	JP	LKVAR
LVTST1:	LD	-2(P2)
	ANI	0xDF
	ST	-2(P2)
LVTST2:	LD	@-1(P1)
	JMP	SPLOD1
LKVAR:	SCL
	LD	(P1)
	CAI	0x5B
	JP	LVTST3
	ADI	0x1A
	JP	SPTST1
	SCL
	LD	(P1)
	CAI	0x3A
	JP	LVTST3
	ADI	0x0A
	JP	SPTST1
LVTST3:	LDE
	ORI	0x80
	XAE
SPTST2:	JMP	SPTST1
TESTN:	ST	-24(P2)
	LD	-1(P1)
NUM:	SCL
	CAI	0x3A
	JP	NUM2
	ADI	0x0A
	JNZ	NUM1
	ILD    -24(P2)
	LD	@1(P1)
	JMP	NUM
NUM1:	JP	NUM3
NUM2:	LD	-24(P2)
	JZ	LVTST2
	LD	@-1(P1)
	LDI	0
	ST	-24(P2)
NUM3:	XAE
	LD	-3(P2)
	XPAL	P2
	LDI	0x96
	ST	@-04(P2)
	LDI	0
	ST	1(P2)
	ST	2(P2)
	LDE
	ST	3(P2)
NUM4:	SCL
	LD	@1(P1)
	CAI	0x3A
	JP	NUM5
	ADI	0x0A
	JP	NUM9
NUM5:	LD	@-1(P1)
NUM6:	LD	1(P2)
	ADD	1(P2)
	XOR	1(P2)
	JP	NUM8
NUM7:	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SPTST2
NUM8:	LD	(P2)
	JZ	NUM7
	DLD	(P2)
	CCL
	LD	3(P2)
	ADD	3(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	2(P2)
	ST	2(P2)
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	JMP	NUM6
NUM9:	XAE
	CCL
	LD	3(P2)
	ADD	3(P2)
	ST	3(P2)
	ST	-1(P2)
	LD	2(P2)
	ADD	2(P2)
	ST	2(P2)
	ST	-2(P2)
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	ST	-3(P2)
	LDI	0x04
	ST	-4(P2)
NUM10:	LD	3(P2)
	ADD	-1(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	-2(P2)
	ST	2(P2)
	LD	1(P2)
	ADD	-3(P2)
	ST	1(P2)
	DLD	-4(P2)
	JNZ	NUM10
	XAE
	ADD	3(P2)
	ST	3(P2)
	LDE
	ADD	2(P2)
	ST	2(P2)
	LDE
	ADD	1(P2)
	ST	1(P2)
	JP	NUM4
	LDI	H(SPRVSR)
	XPAH	P0		; LONG JUMP TO VALERR

;************************************
;*   PRINT USING ROUTINE (PART 3)   *
;************************************
USING3:	LD	@-1(P1)
	XRI	'.'
	JZ	USING3
	LD	@1(P1)
	XRI	'E'
	JZ	USNG31
	LD	-1(P1)
	XRI	0xA0
	JNZ	USNG32
USNG31:	LDI	'0'
	CALL	P3,PUTASC
	DLD	-21(P2)
	JNZ	USNG31
	JMP	SV_RTRN(P3)
USNG32:	LD	@-1(P1)
	CALL	P3,PUTASC
	DLD	-21(P2)
	JNZ	USING3
	JMP	SV_RTRN(P3)

;***************************
;* MESSAGE AT LINE NUMBER  *
;***************************
LNUM:	LDI	1
	XAE
	SIO
	ILD	127(P2)		; ONLY IF
	JP	SV_RTRN(P3)	;  HIGH BIT SET
	LDI	' '
	CALL	P3,PUTASC
	LDI	'A'
	CALL	P3,PUTASC
	LDI	'T'
	CALL	P3,PUTASC
	CALL	P3,PRNUM	; PRINT LINE NUMBER
	JMP	SV_RTRN(P3)


;************************************
;*   PRINT USING ROUTINE (PART 2)   *
;************************************
USING2:	LDI	0
	ST	-95(P2)
	ST	-96(P2)
USNG23:	LD	@1(P1)
	XRI	' '		; TEST FOR ' '
	JZ	USNG23
	LD	-1(P1)
	XRI	'#'		; TEST FOR '#'
	JNZ	USNG27
USNG24:	ILD	-96(P2)
	LD	@1(P1)
	XRI	'#'		; TEST FOR '#'
	JZ	USNG24
	XRI	0x0F		; TEST FOR ','
	JNZ	USNG26
	LD	-96(P2)
	ORI	0x80
	ST	-96(P2)
USNG25:	ILD	-96(P2)
	LD	@1(P1)
	XRI	'#'
	JNZ	USNG26
	ILD	-95(P2)
	JMP	USNG25
USNG26:	LD	-1(P1)
	XRI	'"'		; TEST FOR '"'
	JZ	SV_RTRN(P3)
USNG27:	LDI	L(M_SNTX)	; 'SNTX ERROR'
	JMP	SV_ERROUT(P3)


;***************************
;*   PUT CHAR TO STDOUT	   *
;***************************
	ORG	BASE+0x0450
PUTASC:
	IFDEF	EMULA
	DB	WRCHAR
	ELSE
	INCLUDE "TTY_PUTASC.inc"
	LD	-127(P2)
	XAE
	XRI	0x0C
	JNZ	PUTA3
	DLY	255
	JMP	SV_RTRN(P3)		; JUMP RTRN
PUTA3:	ANI	0x60
	JNZ	SV_RTRN(P3)		; JUMP RTRN
	DLY	0x10
	ENDIF
	JMP	SV_RTRN(P3)		; JUMP RTRN

;***************************
;*   GET CHAR FROM STDIN   *
;***************************
	ORG    BASE+0x04CE
GETASC:
	IFDEF EMULA
	DB	RDCHAR
	ELSE
	INCLUDE "TTY_GETASC.inc"
	ANI 	0x40		; TEST FOR UPPERCASE
	JZ	UPPERC
	LDE
	ANI	0x5F		; CONVERT TO UPPERCASE
	XAE
UPPERC:	LDE
	ENDIF
	XRI	3		; TEST FOR CONTROL-C
	JNZ	SV_RTRN(P3)	; JUMP RTRN
	LDI	L(M_BRK)	; 'BREAK'
	JMP	SV_ERROUT(P3)


;********************************
;* TAPE ROUTINES SC/MP II 2 MHz *
;********************************
	ORG    BASE+0x55B
BYTOUT:	ST     -96(P2)
	LDI    0x0B
	ST     -21(P2)
	LDI    0
	XAE
	SIO
	XAE
	DLD    -95(P2)
	LD     -96(P2)
	XAE
BYTE1:	LDI    0x17
	DLY    1
	LD     -94(P2)
	ST     -95(P2)
BYTE2:	DLD    -95(P2)
	JNZ    BYTE2		; to X'D473
	SIO
	LDE
	ORI    0x80
	XAE
	DLD    -21(P2)
	JNZ    BYTE1		; to X'D46B
	XPPC   P3
	JMP    BYTOUT		; to X'D45B

LDBYTE:	LDI    0xFF
	XAE
	SIO
	LDE
	JP     LD1		; to X'D48C
	JMP    LDBYTE		; to X'D483
LD1:	LDI    0x78
	DLY    0
	LDI    0xFF
	XAE
	LD     -94(P2)
	SR
	ST     -95(P2)
LD2:	DLD    -95(P2)
	JNZ    LD2		; to X'D498
	LDI    0x08
	ST     -21(P2)
LD3:	LD     -94(P2)
	ST     -95(P2)
	LDI    0x24
	DLY    1
LD4:	DLD    -95(P2)
	JNZ    LD4		; to X'D4A8
	SIO
	DLD    -21(P2)
	JNZ    LD3		; to X'D4A0
	LD     -94(P2)
	ST     -95(P2)
LD5:	DLD    -95(P2)
	JNZ    LD5		; to X'D4B5
	LDE
	XPPC   P3
	JMP    LDBYTE


;***************************
;*	 MESSAGES	   *
;***************************

MESG	MACRO A,B
	   DB  A
	   DB  B|0x80
	ENDM

	ORG	BASE+0x061C
; NOTE:	in principle relocatable, if bit7 in low byte of M_ERR and M_RDY is set
MESGS	= $			; generate address for loading within code for clarity
M_DEF:	MESG	"DE",'F'	; original 0x1C
M_AREA:	MESG	"ARE",'A'	; original 0x1F
M_ARG:	MESG	"AR",'G'	; original 0x23
M_BLK:	MESG	"BL",'K'	; original 0x26
M_CASS:	MESG	"CAS",'S'	; original 0x29
M_CHAR:	MESG	"CHA",'R'	; original 0x2D
M_DIM:	MESG	"DI",'M'	; original 0x31
M_DATA:	MESG	"DAT",'A'	; original 0x34
M_DIV0:	MESG	"DIV",'0'	; original 0x38
M_ENDQ:	MESG	"END",'"'	; original 0x3C
M_FOR:	MESG	"FO",'R'	; original 0x40
M_HEX:	MESG	"HE",'X'	; original 0x43
M_NEST:	MESG	"NES",'T'	; original 0x46
M_NEXT:	MESG	"NEX",'T'	; original 0x4A
M_NOGO:	MESG	"NOG",'O'	; original 0x4E
M_OVRF:	MESG	"OVRF",'L'	; original 0x52
M_RAM:	MESG	"RA",'M'	; original 0x57
M_RDIM:	MESG	"REDI",'M'	; original 0x5A
M_RTRN:	MESG	"RTR",'N'	; original 0x5F
M_SNTX:	MESG	"SNT",'X'	; original 0x63
M_STMT:	MESG	"STM",'T'	; original 0x67
M_UNTL:	MESG	"UNT",'L'	; original 0x6B
M_VALU:	MESG	"VAL",'U'	; original 0x6F
M_VAR:	MESG	"VA",'R'	; original 0x73
M_VRST:	MESG	"VARST",'K'	; original 0x76
M_BRK:	MESG	"BREA",'K'	; original 0x7C
M_ERR:	MESG	"ERRO",'R'	; original 0x81
M_RDY:	MESG	"READ",'Y'	; original 0x86

;***************************
;*	TOKEN TABLE	   *
;***************************

TOKEN	MACRO A,B,C
	IF A == 78
	   DB  94
	ELSE
	   DB  A|0x80
	ENDIF
	   DB  B
	   DB  C|0x80
	ENDM

	ORG	BASE+0x6A0
TOKENS:	TOKEN	0,"AUT",'O'	; X'80
	TOKEN	1,"BY",'E'	; X'81
	TOKEN	2,"CLEA",'R'	; X'82
	TOKEN	3,"CLOA",'D'	; X'83
	TOKEN	4,"CSAV",'E'	; X'84
	TOKEN	5,"EDI",'T'	; X'85
	TOKEN	6,"LIS",'T'	; X'86
	TOKEN	7,"NE",'W'	; X'87
	TOKEN	8,"RU",'N'	; X'88
	TOKEN	9,"DAT",'A'	; X'89
	TOKEN	10,"DE",'F'	; X'8A
	TOKEN	11,"DI",'M'	; X'8B
	TOKEN	12,"D",'O'	; X'8C
	TOKEN	13,"ELS",'E'	; X'8D
	TOKEN	14,"EN",'D'	; X'8E
	TOKEN	15,"FO",'R'	; X'8F
	TOKEN	16,"GOSU",'B'	; X'90
	TOKEN	17,"GOT",'O'	; X'91
	TOKEN	18,"I",'F'	; X'92
	TOKEN	19,"INPU",'T'	; X'93
	TOKEN	20,"LIN",'K'	; X'94
	TOKEN	21,"MA",'T'	; X'95
	TOKEN	22,"NEX",'T'	; X'96
	TOKEN	23,"O",'N'	; X'97
	TOKEN	24,"PAG",'E'	; X'98
	TOKEN	25,"POK",'E'	; X'99
	TOKEN	26,"PRIN",'T'	; X'9A
	TOKEN	27,"P",'R'	; X'9B
	TOKEN	28,"REA",'D'	; X'9C
	TOKEN	29,"RE",'M'	; X'9D
	TOKEN	30,"RESTOR",'E'	; X'9E
	TOKEN	31,"RETUR",'N'	; X'9F
	TOKEN	32,"STA",'T'	; X'A0
	TOKEN	33,"UNTI",'L'	; X'A1
	TOKEN	34,"LE",'T'	; X'A2
	TOKEN	35,"AN",'D'	; X'A3
	TOKEN	36,"DI",'V'	; X'A4
	TOKEN	37,"EXO",'R'	; X'A5
	TOKEN	38,"MO",'D'	; X'A6
	TOKEN	39,"O",'R'	; X'A7
	TOKEN	40,"PEE",'K'	; X'A8
	TOKEN	41,"<",'='	; X'A9
	TOKEN	42,">",'='	; X'AA
	TOKEN	43,"<",'>'	; X'AB
	TOKEN	44,"AB",'S'	; X'AC
	TOKEN	45,"AT",'N'	; X'AD
	TOKEN	46,"CO",'S'	; X'AE
	TOKEN	47,"EX",'P'	; X'AF
	TOKEN	48,"F",'N'	; X'B0
	TOKEN	49,"IN",'T'	; X'B1
	TOKEN	50,"L",'B'	; X'B2
	TOKEN	51,"L",'G'	; X'B3
	TOKEN	52,"L",'N'	; X'B4
	TOKEN	53,"NO",'T'	; X'B5
	TOKEN	54,"P",'I'	; X'B6
	TOKEN	55,"RN",'D'	; X'B7
	TOKEN	56,"SG",'N'	; X'B8
	TOKEN	57,"SI",'N'	; X'B9
	TOKEN	58,"SQ",'R'	; X'BA
	TOKEN	59,"TA",'N'	; X'BB
	TOKEN	60,"VA",'L'	; X'BC
	TOKEN	61,"AS",'C'	; X'BD
	TOKEN	62,"FRE",'E'	; X'BE
	TOKEN	63,"LE",'N'	; X'BF
	TOKEN	64,"PO",'S'	; X'C0
	TOKEN	65,"TO",'P'	; X'C1
	TOKEN	66,"STE",'P'	; X'C2
	TOKEN	67,"THE",'N'	; X'C3
	TOKEN	68,"T",'O'	; X'C4
	TOKEN	69,"CHR",'$'	; X'C5
	TOKEN	70,"LEFT",'$'	; X'C6
	TOKEN	71,"MID",'$'	; X'C7
	TOKEN	72,"RIGHT",'$'	; X'C8
	TOKEN	73,"SP",'C'	; X'C9
	TOKEN	74,"STR",'$'	; X'CA
	TOKEN	75,"TA",'B'	; X'CB
	TOKEN	76,"USIN",'G'	; X'CC
	TOKEN	77,"VER",'T'	; X'CD
	TOKEN	78,"*",'*'	; X'CE
	DB	0

JMPBITH =	JMPBIT*256
TSTBITH =	TSTBIT*256
CALBITH =	CALBIT*256

TSTSTR	MACRO	FAIL,A
	DB	H(FAIL - TSTBITH)
	DB	L(FAIL)
	DB	A
	ENDM

TSTNUM	MACRO	FAIL
	DB	H(FAIL)
	DB	L(FAIL)
	ENDM

TSTVAR	MACRO	ADR
	DB	H(ADR - CALBITH)
	DB	L(ADR)
	ENDM

GOTO	MACRO	ADR
	DB	H(ADR - JMPBITH)
	DB	L(ADR)
	ENDM

ILCALL	MACRO	ADR
	DB	H(ADR - (JMPBITH + TSTBITH))
	DB	L(ADR)
	ENDM

DO	MACRO	ADR
	IFNB	ADR
	DB	H(ADR)
	DB	L(ADR)
	SHIFT
	DO	ALLARGS
	ENDIF
	ENDM

;*************************************
;*      I. L. TABLE PREAMBLE         *
;*************************************
	ORG	BASE+0x800
; NOTE:	in principle relocatable
ILTABLE	= $			; generate address for loading within code for clarity
PROMPT:	DO	GETLIN
PRMPT1:	TSTSTR	BEGIN,0x0D
	GOTO	PROMPT
BEGIN:	DO	SCANR
	TSTNUM	START
	DO	POPAE
	DO	FNDLBL
	DO	INSRT
	GOTO	PROMPT
;*************************************
;*         I. L. LOOKUP TABLE        *
;*     FOR COMMANDS AND STATEMENTS   *
;*************************************
;NOTE:	DO NOT separate preamble and lookup table
START:	DO	NEXT		; read next line
	GOTO	AUTO		; X'80 FIRST ENTRY IN LOOKUP TABLE
	DO	BYE		; X'81
	DO	CLEAR		; X'82
	DO	CLOAD		; X'83
	GOTO	CSAVE		; X'84
	GOTO	EDIT		; X'85
	GOTO	LIST		; X'86
	GOTO	NEW		; X'87
MIDDLE:	GOTO	RUN		; X'88 POSITION OF 'RUN'
	DO	IGNRE		; X'89 POSITION OF 'DATA'
	DO	IGNRE		; X'8A POSITION OF 'DEF'
	GOTO	DIM		; X'8B
	GOTO	DO		; X'8C
	DO	IGNORE		; X'8D POSITION OF 'ELSE'
	DO	BRK		; X'8E
	GOTO	FOR		; X'8F
	GOTO	GOSUB		; X'90
	GOTO	GOTO		; X'91
	GOTO	IF		; X'92
	GOTO	INPUT		; X'93
	GOTO	LINK		; X'94
	GOTO	SYNTAX		; X'95 POSITION OF 'MAT' ( NOT IMPLEMENTED )
	GOTO	NEXTG		; X'96
	GOTO	ON		; X'97
	GOTO	PAGE		; X'98
	GOTO	POKE		; X'99
	GOTO	PRINT		; X'9A POSITION OF 'PRINT'
	GOTO	PRINT		; X'9B POSITION OF 'PR'
	GOTO	READ		; X'9C
	DO	IGNORE		; X'9D POSITION OF 'REM'
	GOTO	RESTOR		; X'9E
	GOTO	RETURN		; X'9F
	GOTO	STAT		; X'A0
	GOTO	UNTIL		; X'A1
ENDS:	TSTVAR	PAGE0		; X'A2 FORMAL POSTION OF 'LET'
;*************************************
;*         MAIN I. L. TABLE          *
;*************************************
	DO	FNDVAR		; find variable
	DO	DEFVAR
	TSTSTR	DOLLAR,'('
	ILCALL	INDEX
LET:	TSTSTR	SYNTAX,'='	;
	ILCALL	REXPR
	DO	STVAR
	DO	DNE
DOLLAR:	TSTSTR	LET,'$'
	DO	LDVAR
	DO	FIX
	TSTSTR	SYNTAX,'='
	ILCALL	STREXP
	DO	DNE
PAGE0:	TSTSTR	STAT0,0x98	; 'PAGE'
PAGE:	TSTSTR	SYNTAX,'='
	ILCALL	REXPR
	DO	DONE
	DO	POPAE
	DO	NUPAGE
	DO	LKPAGE
	DO	NXT
STAT0:	TSTSTR	SYNTAX,0xA0	; 'STAT'
STAT:	TSTSTR	SYNTAX,'='
	ILCALL	REXPR
	DO	POPAE
	DO	MOVESR
SYNTAX:	DO	SYNT
LIST:	TSTNUM	LIST2
	DO	POPAE
	TSTSTR	LIST4,'-'
	TSTNUM	SYNTAX
	DO	FNDLBL
	DO	POPAE
LIST1:	DO	LST1
	GOTO	LIST1
LIST2:	DO	CHPAGE
LIST3:	DO	LST2
	GOTO	LIST3
LIST4:	DO	FNDLBL
	DO	LST1
	DO	NXT
NEW:	TSTNUM	NEW1
	DO	POPAE
	DO	NUPAGE
	GOTO	NEW2
NEW1:	DO	NUPGE1
NEW2:	DO	DONE
	DO	NEWPGM
	DO	NXT2
FOR:	DO	CKMODE
	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	SYNTAX,'='
	ILCALL	REXPR
	TSTSTR	SYNTAX,0xC4	; 'TO'
	ILCALL	REXPR
	TSTSTR	FOR1,0xC2	; 'STEP'
	ILCALL	REXPR
	GOTO	FOR2
FOR1:	DO	ONE
FOR2:	DO	DONE
	DO	SAVFOR
	DO	NXT
NEXTG:	DO	CKMODE
	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	NXTVAR
	DO	FADD
	DO	NXTV
	DO	DETPGE
RUN:	DO	DONE
	DO	CHPAGE
	DO	STRT
RUN1:	DO	NXT1
READ:	DO	CKMODE
	DO	LDDTA
READ1:	DO	NXTDTA
	DO	XCHPNT
	TSTVAR	LIST
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	READ5,'('
	ILCALL	INDEX
READ2:	DO	XCHPNT
	TSTSTR	READ3,'-'
	TSTNUM	READ9
	ILCALL	RNUM
	ILCALL	NEG
	DO	STVAR
	GOTO	READ7
READ3:	TSTSTR	READ4,'+'
READ4:	TSTNUM	READ9
	ILCALL	RNUM
	DO	STVAR
	GOTO	READ7
READ5:	TSTSTR	READ2,'$'
	DO	LDVAR
	DO	POPAE
	DO	XCHPNT
	TSTSTR	READ6,'"'
	DO	PUTSTR
	GOTO	READ7
READ6:	DO	INSTR
READ7:	DO	XCHPNT
	TSTSTR	READ8,','
	DO	XCHPNT
	GOTO	READ1
READ8:	DO	LDPNT
	DO	DNE
READ9:	DO	SNTX
RESTOR:	DO	CKMODE
	DO	FNDDTA
	TSTNUM	RESTR1
	DO	POPAE
	DO	FNDLBL
	DO	XCHPNT
RESTR1:	DO	LDPNT
	DO	DNE
INPUT:	DO	CKMODE
	TSTSTR	INPUT1,'"'
	DO	PRSTR
INPUT1:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	INPUT3,'$'
	DO	LDVAR
	DO	POPAE
	DO	GETLIN
	DO	ISTRNG
INPUT2:	DO	DNE
INPUT3:	DO	GETLIN
INPUT4:	DO	XCHPNT
	TSTSTR	INPUT5,'('
	ILCALL	INDEX
INPUT5:	DO	XCHPNT
	ILCALL	REXPR
	DO	STVAR
	DO	XCHPNT
	TSTSTR	INPUT2,','
	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	DO	XCHPNT
	TSTSTR	SYNTAX,','
	GOTO	INPUT4
DO:	DO	CKMODE
	DO	DONE
	DO	SAVEDO
UNTIL:	DO	CKMODE
	ILCALL	RELSTR
	DO	DONE
	DO	UNTL
LINK:	ILCALL	REXPR
	DO	POPAE
	DO	DONE
	DO	XCHPNT
	DO	MC
	DO	XCHPNT
	DO	NXT
ON:	ILCALL	REXPR
	DO	POPAE
	TSTSTR	ON1,0x90	; 'GOSUB'
	ILCALL	REXPR
	DO	GTO
	GOTO	GOSUB1
ON1:	TSTSTR	SYNTAX,0x91	; 'GOTO'
	ILCALL	REXPR
	DO	GTO
	GOTO	GOTO1
GOTO:	ILCALL	REXPR
	DO	DONE
	GOTO	GOTO1
GOSUB:	ILCALL	REXPR
	DO	DONE
GOSUB1:	DO	SAV
GOTO1:	DO	POPAE
	DO	FNDLBL
	DO	XFER
RETURN:	DO	DONE
	DO	RSTR
EDIT:	TSTNUM	SYNTAX
	DO	POPAE
	DO	FNDLBL
	DO	EDITR
	DO	INP
	GOTO	PRMPT1
AUTO:	TSTNUM	SYNTAX
	DO	POPAE
	TSTSTR	AUTO1,','
	DO	NUMTST
	GOTO	AUTO2
AUTO1:	DO	TEN
AUTO2:	DO	AUTONM
	DO	GETL
	DO	SCANR
	TSTNUM	AUTO3
	DO	POPAE
AUTO3:	DO	FNDLBL
	DO	INSRT
	DO	AUTON
	GOTO	AUTO2
IF:	ILCALL	RELSTR
	DO	CMPRE
	TSTNUM	RUN1
	DO	POPAE
	DO	FNDLBL
	DO	XFER
POKE:	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	DO	PUTBYT
	DO	DNE
PRINT1:	ILCALL	PREXP
	TSTSTR	PRINT2,','
	GOTO	PRINT1
PRINT2:	TSTSTR	PRINT3,';'
	DO	DNE
PRINT3:	DO	LINE
	DO	DNE
DIM:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	LODVAR
	DO	FIX
	DO	STFLD
	ILCALL	REXPR
	DO	FIX
	DO	DIMSN
	TSTSTR	SYNTAX,')'
	TSTSTR	INPUT2,','
	GOTO	DIM
NEG:	DO	STACK
	DO	FNEG
	DO	STBCK
CSAVE:	DO	BOTTOM
	DO	TOP
	DO	SAVE
	DO	ADDOUT

	DB	255,255,255,255,255,255

PRINT:	TSTSTR	PRINT1,0xCC	; 'USING'
	TSTSTR	SYNTAX,'"'
	DO	USING
USNG:	ILCALL	USEXP
	TSTSTR	US1,','
	GOTO	USNG
US1:	TSTSTR	US2,';'
	DO	DNE
US2:	DO	LINE
	DO	DNE
	DB	0

	ORG	BASE+0xB00
STREXP:	ILCALL	STRF
STREX1:	TSTSTR	STREX2,'&'
	ILCALL	STRF
	GOTO	STREX1
STREX2:	DO	POPSTR
STRF:	TSTSTR	STRF1,'"'
	DO	PUTST
STRF1:	TSTSTR	STRF2,0xC5	; 'CHR$'
	ILCALL	SNGL
	DO	FIX
	DO	CHRSTR
STRF2:	TSTSTR	STRF4,0xC6	; 'LEFT$'
	TSTSTR	SYNTAX,'('
	TSTSTR	STRF3,'"'
	DO	STPNT
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,')'
	DO	XCHPNT
	DO	LEFTST
STRF3:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	SYNTAX,'$'
	DO	LDVAR
	DO	FIX
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,')'
	DO	LFTSTR
STRF4:	TSTSTR	STRF6,0xC7	; 'MID$'
	TSTSTR	SYNTAX,'('
	TSTSTR	STRF5,'"'
	DO	STPNT
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,')'
	DO	XCHPNT
	DO	MIDST
STRF5:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	SYNTAX,'$'
	DO	LDVAR
	DO	FIX
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,')'
	DO	MIDSTR
STRF6:	TSTSTR	STRF8,0xC8	; 'RIGHT$'
	TSTSTR	SYNTAX,'('
	TSTSTR	STRF7,'"'
	DO	STPNT
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,')'
	DO	XCHPNT
	DO	RGHTST
STRF7:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	SYNTAX,'$'
	DO	LDVAR
	DO	FIX
	TSTSTR	SYNTAX,','
	ILCALL	REXPR
	DO	FIX
	TSTSTR	SYNTAX,')'
	DO	RGHSTR
STRF8:	TSTSTR	STRF9,0xCA	; 'STR$'
	ILCALL	SNGL
	DO	FNUM
	DO	FSTRNG
	DO	STBCK
STRF9:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	SYNTAX,'$'
	DO	LDVAR
	DO	FIX
	DO	MOVSTR
RELSTR:	DO	STRPNT
	TSTVAR	RELEXP
	DO	FNDVAR
	DO	POPDLR
	TSTSTR	RELXPR,'$'
	DO	LDVAR
	DO	FIX
	TSTSTR	SYNTAX,'='
	TSTSTR	RESTR,'"'
	DO	CMPRST
RESTR:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	SYNTAX,'$'
	DO	LDVAR
	DO	FIX
	DO	CMPSTR
RELXPR:	DO	XCHPNT
RELEXP:	ILCALL	REXPR
	TSTSTR	REL1,'='
	ILCALL	REXPR
	DO	EQU
REL1:	TSTSTR	REL2,0xAB	; '<>'
	ILCALL	REXPR
	DO	NEQ
REL2:	TSTSTR	REL3,'<'
	ILCALL	REXPR
	DO	LSS
REL3:	TSTSTR	REL4,0xA9	; '<='
	ILCALL	REXPR
	DO	LEQ
REL4:	TSTSTR	REL5,'>'
	ILCALL	REXPR
	DO	GTR
REL5:	TSTSTR	RTRN,0xAA	; '>='
	ILCALL	REXPR
	DO	GEQ
REXPR:	TSTSTR	REX1,'-'
	ILCALL	RTERM
	DO	STACK
	DO	FNEG
	DO	STBACK
	GOTO	REX3
REX1:	TSTSTR	REX2,'+'
REX2:	ILCALL	RTERM
REX3:	TSTSTR	REX4,'-'
	ILCALL	RTERM
	DO	STACK
	DO	FSUB
	DO	STBACK
	GOTO	REX3
REX4:	TSTSTR	REX5,'+'
	ILCALL	RTERM
	DO	STACK
	DO	FADD
	DO	STBACK
	GOTO	REX3
REX5:	TSTSTR	REX6,0xA5	; 'EXOR'
	ILCALL	RTERM
	DO	STACK
	DO	ALGEXP
	DO	EXOR
	DO	STBACK
	GOTO	REX3
REX6:	TSTSTR	RTRN,0xA7	; 'OR'
	ILCALL	RTERM
	DO	STACK
	DO	ALGEXP
	DO	OR
	DO	STBACK
	GOTO	REX3
RTERM:	ILCALL	REXPN
RT1:	TSTSTR	RT2,'*'
	ILCALL	REXPN
	DO	STACK
	DO	FMUL
	DO	STBACK
	GOTO	RT1
RT2:	TSTSTR	RT3,'/'
	ILCALL	REXPN
	DO	STACK
	DO	FDIV
	DO	STBACK
	GOTO	RT1
RT3:	TSTSTR	RT4,0xA3	; 'AND'
	ILCALL	REXPN
	DO	STACK
	DO	ALGEXP
	DO	AND
	DO	STBACK
	GOTO	RT1
RT4:	TSTSTR	RT5,0xA4	; 'DIV'
	ILCALL	REXPN
	DO	STACK
	DO	FDIV
	DO	INT
	DO	STBACK
	GOTO	RT1
RT5:	TSTSTR	RTRN,0xA6	; 'MOD'
	ILCALL	REXPN
	DO	STACK
	DO	FMOD
	DO	PSHSWP
	DO	FMUL
	DO	STBACK
	GOTO	RT1
REXPN:	ILCALL	RFACTR
REXPN1:	TSTSTR	RTRN,'^'
	ILCALL	RFACTR
	DO	STACK
	DO	SWAP
	DO	LOG2
	DO	FMUL
	DO	EXP2
	DO	STBACK
	GOTO	REXPN1
SNGL:	TSTSTR	SYNTAX,'('
	ILCALL	REXPR
	TSTSTR	SYNTAX,')'
RTRN:	DB	0
RFACTR:	TSTNUM	RF1
RNUM:	TSTSTR	RNUM1,'.'
	TSTNUM	RNUM1
	DO	STACK
	DO	FD10
	DO	FADD
	DO	STBACK
RNUM1:	TSTSTR	RTRN,'E'
	TSTSTR	RNUM2,'-'
	DO	NUMTST
	DO	FDIV11
RNUM2:	TSTSTR	RNUM3,'+'
RNUM3:	DO	NUMTST
	DO	FMUL11
RF1:	TSTVAR	RF2
	DO	FNDVAR
	ILCALL	RINDEX
	DO	LDVAR
	DB	0
RF2:	TSTSTR	RF3,'('
	ILCALL	RELSTR
	TSTSTR	SYNTAX,')'
	DB	0
RF3:	TSTSTR	RF4,0xAC	; 'ABS'
	ILCALL	SNGL
	DO	STACK
	DO	FABS
	DO	STBCK
RF4:	TSTSTR	RF5,0xAD	; 'ATN'
	ILCALL	SNGL
	DO	STACK
	DO	ATN
	DO	STBCK
RF5:	TSTSTR	RF6,0xAE	; 'COS'
	ILCALL	SNGL
	DO	STACK
	DO	PI2
	DO	FADD
	DO	SIN
	DO	STBCK
RF6:	TSTSTR	RF7,0xAF	; 'EXP'
	ILCALL	SNGL
	DO	STACK
	DO	LN2
	DO	FDIV
	DO	EXP2
	DO	STBCK
RF8:	TSTSTR	RF9,0xB1	; 'INT'
	ILCALL	SNGL
	DO	STACK
	DO	INT
	DO	STBCK
RF9:	TSTSTR	RF10,0xB2	; 'LB'
	ILCALL	SNGL
	DO	STACK
	DO	LOG2
	DO	STBCK
RF10:	TSTSTR	RF11,0xB3	; 'LG'
	ILCALL	SNGL
	DO	STACK
	DO	LOG2
	DO	LG2
	DO	FMUL
	DO	STBCK
RF11:	TSTSTR	RF12
	DB	0xB4		; 'LN'
	ILCALL	SNGL
	DO	STACK
	DO	LOG2
	DO	LN2
	DO	FMUL
	DO	STBCK
RF12:	TSTSTR	RF13
	DB	0xB5		; 'NOT'
	ILCALL	RFACTR
	DO	STACK
	DO	NOT
	DO	STBCK
RF13:	TSTSTR	RF14
	DB	0xB6		; 'PI'
	DO	PI
RF14:	TSTSTR	RF15
	DB	0xB7		; 'RND'
	DO	STACK
	DO	RND
	DO	NORM
	DO	STBCK
RF15:	TSTSTR	RF16
	DB	0xB8		; 'SGN'
	ILCALL	SNGL
	DO	SGN
RF16:	TSTSTR	RF17
	DB	0xB9		; 'SIN'
	ILCALL	SNGL
	DO	STACK
	DO	SIN
	DO	STBCK
RF17:	TSTSTR	RF18
	DB	0xBA		; 'SQR'
	ILCALL	SNGL
	DO	STACK
	DO	SQRT
	DO	STBCK
RF18:	TSTSTR	RF19
	DB	0xBB		; 'TAN'
	ILCALL	SNGL
	DO	STACK
	DO	TAN
	DO	SWAP
	DO	PI2
	DO	FADD
	DO	SIN
	DO	FDIV
	DO	STBCK
RF19:	TSTSTR	RF20
	DB	0xBC		; 'VAL'
	TSTSTR	SYNTAX,'('
	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	CKDLLR
	DO	LDVAR
	DO	FIX
	DO	VSTRNG
	TSTNUM	SYNTAX
	ILCALL	RNUM
	DO	XCHPNT
	DB	0
RF20:	ILCALL	FACTOR
	DO	FLOAT2
FACTOR:	TSTSTR	FCTR1,'#'
	DO	HEX
FCTR1:	TSTSTR	FCTR3
	DB	0xBD		; 'ASC'
	TSTSTR	SYNTAX,'('
	TSTSTR	FCTR2,'"'
	DO	ASC
FCTR2:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	CKDLLR
	DO	LDVAR
	DO	FIX
	DO	ASTRNG
FCTR3:	TSTSTR	FCTR4
	DB	0xBE		; 'FREE'
	DO	TOP
	DO	FREE
FCTR4:	TSTSTR	FCTR6
	DB	0xBF		; 'LEN'
	TSTSTR	SYNTAX,'('
	TSTSTR	FCTR5,'"'
	DO	LEN
FCTR5:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	CKDLLR
	DO	LDVAR
	DO	FIX
	DO	LSTRNG
FCTR6:	TSTSTR	FCTR7
	DB	0x98		; 'PAGE'
	DO	PGE
FCTR7:	TSTSTR	FCTR8
	DB	0xA8		; 'PEEK'
	ILCALL	SNGL
	DO	FIX
	DO	GETBYT
FCTR8:	TSTSTR	FCTR10
	DB	0xC0		; 'POS'
	TSTSTR	SYNTAX,'('
	TSTSTR	FCTR9,'"'
	GOTO	SYNTAX
	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	CKDLLR
	DO	LDVAR
	DO	FIX
	GOTO	SYNTAX
FCTR9:	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	CKDLLR
	DO	LDVAR
	DO	FIX
	GOTO	SYNTAX
	TSTVAR	SYNTAX
	DO	FNDVAR
	DO	CKDLLR
	DO	LDVAR
	DO	FIX
	GOTO	SYNTAX
FCTR10:	TSTSTR	FCTR11
	DB	0xA0		; 'STAT'
	DO	STATUS
FCTR11:	TSTSTR	SYNTAX
	DB	0xC1		; 'TOP'
	DO	TOP
	DB	0
RINDEX:	DO	CKPT
INDEX:	DO	LADVAR
	ILCALL	REXPR
	DO	FIX
	DO	DMNSN
PREXP:	TSTSTR	PREX1,'"'
	DO	PRSTRG
PREX1:	TSTSTR	PREX2
	DB	0xC5		; 'CHR$'
	ILCALL	SNGL
	DO	POPAE
	DO	L_EF4C
PREX2:	TSTSTR	PREX3
	DB	0xC9		; 'SPC'
	ILCALL	SNGL
	DO	POPAE
	DO	SPC
PREX3:	TSTSTR	PREX4
	DB	0xCA		; 'STR$'
	ILCALL	SNGL
	GOTO	PREX9
PREX4:	TSTSTR	PREX5
	DB	0xCB		; 'TAB'
	ILCALL	SNGL
	DO	POPAE
	DO	TAB
PREX5:	TSTSTR	PREX6
	DB	0xCD		; 'VERT'
	ILCALL	SNGL
	DO	POPAE
	DO	VERT
PREX6:	DO	STRPNT
	TSTVAR	PREX8
	DO	FNDVAR
	DO	POPDLR
	TSTSTR	PREX7,'$'
	DO	LDVAR
	DO	POPAE
	DO	PSTRNG
PREX7:	DO	XCHPNT
PREX8:	ILCALL	REXPR
PREX9:	DO	FNUM
	DO	PRFNUM
	DB	0
RF7:	TSTSTR	RF8
	DB	0xB0		; 'FN'
	TSTVAR	SYNTAX
	DO	FNDDEF
	TSTSTR	FN6,'('
	DO	XCHPNT
	TSTSTR	SYNTAX,'('
FN1:	DO	XCHPNT
	TSTVAR	FN7
	DO	FNDVAR
	DO	DEFVAR
	TSTSTR	FN4,'('
	ILCALL	INDEX
FN2:	DO	XCHPNT
	ILCALL	REXPR
	DO	STVAR
FN3:	DO	XCHPNT
	TSTSTR	FN5,','
	DO	XCHPNT
	TSTSTR	SYNTAX,','
	GOTO	FN1
FN4:	TSTSTR	FN2,'$'
	DO	LDVAR
	DO	FIX
	DO	XCHPNT
	ILCALL	STREXP
	GOTO	FN3
FN5:	DO	XCHPNT
	TSTSTR	SYNTAX,')'
	DO	XCHPNT
	TSTSTR	FN7,')'
FN6:	TSTSTR	FN7,'='
	DO	FNT
	ILCALL	REXPR
	DO	FNDNE
FN7:	DO	FNERR
USEXP:	TSTSTR	USEX1,'"'
	DO	PRSTRG
USEX1:	TSTSTR	USEX2
	DB	0xC5		; 'CHR$'
	ILCALL	SNGL
	DO	POPAE
	DO	L_EF4C
USEX2:	TSTSTR	USEX3
	DB	0xC9		; 'SPC'
	ILCALL	SNGL
	DO	POPAE
	DO	SPC
USEX3:	TSTSTR	USEX4
	DB	0xCA		; 'STR$'
	ILCALL	SNGL
	GOTO	USEX9
USEX4:	TSTSTR	USEX5
	DB	0xCB		; 'TAB'
	ILCALL	SNGL
	DO	POPAE
	DO	TAB
USEX5:	TSTSTR	USEX6
	DB	0xCD		; 'VERT'
	ILCALL	SNGL
	DO	POPAE
	DO	VERT
USEX6:	DO	STRPNT
	TSTVAR	USEX8
	DO	FNDVAR
	DO	POPDLR
	TSTSTR	USEX7,'$'
	DO	LDVAR
	DO	POPAE
	DO	PSTRNG
USEX7:	DO	XCHPNT
USEX8:	ILCALL	REXPR
USEX9:	DO	FNUM
	DO	PUSING
	DO	PREND
	DB	0


;***************************
;*  THIS IS A PAGE BREAK   *
;***************************
	ORG	BASE+0x1000
GETLIN:	LD	127(P2)
	ANI	0xBF
	CALL	P3,PUTASC
	JP	GETL
	LDI	' '
	CALL	P3,PUTASC
GETL:	LDI	0xB6
	XPAL	P1
	ST	-15(P2)
	LD	STKPHI(P3)
	ORI	0x03
	XPAH	P1
	ST	-16(P2)
	LD	(P2)
	ST	-25(P2)		; STORE LINE COUNTER
SETBUF:	XAE			; CLEAR LINE BUFFER
	LDI	0xFF
	ST	EREG(P1)
	DLD	-25(P2)		; DECREASE LINE COUNTER
	JNZ	SETBUF
INP:	CALL	P3,GETASC	; CHAR INTO ACC AND EXT
	LD	-25(P2)		; LOAD LINE COUNTER
	XAE			; INTO EXT
	ST	-1(P1)		; STORE CHAR
	ANI	0x60		; NUMBER OR LETTER
	JNZ	STORE		; YES, STORE IT
	LD	-1(P1)		; LOAD CHAR
	XRI	0x08
	JZ	BS		; YES, BACKSPACE = CTRL-H
	XRI	1
	JNZ	CR
	LD	EREG(P1)
	XRI	0xFF
	JNZ	NOS
	LDI	0x20
	ST	EREG(P1)
	JMP	HTAB
NOS:	XRI	0xFF
	XRI	0x0C
	JZ	HTAB
	ANI	0x60
	JZ	INCR
HTAB:	LDI	0x09
	CALL	P3,PUTASC
	JMP	INCR
BS:	LDE
	JZ	INP
	DLD	-25(P2)
	XAE
	LD	EREG(P1)
	XRI	0x0C
	JZ	OUTPT
	ANI	0x60
	JZ	INP
OUTPT:	LDI	0x08
	CALL	P3,PUTASC
INPT:	JMP	INP
CR:	XRI	0x04
	JZ	EX
	XRI	0x1C
	JZ	INSR
	XRI	0x09
	JZ	RUBOUT
	XRI	0x13
	OR	-25(P2)
	JZ	EX
STORE:	LD	-1(P1)
	ST	EREG(P1)
	XRI	0x0C
	JZ	STRE
	ANI	0x60
	JZ	LOAD
	LDI	0
	JMP	STRE
LOAD:	LDI	0xFF
STRE:	ST	-22(P2)
SSTRE:	LD	@EREG(P1)
BUFOUT:	LD	@1(P1)
	XRI	0xFF
	JZ	BACK
	XRI	0xFF
	XRI	0x0C
	JNZ	NOF
	LDI	0x5C
	JMP	OUTCH
NOF:	ANI	0x60
	JZ	BUFOUT
	LD	-1(P1)
OUTCH:	CALL	P3,PUTASC
	DLD	-22(P2)
	JMP	BUFOUT
BACK:	LDI	' '
	CALL	P3,PUTASC
BCKS:	LDI	0x08
	CALL	P3,PUTASC
	ILD	-22(P2)
	ANI	0x80
	JNZ	BCKS
	LDI	0xB6
	XPAL	P1
INCR:	ILD	-25(P2)
	XOR	(P2)
	JNZ	INPT
EX:	LDI	0x0D
	XAE
	LD	-25(P2)
	XAE
	ST	EREG(P1)
LINE:	LDI	0x0D
	CALL	P3,PUTASC
	LDI	0x0A
	CALL	P3,PUTASC
	RTRN	P3
RUBOUT:	LD	@EREG(P1)
SHFTL:	LD	1(P1)
	ST	@1(P1)
	LD	(P1)
	XRI	0xFF
	JNZ	SHFTL
	LDI	0xB6
	XPAL	P1
	DLD	-25(P2)
	JMP	LOAD
INSR:	ST	-22(P2)
	LD	@EREG(P1)
LOOK:	DLD	-22(P2)
	LD	@1(P1)
	XRI	0xFF
	JNZ	LOOK
SHFTR:	LD	-2(P1)
	ST	@-1(P1)
	ILD	-22(P2)
	XRI	0xFF
	JNZ	SHFTR
	LDI	0xB6
	XPAL	P1
	LDI	0xFF
	ST	72(P1)
	DLD	-25(P2)
	JMP	SSTRE		; to X'E097
SCAN:	SCL
	LD	@1(P1)
	CAI	0x5B
	JP	SSCAN2
	ADI	0x1A
	JP	SSCAN
	JMP	SSCAN2
SSCAN:	SCL
	LD	@1(P1)
	CAI	0x5B
	JP	SSCAN1
	ADI	0x1A
	JP	SSCAN
	ADI	0x07
	JP	SSCAN1
	ADI	0x0A
	JP	SSCAN
SSCAN1:	LD	@-1(P1)
SSCAN2:	LDI	0x80
	XPAL	P3
	LD	-100(P2)
	XPAH	P3
SCANR:	LD	@1(P1)
	XRI	' '		; IS IT ' ' ?
	JZ	SCANR
	XRI	0x2D		; IS IT CR ?
	JZ	SCAN9
	XRI	0x37		; IS IT COLON ?
	JZ	SCAN3
	XRI	0x18
	JNZ	SCAN2
SCAN1:	LD	@1(P1)
	XRI	0x22
	JZ	SCANR
	XRI	0x2F
	JNZ	SCAN1
	LDI	L(M_ENDQ)	; 'END"' ERROR
	JMP	SV_ERROUT(P3)
SCAN2:	LD	@-1(P1)
SCAN3:	LDPI	P3,TOKENS
SCAN4:	LD	@1(P3)
	JZ	SCAN
	ST	-24(P2)
	LDI	0xFF
	ST	-25(P2)
SCAN5:	ILD	-25(P2)
	XAE
	LD	EREG(P1)
	XOR	@1(P3)
	JZ	SCAN5
	XRI	0x80
	JZ	SCAN7
	JP	SCAN4
SCAN6:	LD	@+01(P3)
	JP	SCAN6
	JMP	SCAN4
SCAN7:	LD	-24(P2)
	ST	@1(P1)
	XPAL	P1
	ST	-24(P2)
	XPAL	P1
SCAN8:	LD	EREG(P1)
	ST	@1(P1)
	XRI	0x0D
	JNZ	SCAN8
	LD	-24(P2)
	XPAL	P1
	LD	-1(P1)
	XRI	0x89
	JNZ	SSCAN2
	LDI	0x80
	XPAL	P3
	LD	-100(P2)
	XPAH	P3
SCN1:	LD	@1(P1)
	XRI	0x3A
	JZ	SCAN3
	XRI	0x37
	JZ	SCAN9
	XRI	0x2F
	JNZ	SCN1
SCN2:	LD	@1(P1)
	XRI	0x22
	JZ	SCN1
	XRI	0x2F
	JNZ	SCN2
	LDI	L(M_ENDQ)	; 'END"' ERROR
	JMP	SV_ERROUT(P3)
SCAN9:	LDI	0xB6
	XPAL	P1
	JMP	SV_SPLOAD(P3)

POPAE:	CCL
	LD	-3(P2)
	ADI	0x04
	ST	-3(P2)
	XPAL	P2
	LDI	0
POP1:	XAE
POP2:	SCL
	ILD	-04(P2)
	JZ	SV_VALERR(P3)
	JP	POP4
	CAI	0x8F
	JZ	POP3
	LD	-3(P2)
	ADD	-3(P2)
	LD	-3(P2)
	RRL
	ST	-3(P2)
	LD	-2(P2)
	RRL
	ST	-2(P2)
	CSA
	JP	POP2
	JMP	POP1
POP3:	LDE
	AND	-3(P2)
	JP	POP5
	ILD	-2(P2)
	JNZ	POP5
	ILD	-03(P2)
	JMP	POP5
POP4:	LDI	0
	ST	-2(P2)
	ST	-3(P2)
POP5:	LD	-2(P2)
	XAE
	LD	-3(P2)
	XPAL	P2
	LDI	0x80
	XPAL	P2
	ST	-18(P2)
	XAE
	ST	-17(P2)
	JMP	SV_SPLOAD(P3)

INSRT:	LD	-17(P2)
	ST	-8(P2)
	LD	-18(P2)
	ST	-9(P2)
	LD	-15(P2)
	XPAL	P3
	LD	-16(P2)
	XPAH	P3
	LDI	3
	ST	-25(P2)
INS1:	ILD	-25(P2)
	LD	@1(P3)
	XRI	0x0D
	JNZ	INS1
	LD	-25(P2)
	XRI	0x04
	JNZ	INS2
	ST	-25(P2)
INS2:	LD	-25(P2)
	XAE
	JNZ	MOVE
	LD	@3(P1)
	LDE
	CCL
	ADI	0xFC
	XAE
INS3:	LD	@1(P1)
	XRI	0x0D
	JZ	MOVE
	LDE
	CCL
	ADI	0xFF
	XAE
	JMP	INS3
MOVE:	LDE
	OR	-25(P2)
	JZ	ADD1
	LDE
	JZ	ADD
	JP	UP
DOWN:	LD	(P1)
	ST	EREG(P1)
	LD	@1(P1)
	XRI	0xFF
	JNZ	DOWN
	LD	(P1)
	XRI	0xFF
	JNZ	DOWN
	XRI	0xFF
	ST	EREG(P1)
	JMP	ADD
UP:	LD	-2(P1)
	ST	-22(P2)
	LDI	0xFF
	ST	-2(P1)
	LDI	0x55
	ST	-1(P1)
UP1:	LD	@+01(P1)
	XRI	0xFF
	JNZ	UP1
	LD	(P1)
	XRI	0xFF
	JNZ	UP1
	XPAH	P1
	ST	-18(P2)
	XPAH	P1
	XPAL	P1
	ST	-17(P2)
	XPAL	P1
	CCL
	LD	-17(P2)
	ADE
	LDI	0
	ADD	-18(P2)
	XOR	-18(P2)
	ANI	0xF0
	JZ	UP2
	LDI	0
	XAE
UP2:	LD	(P1)
	ST	EREG(P1)
	LD	@-1(P1)
	XRI	0xFF
	JNZ	UP2
	LD	1(P1)
	XRI	0x55
	JNZ	UP2
	LD	-22(P2)
	ST	(P1)
	LDI	0x0D
	ST	1(P1)
	LDE
	JZ	ADD4
ADD:	LD	-25(P2)
ADD1:	JZ	ADD3
	LD	-15(P2)
	XPAL	P1
	LD	-16(P2)
	XPAH	P1
	LD	-13(P2)
	XPAL	P3
	LD	-14(P2)
	XPAH	P3
	LD	-9(P2)
	ST	@1(P3)
	LD	-8(P2)
	ST	@1(P3)
	LD	-25(P2)
	ST	@1(P3)
ADD2:	LD	@1(P1)
	ST	@1(P3)
	XRI	0x0D
	JNZ	ADD2
ADD3:	XPAH	P3
ADD4:	LDI	0x80
	XPAL	P3
	LD	-100(P2)
	XPAH	P3
	JZ	SV_SPLOAD(P3)
	LDI	L(M_AREA)	; 'AREA' ERROR
	JMP	SV_ERROUT(P3)

FNDVAR:	LD	STKPHI(P3)
	ORI	1
	XPAH	P3
	LDI	0
	XPAL	P3
FNDV:	LD	@1(P3)
	JZ	NTFND
	JP	FNDV1
	XRE
	JZ	FOUND
	LD	@4(P3)
	JMP	FNDV
FNDV1:	XRE
	JNZ	FNDV5
	XPAL	P1
	ST	-24(P2)
	XPAL	P1
	XPAH	P1
	ST	-25(P2)
	XPAH	P1
FNDV2:	LD	@1(P3)
	XOR	@1(P1)
	JZ	FNDV2
	JP	FNDV4
	XRI	0x80
	JZ	FNDV6
FNDV3:	LD	-24(P2)
	XPAL	P1
	LD	-25(P2)
	XPAH	P1
	LD	@4(P3)
	JMP	FNDV
FNDV4:	LD	-24(P2)
	XPAL	P1
	LD	-25(P2)
	XPAH	P1
FNDV5:	LD	@1(P3)
	JP	FNDV5
	LD	@4(P3)
	JMP	FNDV
FNDV6:	SCL
	LD	(P1)
	CAI	0x5B
	JP	SFOUND
	ADI	0x1A
	JP	FNDV3
	ADI	0x07
	JP	SFOUND
	ADI	0x0A
	JP	FNDV3
SFOUND:	LDI	0
FOUND:	XAE
NTFND:	LD	@-1(P3)
	LD	-3(P2)
	XPAL	P2
	XPAL	P3
	ST	@-1(P2)
	XPAH	P3
	ST	@-1(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	LD	-100(P2)
	XPAH	P0
SAV:	LD	-4(P2)
	XRI	0xED
	JZ	SV_RTNEST(P3)
	LD	127(P2)
	XRI	0xBF
	JZ	SAVMOD
	LDI	0x80
SAVMOD:	XAE
	LD	-4(P2)
	XPAL	P2
	XPAL	P1
	ST	@-1(P2)
	XPAL	P1
	XPAH	P1
	ORE
	ST	@-1(P2)
	XRE
	XPAH	P1
	XPAL	P2
	ST	-4(P2)
	JMP	SV_SPLOAD(P3)

DONE:	LD	@1(P1)
	XRI	' '		; IS IT ' ' ?
	JZ	DONE
	XRI	0x2D		; IS IT CR ?
	JZ	SV_SPLOAD(P3)
	XRI	0x37		; IS IT COLON ?
	JZ	SV_SPLOAD(P3)
	LDI	L(M_CHAR)	; 'CHAR'
	JMP	SV_ERROUT(P3)
BYE:	LDI	0x20
	JMP	SV_RTN1(P3)

IGNRE:	LD	@1(P1)		; IGNORE LINE UNTIL CR OR ':'
	XRI	0x0D		; IS IT CR ?
	JZ	NXT
	XRI	0x37		; IS IT COLON ?
	JZ	NXT
	JMP	IGNRE

XFER:	JZ	XFER1
	LDI	L(M_NOGO)	; 'NOGO' ERROR
	JMP	SV_ERROUT(P3)
XFER1:	LDI	0xBF
	ST	127(P2)
	JMP	NXT1

THEN:	LD	@1(P1)
	XRI	' '		; IS IT ' ' ?
	JZ	THEN		; SKIP SPACES
	XRI	0xE3		; IS IT 'THEN'
	JZ	SV_SPLOAD(P3)
	LD	@-1(P1)
	JMP	NEXT0

MOVESR:	LD	-17(P2)
	CAS
DNE:	LD	@1(P1)
	XRI	' '		; IS IT ' ' ?
	JZ	DNE
	XRI	0x2D		; IS IT CR ?
	JZ	NXT
	XRI	0x37		; IS IT COLON ?
	JZ	NXT
	LDI	L(M_CHAR)	; 'CHAR' ERROR
	JMP	SV_ERROUT(P3)

CMPRE:	LD	-3(P2)
	XPAL	P2
	XAE
	LD	1(P2)
	OR	@4(P2)
	XAE
	XPAL	P2
	ST	-3(P2)
	LDE
	JNZ	THEN
ELS:	LD	@1(P1)
	XRI	0x0D		; IS IT CR ?
	JZ	NXT
	XRI	0x37		; IS IT COLON ?
	JZ	ELS2
	XRI	0x18
	JNZ	ELS
ELS1:	LD	@1(P1)
	XRI	0x22
	JNZ	ELS1
	JMP	ELS
ELS2:	LD	@1(P1)
	XRI	' '		; IS IT ' '
	JZ	ELS2		; SKIP SPACES
	XRI	0xAD		; IS IT 'ELSE'
	JZ	NEXT0
	LD	@-1(P1)
	JMP	ELS
SNTX:	LD	126(P2)
	ST	-8(P2)
	LD	125(P2)
	ST	-9(P2)
SYNT:	LDI	L(M_SNTX)	; 'SNTX' ERROR
	JMP	SV_ERROUT(P3)

IGNORE:	LD	@1(P1)
	XRI	0x0D
	JNZ	IGNORE
NXT:	LD	127(P2)
	JP	NXT2
NXT1:	LD	(P1)
	XRI	0xFF
	JNZ	NXT3
NXT2:	LDI	L(M_RDY)	; 'READY'
	JMP	SV_ERROUT(P3)
NXT3:	CSA
	ANI	0x20
	JNZ	NXT4
BRK:	LDI	L(M_BRK)	; 'BREAK'
	JMP	SV_ERROUT(P3)
NXT4:	LD	-1(P1)
	XRI	0x0D
	JNZ	NEXT0
	LD	@1(P1)
	ST	-9(P2)
	LD	@2(P1)
	ST	-8(P2)
; NOTE:	CALCULATES ADDRESS IN IL TABLE FROM TOKEN VALUE
NEXT0:	LDI	L(MIDDLE)	; X'26 ONLY FOR ILTABLE LOW AT 0x00
	JMP	NEXT1
NEXT:	LDI	L(START)	; X'14 ONLY FOR ILTABLE LOW AT 0x00
NEXT1:	XAE
NEXT2:	LD	@1(P1)
	XRI	' '
	JZ	NEXT2		; SKIP SPACES
	SCL
	JP	NEXT3		; MAYBE VARIABLE OR STRING
	LD	-1(P1)
	ADD	-1(P1)		; DOUBLE TOKEN
	CAI	L(ENDS)-L(START) ; SUBSTRACT DIFFERENCE
	JP	SYNT		; INVALID TOKEN
	ADI	L(ENDS+1)	; ADD LOW ENDS BACK
	JMP	NEXT4
NEXT3:	LD	@-1(P1)
	LDI	L(ENDS)
NEXT4:	XAE
	CAE
	JP	SYNT
	LDE			; ILTABLE LOW IS IN E
	XPAL	P3
	LDI	H(ILTABLE)	; ILTABLE HIGH
	XPAH	P3
	LDI	H(SPRVSR)	; SET PC HIGH
	XPAH	P0		; LONG JUMP TO SPTEST

SAVEDO:	LD	-5(P2)
	XRI	0xE1
	JZ	SV_RTNEST(P3)
	XRI	0xE1
	XPAL	P2
	XPAL	P1
	ST	@-1(P2)
	XPAL	P1
	XPAH	P1
	ST	@-1(P2)
	XPAH	P1
	XPAL	P2
	ST	-5(P2)
	JMP	NXT1

DETPGE:	XPAH	P1
	XAE
	LDE
	XPAH	P1
	LDE
	SR
	SR
	SR
	SR
	ST	-10(P2)
	JMP	NXT

LVUNTL:	ILD	-5(P2)
	ILD	-5(P2)
	JMP	NXT1
UNTL:	LD	-5(P2)
	XRI	0xED
	JNZ	UNTL1
	LDI	L(M_UNTL)	; 'UNTL' ERROR
	JMP	SV_ERROUT(P3)
UNTL1:	LD	-3(P2)
	XPAL	P2
	XAE
	LD	1(P2)
	OR	@4(P2)
	XAE
	XPAL	P2
	ST	-3(P2)
	LDE
	JNZ	LVUNTL
	LD	-5(P2)
	XPAL	P2
	XPAH	P1
	LD	1(P2)
	XPAL	P1
	LD	(P2)
	XPAH	P1
	XPAL	P2
	JMP	DETPGE

STPNT:	XPAL	P1
	ST	-15(P2)
	XPAL	P1
	XPAH	P1
	ST	-16(P2)
	XPAH	P1
STP:	LD	@1(P1)
	XRI	0x22
	JNZ	STP
	JMP	SV_SPLOAD(P3)

STRT:	LDI	0xBF
	ST	127(P2)
CLRSTK:	LDI	0xE1
	ST	-6(P2)
	LDI	0xED
	ST	-5(P2)
	LDI	0xFD
	ST	-4(P2)
	LDI	L(M_RDY)	; 'READY'
	RTRN	P3

RSTR:	LD	-4(P2)
	XRI	0xFD
	JNZ	RSTR1
	LDI	L(M_RTRN)	; 'RTRN'
	JMP	SV_ERROUT(P3)
RSTR1:	ILD	-4(P2)
	ILD	-4(P2)
	XPAL	P2
	LD	-2(P2)
	JP	RSTR2
	LDI	L(M_RDY)	; 'READY'
	JMP	33(P3)
RSTR2:	XPAH	P1
	LD	-1(P2)
	XPAL	P1
	LDI	0x80
	XPAL	P2
	JMP	DETPGE

LDPNT:	LD	-15(P2)
	ST	-19(P2)
	LD	-16(P2)
	ST	-20(P2)
	JMP	SV_SPLOAD(P3)

	NOP			; DO NOT REMOVE

DEFVAR:	JZ	SV_SPLOAD(P3)
	LD	@-1(P1)
	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	LDI	0
	XAE
	JMP	DEFV2
DEFV1:	ILD	1(P2)
	JNZ	DEFV2
	ILD	(P2)
DEFV2:	SCL
	LD	(P2)
	CAI	0xAF
	LD	(P2)
	ANI	0x0F
	CAI	0x0F
	JP	DEFERR
	LDE
	ADI	0xFF
	XAE
	LD	@1(P1)
	ST	@1(P3)
	SCL
	LD	(P1)
	CAI	0x5B
	JP	DEFV
	ADI	0x1A
	JP	DEFV1
	ADI	0x07
	JP	DEFV
	ADI	0x0A
	JP	DEFV1
DEFV:	LD	-1(P3)
	ORI	0x80
	ST	-1(P3)
	LD	(P1)
	XRI	0x24
	JZ	VARERR
	XRI	0x0C
	JZ	VARERR
	LDI	0
	ST	4(P3)
	LDI	0x80
	XPAL	P2
	LDI	H(SPRVSR)	; SET PC HIGH
	XPAH	P0

FNDLBL:	LDI	0x02
	XPAL	P1
	ST	-15(P2)
	LD	-10(P2)
	RR
	RR
	RR
	RR
	XPAH	P1
	ST	-16(P2)
L_LOOK:	LD	(P1)		; ADD NEW LINE
	XRI	0xFF
	JNZ	L_DIFF
	LD	1(P1)
	XRI	0xFF
	JZ	L_NO
L_DIFF:	SCL
	LD	1(P1)
	CAD	-17(P2)
	XAE
	LD	(P1)
	CAD	-18(P2)
	JP	L_FIND
	LD	2(P1)
	XAE
	LD	@EREG(P1)
	JMP	L_LOOK
L_NO:	LDI	0x80
L_FIND:	ORE
	XPAL	P1
	ST	-13(P2)
	XPAL	P1
	XPAH	P1
	ST	-14(P2)
	XPAH	P1
	RTRN	P3

	DB	255,255

DEFERR:	LDI	0
	ST	@EREG(P3)
	LDI	L(M_VRST)	; 'VARST' ERROR
	JMP	VERR
VARERR:	ST	@EREG(P3)
	LDI	L(M_VAR)	; 'VAR' ERROR
VERR:	XAE
	LDI	H(SPRVSR)	; SET PC HIGH
	XPAH	P0

CKMODE:	LD	127(P2)
	XRI	0x80
	JP	SV_SPLOAD(P3)
	LDI	L(M_STMT)	; 'STMT' ERROR
	JMP	SV_ERROUT(P3)

SPC:	LD	-17(P2)
	JZ	SV_SPPULL(P3)
SPC1:	LDI	' '
	CALL	P3,PUTASC
	DLD	-17(P2)
	JNZ	SPC1
	JMP	SV_SPPULL(P3)

PRSTRG:	LD	@1(P1)
	XRI	0x22
	JZ	SV_SPPULL(P3)
	LD	-1(P1)
	CALL	P3,PUTASC
	JMP	PRSTRG

	NOP
	NOP

SPRNUM:	LD	@1(P1)
	ST	-9(P2)
	LD	@2(P1)
	ST	-8(P2)
PRNUM:	LD	-3(P2)
	XPAL	P1
	ST	-15(P2)
	LD	STKPHI(P3)
	XPAH	P1
	ST	-16(P2)
	LDI	0x20
	ST	-11(P2)
	LDI	0xFB
	ST	-25(P2)
	LD	-8(P2)
	ST	-3(P1)
	LD	-9(P2)
	ST	-4(P1)
	JP	DIV
	LDI	0x2D
	ST	-11(P2)
	SCL
	LDI	0
	CAD	-8(P2)
	ST	-3(P1)
	LDI	0
	CAD	-9(P2)
	ST	-4(P1)
DIV:	LDI	0
	ST	-1(P1)
	ST	-2(P1)
	XAE
	LDI	0x10
	ST	-5(P1)
DIVLP:	CCL
	LD	-1(P1)
	ADD	-1(P1)
	ST	-1(P1)
	LD	-2(P1)
	ADD	-2(P1)
	ST	-2(P1)
	LD	-3(P1)
	ADD	-3(P1)
	ST	-3(P1)
	LD	-4(P1)
	ADD	-4(P1)
	ST	-4(P1)
	LDE
	ADE
	XAE
	LDE
	ADI	0xF6
	JP	DIV1
	JMP	DIV2
DIV1:	XAE
	ILD	-1(P1)
DIV2:	DLD	-5(P1)
	JNZ	DIVLP
	DLD	-25(P2)
	XAE
	ORI	0x30
	ST	EREG(P1)
	LD	-1(P1)
	ST	-3(P1)
	LD	-2(P1)
	ST	-4(P1)
	OR	-3(P1)
	JNZ	DIV
	LD	@EREG(P1)
	LD	-11(P2)
PRNT:	CALL	P3,PUTASC
	LD	@1(P1)
	JNZ	PRNT
	LD	-15(P2)
	XPAL	P1
	LD	-16(P2)
	XPAH	P1
	RTRN	P3

	NOP
	NOP
	NOP

EQU:	LDI	1
	JMP	CMP
NEQ:	LDI	0x02
	JMP	CMP
LSS:	LDI	0x03
	JMP	CMP
LEQ:	LDI	0x04
	JMP	CMP
GTR:	LDI	0x05
	JMP	CMP
GEQ:	LDI	0x06
CMP:	ST	-21(P2)
	LD	-3(P2)
	XPAL	P1
	ST	-15(P2)
	LD	STKPHI(P3)
	XPAH	P1
	ST	-16(P2)
	LD	5(P1)
	ST	-18(P2)
	LD	1(P1)
	ST	-17(P2)
	CALL	P3,FSUB
	LD	1(P1)
	XOR	-18(P2)
	XAE
	LD	-18(P2)
	XOR	-17(P2)
	ANE
	XOR	1(P1)
	ST	-22(P2)
	LD	1(P1)
	OR	(P1)
	JZ	SETZ
	LDI	0x80
SETZ:	XRI	0x80
	XAE
	DLD	-21(P2)
	JNZ	NEQU
	LDE
	JMP	CMPR
NEQU:	DLD	-21(P2)
	JNZ	LESS
	LDE
	XRI	0x80
	JMP	CMPR
LESS:	DLD	-21(P2)
	JNZ	LEQU
	LD	-22(P2)
	JMP	CMPR
LEQU:	DLD	-21(P2)
	JNZ	GRTR
	LDE
	OR	-22(P2)
	JMP	CMPR
GRTR:	DLD	-21(P2)
	JNZ	GEQU
	LDE
	OR	-22(P2)
	XRI	0x80
	JMP	CMPR
GEQU:	LD	-22(P2)
	XRI	0x80
CMPR:	JP	FLSE
	LDI	0x80
	ST	(P1)
	LDI	0x40
	ST	1(P1)
	JMP	STRE1
FLSE:	LDI	0
	ST	(P1)
	ST	1(P1)
STRE1:	LDI	0
	ST	2(P1)
	ST	3(P1)
	LD	-15(P2)
	XPAL	P1
	ST	-3(P2)
	LD	-16(P2)
	XPAH	P1
	JMP	SV_SPPULL(P3)

STBCK:	LD	-13(P2)
	XPAL	P1
	ST	-3(P2)
	LD	-14(P2)
	XPAH	P1
	JMP	SV_SPPULL(P3)

LST1:	SCL
	LD	1(P1)
	CAD	-17(P2)
	XAE
	LD	(P1)
	CAD	-18(P2)
	JP	LST3
LST2:	LD	(P1)
	XRI	0xFF
	JNZ	LST4
	LD	1(P1)
	XRI	0xFF
	JNZ	LST4
LST3:	ORE
	JZ	LST4
	LDI	L(M_RDY)	; 'READY'
	JMP	SV_ERROUT(P3)
LST4:	CALL	P3,SPRNUM
LST5:	LD	@1(P1)
	JP	LST9
	ST	-25(P2)
	LDI	L(TOKENS)
	XPAL	P1
	ST	-15(P2)
	LDI	H(TOKENS)
	XPAH	P1
	ST	-16(P2)
LST6:	LD	-25(P2)
	XOR	@1(P1)
	JZ	LST8
LST7:	LD	@1(P1)
	JP	LST7
	JMP	LST6
LST8:	LD	@1(P1)
	CALL	P3,PUTASC
	JP	LST8
	LD	-15(P2)
	XPAL	P1
	LD	-16(P2)
	XPAH	P1
	JMP	LST5
LST9:	CALL	P3,PUTASC
	XRI	0x0D
	JNZ	LST5
	LDI	0x0A
	CALL	P3,PUTASC
	CSA
	ANI	0x20
	JNZ	SV_SPLOAD(P3)
	LDI	L(M_BRK)	; 'BREAK'
	JMP	SV_ERROUT(P3)

LKPAGE:	LD	-1(P1)
	XRI	0x0D
	JZ	CHPAGE
	LDI	0xFF
	ST	-25(P2)
LKPGE:	ILD	-25(P2)
	XAE
	LD	EREG(P1)
	XRI	0x20
	JZ	LKPGE
	XRI	0xB0
	JZ	CHPGE
	XRI	1
	JZ	CHPGE
CHPAGE:	LDI	0x02
	ST	-19(P2)
	XPAL	P1
	LD	-10(P2)
	RR
	RR
	RR
	RR
	ST	-20(P2)
	XPAH	P1
	JMP	SV_SPLOAD(P3)

CHPGE:	LDI	0x02
	ST	-19(P2)
	LD	-10(P2)
	RR
	RR
	RR
	RR
	ST	-20(P2)
	JMP	SV_SPLOAD(P3)

ONE:	LD	-3(P2)
	XPAL	P2
	ST	@-4(P2)
	SR
	ST	1(P2)
	LDI	0
	ST	2(P2)
	ST	3(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPLOAD(P3)

SAVFOR:	LD	-6(P2)
	XAE
	LDE
	XRI	0xB1
	JZ	SV_RTNEST(P3)
	LD	STKPHI(P3)
	XPAH	P3
	LD	-3(P2)
	XPAL	P2
	LDE
SFOR1:	XRI	0xE1
	JZ	SFOR3
	XRI	0xE1
	XPAL	P3
	LD	12(P2)
	XOR	@12(P3)
	JNZ	SFOR2
	LD	13(P2)
	XOR	-11(P3)
	JZ	SFOR4
SFOR2:	XPAL	P3
	JMP	SFOR1
SFOR3:	LDE
	XPAL	P3
SFOR4:	XPAL	P1
	ST	@-1(P3)
	XPAL	P1
	XPAH	P1
	ST	@-1(P3)
	XPAH	P1
	LD	7(P2)
	ST	@-1(P3)
	LD	6(P2)
	ST	@-1(P3)
	LD	5(P2)
	ST	@-1(P3)
	LD	4(P2)
	ST	@-1(P3)
	LD	3(P2)
	ST	@-1(P3)
	LD	2(P2)
	ST	@-1(P3)
	LD	1(P2)
	ST	@-1(P3)
	LD	@8(P2)
	ST	@-1(P3)
	LD	5(P2)
	ST	@-1(P3)
	LD	4(P2)
	ST	@-1(P3)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	XPAL	P3
	ST	-6(P2)
STVAR:	LD	-3(P2)
	XPAL	P2
	LD	5(P2)
	XPAL	P3
	LD	4(P2)
	XPAH	P3
	LD	@6(P2)
	ST	1(P3)
	LD	-5(P2)
	ST	2(P3)
	LD	-4(P2)
	ST	3(P3)
	LD	-3(P2)
	ST	4(P3)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	LDI	0x80
	XPAL	P3
	LD	-100(P2)
	XPAH	P3
	JMP	SV_SPLOAD(P3)

NXTVAR:	JZ	VARFND
	LDI	L(M_VAR)	; 'VAR' ERROR
	JMP	SV_ERROUT(P3)
VARFND:	LD	@1(P1)
	XRI	' '		; IS IT ' ' ?
	JZ	VARFND
	XRI	0x2D		; IS IT CR ?
	JZ	VAR1
	XRI	0x37		; IS IT COLON ?
	JZ	VAR1
	LDI	L(M_CHAR)	; 'CHAR' ERROR
	JMP	SV_ERROUT(P3)
VAR1:	LD	-6(P2)
	XRI	0xE1
	JNZ	VAR2
	LDI	L(M_NEXT)	; 'NEXT' ERROR
	JMP	SV_ERROUT(P3)
VAR2:	ILD	-3(P2)
	ILD	-3(P2)
	XPAL	P1
	ST	-15(P2)
	LD	STKPHI(P3)
	XPAH	P1
	ST	-16(P2)
VAR3:	LD	-6(P2)
	XPAL	P2
	LD	-1(P1)
	XOR    +01(P2)
	JNZ	VAR4
	LD	-2(P1)
	XOR    +00(P2)
	JZ	VAR5
VAR4:	LD	@12(P2)
	LDI	0x80
	XPAL	P2
	ST	-6(P2)
	XRI	0xE1
	JNZ	VAR3
	LDI	L(M_FOR)	; 'FOR' ERROR
	JMP	SV_ERROUT(P3)
VAR5:	SCL
	LDI	0x0C
VAR6:	CAI	1
	XAE
	LD	EREG(P2)
	ST	@-1(P1)
	LDE
	JNZ	VAR6
	SRL
	XPAL	P2
	LD	3(P1)
	ST	-22(P2)
	XPAL	P1
	ST	-3(P2)
	XPAL	P1
	LD	@-2(P1)
LDVAR:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
	LD	4(P3)
	ST	1(P2)
	LD	3(P3)
	ST	(P2)
	LD	2(P3)
	ST	-1(P2)
	LD	1(P3)
	ST	@-2(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	JMP	SV_SPLOAD(P3)

NXTV:	LD	-06(P2)
	XPAL	P2
	LD	(P2)
	XAE
	LD	1(P2)
	XPAL	P2
	LDE
	XPAH	P2
	LD	(P1)
	ST	1(P2)
	LD	1(P1)
	ST	2(P2)
	LD	2(P1)
	ST	3(P2)
	LD	3(P1)
	ST	4(P2)
	LDI	0x80
	XPAL	P2
	LD	STKPHI(P3)
	XPAH	P2
	LD	-22(P2)
	JP	NXTV2
	CALL	P3,SWAP
	CALL	P3,FSUB
	LD	1(P1)
	XRI	0x80
	JP	NXTV3
NXTV1:	LD	@6(P1)
	LD	-2(P1)
	XAE
	LD	-1(P1)
	XPAL	P1
	ST	-3(P2)
	LDE
	XPAH	P1
	JMP	SV_SPLOAD(P3)
NXTV2:	CALL	P3,FSUB
	LD	1(P1)
	JP	NXTV1
NXTV3:	CCL
	LD	-6(P2)
	ADI	0x0C
	ST	-6(P2)
	LD	@6(P1)
	LD	-15(P2)
	XPAL	P1
	ST	-3(P2)
	LD	-16(P2)
	XPAH	P1
	JMP	SV_SPLOAD(P3)

LDDTA:	LD	-19(P2)
	XPAL	P1
	ST	-15(P2)
	LD	-20(P2)
	XPAH	P1
	ST	-16(P2)
	JMP	SV_SPLOAD(P3)
NXTDTA:	LD	-1(P1)
	XRI	0x0D
	JZ	DTA2
DTA1:	LD	@1(P1)
	XRI	' '
	JZ	DTA1
	XRI	0x0C
	JZ	FNDTA
	XRI	0x16
	JZ	DTA4
	XRI	0x37
	JZ	DTA2
	LD	126(P2)
	ST	-8(P2)
	LD	125(P2)
	ST	-9(P2)
	LDI	L(M_CHAR)	; 'CHAR' ERROR
	JMP	SV_ERROUT(P3)
DTA2:	LD	(P1)
	XRI	0xFF
	JNZ	DTA3
	LDI	L(M_DATA)	; 'DATA' ERROR
	JMP	SV_ERROUT(P3)
DTA3:	LD	@1(P1)
	ST	125(P2)
	LD	@2(P1)
	ST	126(P2)
DTA4:	LD	@1(P1)
	XRI	' '
	JZ	DTA4
	XRI	0xA9
	JZ	FNDTA
NODTA:	LD	-1(P1)
	XRI	0x3A
	JZ	DTA4
	XRI	0x37
	JZ	DTA2
	LD	@1(P1)
	JMP	NODTA
FNDTA:	LD	@1(P1)
	XRI	' '
	JZ	FNDTA
	LD	@-1(P1)
	JMP	SV_SPLOAD(P3)

ISTRNG:	LD	-17(P2)
	XPAL	P3
	LD	-18(P2)
	XPAH	P3
	XAE
ISTR1:	LD	@1(P1)
	ST	@1(P3)
	XRI	0x0D
	JNZ	ISTR1
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
XCHPNT:	LD	-15(P2)
	XPAL	P1
	ST	-15(P2)
	LD	-16(P2)
	XPAH	P1
	ST	-16(P2)
	JMP	SV_SPLOAD(P3)

INSTR:	LD	-17(P2)
	XPAL	P3
	LD	-18(P2)
	XPAH	P3
	XAE
INSTR1:	LD	(P1)
	XRI	0x2C
	JZ	PUTS2
	XRI	0x16
	JZ	PUTS2
	XRI	0x37
	JZ	PUTS2
	LD	@1(P1)
	ST	@1(P3)
	JMP	INSTR1
PUTSTR:	LD	-17(P2)
	XPAL	P3
	LD	-18(P2)
	XPAH	P3
	XAE
PUTS1:	LD	@1(P1)
	XRI	0x22
	JZ	PUTS2
	XRI	0x22
	ST	@1(P3)
	JMP	PUTS1
PUTS2:	LDI	0x0D
	ST	(P3)
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	JMP	SV_SPLOAD(P3)

FNDDTA:	LDI	0x02
	ST	-15(P2)
	LD	-10(P2)
	RR
	RR
	RR
	RR
	ST	-16(P2)
	JMP	SV_SPLOAD(P3)

PRSTR:	LD	@1(P1)
	XRI	0x22
	JZ	SV_SPLOAD(P3)
	LD	-1(P1)
	CALL	P3,PUTASC
	JMP	PRSTR

GTO:	LD	-17(P2)
	JNZ	GTO1
	DLD	-18(P2)
GTO1:	DLD	-17(P2)
	OR	-18(P2)
	JZ	GTO4
GTO2:	LD	@1(P1)
	XRI	' '
	JZ	GTO2
	XRI	0x0C
	JZ	GTO3
	LDI	L(M_NOGO)	; 'NOGO' ERROR
	JMP	SV_ERROUT(P3)
GTO3:	CCL
	LD	-3(P2)
	ADI	0x04
	ST	-3(P2)
	SCL
	LD	-1(P2)
	CAI	0x04
	ST	-1(P2)
	LD	-2(P2)
	CAI	0
	ST	-2(P2)
	JMP	SV_SPLOAD(P3)
GTO4:	LD	@1(P1)
	XRI	0x0D		; IS IT CR ?
	JZ	SV_SPLOAD(P3)
	XRI	0x37		; IS IT COLON ?
	JZ	SV_SPLOAD(P3)
	JMP	GTO4

NEWPGM:	LDI	0x02
	XPAL	P1
	LD	-10(P2)
	RR
	RR
	RR
	RR
	XPAH	P1
	LDI	0x0D
	ST	-1(P1)
	LDI	0xFF
	ST	(P1)
	ST	1(P1)
	JMP	SV_SPLOAD(P3)

MC:	LDI	0x70
	JMP	SV_RTN1(P3)

EDITR:	JZ	EDIT1
	LDI	L(M_RDY)	; 'READY'
	JMP	SV_ERROUT(P3)
EDIT1:	ST	-22(P2)
	LD	@1(P1)
	ST	-9(P2)
	LD	@2(P1)
	ST	-8(P2)
	CALL	P3,PRNUM
EDIT2:	LD	@1(P1)
	XRI	0x0C
	JNZ	EDIT3
	LDI	0x5C
	JMP	EDIT8
EDIT3:	XRI	1
	JZ	EDIT9
	JP	EDIT7
	XRI	0x0D
	XAE
	LDI	L(TOKENS)
	XPAL	P1
	ST	-15(P2)
	LDI	H(TOKENS)
	XPAH	P1
	ST	-16(P2)
EDIT4:	LDE
	XOR	@1(P1)
	JZ	EDIT6
EDIT5:	LD	@1(P1)
	JP	EDIT5
	JMP	EDIT4
EDIT6:	ILD	-22(P2)
	LD	@1(P1)
	CALL	P3,PUTASC
	JP	EDIT6
	LD	-15(P2)
	XPAL	P1
	LD	-16(P2)
	XPAH	P1
	JMP	EDIT2
EDIT7:	ANI	0x60
	JZ	EDIT2
	LD	-1(P1)
EDIT8:	CALL	P3,PUTASC
	ILD	-22(P2)
	JMP	EDIT2
EDIT9:	LDI	0x08
	CALL	P3,PUTASC
	DLD	-22(P2)
	JNZ	EDIT9
	LDI	0xB6
	XPAL	P1
	LD	STKPHI(P3)
	ORI	0x03
	XPAH	P1
	LD	(P2)
	ST	-22(P2)
CLRBUF:	XAE
	LDI	0xFF
	ST	EREG(P1)
	DLD	-22(P2)
	JP	CLRBUF
	XAE
	CCL
	LD	-25(P2)
	ADD	-3(P2)
	XPAL	P2
EDIT10:	CCL
	LDE
	ADI	1
	XAE
	LD	@1(P2)
	JZ	EDIT11
	ST	EREG(P1)
	JMP	EDIT10
EDIT11:	LDI	0x80
	XPAL	P2
	LDE
	ST	-25(P2)
	LD	-13(P2)
	XPAL	P3
	LD	-14(P2)
	XPAH	P3
	LD	@3(P3)
EDIT12:	LD	@1(P3)
	XRI	0x0D
	JZ	EDIT17
	XRI	0x0D
	JP	EDIT16
	ST	-22(P2)
	LDI	L(TOKENS)
	XPAL	P3
	ST	-15(P2)
	LDI	H(TOKENS)
	XPAH	P3
	ST	-16(P2)
EDIT13:	LD	-22(P2)
	XOR	@1(P3)
	JZ	EDIT15
EDIT14:	LD	@1(P3)
	JP	EDIT14
	JMP	EDIT13
EDIT15:	LD	@1(P3)
	ANI	0x7F
	ST	EREG(P1)
	LDE
	ADI	1
	XAE
	LD	-1(P3)
	JP	EDIT15
	LD	-15(P2)
	XPAL	P3
	LD	-16(P2)
	XPAH	P3
	JMP	EDIT12
EDIT16:	ST	EREG(P1)
	LDE
	ADI	1
	XAE
	JMP	EDIT12
EDIT17:	LDI	0x80
	XPAL	P3
	LD	-100(P2)
	XPAH	P3
	JMP	SV_SPLOAD(P3)

NUMTST:	LD	@1(P1)
	XRI	' '
	JZ	NUMTST
	XRI	' '
	SCL
	CAI	0x3A
	JP	NUMERR
	ADI	0x0A
	JP	DIGIT
NUMERR:	LD	@-1(P1)
	LDI	L(M_SNTX)	; 'SNTX' ERROR
	JMP	SV_ERROUT(P3)

DIGIT:	XAE
	DLD	-3(P2)
	DLD	-3(P2)
	XPAL	P2
	LDE
	ST	1(P2)
	XRE
DIGIT1:	ST	(P2)
	SCL
	LD	@1(P1)
	CAI	0x3A
	JP	NUMEND
	ADI	0x0A
	JP	MORE
NUMEND:	LD	@-1(P1)
	LDI	0x80
	XPAL	P2
	JMP	SV_SPLOAD(P3)

MORE:	XAE
	CCL
	LD	1(P2)
	ADD	1(P2)
	ST	-1(P2)
	LD	(P2)
	ADD	(P2)
	ST	-2(P2)
	CCL
	LD	-1(P2)
	ADD	-1(P2)
	ST	-1(P2)
	LD	-2(P2)
	ADD	-2(P2)
	ST	-2(P2)
	CCL
	LD	-1(P2)
	ADD	1(P2)
	ST	1(P2)
	LD	-2(P2)
	ADD	(P2)
	ST	(P2)
	CCL
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	LD	(P2)
	ADD	(P2)
	ST	(P2)
	CCL
	LDE
	ADD	1(P2)
	ST	1(P2)
	LDI	0
	ADD	(P2)
	JP	DIGIT1
	JMP	SV_VALERR(P3)

AUTONM:	LD	-17(P2)
	ST	-8(P2)
	LD	-18(P2)
	ST	-9(P2)
	CALL	P3,PRNUM
	CCL
	LD	-25(P2)
	ADI	0x4D
	ST	(P2)
	JMP	SV_SPLOAD(P3)
AUTON:	LD	-25(P2)
	JZ	SV_SPLOAD(P3)
	LD	-3(P2)
	XPAL	P1
	LD	STKPHI(P3)
	XPAH	P1
	CCL
	LD	-8(P2)
	ADD	1(P1)
	ST	-17(P2)
	LD	-9(P2)
	ADD	(P1)
	ST	-18(P2)
	JMP	SV_SPLOAD(P3)
TEN:	LD	-3(P2)
	XPAL	P2
	LDI	0x0A
	ST	@-1(P2)
	LDI	0
	ST	@-1(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPLOAD(P3)
FIX:	ILD	-3(P2)
	ILD	-3(P2)
	XPAL	P2
	LD	(P2)
	ST	1(P2)
	LD	-1(P2)
	ST	(P2)
	LDI	0
FIX1:	XAE
FIX2:	SCL
	ILD	-2(P2)
	JZ	SV_VALERR(P3)
	JP	FIX5
	CAI	0x8F
	JZ	FIX3
	LD	(P2)
	ADD	(P2)
	LD	(P2)
	RRL
	ST	(P2)
	LD	1(P2)
	RRL
	ST	1(P2)
	CSA
	JP	FIX2
	JMP	FIX1
FIX3:	LDE
	AND	(P2)
	JP	FIX4
	ILD	1(P2)
	JNZ	FIX4
	ILD	(P2)
FIX4:	LDI	0x80
	XPAL	P2
	JMP	SV_SPLOAD(P3)
FIX5:	LDI	0
	ST	1(P2)
	ST	(P2)
	JMP	FIX4
MIDST:	LD	-3(P2)
	XPAL	P2
MID1:	LD	@1(P1)
	XRI	0x22
	JZ	MID3
	LD	3(P2)
	JNZ	MID2
	DLD	2(P2)
MID2:	DLD	3(P2)
	OR	2(P2)
	JNZ	MID1
MID3:	LD	@-1(P1)
	LD	1(P2)
	ST	3(P2)
	LD	@2(P2)
	ST	(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
LEFTST:	ILD	-3(P2)
	ILD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
LEFT1:	LD	@1(P1)
	XRI	0x22
	JZ	LEFT3
	XRI	0x22
	ST	@1(P3)
	LD	-1(P2)
	JNZ	LEFT2
	DLD	-2(P2)
LEFT2:	DLD	-1(P2)
	OR	-2(P2)
	JNZ	LEFT1
LEFT3:	LDI	0x0D
	ST	(P3)
	LDI	0x80
	XPAL	P3
	ST	1(P2)
	LDE
	XPAH	P3
	ST	(P2)
	LDI	0x80
	XPAL	P2
	LD	-15(P2)
	XPAL	P1
	LD	-16(P2)
	XPAH	P1
	JMP	SV_SPPULL(P3)
RGHTST:	ILD	-3(P2)
	ILD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
RIGHT1:	LD	@1(P1)
	XRI	0x22
	JNZ	RIGHT1
	LD	@-1(P1)
RIGHT2:	LD	-1(P1)
	XRI	0x22
	JZ	RIGHT4
	LD	@-1(P1)
	LD	-1(P2)
	JNZ	RIGHT3
	DLD	-2(P2)
RIGHT3:	DLD	-1(P2)
	OR	-2(P2)
	JNZ	RIGHT2
RIGHT4:	LD	@1(P1)
	XRI	0x22
	JZ	LEFT3
	XRI	0x22
	ST	@1(P3)
	JMP	RIGHT4
CHRSTR:	ILD	-3(P2)
	ILD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
	LD	-1(P2)
	ST	@1(P3)
	JMP	PUTST2
PUTST:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
PUTST1:	LD	@1(P1)
	XRI	0x22
	JZ	PUTST2
	XRI	0x22
	ST	@1(P3)
	JMP	PUTST1
PUTST2:	LDI	0x0D
	ST	(P3)
	LDI	0x80
	XPAL	P3
	ST	1(P2)
	LDE
	XPAH	P3
	ST	(P2)
	LDI	0x80
	XPAL	P2
	JMP	SV_SPPULL(P3)
MIDSTR:	LD	-3(P2)
	XPAL	P2
	LD	5(P2)
	XPAL	P1
	ST	5(P2)
	LD	4(P2)
	XPAH	P1
	ST	4(P2)
MSTR1:	LD	@1(P1)
	XRI	0x0D
	JZ	MSTR3
	LD	3(P2)
	JNZ	MSTR2
	DLD	2(P2)
MSTR2:	DLD	3(P2)
	OR	2(P2)
	JNZ	MSTR1
MSTR3:	LD	@-1(P1)
	LD	1(P2)
	ST	3(P2)
	LD	@6(P2)
	ST	-4(P2)
	JMP	LFSTR1
LFTSTR:	LD	-3(P2)
	XPAL	P2
	LD	3(P2)
	XPAL	P1
	ST	3(P2)
	LD	2(P2)
	XPAH	P1
	ST	2(P2)
	LD	@4(P2)
LFSTR1:	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
LFSTR2:	LD	@1(P1)
	XRI	0x0D
	JZ	LFSTR4
	XRI	0x0D
	ST	@1(P3)
	LD	-3(P2)
	JNZ	LFSTR3
	DLD	-4(P2)
LFSTR3:	DLD	-3(P2)
	OR	-4(P2)
	JNZ	LFSTR2
LFSTR4:	LDI	0x0D
	ST	(P3)
	JMP	STREND
RGHSTR:	LD	-3(P2)
	XPAL	P2
	LD	3(P2)
	XPAL	P1
	ST	3(P2)
	LD	2(P2)
	XPAH	P1
	ST	2(P2)
	LD	5(P2)
	XPAL	P3
	LD	4(P2)
	XPAH	P3
	XAE
	LDI	0xFF
	ST	-1(P2)
	ST	-2(P2)
RGSTR1:	ILD	-1(P2)
	JNZ	RGSTR2
	ILD	-2(P2)
RGSTR2:	LD	@1(P1)
	XRI	0x0D
	JNZ	RGSTR1
	LD	@-1(P1)
	SCL
	LD	-1(P2)
	CAD	1(P2)
	LD	-2(P2)
	CAD	@4(P2)
	JP	RGSTR3
	LD	-5(P2)
	ST	-3(P2)
	LD	-6(P2)
	ST	-4(P2)
RGSTR3:	SCL
	XPAL	P1
	CAD	-3(P2)
	XPAL	P1
	XPAH	P1
	CAD	-4(P2)
	XPAH	P1
	JMP	MVSTR1
MOVSTR:	LD	-3(P2)
	XPAL	P2
	LD	@1(P2)
	XPAH	P1
	ST	-1(P2)
	LD	@1(P2)
	XPAL	P1
	ST	-1(P2)
	LD	(P2)
	XPAH	P3
	XAE
	LD	1(P2)
	XPAL	P3
MVSTR1:	LD	@1(P1)
	ST	@1(P3)
	XRI	0x0D
	JZ	MVSTR2
	CSA
	ANI	0x20
	JNZ	MVSTR1
MVSTR2:	LD	@-1(P3)
STREND:	LD	-1(P2)
	XPAL	P1
	LD	-2(P2)
	XPAH	P1
	LDI	0x80
	XPAL	P3
	ST	1(P2)
	LDE
	XPAH	P3
	ST	(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPPULL(P3)
FSTRNG:	LD	-3(P2)
	XPAL	P1
	LD	5(P1)
	XPAL	P3
	LD	4(P1)
	XPAH	P3
	XAE
	LD	@-5(P1)		; GET BYTE FROM SOURCE STRING
FSTR1:	ST	@1(P3)		; STORE BYTE INTO DESTINATION STRING
	LD	@-1(P1)		; GET NEXT BYTE FROM SOURCE STRING
	JP	FSTR1		; CONTINUE IF HIGH-BIT CLEAR
	LDI	13		; TERMINATE STRING WITH A CR
	ST	(P3)
	LDI	0X5E		; RESTORE P1 POINTER LOW
	XPAL	P1
	LDI	L(SPRVSR)	; RESTORE P3 POINTER TO SUPERVISOR
	XPAL	P3
	ST	1(P1)		; STORE LOW ADDRESS OF NEW STRING IN P1
	LDE
	XPAH	P3
	ST	(P1)		; STORE HIGH ADDRESS
	JMP	SV_SPLOAD(P3)
POPSTR:	ILD	-3(P2)
	ILD	-3(P2)
	JMP	SV_SPPULL(P3)
STRPNT:	XPAL	P1
	ST	-15(P2)
	XPAL	P1
	XPAH	P1
	ST	-16(P2)
	XPAH	P1
	JMP	SV_SPLOAD(P3)
CMPRST:	DLD	-3(P2)
	DLD	-3(P2)
	XPAL	P2
	LD	3(P2)
	XPAL	P3
	LD	2(P2)
	XPAH	P3
	XAE
CMPR1:	LD	@1(P1)
	XRI	0x22
	JZ	CMPR4
	XRI	0x22
	XOR	@1(P3)
	JZ	CMPR1
CMPR2:	LD	@1(P1)
	XRI	0x22
	JNZ	CMPR2
CMPR3:	LDI	0
	ST	(P2)
	ST	1(P2)
	JMP	CMPEND
CMPR4:	LD	(P3)
	XRI	0x0D
	JNZ	CMPR3
	LDI	0x80
	ST	(P2)
	SR
	ST	1(P2)
	JMP	CMPEND
CMPSTR:	LD	-3(P2)
	XPAL	P2
	LD	3(P2)
	XPAL	P3
	LD	2(P2)
	XPAH	P3
	XAE
	LD	1(P2)
	XPAL	P1
	ST	3(P2)
	LD	(P2)
	XPAH	P1
	ST	2(P2)
CMP1:	LD	@1(P1)
	XRI	0x0D
	JZ	CMP3
	XRI	0x0D
	XOR	@1(P3)
	JZ	CMP1
CMP2:	LDI	0
	ST	(P2)
	ST	1(P2)
	JMP	CMP4
CMP3:	LD	(P3)
	XRI	0x0D
	JNZ	CMP2
	LDI	0x80
	ST	(P2)
	SR
	ST	1(P2)
CMP4:	LD	3(P2)
	XPAL	P1
	LD	2(P2)
	XPAH	P1
CMPEND:	LDI	0
	ST	2(P2)
	ST	3(P2)
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	LDI	0x80
	XPAL	P2
	JMP	SV_SPPULL(P3)
PUTBYT:	LD	-3(P2)
	XPAL	P2
	LD	@4(P2)
	LD	-1(P2)
	XPAL	P3
	LD	-2(P2)
	XPAH	P3
	XAE
	LD	-3(P2)
	ST	(P3)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	JMP	SV_SPLOAD(P3)
GETBYT:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
	LD	(P3)
	ST	1(P2)
	LDI	0
	ST	(P2)
STRNG:	LDI	0x80
	XPAL	P2
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	JMP	SV_SPPULL(P3)
ASC:	LD	-3(P2)
	XPAL	P2
	LDI	0
	ST	@-1(P2)
	ST	@-1(P2)
	LD	@1(P1)
	XRI	0x22
	JZ	LEN3
	XRI	0x22
	ST	1(P2)
ASC1:	LD	@1(P1)
	XRI	0x22
	JNZ	ASC1
	JMP	LEN3
ASTRNG:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
	LDI	0
	ST	(P2)
	LD	@1(P3)
	XRI	0x0D
	JZ	ASTR1
	XRI	0x0D
ASTR1:	ST	1(P2)
	JMP	STRNG
LSTRNG:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P3
	LD	(P2)
	XPAH	P3
	XAE
	LDI	0xFF
	ST	1(P2)
	ST	(P2)
LSTR1:	ILD	1(P2)
	JNZ	LSTR2
	ILD	(P2)
LSTR2:	LD	@1(P3)
	XRI	0x0D
	JNZ	LSTR1
	JMP	STRNG
LEN:	LD	-3(P2)
	XPAL	P2
	LDI	0xFF
	ST	@-1(P2)
	ST	@-1(P2)
LEN1:	ILD	1(P2)
	JNZ	LEN2
	ILD	(P2)
LEN2:	LD	@1(P1)
	XRI	0x22
	JNZ	LEN1
LEN3:	LDI	0x80
	XPAL	P2
	ST	-3(P2)
LEN4:	LD	@1(P1)
	XRI	' '
	JZ	LEN4
	XRI	0x09
	JZ	SV_SPPULL(P3)
SNTERR:	LDI	L(M_SNTX)	; 'SNTX' ERROR
	JMP	SV_ERROUT(P3)
CKDLLR:	JZ	CK1
	LDI	L(M_VAR)	; 'VAR' ERROR
	JMP	SV_ERROUT(P3)
CK1:	LD	@1(P1)
	XRI	0x24
	JNZ	SNTERR
CK2:	LD	@1(P1)
	XRI	' '
	JZ	CK2
	XRI	0x09
	JZ	SV_SPLOAD(P3)
	JMP	SNTERR
L_EF4C:	LD	-17(P2)
	CALL	P3,PUTASC
	JMP	SV_SPPULL(P3)
FREE:	XPAL	P2
	SCL
	LDI	0
	CAD	1(P2)
	ST	1(P2)
	LDI	0
	CAD	(P2)
	ANI	0x0F
	ST	(P2)
	LDI	0x80
	XPAL	P2
	JMP	SV_SPPULL(P3)
HEX:	DLD	-3(P2)
	DLD	-3(P2)
	XPAL	P2
	LDI	0
	ST	1(P2)
	ST	(P2)
	ST	-1(P2)
HEX1:	XAE
	LD	(P1)
	SCL
	CAI	0x3A
	JP	L_LETR
	ADI	0x0A
	JP	L_ENTR
	JMP	L_END
L_LETR:	CAI	0x0D
	JP	L_END
	ADI	0x06
	JP	OK
L_END:	LDI	0x80
	XPAL	P2
	LDE
	JNZ	HEX2
	LDI	L(M_HEX)	; 'HEX' ERROR
	JMP	SV_ERROUT(P3)
HEX2:	SCL
	CAI	0x05
	JP	SV_VALERR(P3)
	JMP	SV_SPPULL(P3)
OK:	ADI	0x09
L_ENTR:	XAE
	LDI	0x04
	ST	-2(P2)
L_SHIF:	CCL
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	LD	(P2)
	ADD	(P2)
	ST	(P2)
	DLD	-2(P2)
	JNZ	L_SHIF
	LD	1(P2)
	ORE
	ST	1(P2)
	LD	@1(P1)
	ILD	-1(P2)
	JMP	HEX1
TOP:	LDI	0x02
	XPAL	P3
	LD	-10(P2)
	RR
	RR
	RR
	RR
	XPAH	P3
TOP1:	LD	(P3)
	XRI	0xFF
	JNZ	TOP2
	LD	1(P3)
	XRI	0xFF
	JZ	TOP3
TOP2:	LD	2(P3)
	XAE
	LD	@EREG(P3)
	JMP	TOP1
TOP3:	LD	@2(P3)
	LD	-100(P2)
	XPAH	P3
	XAE
	LD	-3(P2)
	XPAL	P2
	XPAL	P3
	ST	@-1(P2)
	LDE
	ST	@-1(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	RTRN	P3
NUPAGE:	LD	-17(P2)
	ANI	0x07
	JNZ	NUPGE2
NUPGE1:	LDI	1
NUPGE2:	ST	-10(P2)
	JMP	SV_SPLOAD(P3)
CLEAR:	JMP	SV_RESTRT(P3)


;***************************
;*  THIS IS A PAGE BREAK   *
;***************************
	ORG	BASE+0x2000
ABSWP:	LD	5(P1)
	XOR	1(P1)
	ST	-22(P2)
	CALL	P3,ABSWP1
ABSWP1:	LD	1(P1)
	JP	SWAP
	CALL	P3,FNEG
SWAP:	LDI	0x04
	ST	-23(P2)
SWAP1:	LD	@1(P1)
	ST	-5(P1)
	LD	3(P1)
	ST	-1(P1)
	LD	-5(P1)
	ST	3(P1)
	DLD	-23(P2)
	JNZ	SWAP1
	LD	@-4(P1)
	RTRN	P3
MD:	LDI	0
	ST	3(P1)
	ST	2(P1)
	ST	1(P1)
	ST	(P1)
	CSA
	JP	MD1
	LDI	0xA0
	XAE
	JP	MD2
	LDI	L(M_OVRF)	; 'OVRFL'
	JMP	SV_ERROUT(P3)
MD1:	LDI	0xA0
	XAE
	JP	MD3
MD2:	XRI	0x80
	ST	(P1)
	LDI	0x18
	ST	-8(P1)
	JMP	SV_RTRN(P3)
MD3:	ILD	-29(P2)
	ILD	-29(P2)
	JMP	SV_RTRN(P3)
FDIV:
	CALL	P3,ABSWP
FDIV0:	CCL
	LD	4(P1)
	CAD	@4(P1)
	CALL	P3,MD
FDIV1:	SCL
	LD	-5(P1)
	CAD	-1(P1)
	ST	-5(P1)
	LD	-6(P1)
	CAD	-2(P1)
	ST	-6(P1)
	LD	-7(P1)
	CAD	-3(P1)
	ST	-7(P1)
	JP	FDIV2
	CCL
	LD	-5(P1)
	ADD	-1(P1)
	ST	-5(P1)
	LD	-6(P1)
	ADD	-2(P1)
	ST	-6(P1)
	LD	-7(P1)
	ADD	-3(P1)
	ST	-7(P1)
	JMP	FDIV3
FDIV2:	ILD	3(P1)
FDIV3:	DLD	-8(P1)
	JZ	MDEND
	CCL
	LDE
	ADE
	XAE
	LD	-5(P1)
	ADD	-5(P1)
	ST	-5(P1)
	LD	-6(P1)
	ADD	-6(P1)
	ST	-6(P1)
	LD	-7(P1)
	JP	FDIV4
	LDI	L(M_DIV0)	; 'DIV0' ERROR
	JMP	SV_ERROUT(P3)
FDIV4:	ADD	-7(P1)
	ST	-7(P1)
	LD	3(P1)
	ADD	3(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	1(P1)
	ST	1(P1)
	JMP	FDIV1
FMUL:
	CALL	P3,ABSWP
	CCL
	LD	4(P1)
	ADD	@4(P1)
	CALL	P3,MD
FMUL1:	CCL
	LD	-7(P1)
	RRL
	ST	-7(P1)
	LD	-6(P1)
	RRL
	ST	-6(P1)
	LD	-5(P1)
	RRL
	ST	-5(P1)
	CSA
	JP	FMUL2
	NOP
	LD	3(P1)
	ADD	-1(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	-2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	-3(P1)
	ST	1(P1)
FMUL2:	DLD	-8(P1)
	XRI	1
	JZ	MDEND
	CCL
	LD	1(P1)
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	JMP	FMUL1
MDEND:	CCL
	LD	1(P1)
	JP	MDSGN
	CALL	P3,ALGN2
MDSGN:	LD	-22(P2)
	JP	SV_RTRN(P3)
	JMP	FNEG
FSUB:
	CALL	P3,FNEG
FADD:
	CALL	P3,ALGEXP
	CCL
	LD	7(P1)
	ADD	3(P1)
	ST	7(P1)
	LD	6(P1)
	ADD	2(P1)
	ST	6(P1)
	LD	5(P1)
	ADD	1(P1)
	ST	5(P1)
	LD	@4(P1)
	JMP	ALGN1
AND:	LD	7(P1)
	AND	3(P1)
	ST	7(P1)
	LD	6(P1)
	AND	2(P1)
	ST	6(P1)
	LD	5(P1)
	AND	1(P1)
	ST	5(P1)
	LD	@4(P1)
	JMP	NORM
OR:	LD	7(P1)
	OR	3(P1)
	ST	7(P1)
	LD	6(P1)
	OR	2(P1)
	ST	6(P1)
	LD	5(P1)
	OR	1(P1)
	ST	5(P1)
	LD	@4(P1)
	JMP	NORM
NOT:	XRE
	ST	@-1(P1)
	ST	@-1(P1)
	LDI	0x80
	ST	@-1(P1)
	LDI	0x7F
	ST	@-1(P1)
	CALL	P3,ALGEXP
EXOR:	LD	7(P1)
	XOR	3(P1)
	ST	7(P1)
	LD	6(P1)
	XOR	2(P1)
	ST	6(P1)
	LD	5(P1)
	XOR	1(P1)
	ST	5(P1)
	LD	@4(P1)
	JMP	NORM
FABS:	LD	1(P1)
	JP	SV_RTRN(P3)
FNEG:	SCL
	LDI	0
	CAD	3(P1)
	ST	3(P1)
	LDI	0
	CAD	2(P1)
	ST	2(P1)
	LDI	0
	CAD	1(P1)
	ST	1(P1)
ALGN1:	CSA
	ANI	0x40
	JNZ	ALGN2
NORM:	LD	1(P1)
	ADD	1(P1)
	XOR	1(P1)
	JP	NORM1
	JMP	SV_RTRN(P3)
NORM1:	LD	(P1)
	JZ	SV_RTRN(P3)
	DLD	(P1)
	CCL
	LD	3(P1)
	ADD	3(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	1(P1)
	ST	1(P1)
	JMP	NORM
ALGN2:	ILD	(P1)
	JNZ	ALGN3
	LDI	L(M_OVRF)	; 'OVRFL' ERROR
	JMP	SV_ERROUT(P3)
ALGN3:	LD	1(P1)
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	JMP	SV_RTRN(P3)
INT:	XRE
INT1:	XAE
INT2:	SCL
	LD	(P1)
	JP	INT3
	CAI	0x96
	JZ	INT4
	JP	SV_RTRN(P3)
INT3:	LD	1(P1)
	ADD	1(P1)
	LD	1(P1)
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	ILD	(P1)
	CSA
	JP	INT2
	JMP	INT1
INT4:	XAE
	AND	1(P1)
	JP	NORM
	LDE
	ADD	3(P1)
	ST	3(P1)
	LDE
	ADD	2(P1)
	ST	2(P1)
	LDE
	ADD	1(P1)
	ST	1(P1)
	JMP	ALGN1
VERT:	JP	VERT2
VERT1:	LDI	0x0B
	CALL	P3,PUTASC
	ILD	-17(P2)
	JNZ	VERT1
	JMP	SV_SPPULL(P3)
VERT2:	OR	-17(P2)
	JZ	SV_SPPULL(P3)
VERT3:	LDI	0x0A
	CALL	P3,PUTASC
	DLD	-17(P2)
	JNZ	VERT3
	JMP	SV_SPPULL(P3)
ALGEXP:	SCL
	LD	(P1)
	CAD	4(P1)
	JZ	SV_RTRN(P3)
	CSA
	JP	ALG2
	LDI	0x04
	ST	-23(P2)
ALG1:	LD	@1(P1)
	XAE
	LD	3(P1)
	ST	-1(P1)
	LDE
	ST	3(P1)
	DLD	-23(P2)
	JNZ	ALG1
	LD	@-4(P1)
ALG2:	ILD	(P1)
	LD	1(P1)
	ADD	1(P1)
	LD	1(P1)
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	JMP	ALGEXP

STACK:	LD	-3(P2)
	XPAL	P1
	ST	-13(P2)
	LD	STKPHI(P3)
	XPAH	P1
	ST	-14(P2)
	JMP	SV_SPLOAD(P3)

FNUM:	LD	-3(P2)
	XPAL	P1
	ST	-13(P2)
	LD	STKPHI(P3)
	XPAH	P1
	ST	-14(P2)
	LDI	0
	ST	-25(P2)		; DIGIT COUNTER
	LDI	' '
	ST	-5(P1)
	LD	1(P1)
	JZ	FZERO
	JP	FDIG10
	LDI	'-'
	ST	-5(P1)
	SCL
	LDI	0
	CAD	3(P1)
	ST	3(P1)
	LDI	0
	CAD	2(P1)
	ST	2(P1)
	LDI	0
	CAD	1(P1)
	ST	1(P1)
FDIG10:	LD	(P1)		; CALCULATE INTEGER PART
	XRI	0x80
	JP	FZERO
	CCL
	ADI	9
	JP	FZERO
	LDI	0x80
	ST	-25(P2)
FDIG11:	ILD	-25(P2)
	CCL
	LD	1(P1)
	RRL
	ST	-3(P1)
	LD	2(P1)
	RRL
	ST	-2(P1)
	LD	3(P1)
	RRL
	ST	-1(P1)
	CCL
	LD	-3(P1)
	RRL
	ST	-3(P1)
	LD	-2(P1)
	RRL
	ST	-2(P1)
	LD	-1(P1)
	RRL
	ST	-1(P1)
	LD	3(P1)
	ADD	-1(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	-2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	-3(P1)
	ST	1(P1)
	JP	FDIG12
	CCL
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	ILD	(P1)
FDIG12:	CCL
	LD	(P1)
	ADI	0x03
	ST	(P1)
	JP	FDIG11
FZERO:	LDI	1
	ST	-4(P1)
	LD	1(P1)
	JZ	FDIG19
FDIG13:	LDI	0xA0
	XAE
	LD	3(P1)
	ST	-1(P1)
	LD	2(P1)
	ST	-2(P1)
	LD	1(P1)
	ST	-3(P1)
	LDI	0
	ST	3(P1)
	ST	2(P1)
	ST	1(P1)
	LDI	0x18
	ST	-6(P1)
FDIG14:	SCL
	LD	-3(P1)
	CAI	0x50
	JP	FDIG15
	JMP	FDIG16
FDIG15:	ST	-3(P1)
	ILD	3(P1)
FDIG16:	DLD	-6(P1)
	JZ	FDIG17
	CCL
	LDE
	ADE
	XAE
	LD	-1(P1)
	ADD	-1(P1)
	ST	-1(P1)
	LD	-2(P1)
	ADD	-2(P1)
	ST	-2(P1)
	LD	-3(P1)
	ADD	-3(P1)
	ST	-3(P1)
	LD	3(P1)
	ADD	3(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	1(P1)
	ST	1(P1)
	JMP	FDIG14
FDIG17:	LD	1(P1)
	JP	FDIG18
	CCL
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	ILD	(P1)
FDIG18:	SCL
	LD	(P1)
	CAI	0x04
	ST	(P1)
	JP	FDIG19
	ILD	-4(P1)
	JMP	FDIG13
FDIG19:	LD	-4(P1)
	ST	-21(P2)
	LD	-25(P2)
	JNZ	FDIG20
	SCL
	LDI	0x06
	CAD	-4(P1)
	JP	FDIG20
	DLD	-4(P1)
	ST	-25(P2)
	LDI	1
	ST	-4(P1)
FDIG20:	CCL
	LD	1(P1)
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	LDE
	RRL
	XAE
	ILD	(P1)
	XRI	0x86
	JNZ	FDIG20
	LDE
	ADI	0x02
	ST	1(P1)
	LDI	0x05
	ST	(P1)
	LD	@-5(P1)
	CSA
	JP	FDEC
	ILD	8(P1)
	JNZ	FDEC
	ILD	7(P1)
	JNZ	FDEC
	LDI	0x31
	ST	@-1(P1)
	LD	-25(P2)
	JNZ	FDIG21
	LD	2(P1)
	XRI	0x06
	JNZ	FDEC
	ADI	0x05
FDIG21:	ADI	0
	ST	-25(P2)
	JMP	FEXP
FDEC:	LD	-3(P2)		; CALCULATE DECIMAL PART
	XPAL	P2
FDEC1:	LDI	0x06
	XAE
	CCL
	LD	1(P2)
	ADD	1(P2)
	ST	-1(P2)
	LD	3(P2)
	ADD	3(P2)
	ST	-2(P2)
	LD	2(P2)
	ADD	2(P2)
	ST	-3(P2)
	LDE
	ADE
	XAE
	LD	-1(P2)
	ADD	-1(P2)
	ST	-1(P2)
	LD	-2(P2)
	ADD	-2(P2)
	ST	-2(P2)
	LD	-3(P2)
	ADD	-3(P2)
	ST	-3(P2)
	LDE
	ADE
	XAE
	LD	1(P2)
	ADD	-1(P2)
	ST	1(P2)
	LD	3(P2)
	ADD	-2(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	-3(P2)
	ST	2(P2)
	LDE
	ADI	0
	XAE
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	LD	3(P2)
	ADD	3(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	2(P2)
	ST	2(P2)
	LDE
	ADE
	ST	@-1(P1)
	DLD	(P2)
	DLD	-4(P2)
	JNZ	FDEC2
	LDI	'.'		; DECIMAL POINT
	ST	@-1(P1)
FDEC2:	LD	(P2)
	JP	FDEC1
FDEC3:	LD	@1(P1)
	XRI	'0'
	JZ	FDEC3
	ANI	0xF0
	JNZ	FDEC4
	LD	@-1(P1)
FDEC4:	LDI	0x80
	XPAL	P2
	LD	-25(P2)
	JZ	FNEND
FEXP:	XAE			; CALCULATE EXPONENT
	LDI	'E'
	ST	@-1(P1)
	LDE
	JP	FEXP1
	LDI	'-'
	ST	@-1(P1)
FEXP1:	SCL
	LDE
	ANI	0x7F
	CAI	0x0A
	JP	FEXP2
	JMP	FEXPD
FEXP2:	XAE
	LDI	'0'
	ST	@-1(P1)
FEXP3:	ILD	(P1)
	LDE
	CAI	0x0A
	XAE
	LDE
	JP	FEXP3
FEXPD:	ADI	0x3A
	ST	@-1(P1)
FNEND:	LDI	0xA0		; SPACE WITH BIT7 SET
	ST	@-1(P1)		; STORE AS DELIMITER
	JMP	SV_SPLOAD(P3)

	NOP
	LDI	0x60
	XPAL	P1
STBACK:	LD	-13(P2)
	XPAL	P1
	ST	-3(P2)
	LD	-14(P2)
	XPAH	P1
	JMP	SV_SPLOAD(P3)

; CHARACTERISTIC HAS BIAS 128, SO SUBTRACT 128 FOR REAL EXPONENT
; 00 = -128 ... 7F = -1, 80 = 0, 81 = +1 ... FF = +127
; E IS EULER'S NUMBER
; 80 5C 55 1E	L2E	DCM 1.4426950409	; LOG BASE 2 OF E ( LB E )
; 86 57 6A E1	A2	DCM 87.417497202
; 89 4D 3F 1D	B2	DCM 617.9722695
; 7B 46 FA 70	C2	DCM 0.034657359		; (LN 2) / 20
; 83 4F A3 03	D	DCM 9.9545957821
; 7E 6F 2D ED	L10E	DCM 0.4342945		; LOG BASE 10 OF E ( LOG E )
; 7E 4D 10 4D	L102	DCM 0.301029996		; LOG BASE 10 OF 2 ( LOG 2 )
; 80 5A 82 7A	R22	DCM 1.414213562		; SQRT(2)
; 7F 58 B9 0C	LE2	DCM 0.69314718		; LOG BASE E OF 2 ( LN 2 )
; 80 52 B0 40	A1	DCM 1.2920074
; 81 AB 86 49	MB	DCM -2.6398577
; 80 6A 08 66	C	DCM 1.6567626
; 7F 40 00 00	MHLF	DCM 0.5
; 7E 80 00 00	MMHLF	DCM -0.5
; 80 40 00 00	ONE	DCM 1.0
; 7F 80 00 00	MONE	DCM -1.0
; 81 64 87 ED	PI	DCM 3.14159265		; CIRCLE NUMBER

LG2:	LDI	0x4D
	ST	@-1(P1)
	ST	@-2(P1)
	LDI	0x10
	ST	1(P1)
	LDI	0x7E
	ST	@-1(P1)
	JMP	SV_SPLOAD(P3)
LN2:	LDI	0x0C
	ST	@-1(P1)
	LDI	0xB9
	ST	@-1(P1)
	LDI	0x58
	ST	@-1(P1)
	LDI	0x7F
	ST	@-1(P1)
	JMP	SV_SPLOAD(P3)
LOG2:	LD	1(P1)
	JP	LOG21
LGERR:	LDI	L(M_ARG)	; 'ARG'
	JMP	SV_ERROUT(P3)
LOG21:	OR	2(P1)
	OR	3(P1)
	JZ	LGERR
	LDI	0
	ST	-01(P1)
	LD	(P1)
	XRI	0x80
	ST	-3(P1)
	LDI	0x80
	ST	(P1)
	ST	-2(P1)
	LDI	0x86
	ST	@-4(P1)
	CALL	P3,NORM
	CALL	P3,SWAP
	LD	3(P1)
	ST	-1(P1)
	LD	2(P1)
	ST	-2(P1)
	LD	1(P1)
	ST	-3(P1)
	LD	(P1)
	ST	@-4(P1)
	LDI	0x7A
	ST	@-1(P1)
	LDI	0x82
	ST	@-1(P1)
	LDI	0x5A
	ST	@-1(P1)
	LDI	0x80
	ST	@-1(P1)
	CALL	P3,FSUB
	CALL	P3,SWAP
	LDI	0x7A
	ST	@-1(P1)
	LDI	0x82
	ST	@-1(P1)
	LDI	0x5A
	ST	@-1(P1)
	LDI	0x80
	ST	@-1(P1)
	CALL	P3,FADD
	CALL	P3,FDIV
	LDI	0x49
	ST	@-1(P1)
	LDI	0x86
	ST	@-1(P1)
	LDI	0xAB
	ST	@-1(P1)
	LDI	0x81
	ST	@-1(P1)
	LD	7(P1)
	ST	-1(P1)
	ST	-5(P1)
	LD	6(P1)
	ST	-2(P1)
	ST	-6(P1)
	LD	5(P1)
	ST	-3(P1)
	ST	-7(P1)
	LD	4(P1)
	ST	-4(P1)
	ST	@-8(P1)
	CALL	P3,FMUL
	LDI	0x66
	ST	@-1(P1)
	LDI	0x08
	ST	@-1(P1)
	LDI	0x6A
	ST	@-1(P1)
	LDI	0x80
	ST	@-1(P1)
	CALL	P3,FSUB
	CALL	P3,FDIV
	LDI	0x40
	ST	@-1(P1)
	LDI	0xB0
	ST	@-1(P1)
	LDI	0x52
	ST	@-1(P1)
	LDI	0x80
	ST	@-1(P1)
	CALL	P3,FADD
	CALL	P3,FMUL
	CALL	P3,FADD
	JMP	SV_SPLOAD(P3)

EXP2:	LDI	0
	ST	-1(P1)
	ST	-2(P1)
	LD	1(P1)
	JNZ	EXP21
	LDI	0x80
	ST	(P1)
	SR
	ST	1(P1)
	JMP	SV_SPLOAD(P3)
EXP21:	ST	-03(P1)
	LD	(P1)
	ST	@-4(P1)
EXP22:	SCL
	LDI	0x86
	CAD	(P1)
	JZ	EXP25
	JP	EXP24
	LD	1(P1)
	JP	EXP23
	LD	@+4(P1)
	LDI	0
	ST	3(P1)
	ST	2(P1)
	ST	1(P1)
	ST	(P1)
	JMP	SV_SPLOAD(P3)
EXP23:	LDI	L(M_OVRF)	; 'OVRFL' ERROR
	JMP	SV_ERROUT(P3)
EXP24:	LD	1(P1)
	ADD	1(P1)
	LD	1(P1)
	SRL
	ST	1(P1)
	ILD	(P1)
	JMP	EXP22
EXP25:	LD	1(P1)
	ST	-24(P2)
	CALL	P3,NORM
	CALL	P3,FSUB
	LDI	0x70
	ST	@-1(P1)
	LDI	0xFA
	ST	@-1(P1)
	LDI	0x46
	ST	@-1(P1)
	LDI	0x7B
	ST	@-1(P1)
	LD	7(P1)
	ST	-1(P1)
	ST	-5(P1)
	LD	6(P1)
	ST	-2(P1)
	ST	-6(P1)
	LD	5(P1)
	ST	-3(P1)
	ST	-7(P1)
	LD	4(P1)
	ST	-4(P1)
	ST	@-08(P1)
	CALL	P3,FMUL
	CALL	P3,FMUL
	LDI	0xE1
	ST	@-5(P1)
	LDI	0x6A
	ST	@-1(P1)
	LDI	0x57
	ST	@-1(P1)
	LDI	0x86
	ST	@-1(P1)
	CALL	P3,FADD
	LDI	0x1D
	ST	@-1(P1)
	LDI	0x3F
	ST	@-1(P1)
	LDI	0x4D
	ST	@-1(P1)
	LDI	0x89
	ST	@-1(P1)
	LD	5(P1)
	XOR	1(P1)
	ST	-22(P2)
	CALL	P3,SWAP
	CALL	P3,FDIV0
	CALL	P3,FSUB
	LD	7(P1)
	ST	-1(P1)
	LD	6(P1)
	ST	-2(P1)
	LD	5(P1)
	ST	-3(P1)
	LD	4(P1)
	ST	@-4(P1)
	CALL	P3,FSUB
	LDI	0x03
	ST	@-1(P1)
	LDI	0xA3
	ST	@-1(P1)
	LDI	0x4F
	ST	@-1(P1)
	LDI	0x83
	ST	@-1(P1)
	CALL	P3,FADD
	CALL	P3,FDIV
	LDI	0
	ST	@-1(P1)
	ST	@-1(P1)
	LDI	0x40
	ST	@-1(P1)
	LDI	0x7F
	ST	@-1(P1)
	CALL	P3,FADD
	SCL
	LD	-24(P2)
	ADD	(P1)
	ST	(P1)
	JMP	SV_SPLOAD(P3)

FMOD:	CALL	P3,ABSWP
	CCL
	LD	4(P1)
	CAD	@4(P1)
	CALL	P3,MD
FMOD1:	SCL
	LD	-5(P1)
	CAD	-1(P1)
	ST	-5(P1)
	LD	-6(P1)
	CAD	-2(P1)
	ST	-6(P1)
	LD	-7(P1)
	CAD	-3(P1)
	ST	-7(P1)
	JP	FMOD2
	LD	-5(P1)
	ADD	-1(P1)
	ST	-5(P1)
	LD	-6(P1)
	ADD	-2(P1)
	ST	-6(P1)
	LD	-7(P1)
	ADD	-3(P1)
	ST	-7(P1)
	JMP	FMOD3
FMOD2:	ILD	3(P1)
FMOD3:	DLD	-8(P1)
	CAI	1
	JP	FMOD5
	LD	(P1)
	JZ	FMOD10
	JP	FMOD7
FMOD4:	DLD	(P1)
	LD	1(P1)
	ANI	0x3F
	ST	1(P1)
FMOD5:	CCL
	LD	-5(P1)
	ADD	-5(P1)
	ST	-5(P1)
	LD	-6(P1)
	ADD	-6(P1)
	ST	-6(P1)
	LD	-7(P1)
	JP	FMOD6
	LDI	L(M_DIV0)	; 'DIV0' ERROR
	JMP	SV_ERROUT(P3)
FMOD6:	ADD	-7(P1)
	ST	-7(P1)
	LD	3(P1)
	ADD	3(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	1(P1)
	ST	1(P1)
	JMP	FMOD1
FMOD7:	XRI	0x7F
	JNZ	FMOD8
	LD	1(P1)
	JP	FMOD9
	ANI	0x7F
	ST	1(P1)
FMOD8:	LD	1(P1)
FMOD9:	ANI	0xC0
	JZ	FMOD4
	JP	FMOD10
	CALL	P3,ALGN2
FMOD10:	LD	-22(P2)
	JP	SV_SPLOAD(P3)
	CALL	P3,FNEG
	JMP	SV_SPLOAD(P3)

PSHSWP:	LD	@-4(P1)
	LDI	0x04
	ST	-23(P2)
SWP1:	LD	@1(P1)
	XAE
	LD	3(P1)
	ST	-1(P1)
	LDE
	ST	3(P1)
	DLD	-23(P2)
	JNZ	SWP1
	LD	@-4(P1)
	JMP	SV_SPLOAD(P3)

FD10:	LD	1(P1)
	JZ	SV_SPLOAD(P3)
FD11:	LDI	0xA0
	XAE
	LD	3(P1)
	ST	-1(P1)
	LD	2(P1)
	ST	-2(P1)
	LD	1(P1)
	ST	-3(P1)
	LDI	0
	ST	3(P1)
	ST	2(P1)
	ST	1(P1)
	LDI	0x18
	ST	-4(P1)
FD12:	SCL
	LD	-3(P1)
	CAI	0x50
	JP	FD13
	JMP	FD14
FD13:	ST	-3(P1)
	ILD	3(P1)
FD14:	DLD	-4(P1)
	JZ	FD15
	CCL
	LDE
	ADE
	XAE
	LD	-1(P1)
	ADD	-1(P1)
	ST	-1(P1)
	LD	-2(P1)
	ADD	-2(P1)
	ST	-2(P1)
	LD	-3(P1)
	ADD	-3(P1)
	ST	-3(P1)
	LD	3(P1)
	ADD	3(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	1(P1)
	ST	1(P1)
	JMP	FD12
FD15:	LD	1(P1)
	JP	FD16
	CCL
	RRL
	ST	1(P1)
	LD	2(P1)
	RRL
	ST	2(P1)
	LD	3(P1)
	RRL
	ST	3(P1)
	ILD	(P1)
FD16:	SCL
	LD	(P1)
	CAI	0x04
	ST	(P1)
	XRI	0x80
	JP	FD11
	DLD	-24(P2)
	JP	FD11
	JMP	SV_SPLOAD(P3)

FDIV11:	LD	-3(P2)
	XPAL	P2
	LD	@2(P2)
	JNZ	SV_VALERR(P3)
	LD	1(P2)
	JZ	FDEND
FDIV12:	SCL
	LD	(P2)
	CAI	0x04
	XAE
	LD	3(P2)
	ST	-2(P2)
	LD	2(P2)
	ST	-3(P2)
	LD	1(P2)
	ST	-4(P2)
	LDI	0
	ST	3(P2)
	ST	2(P2)
	ST	1(P2)
	ST	(P2)
	CSA
	JP	FDEND
	LDI	0xA0
	XAE
	ST	(P2)
	LDI	0x18
	ST	-5(P2)
FDIV13:	SCL
	LD	-4(P2)
	CAI	0x50
	JP	FDIV14
	JMP	FDIV15
FDIV14:	ST	-4(P2)
	ILD	3(P2)
FDIV15:	DLD	-5(P2)
	JZ	FDIV16
	CCL
	LDE
	ADE
	XAE
	LD	-2(P2)
	ADD	-2(P2)
	ST	-2(P2)
	LD	-3(P2)
	ADD	-3(P2)
	ST	-3(P2)
	LD	-4(P2)
	ADD	-4(P2)
	ST	-4(P2)
	LD	3(P2)
	ADD	3(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	2(P2)
	ST	2(P2)
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	JMP	FDIV13
FDIV16:	LD	1(P2)
	JP	FDIV17
	CCL
	RRL
	ST	1(P2)
	LD	2(P2)
	RRL
	ST	2(P2)
	LD	3(P2)
	RRL
	ST	3(P2)
	ILD	(P2)
FDIV17:	DLD	-1(P2)
	JNZ	FDIV12
FDEND:	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPPULL(P3)

FMUL11:	LD	-3(P2)
	XPAL	P2
	LD	@2(P2)
	JNZ	SV_VALERR(P3)
	LD	1(P2)
	JZ	FMEND
FMUL12:	CCL
	LD	1(P2)
	RRL
	ST	-4(P2)
	LD	2(P2)
	RRL
	ST	-3(P2)
	LD	3(P2)
	RRL
	ST	-2(P2)
	CCL
	LD	-4(P2)
	RRL
	ST	-4(P2)
	LD	-3(P2)
	RRL
	ST	-3(P2)
	LD	-2(P2)
	RRL
	ST	-2(P2)
	LD	3(P2)
	ADD	-2(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	-3(P2)
	ST	2(P2)
	LD	1(P2)
	ADD	-4(P2)
	ST	1(P2)
	JP	FMUL13
	CCL
	RRL
	ST	1(P2)
	LD	2(P2)
	RRL
	ST	2(P2)
	LD	3(P2)
	RRL
	ST	3(P2)
	ILD	(P2)
	JZ	FMUL14
FMUL13:	CCL
	LD	(P2)
	ADI	0x03
	ST	(P2)
	CSA
	JP	FMUL15
FMUL14:	LDI	L(M_OVRF)	; 'OVRF' ERROR
	JMP	SV_RTERRN(P3)
FMUL15:	DLD	-1(P2)
	JNZ	FMUL12
FMEND:	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPPULL(P3)

ATN:	LD	1(P1)
	JZ	SV_SPLOAD(P3)
	ST	-24(P2)
	JP	ATN1
	CALL	P3,FNEG
ATN1:	LD	(P1)
	ST	-21(P2)
	JP	ATN2
	ST	@-4(P1)
	LD	5(P1)
	ST	1(P1)
	LD	6(P1)
	ST	2(P1)
	LD	7(P1)
	ST	3(P1)
	LDI	0x80
	ST	4(P1)
	SR
	ST	5(P1)
	LDI	0
	ST	6(P1)
	ST	7(P1)
	CALL	P3,FDIV
ATN2:	LDI	0x81
	ST	-1(P1)
	LDI	0xD5
	ST	-2(P1)
	LDI	0x6B
	ST	-3(P1)
	LDI	0x7B
	ST	-4(P1)
	LDI	0xDD
	ST	-5(P1)
	LDI	0xFA
	ST	-6(P1)
	LDI	0x9F
	ST	-7(P1)
	LDI	0x79
	ST	-8(P1)
	LD	3(P1)
	ST	-9(P1)
	ST	-13(P1)
	LD	2(P1)
	ST	-10(P1)
	ST	-14(P1)
	LD	1(P1)
	ST	-11(P1)
	ST	-15(P1)
	LD	(P1)
	ST	-12(P1)
	ST	@-16(P1)
	CALL	P3,FMUL
	CALL	P3,FMUL
	CALL	P3,FADD
	LDI	0xD2
	ST	-1(P1)
	LDI	0xC5
	ST	-2(P1)
	LDI	0x88
	ST	-3(P1)
	LDI	0x7C
	ST	@-4(P1)
	CALL	P3,SWPMUL
	LDI	0x21
	ST	-1(P1)
	LDI	0x18
	ST	-2(P1)
	LDI	0x63
	ST	-3(P1)
	LDI	0x7D
	ST	@-4(P1)
	CALL	P3,SWPMUL
	LDI	0x30
	ST	-1(P1)
	LDI	0xD9
	ST	-2(P1)
	LDI	0xAA
	ST	-3(P1)
	LDI	0x7E
	ST	@-4(P1)
	CALL	P3,SWPMUL
	LDI	0x41
	ST	-1(P1)
	LDI	0xFF
	ST	-2(P1)
	LDI	0x7F
	ST	-3(P1)
	ST	@-4(P1)
	CALL	P3,SWPMUL
	CALL	P3,FMUL
	LD	-21(P2)
	JP	ATN3
	CALL	P3,PI2
	CALL	P3,SWAP
	CALL	P3,FSUB
ATN3:	LD	-24(P2)
	JP	SV_SPLOAD(P3)
	CALL	P3,FNEG
	JMP	SV_SPLOAD(P3)

SWPMUL:	LDI	0x04
	ST	-23(P2)
SWPM:	LD	@1(P1)
	ST	-9(P1)
	LD	3(P1)
	ST	-1(P1)
	LD	-9(P1)
	ST	3(P1)
	DLD	-23(P2)
	JNZ	SWPM
	LD	@-8(P1)
	CALL	P3,FMUL
	CALL	P3,FADD
	RTRN	P3

PI2:	LDI	0xED
	ST	@-1(P1)
	LDI	0x87
	ST	@-1(P1)
	LDI	0x64
	ST	@-1(P1)
	LDI	0x80
	ST	@-1(P1)
	RTRN	P3

TAN:	LD	3(P1)
	ST	-1(P1)
	LD	2(P1)
	ST	-2(P1)
	LD	1(P1)
	ST	-3(P1)
	LD	(P1)
	ST	@-4(P1)
SIN:	LD	1(P1)
	JZ	SV_SPLOAD(P3)
	ST	-24(P2)
	JP	SIN1
	CALL	P3,FNEG
SIN1:	LDI	0xEC
	ST	-1(P1)
	LDI	0x87
	ST	-2(P1)
	LDI	0x64
	ST	-3(P1)
	LDI	0x80
	ST	@-4(P1)
	CALL	P3,FDIV
	LD	(P1)
	JP	SIN4
	LD	3(P1)
	ANI	0xFE
	ST	3(P1)
SIN2:	CCL
	LD	3(P1)
	ADD	3(P1)
	ST	3(P1)
	LD	2(P1)
	ADD	2(P1)
	ST	2(P1)
	LD	1(P1)
	ADD	1(P1)
	ST	1(P1)
	DLD	(P1)
	XRI	0x7F
	JNZ	SIN2
	CSA
	XOR	1(P1)
	CALL	P3,NORM
	JP	SIN4
	CALL	P3,FNEG
	NOP
	NOP
SIN4:	SCL
	LD	(P1)
	CAI	0x76
	JP	SIN5
	LD	@-4(P1)
	CALL	P3,FMUL
	JMP	SIN7
SIN5:	CAI	0x0A
	JZ	SIN7
	ADI	1
	JNZ	SIN6
	SRL
	XOR	1(P1)
	OR	2(P1)
	OR	3(P1)
	JZ	SIN7
SIN6:	LDI	0x37
	ST	-1(P1)
	LDI	0x65
	ST	-2(P1)
	LDI	0x51
	ST	-3(P1)
	LDI	0x7C
	ST	-4(P1)
	LDI	0x73
	ST	-5(P1)
	LDI	0x86
	ST	-6(P1)
	LDI	0xB8
	ST	-7(P1)
	LDI	0x78
	ST	-8(P1)
	LD	3(P1)
	ST	-9(P1)
	ST	-13(P1)
	LD	2(P1)
	ST	-10(P1)
	ST	-14(P1)
	LD	1(P1)
	ST	-11(P1)
	ST	-15(P1)
	LD	(P1)
	ST	-12(P1)
	ST	@-16(P1)
	CALL	P3,FMUL
	CALL	P3,FMUL
	CALL	P3,FADD
	LDI	0x76
	ST	-1(P1)
	LDI	0x52
	ST	-2(P1)
	LDI	0xAD
	ST	-3(P1)
	LDI	0x7F
	ST	@-4(P1)
	CALL	P3,SWPMUL
	LDI	0xE7
	ST	-1(P1)
	LDI	0x87
	ST	-2(P1)
	LDI	0x64
	ST	-3(P1)
	LDI	0x80
	ST	@-4(P1)
	CALL	P3,SWPMUL
	CALL	P3,FMUL
SIN7:	LD	-24(P2)
	JP	SV_SPLOAD(P3)
	CALL	P3,FNEG
	JMP	SV_SPLOAD(P3)

PI:	LD	-3(P2)
	XPAL	P2
	LDI	0xED
	ST	@-1(P2)
	LDI	0x87
	ST	@-1(P2)
	LDI	0x64
	ST	@-1(P2)
	LDI	0x81
	ST	@-1(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPPULL(P3)

RND:	LDI	0x08
	ST	-23(P2)
	LD	-28(P2)
	ST	@-1(P1)
	LD	-27(P2)
	ST	@-1(P1)
	LD	-26(P2)
	XAE
RND1:	CCL
	LD	-28(P2)
	ADD	1(P1)
	ST	-28(P2)
	CCL
	LD	-27(P2)
	ADD	(P1)
	ST	-27(P2)
	CCL
	LD	-26(P2)
	ADE
	XAE
	DLD	-23(P2)
	JNZ	RND1
	CCL
	LD	-28(P2)
	ADI	0x07
	RR
	ST	-28(P2)
	ST	1(P1)
	CCL
	LD	-27(P2)
	ADI	0x07
	RR
	ST	-27(P2)
	ST	(P1)
	CCL
	LDE
	ADI	0x07
	XAE
	ILD	-96(P2)
	JZ	RND2
	LDE
	ST	-26(P2)
RND2:	LD	-26(P2)
	XRI	0xFF
	ANI	0x7F
	ST	@-1(P1)
	LDI	0x7F
	ST	@-1(P1)
	JMP	SV_SPLOAD(P3)

SGN:	LD	-3(P2)
	XPAL	P2
	XAE
	LD	1(P2)
	JZ	SGN3
	JP	SGN1
	LDI	0x7F
	ST	(P2)
	LDE
	ST	1(P2)
	JMP	SGN2
SGN1:	LDE
	ST	(P2)
	SR
	ST	1(P2)
SGN2:	LDI	0
	ST	2(P2)
	ST	3(P2)
SGN3:	LDE
	XPAL	P2
	JMP	SV_SPPULL(P3)

SQRT:	LD	1(P1)
	JP	SQRT1
	LDI	L(M_ARG)	; 'ARG'
	JMP	SV_ERROUT(P3)
SQRT1:	ST	-3(P1)
	OR	2(P1)
	OR	3(P1)
	JZ	SV_SPLOAD(P3)
	LD	3(P1)
	ST	-1(P1)
	LD	2(P1)
	ST	-2(P1)
	LD	(P1)
	ST	@-4(P1)
	LDI	0
	ST	@-1(P1)
	ST	@-1(P1)
	LDI	0x40
	ST	@-1(P1)
	CCL
	LD	3(P1)
	JP	SQRT2
	SCL
SQRT2:	SRL
	XRI	0x40
	ST	@-1(P1)
	CALL	P3,FDIV
	LDI	0x04
	ST	-24(P2)
SQRT3:	LD	3(P1)
	ST	-1(P1)
	LD	2(P1)
	ST	-2(P1)
	LD	1(P1)
	ST	-3(P1)
	LD	(P1)
	ST	@-4(P1)
	LD	11(P1)
	ST	7(P1)
	LD	10(P1)
	ST	6(P1)
	LD	9(P1)
	ST	5(P1)
	LD	8(P1)
	ST	4(P1)
	CALL	P3,FDIV
	LD	@-4(P1)
	CALL	P3,FADD
	DLD	(P1)
	DLD	-24(P2)
	JNZ	SQRT3
	LD	3(P1)
	ST	7(P1)
	LD	2(P1)
	ST	6(P1)
	LD	1(P1)
	ST	5(P1)
	LD	@4(P1)
	ST	(P1)
	JMP	SV_SPLOAD(P3)

VSTRNG:	ILD	-3(P2)
	ILD	-03(P2)
	XPAL	P2
	LD	-1(P2)
	XPAL	P1
	XAE
	LD	-2(P2)
	XPAH	P1
	XPAL	P2
	LDI	0x80
	XPAL	P2
	ST	-16(P2)
	LDE
	ST	-15(P2)
	JMP	SV_SPLOAD(P3)

FLOAT2:	LD	-3(P2)
	XPAL	P2
	LD	(P2)
	ST	-1(P2)
	LD	1(P2)
	ST	(P2)
	LDI	0
	ST	1(P2)
	LDI	0x8E
	ST	@-2(P2)
FNORM:	LD	1(P2)
	ADD	1(P2)
	XOR	1(P2)
	JP	FNORM1
FLEND:	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPPULL(P3)
FNORM1:	LD	(P2)
	JZ	FLEND
	DLD	(P2)
	CCL
	LD	3(P2)
	ADD	3(P2)
	ST	3(P2)
	LD	2(P2)
	ADD	2(P2)
	ST	2(P2)
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	JMP	FNORM

LODVAR:	JZ	LOD1
	LDI	L(M_VAR)	; 'VAR' ERROR
	JMP	SV_ERROUT(P3)
LOD1:	LD	@1(P1)
	XRI	0x28
	JZ	LOD2
	LD	@-1(P1)
	LDI	L(M_SNTX)	; 'SNTX' ERROR
	JMP	SV_ERROUT(P3)
LOD2:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P1
	ST	-5(P2)
	LD	(P2)
	XPAH	P1
	ST	-06(P2)
	LD	4(P1)
	ST	@-01(P2)
	LD	3(P1)
	ST	@-01(P2)
	LD	2(P1)
	JNZ	LOD3
	LDI	L(M_RDIM)	; 'RDIM' ERROR
	JMP	SV_RTERRN(P3)
LOD3:	ST	@-1(P2)
	LD	1(P1)
	ST	@-1(P2)
	LD	-1(P2)
	XPAL	P1
	LD	-2(P2)
	XPAH	P1
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPLOAD(P3)
STFLD:	LD	-3(P2)
	XPAL	P2
	LD	3(P2)
	XPAL	P3
	LD	2(P2)
	XPAH	P3
	XAE
	LD	1(P2)
	ST	3(P2)
	ST	4(P3)
	LD	@2(P2)
	ST	(P2)
	ST	3(P3)
	LDI	0
	ST	2(P3)
	ST	1(P3)
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPLOAD(P3)
DIMSN:	LD	-3(P2)
	XPAL	P2
	LD	(P2)
	ANI	0xFC
	JZ	DIMS1
	LDI	L(M_DIM)	; 'DIM' ERROR
	JMP	SV_RTERRN(P3)
DIMS1:	CCL
	LD	1(P2)
	ADD	1(P2)
	ST	-1(P2)
	LD	(P2)
	ADD	(P2)
	ST	-2(P2)
	LD	-1(P2)
	ADD	-1(P2)
	ST	-1(P2)
	LD	-2(P2)
	ADD	-2(P2)
	ST	-2(P2)
	LD	-1(P2)
	ADI	0x04
	ST	-1(P2)
	LD	-2(P2)
	ADI	0
	ST	-2(P2)
	LD	3(P2)
	ADI	0x02
	ST	3(P2)
	LD	2(P2)
	ADI	0
	XOR	2(P2)
	ANI	0xF0
	JZ	DIMS2
ARERR:	LDI	L(M_AREA)	;'AREA' ERROR
	JMP	SV_RTERRN(P3)
DIMS2:	LD	2(P2)
	ADI	0
	ST	2(P2)
	LD	3(P2)
	ADD	-1(P2)
	LD	2(P2)
	ADD	-2(P2)
	XOR	2(P2)
	ANI	0xF0
	JNZ	ARERR
	LD	3(P2)
	XPAL	P3
	LD	2(P2)
	XPAH	P3
	XAE
	LD	1(P2)
	ST	-2(P3)
	LD	@4(P2)
	ST	-1(P3)
DIMS3:	LDI	0
	ST	@1(P3)
	LD	-5(P2)
	JNZ	DIMS4
	DLD	-6(P2)
DIMS4:	DLD	-5(P2)
	OR	-6(P2)
	JNZ	DIMS3
	LDI	0x80
	XPAL	P3
	LDE
	XPAH	P3
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPLOAD(P3)

CKPT:	JZ	CKP1
	LDI	L(M_VAR)	; 'VAR' ERROR
	JMP	SV_ERROUT(P3)
CKP1:	LD	@1(P1)
	XRI	0x28
	JZ	SV_SPLOAD(P3)
	LD	@-1(P1)
	JMP	SV_SPPULL(P3)

LADVAR:	LD	-3(P2)
	XPAL	P2
	LD	1(P2)
	XPAL	P1
	ST	-1(P2)
	LD	(P2)
	XPAH	P1
	ST	-2(P2)
	LD	1(P1)
	OR	2(P1)
	JZ	LAD1
	LDI	L(M_DIM)	; 'DIM' ERROR
	JMP	SV_RTERRN(P3)
LAD1:	LD	4(P1)
	ST	1(P2)
	LD	3(P1)
	ST	(P2)
	LD	-1(P2)
	XPAL	P1
	LD	-2(P2)
	XPAH	P1
	LDI	0x80
	XPAL	P2
	JMP	SV_SPLOAD(P3)

DMNSN:	LD	-3(P2)
	XPAL	P2
	LD	3(P2)
	XPAL	P1
	ST	3(P2)
	LD	2(P2)
	XPAH	P1
	ST	2(P2)
	SCL
	LD	@1(P1)
	CAD	1(P2)
	LD	(P1)
	CAD	(P2)
	JP	DMN1
	LDI	L(M_DIM)	; 'DIM' ERROR
	JMP	SV_RTERRN(P3)
DMN1:	CCL
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	LD	(P2)
	ADD	(P2)
	ST	(P2)
	LD	1(P2)
	ADD	1(P2)
	ST	1(P2)
	LD	(P2)
	ADD	(P2)
	ST	(P2)
	LD	3(P2)
	XPAL	P1
	ADD	1(P2)
	ST	3(P2)
	LD	2(P2)
	XPAH	P1
	ADD	@2(P2)
	ST	(P2)
	LDI	0x80
	XPAL	P2
	ST	-3(P2)
DMN2:	LD	@1(P1)
	XRI	' '
	JZ	DMN2
	XRI	0x09
	JZ	SV_SPPULL(P3)
	LD	@-1(P1)
	LDI	L(M_SNTX)	; 'SNTX' ERROR
	JMP	SV_ERROUT(P3)

POPDLR:	JZ	PD1
	LDI	L(M_VAR)	; 'VAR' ERROR
	JMP	SV_ERROUT(P3)
PD1:	LD	(P1)
	XRI	0x24
	JZ	SV_SPLOAD(P3)
	ILD	-3(P2)
	ILD	-3(P2)
	JMP	SV_SPLOAD(P3)

PSTRNG:	LD	-17(P2)
	XPAL	P1
	ST	-17(P2)
	LD	-18(P2)
	XPAH	P1
	ST	-18(P2)
PSTR1:	LD	@1(P1)
	XRI	0x0D
	JZ	PSTR2
	XRI	0x0D
	CALL	P3,PUTASC
	CSA
	ANI	0x20
	JNZ	PSTR1
PSTR2:	LD	-17(P2)
	XPAL	P1
	LD	-18(P2)
	XPAH	P1
	JMP	SV_SPPULL(P3)

TAB:	LDI	0x1D
	CALL	P3,PUTASC
	LD	-17(P2)
	JZ	SV_SPPULL(P3)
TAB1:	LDI	0x09
	CALL	P3,PUTASC
	DLD	-17(P2)
	JNZ	TAB1
	JMP	SV_SPPULL(P3)

STATUS:	CSA
	JMP	PSH
PGE:	LD	-10(P2)
PSH:	XAE
	LD	-3(P2)
	XPAL	P2
	XAE
	ST	@-1(P2)
	LDI	0
	ST	@-1(P2)
	LDE
	XPAL	P2
	ST	-3(P2)
	JMP	SV_SPPULL(P3)

FNDDEF:	LDI	0x02
	XPAL	P1
	ST	-15(P2)
	LD	-10(P2)
	RR
	RR
	RR
	RR
	XPAH	P1
	ST	-16(P2)
DEF1:	LD	(P1)
	XRI	0xFF
	JNZ	DEF2
	LDI	L(M_DEF)	; 'DEF'
	JMP	SV_ERROUT(P3)
DEF2:	LD	@1(P1)
	ST	-12(P2)
	LD	@2(P1)
	ST	-11(P2)
DEF3:	LD	@1(P1)
	XRI	' '
	JZ	DEF3
	XRI	0xAA
	JZ	DEF5
DEF4:	LD	-1(P1)
	XRI	0x3A
	JZ	DEF3
	XRI	0x37
	JZ	DEF1
	LD	@1(P1)
	JMP	DEF4
DEF5:	LD	@1(P1)
	XRI	' '
	JZ	DEF5
	XRI	0x90
	JZ	DEF6
FNERR:	LD	-11(P2)
	ST	-8(P2)
	LD	-12(P2)
	ST	-9(P2)
	LDI	L(M_SNTX)	; 'SNTX' ERROR
	JMP	SV_ERROUT(P3)
DEF6:	LD	@1(P1)
	XRE
	XRI	0x80
	JNZ	DEF4
	SCL
	LD	(P1)
	CAI	0x5B
	JP	SV_SPLOAD(P3)
	ADI	0x1A
	JP	DEF4
	ADI	0x07
	JP	SV_SPLOAD(P3)
	ADI	0x0A
	JP	DEF4
	JMP	SV_SPLOAD(P3)

FNT:	LD	-11(P2)
	ST	-8(P2)
	LD	-12(P2)
	ST	-9(P2)
	LD	-15(P2)
	ST	-11(P2)
	LD	-16(P2)
	ST	-12(P2)
	JMP	SV_SPLOAD(P3)

FNDNE:	LD	@1(P1)
	XRI	' '		; IS IT ' ' ?
	JZ	FNDNE
	XRI	0x2D		; IS IT CR ?
	JZ	FNDN
	XRI	0x37		; IS IT COLON ?
	JZ	FNDN
	LDI	L(M_CHAR)	; 'CHAR'
	JMP	SV_ERROUT(P3)
FNDN:	LD	-11(P2)
	XPAL	P1
	LD	-12(P2)
	XPAH	P1
FNDN1:	LD	@-1(P1)
	XRI	0x0D
	JNZ	FNDN1
	LD	1(P1)
	ST	-9(P2)
	LD	2(P1)
	ST	-8(P2)
	LD	-11(P2)
	XPAL	P1
	LD	-12(P2)
	XPAH	P1
	JMP	SV_SPPULL(P3)

PRFNUM:	LD	-03(P2)
	XPAL	P1
	LD	@-4(P1)
PRFNM1:	LD	@-1(P1)
	CALL	P3,PUTASC
	JP	PRFNM1
PREND:	LDI	0x60
	ST	-3(P2)
	LD	-13(P2)
	XPAL	P1
	LD	-14(P2)
	XPAH	P1
	JMP	SV_SPLOAD(P3)

BOTTOM: LD	-10(P2)
	RR
	RR
	RR
	RR
	XAE
	DLD	-3(P2)
	DLD	-3(P2)
	XPAL	P2
	XAE
	ST	(P2)
	LDI	1
	ST	1(P2)
	LDE
	XPAL	P2
	JMP	SV_SPLOAD(P3)

SAVE:	XPAH	P3
	ORI	0x04
	XPAH	P3		; P3 $D580
	LD	-33(P2)
	ST	-37(P2)
	XPAL	P1
	LD	-34(P2)
	ST	-38(P2)
	XPAH	P1
	LD	-34(P2)
	XPPC	P3		; JMP BYTOUT to X'D581
	LD	-33(P2)
	XPPC	P3
	LD	-36(P2)
	XPPC	P3
	LD	-35(P2)
	XPPC	P3
SAVE1:	LDI	32		; BYTE COUNTER
	ST	-22(P2)
	LDI	0
	ST	-23(P2)
	CCL
SAVE2:	LD	(P1)
	ADD	-23(P2)
	ST	-23(P2)
	LD	(P1)
	XPPC	P3
	LD	-38(P2)
	XOR	-36(P2)
	JNZ	SAVE3
	XPAL	P1
	XOR	-35(P2)
	JNZ	SAVE3
	LD	-23(P2)
	XPPC	P3
	XPAH	P3
	ANI	0xF0
	XPAH	P3
	JMP	SV_SPLOAD(P3)
SAVE3:	ILD	-37(P2)
	JNZ	SAVE4
	XPAH	P1
	ILD	-38(P2)
	XPAH	P1
SAVE4:	XPAL	P1
	DLD	-22(P2)		; DECREMENT COUNTER
	JNZ	SAVE2
	LD	-23(P2)
	XPPC	P3
	JMP	SAVE1
CLOAD:	LDI	0x5C
	ST	-3(P2)
	LD	@58(P3)
	XPAH	P3
	ORI	0x04		; P3 $D5BA
	XPAH	P3
	XPPC	P3		; JMP LDBYTE to X'D5BB
	ST	-34(P2)
	XPPC	P3
	ST	-33(P2)
	XPPC	P3
	ST	-36(P2)
	XPPC	P3
	ST	-35(P2)		; GET BEGIN AND END FROM CASSETTE
	LD	-33(P2)
	ST	-8(P2)
	LD	-34(P2)
	ST	-9(P2)		; COPY BEGIN TO OTHER STORAGE
LOAD1:	LDI	0x20
	ST	-22(P2)
	LDI	0
	ST	-23(P2)		; CLEAR CRC BYTE
	CCL
LOAD2:	LD	-8(P2)		; LOAD BEGIN INTO P1
	XPAL	P1
	LD	-9(P2)
	XPAH	P1		; STORE DATA BYTE
	XPPC	P3
	ST	(P1)
	ADD	-23(P2)		; ADD TO CRC
	ST	-23(P2)
	XPAH	P1
	XOR	-36(P2)
	JNZ	LOAD4
	XPAL	P1
	XOR	-35(P2)
	JNZ	LOAD4		; END ADDRESS REACHED?
	CALL	P3,FNDVAR
	JZ	LOAD6
LOAD3:	LD	@-58(P3)
	XPAH	P3
	ANI	0xF0
	XPAH	P3
	LDI	0xBF
	ST	127(P2)
	LDI	L(M_CASS)	; 'CASS'
	JMP	SV_ERROUT(P3)
LOAD4:	ILD	-8(P2)
	JNZ	LOAD5
	ILD	-9(P2)
LOAD5:	DLD	-22(P2)
	JNZ	LOAD2
	CALL	P3,FNDVAR
	JZ	LOAD1
	JMP	LOAD3
LOAD6:	LD	@-58(P3)	; RESET P3
	XPAH	P3
	ANI	0xF0
	XPAH	P3
ADDOUT:	LD	-33(P2)
	ST	-8(P2)
	LD	-34(P2)
	ST	-9(P2)
	CALL	P3,PRNUM
	LDI	'-'
	CALL	P3,PUTASC
	LD	-35(P2)
	ST	-8(P2)
	LD	-36(P2)
	ST	-9(P2)
	CALL	P3,PRNUM
	LDI	L(M_RDY)	; 'READY'
	JMP	SV_ERROUT(P3)

PUSING:	LD	-3(P2)
	XPAL	P1
	LD	@-4(P1)
	SCL
	LD	-96(P2)
	ANI	0x7F
	ST	-18(P2)
	CAD	-95(P2)
	ST	-17(P2)
	LD	-96(P2)
	JP	PUSNG1
	DLD	-17(P2)
	JZ	PUSNG3
PUSNG1:	LD	@-1(P1)
	XRI	'-'
	JNZ	PUSNG2
	LD	@1(P1)
	ILD	-21(P2)
	JZ	PUSNG3
PUSNG2:	SCL
	LD	-17(P2)
	CAD	-21(P2)
	JP	PUSNG4
PUSNG3:	LDI	'*'		; FILL WITH '*' IF FORMAT TOO SMALL
	CALL	P3,PUTASC
	DLD	-18(P2)
	JNZ	PUSNG3
	JMP	SV_SPLOAD(P3)
PUSNG4:	JZ	PUSNG6
	ST	-22(P2)
PUSNG5:	LDI	' '		; FILL WITH SPACES
	CALL	P3,PUTASC
	DLD	-22(P2)
	JNZ	PUSNG5
PUSNG6:	LD	-25(P2)
	JP	PUSNG8
	LD	-1(P1)
	XRI	'-'
	JNZ	PUSNG7
	DLD	-21(P2)
	LD	@-1(P1)
	CALL	P3,PUTASC
PUSNG7:	LDI	'0'
	CALL	P3,PUTASC
	JMP	PUSNG9
PUSNG8:	CALL	P3,USING3
PUSNG9:	LD	-96(P2)
	JP	SV_SPLOAD(P3)
	LDI	','
	CALL	P3,PUTASC
	LD	-95(P2)
	JZ	SV_SPLOAD(P3)
	ST	-21(P2)
	LD	-25(P2)
	JP	PUSN11
	ST	-22(P2)
PUSN10:	LDI	'0'
	CALL	P3,PUTASC
	DLD	-21(P2)
	JZ	SV_SPLOAD(P3)
	DLD	-22(P2)
	XRI	0x81
	JNZ	PUSN10
PUSN11:	CALL	P3,USING3
	JMP	SV_SPLOAD(P3)

USING:	CALL	P3,USING2
	JMP	SV_SPLOAD(P3)

	END	ENTRY
